#
# Generated file
#

@[Link("gtk-3")]
@[Link("glib-2.0")]
@[Link("gio-2.0")]
lib LibGtk

  enum GUserDirectory
    GUSERDIRECTORYDESKTOP = 0
    GUSERDIRECTORYDOCUMENTS = 1
    GUSERDIRECTORYDOWNLOAD = 2
    GUSERDIRECTORYMUSIC = 3
    GUSERDIRECTORYPICTURES = 4
    GUSERDIRECTORYPUBLICSHARE = 5
    GUSERDIRECTORYTEMPLATES = 6
    GUSERDIRECTORYVIDEOS = 7
    GUSERNDIRECTORIES = 8
  end

  enum GFormatSizeFlags
    GFORMATSIZEDEFAULT = 0
    GFORMATSIZELONGFORMAT = 1
    GFORMATSIZEIECUNITS = 2
  end

  enum GThreadError
    GTHREADERRORAGAIN = 0
  end

  enum GOnceStatus
    GONCESTATUSNOTCALLED = 0
    GONCESTATUSPROGRESS = 1
    GONCESTATUSREADY = 2
  end

  enum GBookmarkFileError
    GBOOKMARKFILEERRORINVALIDURI = 0
    GBOOKMARKFILEERRORINVALIDVALUE = 1
    GBOOKMARKFILEERRORAPPNOTREGISTERED = 2
    GBOOKMARKFILEERRORURINOTFOUND = 3
    GBOOKMARKFILEERRORREAD = 4
    GBOOKMARKFILEERRORUNKNOWNENCODING = 5
    GBOOKMARKFILEERRORWRITE = 6
    GBOOKMARKFILEERRORFILENOTFOUND = 7
  end

  enum GChecksumType
    GCHECKSUMMD5 = 0
    GCHECKSUMSHA1 = 1
    GCHECKSUMSHA256 = 2
    GCHECKSUMSHA512 = 3
  end

  enum GConvertError
    GCONVERTERRORNOCONVERSION = 0
    GCONVERTERRORILLEGALSEQUENCE = 1
    GCONVERTERRORFAILED = 2
    GCONVERTERRORPARTIALINPUT = 3
    GCONVERTERRORBADURI = 4
    GCONVERTERRORNOTABSOLUTEPATH = 5
    GCONVERTERRORNOMEMORY = 6
  end

  enum GDateDMY
    GDATEDAY = 0
    GDATEMONTH = 1
    GDATEYEAR = 2
  end

  enum GDateWeekday
    GDATEBADWEEKDAY = 0
    GDATEMONDAY = 1
    GDATETUESDAY = 2
    GDATEWEDNESDAY = 3
    GDATETHURSDAY = 4
    GDATEFRIDAY = 5
    GDATESATURDAY = 6
    GDATESUNDAY = 7
  end

  enum GDateMonth
    GDATEBADMONTH = 0
    GDATEJANUARY = 1
    GDATEFEBRUARY = 2
    GDATEMARCH = 3
    GDATEAPRIL = 4
    GDATEMAY = 5
    GDATEJUNE = 6
    GDATEJULY = 7
    GDATEAUGUST = 8
    GDATESEPTEMBER = 9
    GDATEOCTOBER = 10
    GDATENOVEMBER = 11
    GDATEDECEMBER = 12
  end

  enum GTimeType
    GTIMETYPESTANDARD = 0
    GTIMETYPEDAYLIGHT = 1
    GTIMETYPEUNIVERSAL = 2
  end

  enum GFileError
    GFILEERROREXIST = 0
    GFILEERRORISDIR = 1
    GFILEERRORACCES = 2
    GFILEERRORNAMETOOLONG = 3
    GFILEERRORNOENT = 4
    GFILEERRORNOTDIR = 5
    GFILEERRORNXIO = 6
    GFILEERRORNODEV = 7
    GFILEERRORROFS = 8
    GFILEERRORTXTBSY = 9
    GFILEERRORFAULT = 10
    GFILEERRORLOOP = 11
    GFILEERRORNOSPC = 12
    GFILEERRORNOMEM = 13
    GFILEERRORMFILE = 14
    GFILEERRORNFILE = 15
    GFILEERRORBADF = 16
    GFILEERRORINVAL = 17
    GFILEERRORPIPE = 18
    GFILEERRORAGAIN = 19
    GFILEERRORINTR = 20
    GFILEERRORIO = 21
    GFILEERRORPERM = 22
    GFILEERRORNOSYS = 23
    GFILEERRORFAILED = 24
  end

  enum GFileTest
    GFILETESTISREGULAR = 1
    GFILETESTISSYMLINK = 2
    GFILETESTISDIR = 4
    GFILETESTISEXECUTABLE = 8
    GFILETESTEXISTS = 16
  end

  enum GTraverseFlags
    GTRAVERSELEAVES = 1
    GTRAVERSENONLEAVES = 2
    GTRAVERSEALL = 3
    GTRAVERSEMASK = 3
    GTRAVERSELEAFS = 1
    GTRAVERSENONLEAFS = 2
  end

  enum GTraverseType
    GINORDER = 0
    GPREORDER = 1
    GPOSTORDER = 2
    GLEVELORDER = 3
  end

  enum GHookFlagMask
    GHOOKFLAGACTIVE = 1
    GHOOKFLAGINCALL = 2
    GHOOKFLAGMASK = 15
  end

  enum GIOCondition
    GIOIN = 1
    GIOOUT = 4
    GIOPRI = 2
    GIOERR = 8
    GIOHUP = 16
    GIONVAL = 32
  end

  enum GUnicodeType
    GUNICODECONTROL = 0
    GUNICODEFORMAT = 1
    GUNICODEUNASSIGNED = 2
    GUNICODEPRIVATEUSE = 3
    GUNICODESURROGATE = 4
    GUNICODELOWERCASELETTER = 5
    GUNICODEMODIFIERLETTER = 6
    GUNICODEOTHERLETTER = 7
    GUNICODETITLECASELETTER = 8
    GUNICODEUPPERCASELETTER = 9
    GUNICODESPACINGMARK = 10
    GUNICODEENCLOSINGMARK = 11
    GUNICODENONSPACINGMARK = 12
    GUNICODEDECIMALNUMBER = 13
    GUNICODELETTERNUMBER = 14
    GUNICODEOTHERNUMBER = 15
    GUNICODECONNECTPUNCTUATION = 16
    GUNICODEDASHPUNCTUATION = 17
    GUNICODECLOSEPUNCTUATION = 18
    GUNICODEFINALPUNCTUATION = 19
    GUNICODEINITIALPUNCTUATION = 20
    GUNICODEOTHERPUNCTUATION = 21
    GUNICODEOPENPUNCTUATION = 22
    GUNICODECURRENCYSYMBOL = 23
    GUNICODEMODIFIERSYMBOL = 24
    GUNICODEMATHSYMBOL = 25
    GUNICODEOTHERSYMBOL = 26
    GUNICODELINESEPARATOR = 27
    GUNICODEPARAGRAPHSEPARATOR = 28
    GUNICODESPACESEPARATOR = 29
  end

  enum GUnicodeBreakType
    GUNICODEBREAKMANDATORY = 0
    GUNICODEBREAKCARRIAGERETURN = 1
    GUNICODEBREAKLINEFEED = 2
    GUNICODEBREAKCOMBININGMARK = 3
    GUNICODEBREAKSURROGATE = 4
    GUNICODEBREAKZEROWIDTHSPACE = 5
    GUNICODEBREAKINSEPARABLE = 6
    GUNICODEBREAKNONBREAKINGGLUE = 7
    GUNICODEBREAKCONTINGENT = 8
    GUNICODEBREAKSPACE = 9
    GUNICODEBREAKAFTER = 10
    GUNICODEBREAKBEFORE = 11
    GUNICODEBREAKBEFOREANDAFTER = 12
    GUNICODEBREAKHYPHEN = 13
    GUNICODEBREAKNONSTARTER = 14
    GUNICODEBREAKOPENPUNCTUATION = 15
    GUNICODEBREAKCLOSEPUNCTUATION = 16
    GUNICODEBREAKQUOTATION = 17
    GUNICODEBREAKEXCLAMATION = 18
    GUNICODEBREAKIDEOGRAPHIC = 19
    GUNICODEBREAKNUMERIC = 20
    GUNICODEBREAKINFIXSEPARATOR = 21
    GUNICODEBREAKSYMBOL = 22
    GUNICODEBREAKALPHABETIC = 23
    GUNICODEBREAKPREFIX = 24
    GUNICODEBREAKPOSTFIX = 25
    GUNICODEBREAKCOMPLEXCONTEXT = 26
    GUNICODEBREAKAMBIGUOUS = 27
    GUNICODEBREAKUNKNOWN = 28
    GUNICODEBREAKNEXTLINE = 29
    GUNICODEBREAKWORDJOINER = 30
    GUNICODEBREAKHANGULLJAMO = 31
    GUNICODEBREAKHANGULVJAMO = 32
    GUNICODEBREAKHANGULTJAMO = 33
    GUNICODEBREAKHANGULLVSYLLABLE = 34
    GUNICODEBREAKHANGULLVTSYLLABLE = 35
    GUNICODEBREAKCLOSEPARANTHESIS = 36
    GUNICODEBREAKCONDITIONALJAPANESESTARTER = 37
    GUNICODEBREAKHEBREWLETTER = 38
    GUNICODEBREAKREGIONALINDICATOR = 39
  end

  enum GUnicodeScript
    GUNICODESCRIPTINVALIDCODE = -1
    GUNICODESCRIPTCOMMON = 0
    GUNICODESCRIPTINHERITED = 1
    GUNICODESCRIPTARABIC = 2
    GUNICODESCRIPTARMENIAN = 3
    GUNICODESCRIPTBENGALI = 4
    GUNICODESCRIPTBOPOMOFO = 5
    GUNICODESCRIPTCHEROKEE = 6
    GUNICODESCRIPTCOPTIC = 7
    GUNICODESCRIPTCYRILLIC = 8
    GUNICODESCRIPTDESERET = 9
    GUNICODESCRIPTDEVANAGARI = 10
    GUNICODESCRIPTETHIOPIC = 11
    GUNICODESCRIPTGEORGIAN = 12
    GUNICODESCRIPTGOTHIC = 13
    GUNICODESCRIPTGREEK = 14
    GUNICODESCRIPTGUJARATI = 15
    GUNICODESCRIPTGURMUKHI = 16
    GUNICODESCRIPTHAN = 17
    GUNICODESCRIPTHANGUL = 18
    GUNICODESCRIPTHEBREW = 19
    GUNICODESCRIPTHIRAGANA = 20
    GUNICODESCRIPTKANNADA = 21
    GUNICODESCRIPTKATAKANA = 22
    GUNICODESCRIPTKHMER = 23
    GUNICODESCRIPTLAO = 24
    GUNICODESCRIPTLATIN = 25
    GUNICODESCRIPTMALAYALAM = 26
    GUNICODESCRIPTMONGOLIAN = 27
    GUNICODESCRIPTMYANMAR = 28
    GUNICODESCRIPTOGHAM = 29
    GUNICODESCRIPTOLDITALIC = 30
    GUNICODESCRIPTORIYA = 31
    GUNICODESCRIPTRUNIC = 32
    GUNICODESCRIPTSINHALA = 33
    GUNICODESCRIPTSYRIAC = 34
    GUNICODESCRIPTTAMIL = 35
    GUNICODESCRIPTTELUGU = 36
    GUNICODESCRIPTTHAANA = 37
    GUNICODESCRIPTTHAI = 38
    GUNICODESCRIPTTIBETAN = 39
    GUNICODESCRIPTCANADIANABORIGINAL = 40
    GUNICODESCRIPTYI = 41
    GUNICODESCRIPTTAGALOG = 42
    GUNICODESCRIPTHANUNOO = 43
    GUNICODESCRIPTBUHID = 44
    GUNICODESCRIPTTAGBANWA = 45
    GUNICODESCRIPTBRAILLE = 46
    GUNICODESCRIPTCYPRIOT = 47
    GUNICODESCRIPTLIMBU = 48
    GUNICODESCRIPTOSMANYA = 49
    GUNICODESCRIPTSHAVIAN = 50
    GUNICODESCRIPTLINEARB = 51
    GUNICODESCRIPTTAILE = 52
    GUNICODESCRIPTUGARITIC = 53
    GUNICODESCRIPTNEWTAILUE = 54
    GUNICODESCRIPTBUGINESE = 55
    GUNICODESCRIPTGLAGOLITIC = 56
    GUNICODESCRIPTTIFINAGH = 57
    GUNICODESCRIPTSYLOTINAGRI = 58
    GUNICODESCRIPTOLDPERSIAN = 59
    GUNICODESCRIPTKHAROSHTHI = 60
    GUNICODESCRIPTUNKNOWN = 61
    GUNICODESCRIPTBALINESE = 62
    GUNICODESCRIPTCUNEIFORM = 63
    GUNICODESCRIPTPHOENICIAN = 64
    GUNICODESCRIPTPHAGSPA = 65
    GUNICODESCRIPTNKO = 66
    GUNICODESCRIPTKAYAHLI = 67
    GUNICODESCRIPTLEPCHA = 68
    GUNICODESCRIPTREJANG = 69
    GUNICODESCRIPTSUNDANESE = 70
    GUNICODESCRIPTSAURASHTRA = 71
    GUNICODESCRIPTCHAM = 72
    GUNICODESCRIPTOLCHIKI = 73
    GUNICODESCRIPTVAI = 74
    GUNICODESCRIPTCARIAN = 75
    GUNICODESCRIPTLYCIAN = 76
    GUNICODESCRIPTLYDIAN = 77
    GUNICODESCRIPTAVESTAN = 78
    GUNICODESCRIPTBAMUM = 79
    GUNICODESCRIPTEGYPTIANHIEROGLYPHS = 80
    GUNICODESCRIPTIMPERIALARAMAIC = 81
    GUNICODESCRIPTINSCRIPTIONALPAHLAVI = 82
    GUNICODESCRIPTINSCRIPTIONALPARTHIAN = 83
    GUNICODESCRIPTJAVANESE = 84
    GUNICODESCRIPTKAITHI = 85
    GUNICODESCRIPTLISU = 86
    GUNICODESCRIPTMEETEIMAYEK = 87
    GUNICODESCRIPTOLDSOUTHARABIAN = 88
    GUNICODESCRIPTOLDTURKIC = 89
    GUNICODESCRIPTSAMARITAN = 90
    GUNICODESCRIPTTAITHAM = 91
    GUNICODESCRIPTTAIVIET = 92
    GUNICODESCRIPTBATAK = 93
    GUNICODESCRIPTBRAHMI = 94
    GUNICODESCRIPTMANDAIC = 95
    GUNICODESCRIPTCHAKMA = 96
    GUNICODESCRIPTMEROITICCURSIVE = 97
    GUNICODESCRIPTMEROITICHIEROGLYPHS = 98
    GUNICODESCRIPTMIAO = 99
    GUNICODESCRIPTSHARADA = 100
    GUNICODESCRIPTSORASOMPENG = 101
    GUNICODESCRIPTTAKRI = 102
    GUNICODESCRIPTBASSAVAH = 103
    GUNICODESCRIPTCAUCASIANALBANIAN = 104
    GUNICODESCRIPTDUPLOYAN = 105
    GUNICODESCRIPTELBASAN = 106
    GUNICODESCRIPTGRANTHA = 107
    GUNICODESCRIPTKHOJKI = 108
    GUNICODESCRIPTKHUDAWADI = 109
    GUNICODESCRIPTLINEARA = 110
    GUNICODESCRIPTMAHAJANI = 111
    GUNICODESCRIPTMANICHAEAN = 112
    GUNICODESCRIPTMENDEKIKAKUI = 113
    GUNICODESCRIPTMODI = 114
    GUNICODESCRIPTMRO = 115
    GUNICODESCRIPTNABATAEAN = 116
    GUNICODESCRIPTOLDNORTHARABIAN = 117
    GUNICODESCRIPTOLDPERMIC = 118
    GUNICODESCRIPTPAHAWHHMONG = 119
    GUNICODESCRIPTPALMYRENE = 120
    GUNICODESCRIPTPAUCINHAU = 121
    GUNICODESCRIPTPSALTERPAHLAVI = 122
    GUNICODESCRIPTSIDDHAM = 123
    GUNICODESCRIPTTIRHUTA = 124
    GUNICODESCRIPTWARANGCITI = 125
    GUNICODESCRIPTAHOM = 126
    GUNICODESCRIPTANATOLIANHIEROGLYPHS = 127
    GUNICODESCRIPTHATRAN = 128
    GUNICODESCRIPTMULTANI = 129
    GUNICODESCRIPTOLDHUNGARIAN = 130
    GUNICODESCRIPTSIGNWRITING = 131
  end

  enum GNormalizeMode
    GNORMALIZEDEFAULT = 0
    GNORMALIZENFD = 0
    GNORMALIZEDEFAULTCOMPOSE = 1
    GNORMALIZENFC = 1
    GNORMALIZEALL = 2
    GNORMALIZENFKD = 2
    GNORMALIZEALLCOMPOSE = 3
    GNORMALIZENFKC = 3
  end

  enum GIOError
    GIOERRORNONE = 0
    GIOERRORAGAIN = 1
    GIOERRORINVAL = 2
    GIOERRORUNKNOWN = 3
  end

  enum GIOChannelError
    GIOCHANNELERRORFBIG = 0
    GIOCHANNELERRORINVAL = 1
    GIOCHANNELERRORIO = 2
    GIOCHANNELERRORISDIR = 3
    GIOCHANNELERRORNOSPC = 4
    GIOCHANNELERRORNXIO = 5
    GIOCHANNELERROROVERFLOW = 6
    GIOCHANNELERRORPIPE = 7
    GIOCHANNELERRORFAILED = 8
  end

  enum GIOStatus
    GIOSTATUSERROR = 0
    GIOSTATUSNORMAL = 1
    GIOSTATUSEOF = 2
    GIOSTATUSAGAIN = 3
  end

  enum GSeekType
    GSEEKCUR = 0
    GSEEKSET = 1
    GSEEKEND = 2
  end

  enum GIOFlags
    GIOFLAGAPPEND = 1
    GIOFLAGNONBLOCK = 2
    GIOFLAGISREADABLE = 4
    GIOFLAGISWRITABLE = 8
    GIOFLAGISWRITEABLE = 8
    GIOFLAGISSEEKABLE = 16
    GIOFLAGMASK = 31
    GIOFLAGGETMASK = 31
    GIOFLAGSETMASK = 3
  end

  enum GKeyFileError
    GKEYFILEERRORUNKNOWNENCODING = 0
    GKEYFILEERRORPARSE = 1
    GKEYFILEERRORNOTFOUND = 2
    GKEYFILEERRORKEYNOTFOUND = 3
    GKEYFILEERRORGROUPNOTFOUND = 4
    GKEYFILEERRORINVALIDVALUE = 5
  end

  enum GKeyFileFlags
    GKEYFILENONE = 0
    GKEYFILEKEEPCOMMENTS = 1
    GKEYFILEKEEPTRANSLATIONS = 2
  end

  enum GMarkupError
    GMARKUPERRORBADUTF8 = 0
    GMARKUPERROREMPTY = 1
    GMARKUPERRORPARSE = 2
    GMARKUPERRORUNKNOWNELEMENT = 3
    GMARKUPERRORUNKNOWNATTRIBUTE = 4
    GMARKUPERRORINVALIDCONTENT = 5
    GMARKUPERRORMISSINGATTRIBUTE = 6
  end

  enum GMarkupParseFlags
    GMARKUPDONOTUSETHISUNSUPPORTEDFLAG = 1
    GMARKUPTREATCDATAASTEXT = 2
    GMARKUPPREFIXERRORPOSITION = 4
    GMARKUPIGNOREQUALIFIED = 8
  end

  enum GMarkupCollectType
    GMARKUPCOLLECTINVALID = 0
    GMARKUPCOLLECTSTRING = 1
    GMARKUPCOLLECTSTRDUP = 2
    GMARKUPCOLLECTBOOLEAN = 3
    GMARKUPCOLLECTTRISTATE = 4
    GMARKUPCOLLECTOPTIONAL = 65536
  end

  enum GLogLevelFlags
    GLOGFLAGRECURSION = 1
    GLOGFLAGFATAL = 2
    GLOGLEVELERROR = 4
    GLOGLEVELCRITICAL = 8
    GLOGLEVELWARNING = 16
    GLOGLEVELMESSAGE = 32
    GLOGLEVELINFO = 64
    GLOGLEVELDEBUG = 128
    GLOGLEVELMASK = -4
  end

  enum GOptionFlags
    GOPTIONFLAGNONE = 0
    GOPTIONFLAGHIDDEN = 1
    GOPTIONFLAGINMAIN = 2
    GOPTIONFLAGREVERSE = 4
    GOPTIONFLAGNOARG = 8
    GOPTIONFLAGFILENAME = 16
    GOPTIONFLAGOPTIONALARG = 32
    GOPTIONFLAGNOALIAS = 64
  end

  enum GOptionArg
    GOPTIONARGNONE = 0
    GOPTIONARGSTRING = 1
    GOPTIONARGINT = 2
    GOPTIONARGCALLBACK = 3
    GOPTIONARGFILENAME = 4
    GOPTIONARGSTRINGARRAY = 5
    GOPTIONARGFILENAMEARRAY = 6
    GOPTIONARGDOUBLE = 7
    GOPTIONARGINT64 = 8
  end

  enum GOptionError
    GOPTIONERRORUNKNOWNOPTION = 0
    GOPTIONERRORBADVALUE = 1
    GOPTIONERRORFAILED = 2
  end

  enum GRegexError
    GREGEXERRORCOMPILE = 0
    GREGEXERROROPTIMIZE = 1
    GREGEXERRORREPLACE = 2
    GREGEXERRORMATCH = 3
    GREGEXERRORINTERNAL = 4
    GREGEXERRORSTRAYBACKSLASH = 101
    GREGEXERRORMISSINGCONTROLCHAR = 102
    GREGEXERRORUNRECOGNIZEDESCAPE = 103
    GREGEXERRORQUANTIFIERSOUTOFORDER = 104
    GREGEXERRORQUANTIFIERTOOBIG = 105
    GREGEXERRORUNTERMINATEDCHARACTERCLASS = 106
    GREGEXERRORINVALIDESCAPEINCHARACTERCLASS = 107
    GREGEXERRORRANGEOUTOFORDER = 108
    GREGEXERRORNOTHINGTOREPEAT = 109
    GREGEXERRORUNRECOGNIZEDCHARACTER = 112
    GREGEXERRORPOSIXNAMEDCLASSOUTSIDECLASS = 113
    GREGEXERRORUNMATCHEDPARENTHESIS = 114
    GREGEXERRORINEXISTENTSUBPATTERNREFERENCE = 115
    GREGEXERRORUNTERMINATEDCOMMENT = 118
    GREGEXERROREXPRESSIONTOOLARGE = 120
    GREGEXERRORMEMORYERROR = 121
    GREGEXERRORVARIABLELENGTHLOOKBEHIND = 125
    GREGEXERRORMALFORMEDCONDITION = 126
    GREGEXERRORTOOMANYCONDITIONALBRANCHES = 127
    GREGEXERRORASSERTIONEXPECTED = 128
    GREGEXERRORUNKNOWNPOSIXCLASSNAME = 130
    GREGEXERRORPOSIXCOLLATINGELEMENTSNOTSUPPORTED = 131
    GREGEXERRORHEXCODETOOLARGE = 134
    GREGEXERRORINVALIDCONDITION = 135
    GREGEXERRORSINGLEBYTEMATCHINLOOKBEHIND = 136
    GREGEXERRORINFINITELOOP = 140
    GREGEXERRORMISSINGSUBPATTERNNAMETERMINATOR = 142
    GREGEXERRORDUPLICATESUBPATTERNNAME = 143
    GREGEXERRORMALFORMEDPROPERTY = 146
    GREGEXERRORUNKNOWNPROPERTY = 147
    GREGEXERRORSUBPATTERNNAMETOOLONG = 148
    GREGEXERRORTOOMANYSUBPATTERNS = 149
    GREGEXERRORINVALIDOCTALVALUE = 151
    GREGEXERRORTOOMANYBRANCHESINDEFINE = 154
    GREGEXERRORDEFINEREPETION = 155
    GREGEXERRORINCONSISTENTNEWLINEOPTIONS = 156
    GREGEXERRORMISSINGBACKREFERENCE = 157
    GREGEXERRORINVALIDRELATIVEREFERENCE = 158
    GREGEXERRORBACKTRACKINGCONTROLVERBARGUMENTFORBIDDEN = 159
    GREGEXERRORUNKNOWNBACKTRACKINGCONTROLVERB = 160
    GREGEXERRORNUMBERTOOBIG = 161
    GREGEXERRORMISSINGSUBPATTERNNAME = 162
    GREGEXERRORMISSINGDIGIT = 163
    GREGEXERRORINVALIDDATACHARACTER = 164
    GREGEXERROREXTRASUBPATTERNNAME = 165
    GREGEXERRORBACKTRACKINGCONTROLVERBARGUMENTREQUIRED = 166
    GREGEXERRORINVALIDCONTROLCHAR = 168
    GREGEXERRORMISSINGNAME = 169
    GREGEXERRORNOTSUPPORTEDINCLASS = 171
    GREGEXERRORTOOMANYFORWARDREFERENCES = 172
    GREGEXERRORNAMETOOLONG = 175
    GREGEXERRORCHARACTERVALUETOOLARGE = 176
  end

  enum GRegexCompileFlags
    GREGEXCASELESS = 1
    GREGEXMULTILINE = 2
    GREGEXDOTALL = 4
    GREGEXEXTENDED = 8
    GREGEXANCHORED = 16
    GREGEXDOLLARENDONLY = 32
    GREGEXUNGREEDY = 512
    GREGEXRAW = 2048
    GREGEXNOAUTOCAPTURE = 4096
    GREGEXOPTIMIZE = 8192
    GREGEXFIRSTLINE = 262144
    GREGEXDUPNAMES = 524288
    GREGEXNEWLINECR = 1048576
    GREGEXNEWLINELF = 2097152
    GREGEXNEWLINECRLF = 3145728
    GREGEXNEWLINEANYCRLF = 5242880
    GREGEXBSRANYCRLF = 8388608
    GREGEXJAVASCRIPTCOMPAT = 33554432
  end

  enum GRegexMatchFlags
    GREGEXMATCHANCHORED = 16
    GREGEXMATCHNOTBOL = 128
    GREGEXMATCHNOTEOL = 256
    GREGEXMATCHNOTEMPTY = 1024
    GREGEXMATCHPARTIAL = 32768
    GREGEXMATCHNEWLINECR = 1048576
    GREGEXMATCHNEWLINELF = 2097152
    GREGEXMATCHNEWLINECRLF = 3145728
    GREGEXMATCHNEWLINEANY = 4194304
    GREGEXMATCHNEWLINEANYCRLF = 5242880
    GREGEXMATCHBSRANYCRLF = 8388608
    GREGEXMATCHBSRANY = 16777216
    GREGEXMATCHPARTIALSOFT = 32768
    GREGEXMATCHPARTIALHARD = 134217728
    GREGEXMATCHNOTEMPTYATSTART = 268435456
  end

  enum GErrorType
    GERRUNKNOWN = 0
    GERRUNEXPEOF = 1
    GERRUNEXPEOFINSTRING = 2
    GERRUNEXPEOFINCOMMENT = 3
    GERRNONDIGITINCONST = 4
    GERRDIGITRADIX = 5
    GERRFLOATRADIX = 6
    GERRFLOATMALFORMED = 7
  end

  enum GTokenType
    GTOKENEOF = 0
    GTOKENLEFTPAREN = 40
    GTOKENRIGHTPAREN = 41
    GTOKENLEFTCURLY = 123
    GTOKENRIGHTCURLY = 125
    GTOKENLEFTBRACE = 91
    GTOKENRIGHTBRACE = 93
    GTOKENEQUALSIGN = 61
    GTOKENCOMMA = 44
    GTOKENNONE = 256
    GTOKENERROR = 257
    GTOKENCHAR = 258
    GTOKENBINARY = 259
    GTOKENOCTAL = 260
    GTOKENINT = 261
    GTOKENHEX = 262
    GTOKENFLOAT = 263
    GTOKENSTRING = 264
    GTOKENSYMBOL = 265
    GTOKENIDENTIFIER = 266
    GTOKENIDENTIFIERNULL = 267
    GTOKENCOMMENTSINGLE = 268
    GTOKENCOMMENTMULTI = 269
    GTOKENLAST = 270
  end

  enum GShellError
    GSHELLERRORBADQUOTING = 0
    GSHELLERROREMPTYSTRING = 1
    GSHELLERRORFAILED = 2
  end

  enum GSliceConfig
    GSLICECONFIGALWAYSMALLOC = 1
    GSLICECONFIGBYPASSMAGAZINES = 2
    GSLICECONFIGWORKINGSETMSECS = 3
    GSLICECONFIGCOLORINCREMENT = 4
    GSLICECONFIGCHUNKSIZES = 5
    GSLICECONFIGCONTENTIONCOUNTER = 6
  end

  enum GSpawnError
    GSPAWNERRORFORK = 0
    GSPAWNERRORREAD = 1
    GSPAWNERRORCHDIR = 2
    GSPAWNERRORACCES = 3
    GSPAWNERRORPERM = 4
    GSPAWNERRORTOOBIG = 5
    GSPAWNERROR2BIG = 5
    GSPAWNERRORNOEXEC = 6
    GSPAWNERRORNAMETOOLONG = 7
    GSPAWNERRORNOENT = 8
    GSPAWNERRORNOMEM = 9
    GSPAWNERRORNOTDIR = 10
    GSPAWNERRORLOOP = 11
    GSPAWNERRORTXTBUSY = 12
    GSPAWNERRORIO = 13
    GSPAWNERRORNFILE = 14
    GSPAWNERRORMFILE = 15
    GSPAWNERRORINVAL = 16
    GSPAWNERRORISDIR = 17
    GSPAWNERRORLIBBAD = 18
    GSPAWNERRORFAILED = 19
  end

  enum GSpawnFlags
    GSPAWNDEFAULT = 0
    GSPAWNLEAVEDESCRIPTORSOPEN = 1
    GSPAWNDONOTREAPCHILD = 2
    GSPAWNSEARCHPATH = 4
    GSPAWNSTDOUTTODEVNULL = 8
    GSPAWNSTDERRTODEVNULL = 16
    GSPAWNCHILDINHERITSSTDIN = 32
    GSPAWNFILEANDARGVZERO = 64
    GSPAWNSEARCHPATHFROMENVP = 128
    GSPAWNCLOEXECPIPES = 256
  end

  enum GAsciiType
    GASCIIALNUM = 1
    GASCIIALPHA = 2
    GASCIICNTRL = 4
    GASCIIDIGIT = 8
    GASCIIGRAPH = 16
    GASCIILOWER = 32
    GASCIIPRINT = 64
    GASCIIPUNCT = 128
    GASCIISPACE = 256
    GASCIIUPPER = 512
    GASCIIXDIGIT = 1024
  end

  enum GTestTrapFlags
    GTESTTRAPSILENCESTDOUT = 128
    GTESTTRAPSILENCESTDERR = 256
    GTESTTRAPINHERITSTDIN = 512
  end

  enum GTestSubprocessFlags
    GTESTSUBPROCESSINHERITSTDIN = 1
    GTESTSUBPROCESSINHERITSTDOUT = 2
    GTESTSUBPROCESSINHERITSTDERR = 4
  end

  enum GTestLogType
    GTESTLOGNONE = 0
    GTESTLOGERROR = 1
    GTESTLOGSTARTBINARY = 2
    GTESTLOGLISTCASE = 3
    GTESTLOGSKIPCASE = 4
    GTESTLOGSTARTCASE = 5
    GTESTLOGSTOPCASE = 6
    GTESTLOGMINRESULT = 7
    GTESTLOGMAXRESULT = 8
    GTESTLOGMESSAGE = 9
    GTESTLOGSTARTSUITE = 10
    GTESTLOGSTOPSUITE = 11
  end

  enum GTestFileType
    GTESTDIST = 0
    GTESTBUILT = 1
  end

  enum GVariantClass
    GVARIANTCLASSBOOLEAN = 98
    GVARIANTCLASSBYTE = 121
    GVARIANTCLASSINT16 = 110
    GVARIANTCLASSUINT16 = 113
    GVARIANTCLASSINT32 = 105
    GVARIANTCLASSUINT32 = 117
    GVARIANTCLASSINT64 = 120
    GVARIANTCLASSUINT64 = 116
    GVARIANTCLASSHANDLE = 104
    GVARIANTCLASSDOUBLE = 100
    GVARIANTCLASSSTRING = 115
    GVARIANTCLASSOBJECTPATH = 111
    GVARIANTCLASSSIGNATURE = 103
    GVARIANTCLASSVARIANT = 118
    GVARIANTCLASSMAYBE = 109
    GVARIANTCLASSARRAY = 97
    GVARIANTCLASSTUPLE = 40
    GVARIANTCLASSDICTENTRY = 123
  end

  enum GVariantParseError
    GVARIANTPARSEERRORFAILED = 0
    GVARIANTPARSEERRORBASICTYPEEXPECTED = 1
    GVARIANTPARSEERRORCANNOTINFERTYPE = 2
    GVARIANTPARSEERRORDEFINITETYPEEXPECTED = 3
    GVARIANTPARSEERRORINPUTNOTATEND = 4
    GVARIANTPARSEERRORINVALIDCHARACTER = 5
    GVARIANTPARSEERRORINVALIDFORMATSTRING = 6
    GVARIANTPARSEERRORINVALIDOBJECTPATH = 7
    GVARIANTPARSEERRORINVALIDSIGNATURE = 8
    GVARIANTPARSEERRORINVALIDTYPESTRING = 9
    GVARIANTPARSEERRORNOCOMMONTYPE = 10
    GVARIANTPARSEERRORNUMBEROUTOFRANGE = 11
    GVARIANTPARSEERRORNUMBERTOOBIG = 12
    GVARIANTPARSEERRORTYPEERROR = 13
    GVARIANTPARSEERRORUNEXPECTEDTOKEN = 14
    GVARIANTPARSEERRORUNKNOWNKEYWORD = 15
    GVARIANTPARSEERRORUNTERMINATEDSTRINGCONSTANT = 16
    GVARIANTPARSEERRORVALUEEXPECTED = 17
  end

  enum GThreadPriority
    GTHREADPRIORITYLOW = 0
    GTHREADPRIORITYNORMAL = 1
    GTHREADPRIORITYHIGH = 2
    GTHREADPRIORITYURGENT = 3
  end

  enum GTypeDebugFlags
    GTYPEDEBUGNONE = 0
    GTYPEDEBUGOBJECTS = 1
    GTYPEDEBUGSIGNALS = 2
    GTYPEDEBUGINSTANCECOUNT = 4
    GTYPEDEBUGMASK = 7
  end

  enum GTypeFundamentalFlags
    GTYPEFLAGCLASSED = 1
    GTYPEFLAGINSTANTIATABLE = 2
    GTYPEFLAGDERIVABLE = 4
    GTYPEFLAGDEEPDERIVABLE = 8
  end

  enum GTypeFlags
    GTYPEFLAGABSTRACT = 16
    GTYPEFLAGVALUEABSTRACT = 32
  end

  enum GParamFlags
    GPARAMREADABLE = 1
    GPARAMWRITABLE = 2
    GPARAMREADWRITE = 3
    GPARAMCONSTRUCT = 4
    GPARAMCONSTRUCTONLY = 8
    GPARAMLAXVALIDATION = 16
    GPARAMSTATICNAME = 32
    GPARAMPRIVATE = 32
    GPARAMSTATICNICK = 64
    GPARAMSTATICBLURB = 128
    GPARAMEXPLICITNOTIFY = 1073741824
    GPARAMDEPRECATED = -2147483648
  end

  enum GSignalFlags
    GSIGNALRUNFIRST = 1
    GSIGNALRUNLAST = 2
    GSIGNALRUNCLEANUP = 4
    GSIGNALNORECURSE = 8
    GSIGNALDETAILED = 16
    GSIGNALACTION = 32
    GSIGNALNOHOOKS = 64
    GSIGNALMUSTCOLLECT = 128
    GSIGNALDEPRECATED = 256
  end

  enum GConnectFlags
    GCONNECTAFTER = 1
    GCONNECTSWAPPED = 2
  end

  enum GSignalMatchType
    GSIGNALMATCHID = 1
    GSIGNALMATCHDETAIL = 2
    GSIGNALMATCHCLOSURE = 4
    GSIGNALMATCHFUNC = 8
    GSIGNALMATCHDATA = 16
    GSIGNALMATCHUNBLOCKED = 32
  end

  enum GBindingFlags
    GBINDINGDEFAULT = 0
    GBINDINGBIDIRECTIONAL = 1
    GBINDINGSYNCCREATE = 2
    GBINDINGINVERTBOOLEAN = 4
  end

  enum GAppInfoCreateFlags
    GAPPINFOCREATENONE = 0
    GAPPINFOCREATENEEDSTERMINAL = 1
    GAPPINFOCREATESUPPORTSURIS = 2
    GAPPINFOCREATESUPPORTSSTARTUPNOTIFICATION = 4
  end

  enum GConverterFlags
    GCONVERTERNOFLAGS = 0
    GCONVERTERINPUTATEND = 1
    GCONVERTERFLUSH = 2
  end

  enum GConverterResult
    GCONVERTERERROR = 0
    GCONVERTERCONVERTED = 1
    GCONVERTERFINISHED = 2
    GCONVERTERFLUSHED = 3
  end

  enum GDataStreamByteOrder
    GDATASTREAMBYTEORDERBIGENDIAN = 0
    GDATASTREAMBYTEORDERLITTLEENDIAN = 1
    GDATASTREAMBYTEORDERHOSTENDIAN = 2
  end

  enum GDataStreamNewlineType
    GDATASTREAMNEWLINETYPELF = 0
    GDATASTREAMNEWLINETYPECR = 1
    GDATASTREAMNEWLINETYPECRLF = 2
    GDATASTREAMNEWLINETYPEANY = 3
  end

  enum GFileAttributeType
    GFILEATTRIBUTETYPEINVALID = 0
    GFILEATTRIBUTETYPESTRING = 1
    GFILEATTRIBUTETYPEBYTESTRING = 2
    GFILEATTRIBUTETYPEBOOLEAN = 3
    GFILEATTRIBUTETYPEUINT32 = 4
    GFILEATTRIBUTETYPEINT32 = 5
    GFILEATTRIBUTETYPEUINT64 = 6
    GFILEATTRIBUTETYPEINT64 = 7
    GFILEATTRIBUTETYPEOBJECT = 8
    GFILEATTRIBUTETYPESTRINGV = 9
  end

  enum GFileAttributeInfoFlags
    GFILEATTRIBUTEINFONONE = 0
    GFILEATTRIBUTEINFOCOPYWITHFILE = 1
    GFILEATTRIBUTEINFOCOPYWHENMOVED = 2
  end

  enum GFileAttributeStatus
    GFILEATTRIBUTESTATUSUNSET = 0
    GFILEATTRIBUTESTATUSSET = 1
    GFILEATTRIBUTESTATUSERRORSETTING = 2
  end

  enum GFileQueryInfoFlags
    GFILEQUERYINFONONE = 0
    GFILEQUERYINFONOFOLLOWSYMLINKS = 1
  end

  enum GFileCreateFlags
    GFILECREATENONE = 0
    GFILECREATEPRIVATE = 1
    GFILECREATEREPLACEDESTINATION = 2
  end

  enum GFileMeasureFlags
    GFILEMEASURENONE = 0
    GFILEMEASUREREPORTANYERROR = 2
    GFILEMEASUREAPPARENTSIZE = 4
    GFILEMEASURENOXDEV = 8
  end

  enum GMountMountFlags
    GMOUNTMOUNTNONE = 0
  end

  enum GMountUnmountFlags
    GMOUNTUNMOUNTNONE = 0
    GMOUNTUNMOUNTFORCE = 1
  end

  enum GDriveStartFlags
    GDRIVESTARTNONE = 0
  end

  enum GDriveStartStopType
    GDRIVESTARTSTOPTYPEUNKNOWN = 0
    GDRIVESTARTSTOPTYPESHUTDOWN = 1
    GDRIVESTARTSTOPTYPENETWORK = 2
    GDRIVESTARTSTOPTYPEMULTIDISK = 3
    GDRIVESTARTSTOPTYPEPASSWORD = 4
  end

  enum GFileCopyFlags
    GFILECOPYNONE = 0
    GFILECOPYOVERWRITE = 1
    GFILECOPYBACKUP = 2
    GFILECOPYNOFOLLOWSYMLINKS = 4
    GFILECOPYALLMETADATA = 8
    GFILECOPYNOFALLBACKFORMOVE = 16
    GFILECOPYTARGETDEFAULTPERMS = 32
  end

  enum GFileMonitorFlags
    GFILEMONITORNONE = 0
    GFILEMONITORWATCHMOUNTS = 1
    GFILEMONITORSENDMOVED = 2
    GFILEMONITORWATCHHARDLINKS = 4
    GFILEMONITORWATCHMOVES = 8
  end

  enum GFileType
    GFILETYPEUNKNOWN = 0
    GFILETYPEREGULAR = 1
    GFILETYPEDIRECTORY = 2
    GFILETYPESYMBOLICLINK = 3
    GFILETYPESPECIAL = 4
    GFILETYPESHORTCUT = 5
    GFILETYPEMOUNTABLE = 6
  end

  enum GFilesystemPreviewType
    GFILESYSTEMPREVIEWTYPEIFALWAYS = 0
    GFILESYSTEMPREVIEWTYPEIFLOCAL = 1
    GFILESYSTEMPREVIEWTYPENEVER = 2
  end

  enum GFileMonitorEvent
    GFILEMONITOREVENTCHANGED = 0
    GFILEMONITOREVENTCHANGESDONEHINT = 1
    GFILEMONITOREVENTDELETED = 2
    GFILEMONITOREVENTCREATED = 3
    GFILEMONITOREVENTATTRIBUTECHANGED = 4
    GFILEMONITOREVENTPREUNMOUNT = 5
    GFILEMONITOREVENTUNMOUNTED = 6
    GFILEMONITOREVENTMOVED = 7
    GFILEMONITOREVENTRENAMED = 8
    GFILEMONITOREVENTMOVEDIN = 9
    GFILEMONITOREVENTMOVEDOUT = 10
  end

  enum GIOErrorEnum
    GIOERRORFAILED = 0
    GIOERRORNOTFOUND = 1
    GIOERROREXISTS = 2
    GIOERRORISDIRECTORY = 3
    GIOERRORNOTDIRECTORY = 4
    GIOERRORNOTEMPTY = 5
    GIOERRORNOTREGULARFILE = 6
    GIOERRORNOTSYMBOLICLINK = 7
    GIOERRORNOTMOUNTABLEFILE = 8
    GIOERRORFILENAMETOOLONG = 9
    GIOERRORINVALIDFILENAME = 10
    GIOERRORTOOMANYLINKS = 11
    GIOERRORNOSPACE = 12
    GIOERRORINVALIDARGUMENT = 13
    GIOERRORPERMISSIONDENIED = 14
    GIOERRORNOTSUPPORTED = 15
    GIOERRORNOTMOUNTED = 16
    GIOERRORALREADYMOUNTED = 17
    GIOERRORCLOSED = 18
    GIOERRORCANCELLED = 19
    GIOERRORPENDING = 20
    GIOERRORREADONLY = 21
    GIOERRORCANTCREATEBACKUP = 22
    GIOERRORWRONGETAG = 23
    GIOERRORTIMEDOUT = 24
    GIOERRORWOULDRECURSE = 25
    GIOERRORBUSY = 26
    GIOERRORWOULDBLOCK = 27
    GIOERRORHOSTNOTFOUND = 28
    GIOERRORWOULDMERGE = 29
    GIOERRORFAILEDHANDLED = 30
    GIOERRORTOOMANYOPENFILES = 31
    GIOERRORNOTINITIALIZED = 32
    GIOERRORADDRESSINUSE = 33
    GIOERRORPARTIALINPUT = 34
    GIOERRORINVALIDDATA = 35
    GIOERRORDBUSERROR = 36
    GIOERRORHOSTUNREACHABLE = 37
    GIOERRORNETWORKUNREACHABLE = 38
    GIOERRORCONNECTIONREFUSED = 39
    GIOERRORPROXYFAILED = 40
    GIOERRORPROXYAUTHFAILED = 41
    GIOERRORPROXYNEEDAUTH = 42
    GIOERRORPROXYNOTALLOWED = 43
    GIOERRORBROKENPIPE = 44
    GIOERRORCONNECTIONCLOSED = 44
    GIOERRORNOTCONNECTED = 45
    GIOERRORMESSAGETOOLARGE = 46
  end

  enum GAskPasswordFlags
    GASKPASSWORDNEEDPASSWORD = 1
    GASKPASSWORDNEEDUSERNAME = 2
    GASKPASSWORDNEEDDOMAIN = 4
    GASKPASSWORDSAVINGSUPPORTED = 8
    GASKPASSWORDANONYMOUSSUPPORTED = 16
  end

  enum GPasswordSave
    GPASSWORDSAVENEVER = 0
    GPASSWORDSAVEFORSESSION = 1
    GPASSWORDSAVEPERMANENTLY = 2
  end

  enum GMountOperationResult
    GMOUNTOPERATIONHANDLED = 0
    GMOUNTOPERATIONABORTED = 1
    GMOUNTOPERATIONUNHANDLED = 2
  end

  enum GOutputStreamSpliceFlags
    GOUTPUTSTREAMSPLICENONE = 0
    GOUTPUTSTREAMSPLICECLOSESOURCE = 1
    GOUTPUTSTREAMSPLICECLOSETARGET = 2
  end

  enum GIOStreamSpliceFlags
    GIOSTREAMSPLICENONE = 0
    GIOSTREAMSPLICECLOSESTREAM1 = 1
    GIOSTREAMSPLICECLOSESTREAM2 = 2
    GIOSTREAMSPLICEWAITFORBOTH = 4
  end

  enum GEmblemOrigin
    GEMBLEMORIGINUNKNOWN = 0
    GEMBLEMORIGINDEVICE = 1
    GEMBLEMORIGINLIVEMETADATA = 2
    GEMBLEMORIGINTAG = 3
  end

  enum GResolverError
    GRESOLVERERRORNOTFOUND = 0
    GRESOLVERERRORTEMPORARYFAILURE = 1
    GRESOLVERERRORINTERNAL = 2
  end

  enum GResolverRecordType
    GRESOLVERRECORDSRV = 1
    GRESOLVERRECORDMX = 2
    GRESOLVERRECORDTXT = 3
    GRESOLVERRECORDSOA = 4
    GRESOLVERRECORDNS = 5
  end

  enum GResourceError
    GRESOURCEERRORNOTFOUND = 0
    GRESOURCEERRORINTERNAL = 1
  end

  enum GResourceFlags
    GRESOURCEFLAGSNONE = 0
    GRESOURCEFLAGSCOMPRESSED = 1
  end

  enum GResourceLookupFlags
    GRESOURCELOOKUPFLAGSNONE = 0
  end

  enum GSocketFamily
    GSOCKETFAMILYINVALID = 0
    GSOCKETFAMILYUNIX = 1
    GSOCKETFAMILYIPV4 = 2
    GSOCKETFAMILYIPV6 = 10
  end

  enum GSocketType
    GSOCKETTYPEINVALID = 0
    GSOCKETTYPESTREAM = 1
    GSOCKETTYPEDATAGRAM = 2
    GSOCKETTYPESEQPACKET = 3
  end

  enum GSocketMsgFlags
    GSOCKETMSGNONE = 0
    GSOCKETMSGOOB = 1
    GSOCKETMSGPEEK = 2
    GSOCKETMSGDONTROUTE = 4
  end

  enum GSocketProtocol
    GSOCKETPROTOCOLUNKNOWN = -1
    GSOCKETPROTOCOLDEFAULT = 0
    GSOCKETPROTOCOLTCP = 6
    GSOCKETPROTOCOLUDP = 17
    GSOCKETPROTOCOLSCTP = 132
  end

  enum GZlibCompressorFormat
    GZLIBCOMPRESSORFORMATZLIB = 0
    GZLIBCOMPRESSORFORMATGZIP = 1
    GZLIBCOMPRESSORFORMATRAW = 2
  end

  enum GUnixSocketAddressType
    GUNIXSOCKETADDRESSINVALID = 0
    GUNIXSOCKETADDRESSANONYMOUS = 1
    GUNIXSOCKETADDRESSPATH = 2
    GUNIXSOCKETADDRESSABSTRACT = 3
    GUNIXSOCKETADDRESSABSTRACTPADDED = 4
  end

  enum GBusType
    GBUSTYPESTARTER = -1
    GBUSTYPENONE = 0
    GBUSTYPESYSTEM = 1
    GBUSTYPESESSION = 2
  end

  enum GBusNameOwnerFlags
    GBUSNAMEOWNERFLAGSNONE = 0
    GBUSNAMEOWNERFLAGSALLOWREPLACEMENT = 1
    GBUSNAMEOWNERFLAGSREPLACE = 2
  end

  enum GBusNameWatcherFlags
    GBUSNAMEWATCHERFLAGSNONE = 0
    GBUSNAMEWATCHERFLAGSAUTOSTART = 1
  end

  enum GDBusProxyFlags
    GDBUSPROXYFLAGSNONE = 0
    GDBUSPROXYFLAGSDONOTLOADPROPERTIES = 1
    GDBUSPROXYFLAGSDONOTCONNECTSIGNALS = 2
    GDBUSPROXYFLAGSDONOTAUTOSTART = 4
    GDBUSPROXYFLAGSGETINVALIDATEDPROPERTIES = 8
    GDBUSPROXYFLAGSDONOTAUTOSTARTATCONSTRUCTION = 16
  end

  enum GDBusError
    GDBUSERRORFAILED = 0
    GDBUSERRORNOMEMORY = 1
    GDBUSERRORSERVICEUNKNOWN = 2
    GDBUSERRORNAMEHASNOOWNER = 3
    GDBUSERRORNOREPLY = 4
    GDBUSERRORIOERROR = 5
    GDBUSERRORBADADDRESS = 6
    GDBUSERRORNOTSUPPORTED = 7
    GDBUSERRORLIMITSEXCEEDED = 8
    GDBUSERRORACCESSDENIED = 9
    GDBUSERRORAUTHFAILED = 10
    GDBUSERRORNOSERVER = 11
    GDBUSERRORTIMEOUT = 12
    GDBUSERRORNONETWORK = 13
    GDBUSERRORADDRESSINUSE = 14
    GDBUSERRORDISCONNECTED = 15
    GDBUSERRORINVALIDARGS = 16
    GDBUSERRORFILENOTFOUND = 17
    GDBUSERRORFILEEXISTS = 18
    GDBUSERRORUNKNOWNMETHOD = 19
    GDBUSERRORTIMEDOUT = 20
    GDBUSERRORMATCHRULENOTFOUND = 21
    GDBUSERRORMATCHRULEINVALID = 22
    GDBUSERRORSPAWNEXECFAILED = 23
    GDBUSERRORSPAWNFORKFAILED = 24
    GDBUSERRORSPAWNCHILDEXITED = 25
    GDBUSERRORSPAWNCHILDSIGNALED = 26
    GDBUSERRORSPAWNFAILED = 27
    GDBUSERRORSPAWNSETUPFAILED = 28
    GDBUSERRORSPAWNCONFIGINVALID = 29
    GDBUSERRORSPAWNSERVICEINVALID = 30
    GDBUSERRORSPAWNSERVICENOTFOUND = 31
    GDBUSERRORSPAWNPERMISSIONSINVALID = 32
    GDBUSERRORSPAWNFILEINVALID = 33
    GDBUSERRORSPAWNNOMEMORY = 34
    GDBUSERRORUNIXPROCESSIDUNKNOWN = 35
    GDBUSERRORINVALIDSIGNATURE = 36
    GDBUSERRORINVALIDFILECONTENT = 37
    GDBUSERRORSELINUXSECURITYCONTEXTUNKNOWN = 38
    GDBUSERRORADTAUDITDATAUNKNOWN = 39
    GDBUSERROROBJECTPATHINUSE = 40
    GDBUSERRORUNKNOWNOBJECT = 41
    GDBUSERRORUNKNOWNINTERFACE = 42
    GDBUSERRORUNKNOWNPROPERTY = 43
    GDBUSERRORPROPERTYREADONLY = 44
  end

  enum GDBusConnectionFlags
    GDBUSCONNECTIONFLAGSNONE = 0
    GDBUSCONNECTIONFLAGSAUTHENTICATIONCLIENT = 1
    GDBUSCONNECTIONFLAGSAUTHENTICATIONSERVER = 2
    GDBUSCONNECTIONFLAGSAUTHENTICATIONALLOWANONYMOUS = 4
    GDBUSCONNECTIONFLAGSMESSAGEBUSCONNECTION = 8
    GDBUSCONNECTIONFLAGSDELAYMESSAGEPROCESSING = 16
  end

  enum GDBusCapabilityFlags
    GDBUSCAPABILITYFLAGSNONE = 0
    GDBUSCAPABILITYFLAGSUNIXFDPASSING = 1
  end

  enum GDBusCallFlags
    GDBUSCALLFLAGSNONE = 0
    GDBUSCALLFLAGSNOAUTOSTART = 1
    GDBUSCALLFLAGSALLOWINTERACTIVEAUTHORIZATION = 2
  end

  enum GDBusMessageType
    GDBUSMESSAGETYPEINVALID = 0
    GDBUSMESSAGETYPEMETHODCALL = 1
    GDBUSMESSAGETYPEMETHODRETURN = 2
    GDBUSMESSAGETYPEERROR = 3
    GDBUSMESSAGETYPESIGNAL = 4
  end

  enum GDBusMessageFlags
    GDBUSMESSAGEFLAGSNONE = 0
    GDBUSMESSAGEFLAGSNOREPLYEXPECTED = 1
    GDBUSMESSAGEFLAGSNOAUTOSTART = 2
    GDBUSMESSAGEFLAGSALLOWINTERACTIVEAUTHORIZATION = 4
  end

  enum GDBusMessageHeaderField
    GDBUSMESSAGEHEADERFIELDINVALID = 0
    GDBUSMESSAGEHEADERFIELDPATH = 1
    GDBUSMESSAGEHEADERFIELDINTERFACE = 2
    GDBUSMESSAGEHEADERFIELDMEMBER = 3
    GDBUSMESSAGEHEADERFIELDERRORNAME = 4
    GDBUSMESSAGEHEADERFIELDREPLYSERIAL = 5
    GDBUSMESSAGEHEADERFIELDDESTINATION = 6
    GDBUSMESSAGEHEADERFIELDSENDER = 7
    GDBUSMESSAGEHEADERFIELDSIGNATURE = 8
    GDBUSMESSAGEHEADERFIELDNUMUNIXFDS = 9
  end

  enum GDBusPropertyInfoFlags
    GDBUSPROPERTYINFOFLAGSNONE = 0
    GDBUSPROPERTYINFOFLAGSREADABLE = 1
    GDBUSPROPERTYINFOFLAGSWRITABLE = 2
  end

  enum GDBusSubtreeFlags
    GDBUSSUBTREEFLAGSNONE = 0
    GDBUSSUBTREEFLAGSDISPATCHTOUNENUMERATEDNODES = 1
  end

  enum GDBusServerFlags
    GDBUSSERVERFLAGSNONE = 0
    GDBUSSERVERFLAGSRUNINTHREAD = 1
    GDBUSSERVERFLAGSAUTHENTICATIONALLOWANONYMOUS = 2
  end

  enum GDBusSignalFlags
    GDBUSSIGNALFLAGSNONE = 0
    GDBUSSIGNALFLAGSNOMATCHRULE = 1
    GDBUSSIGNALFLAGSMATCHARG0NAMESPACE = 2
    GDBUSSIGNALFLAGSMATCHARG0PATH = 4
  end

  enum GDBusSendMessageFlags
    GDBUSSENDMESSAGEFLAGSNONE = 0
    GDBUSSENDMESSAGEFLAGSPRESERVESERIAL = 1
  end

  enum GCredentialsType
    GCREDENTIALSTYPEINVALID = 0
    GCREDENTIALSTYPELINUXUCRED = 1
    GCREDENTIALSTYPEFREEBSDCMSGCRED = 2
    GCREDENTIALSTYPEOPENBSDSOCKPEERCRED = 3
    GCREDENTIALSTYPESOLARISUCRED = 4
    GCREDENTIALSTYPENETBSDUNPCBID = 5
  end

  enum GDBusMessageByteOrder
    GDBUSMESSAGEBYTEORDERBIGENDIAN = 66
    GDBUSMESSAGEBYTEORDERLITTLEENDIAN = 108
  end

  enum GApplicationFlags
    GAPPLICATIONFLAGSNONE = 0
    GAPPLICATIONISSERVICE = 1
    GAPPLICATIONISLAUNCHER = 2
    GAPPLICATIONHANDLESOPEN = 4
    GAPPLICATIONHANDLESCOMMANDLINE = 8
    GAPPLICATIONSENDENVIRONMENT = 16
    GAPPLICATIONNONUNIQUE = 32
    GAPPLICATIONCANOVERRIDEAPPID = 64
  end

  enum GTlsError
    GTLSERRORUNAVAILABLE = 0
    GTLSERRORMISC = 1
    GTLSERRORBADCERTIFICATE = 2
    GTLSERRORNOTTLS = 3
    GTLSERRORHANDSHAKE = 4
    GTLSERRORCERTIFICATEREQUIRED = 5
    GTLSERROREOF = 6
  end

  enum GTlsCertificateFlags
    GTLSCERTIFICATEUNKNOWNCA = 1
    GTLSCERTIFICATEBADIDENTITY = 2
    GTLSCERTIFICATENOTACTIVATED = 4
    GTLSCERTIFICATEEXPIRED = 8
    GTLSCERTIFICATEREVOKED = 16
    GTLSCERTIFICATEINSECURE = 32
    GTLSCERTIFICATEGENERICERROR = 64
    GTLSCERTIFICATEVALIDATEALL = 127
  end

  enum GTlsAuthenticationMode
    GTLSAUTHENTICATIONNONE = 0
    GTLSAUTHENTICATIONREQUESTED = 1
    GTLSAUTHENTICATIONREQUIRED = 2
  end

  enum GTlsRehandshakeMode
    GTLSREHANDSHAKENEVER = 0
    GTLSREHANDSHAKESAFELY = 1
    GTLSREHANDSHAKEUNSAFELY = 2
  end

  enum X_GTlsPasswordFlags
    GTLSPASSWORDNONE = 0
    GTLSPASSWORDRETRY = 2
    GTLSPASSWORDMANYTRIES = 4
    GTLSPASSWORDFINALTRY = 8
  end

  enum GTlsInteractionResult
    GTLSINTERACTIONUNHANDLED = 0
    GTLSINTERACTIONHANDLED = 1
    GTLSINTERACTIONFAILED = 2
  end

  enum GDBusInterfaceSkeletonFlags
    GDBUSINTERFACESKELETONFLAGSNONE = 0
    GDBUSINTERFACESKELETONFLAGSHANDLEMETHODINVOCATIONSINTHREAD = 1
  end

  enum GDBusObjectManagerClientFlags
    GDBUSOBJECTMANAGERCLIENTFLAGSNONE = 0
    GDBUSOBJECTMANAGERCLIENTFLAGSDONOTAUTOSTART = 1
  end

  enum GTlsDatabaseVerifyFlags
    GTLSDATABASEVERIFYNONE = 0
  end

  enum GTlsDatabaseLookupFlags
    GTLSDATABASELOOKUPNONE = 0
    GTLSDATABASELOOKUPKEYPAIR = 1
  end

  enum GTlsCertificateRequestFlags
    GTLSCERTIFICATEREQUESTNONE = 0
  end

  enum GIOModuleScopeFlags
    GIOMODULESCOPENONE = 0
    GIOMODULESCOPEBLOCKDUPLICATES = 1
  end

  enum GSocketClientEvent
    GSOCKETCLIENTRESOLVING = 0
    GSOCKETCLIENTRESOLVED = 1
    GSOCKETCLIENTCONNECTING = 2
    GSOCKETCLIENTCONNECTED = 3
    GSOCKETCLIENTPROXYNEGOTIATING = 4
    GSOCKETCLIENTPROXYNEGOTIATED = 5
    GSOCKETCLIENTTLSHANDSHAKING = 6
    GSOCKETCLIENTTLSHANDSHAKED = 7
    GSOCKETCLIENTCOMPLETE = 8
  end

  enum GSocketListenerEvent
    GSOCKETLISTENERBINDING = 0
    GSOCKETLISTENERBOUND = 1
    GSOCKETLISTENERLISTENING = 2
    GSOCKETLISTENERLISTENED = 3
  end

  enum GTestDBusFlags
    GTESTDBUSNONE = 0
  end

  enum GSubprocessFlags
    GSUBPROCESSFLAGSNONE = 0
    GSUBPROCESSFLAGSSTDINPIPE = 1
    GSUBPROCESSFLAGSSTDININHERIT = 2
    GSUBPROCESSFLAGSSTDOUTPIPE = 4
    GSUBPROCESSFLAGSSTDOUTSILENCE = 8
    GSUBPROCESSFLAGSSTDERRPIPE = 16
    GSUBPROCESSFLAGSSTDERRSILENCE = 32
    GSUBPROCESSFLAGSSTDERRMERGE = 64
    GSUBPROCESSFLAGSINHERITFDS = 128
  end

  enum GNotificationPriority
    GNOTIFICATIONPRIORITYNORMAL = 0
    GNOTIFICATIONPRIORITYLOW = 1
    GNOTIFICATIONPRIORITYHIGH = 2
    GNOTIFICATIONPRIORITYURGENT = 3
  end

  enum GNetworkConnectivity
    GNETWORKCONNECTIVITYLOCAL = 1
    GNETWORKCONNECTIVITYLIMITED = 2
    GNETWORKCONNECTIVITYPORTAL = 3
    GNETWORKCONNECTIVITYFULL = 4
  end

  enum GModuleFlags
    GMODULEBINDLAZY = 1
    GMODULEBINDLOCAL = 2
    GMODULEBINDMASK = 3
  end

  enum GSettingsBindFlags
    GSETTINGSBINDDEFAULT = 0
    GSETTINGSBINDGET = 1
    GSETTINGSBINDSET = 2
    GSETTINGSBINDNOSENSITIVITY = 4
    GSETTINGSBINDGETNOCHANGES = 8
    GSETTINGSBINDINVERTBOOLEAN = 16
  end

  enum PangoCoverageLevel
    PANGOCOVERAGENONE = 0
    PANGOCOVERAGEFALLBACK = 1
    PANGOCOVERAGEAPPROXIMATE = 2
    PANGOCOVERAGEEXACT = 3
  end

  enum PangoGravity
    PANGOGRAVITYSOUTH = 0
    PANGOGRAVITYEAST = 1
    PANGOGRAVITYNORTH = 2
    PANGOGRAVITYWEST = 3
    PANGOGRAVITYAUTO = 4
  end

  enum PangoGravityHint
    PANGOGRAVITYHINTNATURAL = 0
    PANGOGRAVITYHINTSTRONG = 1
    PANGOGRAVITYHINTLINE = 2
  end

  enum PangoScript
    PANGOSCRIPTINVALIDCODE = -1
    PANGOSCRIPTCOMMON = 0
    PANGOSCRIPTINHERITED = 1
    PANGOSCRIPTARABIC = 2
    PANGOSCRIPTARMENIAN = 3
    PANGOSCRIPTBENGALI = 4
    PANGOSCRIPTBOPOMOFO = 5
    PANGOSCRIPTCHEROKEE = 6
    PANGOSCRIPTCOPTIC = 7
    PANGOSCRIPTCYRILLIC = 8
    PANGOSCRIPTDESERET = 9
    PANGOSCRIPTDEVANAGARI = 10
    PANGOSCRIPTETHIOPIC = 11
    PANGOSCRIPTGEORGIAN = 12
    PANGOSCRIPTGOTHIC = 13
    PANGOSCRIPTGREEK = 14
    PANGOSCRIPTGUJARATI = 15
    PANGOSCRIPTGURMUKHI = 16
    PANGOSCRIPTHAN = 17
    PANGOSCRIPTHANGUL = 18
    PANGOSCRIPTHEBREW = 19
    PANGOSCRIPTHIRAGANA = 20
    PANGOSCRIPTKANNADA = 21
    PANGOSCRIPTKATAKANA = 22
    PANGOSCRIPTKHMER = 23
    PANGOSCRIPTLAO = 24
    PANGOSCRIPTLATIN = 25
    PANGOSCRIPTMALAYALAM = 26
    PANGOSCRIPTMONGOLIAN = 27
    PANGOSCRIPTMYANMAR = 28
    PANGOSCRIPTOGHAM = 29
    PANGOSCRIPTOLDITALIC = 30
    PANGOSCRIPTORIYA = 31
    PANGOSCRIPTRUNIC = 32
    PANGOSCRIPTSINHALA = 33
    PANGOSCRIPTSYRIAC = 34
    PANGOSCRIPTTAMIL = 35
    PANGOSCRIPTTELUGU = 36
    PANGOSCRIPTTHAANA = 37
    PANGOSCRIPTTHAI = 38
    PANGOSCRIPTTIBETAN = 39
    PANGOSCRIPTCANADIANABORIGINAL = 40
    PANGOSCRIPTYI = 41
    PANGOSCRIPTTAGALOG = 42
    PANGOSCRIPTHANUNOO = 43
    PANGOSCRIPTBUHID = 44
    PANGOSCRIPTTAGBANWA = 45
    PANGOSCRIPTBRAILLE = 46
    PANGOSCRIPTCYPRIOT = 47
    PANGOSCRIPTLIMBU = 48
    PANGOSCRIPTOSMANYA = 49
    PANGOSCRIPTSHAVIAN = 50
    PANGOSCRIPTLINEARB = 51
    PANGOSCRIPTTAILE = 52
    PANGOSCRIPTUGARITIC = 53
    PANGOSCRIPTNEWTAILUE = 54
    PANGOSCRIPTBUGINESE = 55
    PANGOSCRIPTGLAGOLITIC = 56
    PANGOSCRIPTTIFINAGH = 57
    PANGOSCRIPTSYLOTINAGRI = 58
    PANGOSCRIPTOLDPERSIAN = 59
    PANGOSCRIPTKHAROSHTHI = 60
    PANGOSCRIPTUNKNOWN = 61
    PANGOSCRIPTBALINESE = 62
    PANGOSCRIPTCUNEIFORM = 63
    PANGOSCRIPTPHOENICIAN = 64
    PANGOSCRIPTPHAGSPA = 65
    PANGOSCRIPTNKO = 66
    PANGOSCRIPTKAYAHLI = 67
    PANGOSCRIPTLEPCHA = 68
    PANGOSCRIPTREJANG = 69
    PANGOSCRIPTSUNDANESE = 70
    PANGOSCRIPTSAURASHTRA = 71
    PANGOSCRIPTCHAM = 72
    PANGOSCRIPTOLCHIKI = 73
    PANGOSCRIPTVAI = 74
    PANGOSCRIPTCARIAN = 75
    PANGOSCRIPTLYCIAN = 76
    PANGOSCRIPTLYDIAN = 77
    PANGOSCRIPTBATAK = 78
    PANGOSCRIPTBRAHMI = 79
    PANGOSCRIPTMANDAIC = 80
    PANGOSCRIPTCHAKMA = 81
    PANGOSCRIPTMEROITICCURSIVE = 82
    PANGOSCRIPTMEROITICHIEROGLYPHS = 83
    PANGOSCRIPTMIAO = 84
    PANGOSCRIPTSHARADA = 85
    PANGOSCRIPTSORASOMPENG = 86
    PANGOSCRIPTTAKRI = 87
    PANGOSCRIPTBASSAVAH = 88
    PANGOSCRIPTCAUCASIANALBANIAN = 89
    PANGOSCRIPTDUPLOYAN = 90
    PANGOSCRIPTELBASAN = 91
    PANGOSCRIPTGRANTHA = 92
    PANGOSCRIPTKHOJKI = 93
    PANGOSCRIPTKHUDAWADI = 94
    PANGOSCRIPTLINEARA = 95
    PANGOSCRIPTMAHAJANI = 96
    PANGOSCRIPTMANICHAEAN = 97
    PANGOSCRIPTMENDEKIKAKUI = 98
    PANGOSCRIPTMODI = 99
    PANGOSCRIPTMRO = 100
    PANGOSCRIPTNABATAEAN = 101
    PANGOSCRIPTOLDNORTHARABIAN = 102
    PANGOSCRIPTOLDPERMIC = 103
    PANGOSCRIPTPAHAWHHMONG = 104
    PANGOSCRIPTPALMYRENE = 105
    PANGOSCRIPTPAUCINHAU = 106
    PANGOSCRIPTPSALTERPAHLAVI = 107
    PANGOSCRIPTSIDDHAM = 108
    PANGOSCRIPTTIRHUTA = 109
    PANGOSCRIPTWARANGCITI = 110
    PANGOSCRIPTAHOM = 111
    PANGOSCRIPTANATOLIANHIEROGLYPHS = 112
    PANGOSCRIPTHATRAN = 113
    PANGOSCRIPTMULTANI = 114
    PANGOSCRIPTOLDHUNGARIAN = 115
    PANGOSCRIPTSIGNWRITING = 116
  end

  enum PangoBidiType
    PANGOBIDITYPEL = 0
    PANGOBIDITYPELRE = 1
    PANGOBIDITYPELRO = 2
    PANGOBIDITYPER = 3
    PANGOBIDITYPEAL = 4
    PANGOBIDITYPERLE = 5
    PANGOBIDITYPERLO = 6
    PANGOBIDITYPEPDF = 7
    PANGOBIDITYPEEN = 8
    PANGOBIDITYPEES = 9
    PANGOBIDITYPEET = 10
    PANGOBIDITYPEAN = 11
    PANGOBIDITYPECS = 12
    PANGOBIDITYPENSM = 13
    PANGOBIDITYPEBN = 14
    PANGOBIDITYPEB = 15
    PANGOBIDITYPES = 16
    PANGOBIDITYPEWS = 17
    PANGOBIDITYPEON = 18
  end

  enum PangoDirection
    PANGODIRECTIONLTR = 0
    PANGODIRECTIONRTL = 1
    PANGODIRECTIONTTBLTR = 2
    PANGODIRECTIONTTBRTL = 3
    PANGODIRECTIONWEAKLTR = 4
    PANGODIRECTIONWEAKRTL = 5
    PANGODIRECTIONNEUTRAL = 6
  end

  enum PangoStyle
    PANGOSTYLENORMAL = 0
    PANGOSTYLEOBLIQUE = 1
    PANGOSTYLEITALIC = 2
  end

  enum PangoVariant
    PANGOVARIANTNORMAL = 0
    PANGOVARIANTSMALLCAPS = 1
  end

  enum PangoWeight
    PANGOWEIGHTTHIN = 100
    PANGOWEIGHTULTRALIGHT = 200
    PANGOWEIGHTLIGHT = 300
    PANGOWEIGHTSEMILIGHT = 350
    PANGOWEIGHTBOOK = 380
    PANGOWEIGHTNORMAL = 400
    PANGOWEIGHTMEDIUM = 500
    PANGOWEIGHTSEMIBOLD = 600
    PANGOWEIGHTBOLD = 700
    PANGOWEIGHTULTRABOLD = 800
    PANGOWEIGHTHEAVY = 900
    PANGOWEIGHTULTRAHEAVY = 1000
  end

  enum PangoStretch
    PANGOSTRETCHULTRACONDENSED = 0
    PANGOSTRETCHEXTRACONDENSED = 1
    PANGOSTRETCHCONDENSED = 2
    PANGOSTRETCHSEMICONDENSED = 3
    PANGOSTRETCHNORMAL = 4
    PANGOSTRETCHSEMIEXPANDED = 5
    PANGOSTRETCHEXPANDED = 6
    PANGOSTRETCHEXTRAEXPANDED = 7
    PANGOSTRETCHULTRAEXPANDED = 8
  end

  enum PangoFontMask
    PANGOFONTMASKFAMILY = 1
    PANGOFONTMASKSTYLE = 2
    PANGOFONTMASKVARIANT = 4
    PANGOFONTMASKWEIGHT = 8
    PANGOFONTMASKSTRETCH = 16
    PANGOFONTMASKSIZE = 32
    PANGOFONTMASKGRAVITY = 64
  end

  enum PangoAttrType
    PANGOATTRINVALID = 0
    PANGOATTRLANGUAGE = 1
    PANGOATTRFAMILY = 2
    PANGOATTRSTYLE = 3
    PANGOATTRWEIGHT = 4
    PANGOATTRVARIANT = 5
    PANGOATTRSTRETCH = 6
    PANGOATTRSIZE = 7
    PANGOATTRFONTDESC = 8
    PANGOATTRFOREGROUND = 9
    PANGOATTRBACKGROUND = 10
    PANGOATTRUNDERLINE = 11
    PANGOATTRSTRIKETHROUGH = 12
    PANGOATTRRISE = 13
    PANGOATTRSHAPE = 14
    PANGOATTRSCALE = 15
    PANGOATTRFALLBACK = 16
    PANGOATTRLETTERSPACING = 17
    PANGOATTRUNDERLINECOLOR = 18
    PANGOATTRSTRIKETHROUGHCOLOR = 19
    PANGOATTRABSOLUTESIZE = 20
    PANGOATTRGRAVITY = 21
    PANGOATTRGRAVITYHINT = 22
    PANGOATTRFONTFEATURES = 23
    PANGOATTRFOREGROUNDALPHA = 24
    PANGOATTRBACKGROUNDALPHA = 25
  end

  enum PangoUnderline
    PANGOUNDERLINENONE = 0
    PANGOUNDERLINESINGLE = 1
    PANGOUNDERLINEDOUBLE = 2
    PANGOUNDERLINELOW = 3
    PANGOUNDERLINEERROR = 4
  end

  enum PangoTabAlign
    PANGOTABLEFT = 0
  end

  enum PangoAlignment
    PANGOALIGNLEFT = 0
    PANGOALIGNCENTER = 1
    PANGOALIGNRIGHT = 2
  end

  enum PangoWrapMode
    PANGOWRAPWORD = 0
    PANGOWRAPCHAR = 1
    PANGOWRAPWORDCHAR = 2
  end

  enum PangoEllipsizeMode
    PANGOELLIPSIZENONE = 0
    PANGOELLIPSIZESTART = 1
    PANGOELLIPSIZEMIDDLE = 2
    PANGOELLIPSIZEEND = 3
  end

  enum PangoRenderPart
    PANGORENDERPARTFOREGROUND = 0
    PANGORENDERPARTBACKGROUND = 1
    PANGORENDERPARTUNDERLINE = 2
    PANGORENDERPARTSTRIKETHROUGH = 3
  end

  enum X__codecvt_result
    CodecvtOk = 0
    CodecvtPartial = 1
    CodecvtError = 2
    CodecvtNoconv = 3
  end

  enum X_cairo_status
    CAIROSTATUSSUCCESS = 0
    CAIROSTATUSNOMEMORY = 1
    CAIROSTATUSINVALIDRESTORE = 2
    CAIROSTATUSINVALIDPOPGROUP = 3
    CAIROSTATUSNOCURRENTPOINT = 4
    CAIROSTATUSINVALIDMATRIX = 5
    CAIROSTATUSINVALIDSTATUS = 6
    CAIROSTATUSNULLPOINTER = 7
    CAIROSTATUSINVALIDSTRING = 8
    CAIROSTATUSINVALIDPATHDATA = 9
    CAIROSTATUSREADERROR = 10
    CAIROSTATUSWRITEERROR = 11
    CAIROSTATUSSURFACEFINISHED = 12
    CAIROSTATUSSURFACETYPEMISMATCH = 13
    CAIROSTATUSPATTERNTYPEMISMATCH = 14
    CAIROSTATUSINVALIDCONTENT = 15
    CAIROSTATUSINVALIDFORMAT = 16
    CAIROSTATUSINVALIDVISUAL = 17
    CAIROSTATUSFILENOTFOUND = 18
    CAIROSTATUSINVALIDDASH = 19
    CAIROSTATUSINVALIDDSCCOMMENT = 20
    CAIROSTATUSINVALIDINDEX = 21
    CAIROSTATUSCLIPNOTREPRESENTABLE = 22
    CAIROSTATUSTEMPFILEERROR = 23
    CAIROSTATUSINVALIDSTRIDE = 24
    CAIROSTATUSFONTTYPEMISMATCH = 25
    CAIROSTATUSUSERFONTIMMUTABLE = 26
    CAIROSTATUSUSERFONTERROR = 27
    CAIROSTATUSNEGATIVECOUNT = 28
    CAIROSTATUSINVALIDCLUSTERS = 29
    CAIROSTATUSINVALIDSLANT = 30
    CAIROSTATUSINVALIDWEIGHT = 31
    CAIROSTATUSINVALIDSIZE = 32
    CAIROSTATUSUSERFONTNOTIMPLEMENTED = 33
    CAIROSTATUSDEVICETYPEMISMATCH = 34
    CAIROSTATUSDEVICEERROR = 35
    CAIROSTATUSINVALIDMESHCONSTRUCTION = 36
    CAIROSTATUSDEVICEFINISHED = 37
    CAIROSTATUSJBIG2GLOBALMISSING = 38
    CAIROSTATUSLASTSTATUS = 39
  end

  enum X_cairo_content
    CAIROCONTENTCOLOR = 4096
    CAIROCONTENTALPHA = 8192
    CAIROCONTENTCOLORALPHA = 12288
  end

  enum X_cairo_format
    CAIROFORMATINVALID = -1
    CAIROFORMATARGB32 = 0
    CAIROFORMATRGB24 = 1
    CAIROFORMATA8 = 2
    CAIROFORMATA1 = 3
    CAIROFORMATRGB16565 = 4
    CAIROFORMATRGB30 = 5
  end

  enum X_cairo_operator
    CAIROOPERATORCLEAR = 0
    CAIROOPERATORSOURCE = 1
    CAIROOPERATOROVER = 2
    CAIROOPERATORIN = 3
    CAIROOPERATOROUT = 4
    CAIROOPERATORATOP = 5
    CAIROOPERATORDEST = 6
    CAIROOPERATORDESTOVER = 7
    CAIROOPERATORDESTIN = 8
    CAIROOPERATORDESTOUT = 9
    CAIROOPERATORDESTATOP = 10
    CAIROOPERATORXOR = 11
    CAIROOPERATORADD = 12
    CAIROOPERATORSATURATE = 13
    CAIROOPERATORMULTIPLY = 14
    CAIROOPERATORSCREEN = 15
    CAIROOPERATOROVERLAY = 16
    CAIROOPERATORDARKEN = 17
    CAIROOPERATORLIGHTEN = 18
    CAIROOPERATORCOLORDODGE = 19
    CAIROOPERATORCOLORBURN = 20
    CAIROOPERATORHARDLIGHT = 21
    CAIROOPERATORSOFTLIGHT = 22
    CAIROOPERATORDIFFERENCE = 23
    CAIROOPERATOREXCLUSION = 24
    CAIROOPERATORHSLHUE = 25
    CAIROOPERATORHSLSATURATION = 26
    CAIROOPERATORHSLCOLOR = 27
    CAIROOPERATORHSLLUMINOSITY = 28
  end

  enum X_cairo_antialias
    CAIROANTIALIASDEFAULT = 0
    CAIROANTIALIASNONE = 1
    CAIROANTIALIASGRAY = 2
    CAIROANTIALIASSUBPIXEL = 3
    CAIROANTIALIASFAST = 4
    CAIROANTIALIASGOOD = 5
    CAIROANTIALIASBEST = 6
  end

  enum X_cairo_fill_rule
    CAIROFILLRULEWINDING = 0
    CAIROFILLRULEEVENODD = 1
  end

  enum X_cairo_line_cap
    CAIROLINECAPBUTT = 0
    CAIROLINECAPROUND = 1
    CAIROLINECAPSQUARE = 2
  end

  enum X_cairo_line_join
    CAIROLINEJOINMITER = 0
    CAIROLINEJOINROUND = 1
    CAIROLINEJOINBEVEL = 2
  end

  enum X_cairo_text_cluster_flags
    CAIROTEXTCLUSTERFLAGBACKWARD = 1
  end

  enum X_cairo_font_slant
    CAIROFONTSLANTNORMAL = 0
    CAIROFONTSLANTITALIC = 1
    CAIROFONTSLANTOBLIQUE = 2
  end

  enum X_cairo_font_weight
    CAIROFONTWEIGHTNORMAL = 0
    CAIROFONTWEIGHTBOLD = 1
  end

  enum X_cairo_subpixel_order
    CAIROSUBPIXELORDERDEFAULT = 0
    CAIROSUBPIXELORDERRGB = 1
    CAIROSUBPIXELORDERBGR = 2
    CAIROSUBPIXELORDERVRGB = 3
    CAIROSUBPIXELORDERVBGR = 4
  end

  enum X_cairo_hint_style
    CAIROHINTSTYLEDEFAULT = 0
    CAIROHINTSTYLENONE = 1
    CAIROHINTSTYLESLIGHT = 2
    CAIROHINTSTYLEMEDIUM = 3
    CAIROHINTSTYLEFULL = 4
  end

  enum X_cairo_hint_metrics
    CAIROHINTMETRICSDEFAULT = 0
    CAIROHINTMETRICSOFF = 1
    CAIROHINTMETRICSON = 2
  end

  enum X_cairo_font_type
    CAIROFONTTYPETOY = 0
    CAIROFONTTYPEFT = 1
    CAIROFONTTYPEWIN32 = 2
    CAIROFONTTYPEQUARTZ = 3
    CAIROFONTTYPEUSER = 4
  end

  enum X_cairo_path_data_type
    CAIROPATHMOVETO = 0
    CAIROPATHLINETO = 1
    CAIROPATHCURVETO = 2
    CAIROPATHCLOSEPATH = 3
  end

  enum X_cairo_device_type
    CAIRODEVICETYPEDRM = 0
    CAIRODEVICETYPEGL = 1
    CAIRODEVICETYPESCRIPT = 2
    CAIRODEVICETYPEXCB = 3
    CAIRODEVICETYPEXLIB = 4
    CAIRODEVICETYPEXML = 5
    CAIRODEVICETYPECOGL = 6
    CAIRODEVICETYPEWIN32 = 7
    CAIRODEVICETYPEINVALID = -1
  end

  enum CairoSurfaceObserverModeT
    CAIROSURFACEOBSERVERNORMAL = 0
    CAIROSURFACEOBSERVERRECORDOPERATIONS = 1
  end

  enum X_cairo_surface_type
    CAIROSURFACETYPEIMAGE = 0
    CAIROSURFACETYPEPDF = 1
    CAIROSURFACETYPEPS = 2
    CAIROSURFACETYPEXLIB = 3
    CAIROSURFACETYPEXCB = 4
    CAIROSURFACETYPEGLITZ = 5
    CAIROSURFACETYPEQUARTZ = 6
    CAIROSURFACETYPEWIN32 = 7
    CAIROSURFACETYPEBEOS = 8
    CAIROSURFACETYPEDIRECTFB = 9
    CAIROSURFACETYPESVG = 10
    CAIROSURFACETYPEOS2 = 11
    CAIROSURFACETYPEWIN32PRINTING = 12
    CAIROSURFACETYPEQUARTZIMAGE = 13
    CAIROSURFACETYPESCRIPT = 14
    CAIROSURFACETYPEQT = 15
    CAIROSURFACETYPERECORDING = 16
    CAIROSURFACETYPEVG = 17
    CAIROSURFACETYPEGL = 18
    CAIROSURFACETYPEDRM = 19
    CAIROSURFACETYPETEE = 20
    CAIROSURFACETYPEXML = 21
    CAIROSURFACETYPESKIA = 22
    CAIROSURFACETYPESUBSURFACE = 23
    CAIROSURFACETYPECOGL = 24
  end

  enum X_cairo_pattern_type
    CAIROPATTERNTYPESOLID = 0
    CAIROPATTERNTYPESURFACE = 1
    CAIROPATTERNTYPELINEAR = 2
    CAIROPATTERNTYPERADIAL = 3
    CAIROPATTERNTYPEMESH = 4
    CAIROPATTERNTYPERASTERSOURCE = 5
  end

  enum X_cairo_extend
    CAIROEXTENDNONE = 0
    CAIROEXTENDREPEAT = 1
    CAIROEXTENDREFLECT = 2
    CAIROEXTENDPAD = 3
  end

  enum X_cairo_filter
    CAIROFILTERFAST = 0
    CAIROFILTERGOOD = 1
    CAIROFILTERBEST = 2
    CAIROFILTERNEAREST = 3
    CAIROFILTERBILINEAR = 4
    CAIROFILTERGAUSSIAN = 5
  end

  enum X_cairo_region_overlap
    CAIROREGIONOVERLAPIN = 0
    CAIROREGIONOVERLAPOUT = 1
    CAIROREGIONOVERLAPPART = 2
  end

  enum GdkByteOrder
    GDKLSBFIRST = 0
    GDKMSBFIRST = 1
  end

  enum GdkModifierType
    GDKSHIFTMASK = 1
    GDKLOCKMASK = 2
    GDKCONTROLMASK = 4
    GDKMOD1MASK = 8
    GDKMOD2MASK = 16
    GDKMOD3MASK = 32
    GDKMOD4MASK = 64
    GDKMOD5MASK = 128
    GDKBUTTON1MASK = 256
    GDKBUTTON2MASK = 512
    GDKBUTTON3MASK = 1024
    GDKBUTTON4MASK = 2048
    GDKBUTTON5MASK = 4096
    GDKMODIFIERRESERVED13MASK = 8192
    GDKMODIFIERRESERVED14MASK = 16384
    GDKMODIFIERRESERVED15MASK = 32768
    GDKMODIFIERRESERVED16MASK = 65536
    GDKMODIFIERRESERVED17MASK = 131072
    GDKMODIFIERRESERVED18MASK = 262144
    GDKMODIFIERRESERVED19MASK = 524288
    GDKMODIFIERRESERVED20MASK = 1048576
    GDKMODIFIERRESERVED21MASK = 2097152
    GDKMODIFIERRESERVED22MASK = 4194304
    GDKMODIFIERRESERVED23MASK = 8388608
    GDKMODIFIERRESERVED24MASK = 16777216
    GDKMODIFIERRESERVED25MASK = 33554432
    GDKSUPERMASK = 67108864
    GDKHYPERMASK = 134217728
    GDKMETAMASK = 268435456
    GDKMODIFIERRESERVED29MASK = 536870912
    GDKRELEASEMASK = 1073741824
    GDKMODIFIERMASK = 1543512063
  end

  enum GdkModifierIntent
    GDKMODIFIERINTENTPRIMARYACCELERATOR = 0
    GDKMODIFIERINTENTCONTEXTMENU = 1
    GDKMODIFIERINTENTEXTENDSELECTION = 2
    GDKMODIFIERINTENTMODIFYSELECTION = 3
    GDKMODIFIERINTENTNOTEXTINPUT = 4
    GDKMODIFIERINTENTSHIFTGROUP = 5
    GDKMODIFIERINTENTDEFAULTMODMASK = 6
  end

  enum GdkStatus
    GDKOK = 0
    GDKERROR = -1
    GDKERRORPARAM = -2
    GDKERRORFILE = -3
    GDKERRORMEM = -4
  end

  enum GdkGrabStatus
    GDKGRABSUCCESS = 0
    GDKGRABALREADYGRABBED = 1
    GDKGRABINVALIDTIME = 2
    GDKGRABNOTVIEWABLE = 3
    GDKGRABFROZEN = 4
    GDKGRABFAILED = 5
  end

  enum GdkGrabOwnership
    GDKOWNERSHIPNONE = 0
    GDKOWNERSHIPWINDOW = 1
    GDKOWNERSHIPAPPLICATION = 2
  end

  enum GdkEventMask
    GDKEXPOSUREMASK = 2
    GDKPOINTERMOTIONMASK = 4
    GDKPOINTERMOTIONHINTMASK = 8
    GDKBUTTONMOTIONMASK = 16
    GDKBUTTON1MOTIONMASK = 32
    GDKBUTTON2MOTIONMASK = 64
    GDKBUTTON3MOTIONMASK = 128
    GDKBUTTONPRESSMASK = 256
    GDKBUTTONRELEASEMASK = 512
    GDKKEYPRESSMASK = 1024
    GDKKEYRELEASEMASK = 2048
    GDKENTERNOTIFYMASK = 4096
    GDKLEAVENOTIFYMASK = 8192
    GDKFOCUSCHANGEMASK = 16384
    GDKSTRUCTUREMASK = 32768
    GDKPROPERTYCHANGEMASK = 65536
    GDKVISIBILITYNOTIFYMASK = 131072
    GDKPROXIMITYINMASK = 262144
    GDKPROXIMITYOUTMASK = 524288
    GDKSUBSTRUCTUREMASK = 1048576
    GDKSCROLLMASK = 2097152
    GDKTOUCHMASK = 4194304
    GDKSMOOTHSCROLLMASK = 8388608
    GDKTOUCHPADGESTUREMASK = 16777216
    GDKALLEVENTSMASK = 16777214
  end

  enum GdkGLError
    GDKGLERRORNOTAVAILABLE = 0
    GDKGLERRORUNSUPPORTEDFORMAT = 1
    GDKGLERRORUNSUPPORTEDPROFILE = 2
  end

  enum GdkWindowTypeHint
    GDKWINDOWTYPEHINTNORMAL = 0
    GDKWINDOWTYPEHINTDIALOG = 1
    GDKWINDOWTYPEHINTMENU = 2
    GDKWINDOWTYPEHINTTOOLBAR = 3
    GDKWINDOWTYPEHINTSPLASHSCREEN = 4
    GDKWINDOWTYPEHINTUTILITY = 5
    GDKWINDOWTYPEHINTDOCK = 6
    GDKWINDOWTYPEHINTDESKTOP = 7
    GDKWINDOWTYPEHINTDROPDOWNMENU = 8
    GDKWINDOWTYPEHINTPOPUPMENU = 9
    GDKWINDOWTYPEHINTTOOLTIP = 10
    GDKWINDOWTYPEHINTNOTIFICATION = 11
    GDKWINDOWTYPEHINTCOMBO = 12
    GDKWINDOWTYPEHINTDND = 13
  end

  enum GdkInputSource
    GDKSOURCEMOUSE = 0
    GDKSOURCEPEN = 1
    GDKSOURCEERASER = 2
    GDKSOURCECURSOR = 3
    GDKSOURCEKEYBOARD = 4
    GDKSOURCETOUCHSCREEN = 5
    GDKSOURCETOUCHPAD = 6
  end

  enum GdkInputMode
    GDKMODEDISABLED = 0
    GDKMODESCREEN = 1
    GDKMODEWINDOW = 2
  end

  enum GdkAxisUse
    GDKAXISIGNORE = 0
    GDKAXISX = 1
    GDKAXISY = 2
    GDKAXISPRESSURE = 3
    GDKAXISXTILT = 4
    GDKAXISYTILT = 5
    GDKAXISWHEEL = 6
    GDKAXISLAST = 7
  end

  enum GdkDeviceType
    GDKDEVICETYPEMASTER = 0
    GDKDEVICETYPESLAVE = 1
    GDKDEVICETYPEFLOATING = 2
  end

  enum GdkDragAction
    GDKACTIONDEFAULT = 1
    GDKACTIONCOPY = 2
    GDKACTIONMOVE = 4
    GDKACTIONLINK = 8
    GDKACTIONPRIVATE = 16
    GDKACTIONASK = 32
  end

  enum GdkDragCancelReason
    GDKDRAGCANCELNOTARGET = 0
    GDKDRAGCANCELUSERCANCELLED = 1
    GDKDRAGCANCELERROR = 2
  end

  enum GdkDragProtocol
    GDKDRAGPROTONONE = 0
    GDKDRAGPROTOMOTIF = 1
    GDKDRAGPROTOXDND = 2
    GDKDRAGPROTOROOTWIN = 3
    GDKDRAGPROTOWIN32DROPFILES = 4
    GDKDRAGPROTOOLE2 = 5
    GDKDRAGPROTOLOCAL = 6
    GDKDRAGPROTOWAYLAND = 7
  end

  enum GdkFilterReturn
    GDKFILTERCONTINUE = 0
    GDKFILTERTRANSLATE = 1
    GDKFILTERREMOVE = 2
  end

  enum GdkEventType
    GDKNOTHING = -1
    GDKDELETE = 0
    GDKDESTROY = 1
    GDKEXPOSE = 2
    GDKMOTIONNOTIFY = 3
    GDKBUTTONPRESS = 4
    GDK2BUTTONPRESS = 5
    GDKDOUBLEBUTTONPRESS = 5
    GDK3BUTTONPRESS = 6
    GDKTRIPLEBUTTONPRESS = 6
    GDKBUTTONRELEASE = 7
    GDKKEYPRESS = 8
    GDKKEYRELEASE = 9
    GDKENTERNOTIFY = 10
    GDKLEAVENOTIFY = 11
    GDKFOCUSCHANGE = 12
    GDKCONFIGURE = 13
    GDKMAP = 14
    GDKUNMAP = 15
    GDKPROPERTYNOTIFY = 16
    GDKSELECTIONCLEAR = 17
    GDKSELECTIONREQUEST = 18
    GDKSELECTIONNOTIFY = 19
    GDKPROXIMITYIN = 20
    GDKPROXIMITYOUT = 21
    GDKDRAGENTER = 22
    GDKDRAGLEAVE = 23
    GDKDRAGMOTION = 24
    GDKDRAGSTATUS = 25
    GDKDROPSTART = 26
    GDKDROPFINISHED = 27
    GDKCLIENTEVENT = 28
    GDKVISIBILITYNOTIFY = 29
    GDKSCROLL = 31
    GDKWINDOWSTATE = 32
    GDKSETTING = 33
    GDKOWNERCHANGE = 34
    GDKGRABBROKEN = 35
    GDKDAMAGE = 36
    GDKTOUCHBEGIN = 37
    GDKTOUCHUPDATE = 38
    GDKTOUCHEND = 39
    GDKTOUCHCANCEL = 40
    GDKTOUCHPADSWIPE = 41
    GDKTOUCHPADPINCH = 42
    GDKEVENTLAST = 43
  end

  enum GdkVisibilityState
    GDKVISIBILITYUNOBSCURED = 0
    GDKVISIBILITYPARTIAL = 1
    GDKVISIBILITYFULLYOBSCURED = 2
  end

  enum GdkTouchpadGesturePhase
    GDKTOUCHPADGESTUREPHASEBEGIN = 0
    GDKTOUCHPADGESTUREPHASEUPDATE = 1
    GDKTOUCHPADGESTUREPHASEEND = 2
    GDKTOUCHPADGESTUREPHASECANCEL = 3
  end

  enum GdkScrollDirection
    GDKSCROLLUP = 0
    GDKSCROLLDOWN = 1
    GDKSCROLLLEFT = 2
    GDKSCROLLRIGHT = 3
    GDKSCROLLSMOOTH = 4
  end

  enum GdkNotifyType
    GDKNOTIFYANCESTOR = 0
    GDKNOTIFYVIRTUAL = 1
    GDKNOTIFYINFERIOR = 2
    GDKNOTIFYNONLINEAR = 3
    GDKNOTIFYNONLINEARVIRTUAL = 4
    GDKNOTIFYUNKNOWN = 5
  end

  enum GdkCrossingMode
    GDKCROSSINGNORMAL = 0
    GDKCROSSINGGRAB = 1
    GDKCROSSINGUNGRAB = 2
    GDKCROSSINGGTKGRAB = 3
    GDKCROSSINGGTKUNGRAB = 4
    GDKCROSSINGSTATECHANGED = 5
    GDKCROSSINGTOUCHBEGIN = 6
    GDKCROSSINGTOUCHEND = 7
    GDKCROSSINGDEVICESWITCH = 8
  end

  enum GdkPropertyState
    GDKPROPERTYNEWVALUE = 0
    GDKPROPERTYDELETE = 1
  end

  enum GdkWindowState
    GDKWINDOWSTATEWITHDRAWN = 1
    GDKWINDOWSTATEICONIFIED = 2
    GDKWINDOWSTATEMAXIMIZED = 4
    GDKWINDOWSTATESTICKY = 8
    GDKWINDOWSTATEFULLSCREEN = 16
    GDKWINDOWSTATEABOVE = 32
    GDKWINDOWSTATEBELOW = 64
    GDKWINDOWSTATEFOCUSED = 128
    GDKWINDOWSTATETILED = 256
  end

  enum GdkSettingAction
    GDKSETTINGACTIONNEW = 0
    GDKSETTINGACTIONCHANGED = 1
    GDKSETTINGACTIONDELETED = 2
  end

  enum GdkOwnerChange
    GDKOWNERCHANGENEWOWNER = 0
    GDKOWNERCHANGEDESTROY = 1
    GDKOWNERCHANGECLOSE = 2
  end

  enum GdkFrameClockPhase
    GDKFRAMECLOCKPHASENONE = 0
    GDKFRAMECLOCKPHASEFLUSHEVENTS = 1
    GDKFRAMECLOCKPHASEBEFOREPAINT = 2
    GDKFRAMECLOCKPHASEUPDATE = 4
    GDKFRAMECLOCKPHASELAYOUT = 8
    GDKFRAMECLOCKPHASEPAINT = 16
    GDKFRAMECLOCKPHASERESUMEEVENTS = 32
    GDKFRAMECLOCKPHASEAFTERPAINT = 64
  end

  enum GdkWindowWindowClass
    GDKINPUTOUTPUT = 0
    GDKINPUTONLY = 1
  end

  enum GdkWindowType
    GDKWINDOWROOT = 0
    GDKWINDOWTOPLEVEL = 1
    GDKWINDOWCHILD = 2
    GDKWINDOWTEMP = 3
    GDKWINDOWFOREIGN = 4
    GDKWINDOWOFFSCREEN = 5
    GDKWINDOWSUBSURFACE = 6
  end

  enum GdkWindowAttributesType
    GDKWATITLE = 2
    GDKWAX = 4
    GDKWAY = 8
    GDKWACURSOR = 16
    GDKWAVISUAL = 32
    GDKWAWMCLASS = 64
    GDKWANOREDIR = 128
    GDKWATYPEHINT = 256
  end

  enum GdkWindowHints
    GDKHINTPOS = 1
    GDKHINTMINSIZE = 2
    GDKHINTMAXSIZE = 4
    GDKHINTBASESIZE = 8
    GDKHINTASPECT = 16
    GDKHINTRESIZEINC = 32
    GDKHINTWINGRAVITY = 64
    GDKHINTUSERPOS = 128
    GDKHINTUSERSIZE = 256
  end

  enum GdkWMDecoration
    GDKDECORALL = 1
    GDKDECORBORDER = 2
    GDKDECORRESIZEH = 4
    GDKDECORTITLE = 8
    GDKDECORMENU = 16
    GDKDECORMINIMIZE = 32
    GDKDECORMAXIMIZE = 64
  end

  enum GdkWMFunction
    GDKFUNCALL = 1
    GDKFUNCRESIZE = 2
    GDKFUNCMOVE = 4
    GDKFUNCMINIMIZE = 8
    GDKFUNCMAXIMIZE = 16
    GDKFUNCCLOSE = 32
  end

  enum GdkGravity
    GDKGRAVITYNORTHWEST = 1
    GDKGRAVITYNORTH = 2
    GDKGRAVITYNORTHEAST = 3
    GDKGRAVITYWEST = 4
    GDKGRAVITYCENTER = 5
    GDKGRAVITYEAST = 6
    GDKGRAVITYSOUTHWEST = 7
    GDKGRAVITYSOUTH = 8
    GDKGRAVITYSOUTHEAST = 9
    GDKGRAVITYSTATIC = 10
  end

  enum GdkWindowEdge
    GDKWINDOWEDGENORTHWEST = 0
    GDKWINDOWEDGENORTH = 1
    GDKWINDOWEDGENORTHEAST = 2
    GDKWINDOWEDGEWEST = 3
    GDKWINDOWEDGEEAST = 4
    GDKWINDOWEDGESOUTHWEST = 5
    GDKWINDOWEDGESOUTH = 6
    GDKWINDOWEDGESOUTHEAST = 7
  end

  enum GdkFullscreenMode
    GDKFULLSCREENONCURRENTMONITOR = 0
    GDKFULLSCREENONALLMONITORS = 1
  end

  enum GdkSeatCapabilities
    GDKSEATCAPABILITYNONE = 0
    GDKSEATCAPABILITYPOINTER = 1
    GDKSEATCAPABILITYTOUCH = 2
    GDKSEATCAPABILITYTABLETSTYLUS = 4
    GDKSEATCAPABILITYKEYBOARD = 8
    GDKSEATCAPABILITYALLPOINTING = 7
    GDKSEATCAPABILITYALL = 15
  end

  enum GdkPixbufAlphaMode
    GDKPIXBUFALPHABILEVEL = 0
    GDKPIXBUFALPHAFULL = 1
  end

  enum GdkColorspace
    GDKCOLORSPACERGB = 0
  end

  enum GdkPixbufError
    GDKPIXBUFERRORCORRUPTIMAGE = 0
    GDKPIXBUFERRORINSUFFICIENTMEMORY = 1
    GDKPIXBUFERRORBADOPTION = 2
    GDKPIXBUFERRORUNKNOWNTYPE = 3
    GDKPIXBUFERRORUNSUPPORTEDOPERATION = 4
    GDKPIXBUFERRORFAILED = 5
    GDKPIXBUFERRORINCOMPLETEANIMATION = 6
  end

  enum GdkInterpType
    GDKINTERPNEAREST = 0
    GDKINTERPTILES = 1
    GDKINTERPBILINEAR = 2
    GDKINTERPHYPER = 3
  end

  enum GdkPixbufRotation
    GDKPIXBUFROTATENONE = 0
    GDKPIXBUFROTATECOUNTERCLOCKWISE = 90
    GDKPIXBUFROTATEUPSIDEDOWN = 180
    GDKPIXBUFROTATECLOCKWISE = 270
  end

  enum GdkCursorType
    GDKXCURSOR = 0
    GDKARROW = 2
    GDKBASEDARROWDOWN = 4
    GDKBASEDARROWUP = 6
    GDKBOAT = 8
    GDKBOGOSITY = 10
    GDKBOTTOMLEFTCORNER = 12
    GDKBOTTOMRIGHTCORNER = 14
    GDKBOTTOMSIDE = 16
    GDKBOTTOMTEE = 18
    GDKBOXSPIRAL = 20
    GDKCENTERPTR = 22
    GDKCIRCLE = 24
    GDKCLOCK = 26
    GDKCOFFEEMUG = 28
    GDKCROSS = 30
    GDKCROSSREVERSE = 32
    GDKCROSSHAIR = 34
    GDKDIAMONDCROSS = 36
    GDKDOT = 38
    GDKDOTBOX = 40
    GDKDOUBLEARROW = 42
    GDKDRAFTLARGE = 44
    GDKDRAFTSMALL = 46
    GDKDRAPEDBOX = 48
    GDKEXCHANGE = 50
    GDKFLEUR = 52
    GDKGOBBLER = 54
    GDKGUMBY = 56
    GDKHAND1 = 58
    GDKHAND2 = 60
    GDKHEART = 62
    GDKICON = 64
    GDKIRONCROSS = 66
    GDKLEFTPTR = 68
    GDKLEFTSIDE = 70
    GDKLEFTTEE = 72
    GDKLEFTBUTTON = 74
    GDKLLANGLE = 76
    GDKLRANGLE = 78
    GDKMAN = 80
    GDKMIDDLEBUTTON = 82
    GDKMOUSE = 84
    GDKPENCIL = 86
    GDKPIRATE = 88
    GDKPLUS = 90
    GDKQUESTIONARROW = 92
    GDKRIGHTPTR = 94
    GDKRIGHTSIDE = 96
    GDKRIGHTTEE = 98
    GDKRIGHTBUTTON = 100
    GDKRTLLOGO = 102
    GDKSAILBOAT = 104
    GDKSBDOWNARROW = 106
    GDKSBHDOUBLEARROW = 108
    GDKSBLEFTARROW = 110
    GDKSBRIGHTARROW = 112
    GDKSBUPARROW = 114
    GDKSBVDOUBLEARROW = 116
    GDKSHUTTLE = 118
    GDKSIZING = 120
    GDKSPIDER = 122
    GDKSPRAYCAN = 124
    GDKSTAR = 126
    GDKTARGET = 128
    GDKTCROSS = 130
    GDKTOPLEFTARROW = 132
    GDKTOPLEFTCORNER = 134
    GDKTOPRIGHTCORNER = 136
    GDKTOPSIDE = 138
    GDKTOPTEE = 140
    GDKTREK = 142
    GDKULANGLE = 144
    GDKUMBRELLA = 146
    GDKURANGLE = 148
    GDKWATCH = 150
    GDKXTERM = 152
    GDKLASTCURSOR = 153
    GDKBLANKCURSOR = -2
    GDKCURSORISPIXMAP = -1
  end

  enum GdkPropMode
    GDKPROPMODEREPLACE = 0
    GDKPROPMODEPREPEND = 1
    GDKPROPMODEAPPEND = 2
  end

  enum GdkVisualType
    GDKVISUALSTATICGRAY = 0
    GDKVISUALGRAYSCALE = 1
    GDKVISUALSTATICCOLOR = 2
    GDKVISUALPSEUDOCOLOR = 3
    GDKVISUALTRUECOLOR = 4
    GDKVISUALDIRECTCOLOR = 5
  end

  enum GtkAlign
    GTKALIGNFILL = 0
    GTKALIGNSTART = 1
    GTKALIGNEND = 2
    GTKALIGNCENTER = 3
    GTKALIGNBASELINE = 4
  end

  enum GtkArrowType
    GTKARROWUP = 0
    GTKARROWDOWN = 1
    GTKARROWLEFT = 2
    GTKARROWRIGHT = 3
    GTKARROWNONE = 4
  end

  enum GtkBaselinePosition
    GTKBASELINEPOSITIONTOP = 0
    GTKBASELINEPOSITIONCENTER = 1
    GTKBASELINEPOSITIONBOTTOM = 2
  end

  enum GtkDeleteType
    GTKDELETECHARS = 0
    GTKDELETEWORDENDS = 1
    GTKDELETEWORDS = 2
    GTKDELETEDISPLAYLINES = 3
    GTKDELETEDISPLAYLINEENDS = 4
    GTKDELETEPARAGRAPHENDS = 5
    GTKDELETEPARAGRAPHS = 6
    GTKDELETEWHITESPACE = 7
  end

  enum GtkDirectionType
    GTKDIRTABFORWARD = 0
    GTKDIRTABBACKWARD = 1
    GTKDIRUP = 2
    GTKDIRDOWN = 3
    GTKDIRLEFT = 4
    GTKDIRRIGHT = 5
  end

  enum GtkIconSize
    GTKICONSIZEINVALID = 0
    GTKICONSIZEMENU = 1
    GTKICONSIZESMALLTOOLBAR = 2
    GTKICONSIZELARGETOOLBAR = 3
    GTKICONSIZEBUTTON = 4
    GTKICONSIZEDND = 5
    GTKICONSIZEDIALOG = 6
  end

  enum GtkSensitivityType
    GTKSENSITIVITYAUTO = 0
    GTKSENSITIVITYON = 1
    GTKSENSITIVITYOFF = 2
  end

  enum GtkTextDirection
    GTKTEXTDIRNONE = 0
    GTKTEXTDIRLTR = 1
    GTKTEXTDIRRTL = 2
  end

  enum GtkJustification
    GTKJUSTIFYLEFT = 0
    GTKJUSTIFYRIGHT = 1
    GTKJUSTIFYCENTER = 2
    GTKJUSTIFYFILL = 3
  end

  enum GtkMenuDirectionType
    GTKMENUDIRPARENT = 0
    GTKMENUDIRCHILD = 1
    GTKMENUDIRNEXT = 2
    GTKMENUDIRPREV = 3
  end

  enum GtkMessageType
    GTKMESSAGEINFO = 0
    GTKMESSAGEWARNING = 1
    GTKMESSAGEQUESTION = 2
    GTKMESSAGEERROR = 3
    GTKMESSAGEOTHER = 4
  end

  enum GtkMovementStep
    GTKMOVEMENTLOGICALPOSITIONS = 0
    GTKMOVEMENTVISUALPOSITIONS = 1
    GTKMOVEMENTWORDS = 2
    GTKMOVEMENTDISPLAYLINES = 3
    GTKMOVEMENTDISPLAYLINEENDS = 4
    GTKMOVEMENTPARAGRAPHS = 5
    GTKMOVEMENTPARAGRAPHENDS = 6
    GTKMOVEMENTPAGES = 7
    GTKMOVEMENTBUFFERENDS = 8
    GTKMOVEMENTHORIZONTALPAGES = 9
  end

  enum GtkScrollStep
    GTKSCROLLSTEPS = 0
    GTKSCROLLPAGES = 1
    GTKSCROLLENDS = 2
    GTKSCROLLHORIZONTALSTEPS = 3
    GTKSCROLLHORIZONTALPAGES = 4
    GTKSCROLLHORIZONTALENDS = 5
  end

  enum GtkOrientation
    GTKORIENTATIONHORIZONTAL = 0
    GTKORIENTATIONVERTICAL = 1
  end

  enum GtkPackType
    GTKPACKSTART = 0
    GTKPACKEND = 1
  end

  enum GtkPositionType
    GTKPOSLEFT = 0
    GTKPOSRIGHT = 1
    GTKPOSTOP = 2
    GTKPOSBOTTOM = 3
  end

  enum GtkReliefStyle
    GTKRELIEFNORMAL = 0
    GTKRELIEFHALF = 1
    GTKRELIEFNONE = 2
  end

  enum GtkScrollType
    GTKSCROLLNONE = 0
    GTKSCROLLJUMP = 1
    GTKSCROLLSTEPBACKWARD = 2
    GTKSCROLLSTEPFORWARD = 3
    GTKSCROLLPAGEBACKWARD = 4
    GTKSCROLLPAGEFORWARD = 5
    GTKSCROLLSTEPUP = 6
    GTKSCROLLSTEPDOWN = 7
    GTKSCROLLPAGEUP = 8
    GTKSCROLLPAGEDOWN = 9
    GTKSCROLLSTEPLEFT = 10
    GTKSCROLLSTEPRIGHT = 11
    GTKSCROLLPAGELEFT = 12
    GTKSCROLLPAGERIGHT = 13
    GTKSCROLLSTART = 14
    GTKSCROLLEND = 15
  end

  enum GtkSelectionMode
    GTKSELECTIONNONE = 0
    GTKSELECTIONSINGLE = 1
    GTKSELECTIONBROWSE = 2
    GTKSELECTIONMULTIPLE = 3
  end

  enum GtkShadowType
    GTKSHADOWNONE = 0
    GTKSHADOWIN = 1
    GTKSHADOWOUT = 2
    GTKSHADOWETCHEDIN = 3
    GTKSHADOWETCHEDOUT = 4
  end

  enum GtkStateType
    GTKSTATENORMAL = 0
    GTKSTATEACTIVE = 1
    GTKSTATEPRELIGHT = 2
    GTKSTATESELECTED = 3
    GTKSTATEINSENSITIVE = 4
    GTKSTATEINCONSISTENT = 5
    GTKSTATEFOCUSED = 6
  end

  enum GtkToolbarStyle
    GTKTOOLBARICONS = 0
    GTKTOOLBARTEXT = 1
    GTKTOOLBARBOTH = 2
    GTKTOOLBARBOTHHORIZ = 3
  end

  enum GtkWrapMode
    GTKWRAPNONE = 0
    GTKWRAPCHAR = 1
    GTKWRAPWORD = 2
    GTKWRAPWORDCHAR = 3
  end

  enum GtkSortType
    GTKSORTASCENDING = 0
    GTKSORTDESCENDING = 1
  end

  enum GtkIMPreeditStyle
    GTKIMPREEDITNOTHING = 0
    GTKIMPREEDITCALLBACK = 1
    GTKIMPREEDITNONE = 2
  end

  enum GtkIMStatusStyle
    GTKIMSTATUSNOTHING = 0
    GTKIMSTATUSCALLBACK = 1
    GTKIMSTATUSNONE = 2
  end

  enum GtkPackDirection
    GTKPACKDIRECTIONLTR = 0
    GTKPACKDIRECTIONRTL = 1
    GTKPACKDIRECTIONTTB = 2
    GTKPACKDIRECTIONBTT = 3
  end

  enum GtkPrintPages
    GTKPRINTPAGESALL = 0
    GTKPRINTPAGESCURRENT = 1
    GTKPRINTPAGESRANGES = 2
    GTKPRINTPAGESSELECTION = 3
  end

  enum GtkPageSet
    GTKPAGESETALL = 0
    GTKPAGESETEVEN = 1
    GTKPAGESETODD = 2
  end

  enum GtkNumberUpLayout
    GTKNUMBERUPLAYOUTLEFTTORIGHTTOPTOBOTTOM = 0
    GTKNUMBERUPLAYOUTLEFTTORIGHTBOTTOMTOTOP = 1
    GTKNUMBERUPLAYOUTRIGHTTOLEFTTOPTOBOTTOM = 2
    GTKNUMBERUPLAYOUTRIGHTTOLEFTBOTTOMTOTOP = 3
    GTKNUMBERUPLAYOUTTOPTOBOTTOMLEFTTORIGHT = 4
    GTKNUMBERUPLAYOUTTOPTOBOTTOMRIGHTTOLEFT = 5
    GTKNUMBERUPLAYOUTBOTTOMTOTOPLEFTTORIGHT = 6
    GTKNUMBERUPLAYOUTBOTTOMTOTOPRIGHTTOLEFT = 7
  end

  enum GtkPageOrientation
    GTKPAGEORIENTATIONPORTRAIT = 0
    GTKPAGEORIENTATIONLANDSCAPE = 1
    GTKPAGEORIENTATIONREVERSEPORTRAIT = 2
    GTKPAGEORIENTATIONREVERSELANDSCAPE = 3
  end

  enum GtkPrintQuality
    GTKPRINTQUALITYLOW = 0
    GTKPRINTQUALITYNORMAL = 1
    GTKPRINTQUALITYHIGH = 2
    GTKPRINTQUALITYDRAFT = 3
  end

  enum GtkPrintDuplex
    GTKPRINTDUPLEXSIMPLEX = 0
    GTKPRINTDUPLEXHORIZONTAL = 1
    GTKPRINTDUPLEXVERTICAL = 2
  end

  enum GtkUnit
    GTKUNITNONE = 0
    GTKUNITPOINTS = 1
    GTKUNITINCH = 2
    GTKUNITMM = 3
  end

  enum GtkTreeViewGridLines
    GTKTREEVIEWGRIDLINESNONE = 0
    GTKTREEVIEWGRIDLINESHORIZONTAL = 1
    GTKTREEVIEWGRIDLINESVERTICAL = 2
    GTKTREEVIEWGRIDLINESBOTH = 3
  end

  enum GtkDragResult
    GTKDRAGRESULTSUCCESS = 0
    GTKDRAGRESULTNOTARGET = 1
    GTKDRAGRESULTUSERCANCELLED = 2
    GTKDRAGRESULTTIMEOUTEXPIRED = 3
    GTKDRAGRESULTGRABBROKEN = 4
    GTKDRAGRESULTERROR = 5
  end

  enum GtkSizeGroupMode
    GTKSIZEGROUPNONE = 0
    GTKSIZEGROUPHORIZONTAL = 1
    GTKSIZEGROUPVERTICAL = 2
    GTKSIZEGROUPBOTH = 3
  end

  enum GtkSizeRequestMode
    GTKSIZEREQUESTHEIGHTFORWIDTH = 0
    GTKSIZEREQUESTWIDTHFORHEIGHT = 1
    GTKSIZEREQUESTCONSTANTSIZE = 2
  end

  enum GtkScrollablePolicy
    GTKSCROLLMINIMUM = 0
    GTKSCROLLNATURAL = 1
  end

  enum GtkStateFlags
    GTKSTATEFLAGNORMAL = 0
    GTKSTATEFLAGACTIVE = 1
    GTKSTATEFLAGPRELIGHT = 2
    GTKSTATEFLAGSELECTED = 4
    GTKSTATEFLAGINSENSITIVE = 8
    GTKSTATEFLAGINCONSISTENT = 16
    GTKSTATEFLAGFOCUSED = 32
    GTKSTATEFLAGBACKDROP = 64
    GTKSTATEFLAGDIRLTR = 128
    GTKSTATEFLAGDIRRTL = 256
    GTKSTATEFLAGLINK = 512
    GTKSTATEFLAGVISITED = 1024
    GTKSTATEFLAGCHECKED = 2048
    GTKSTATEFLAGDROPACTIVE = 4096
  end

  enum GtkRegionFlags
    GTKREGIONEVEN = 1
    GTKREGIONODD = 2
    GTKREGIONFIRST = 4
    GTKREGIONLAST = 8
    GTKREGIONONLY = 16
    GTKREGIONSORTED = 32
  end

  enum GtkJunctionSides
    GTKJUNCTIONNONE = 0
    GTKJUNCTIONCORNERTOPLEFT = 1
    GTKJUNCTIONCORNERTOPRIGHT = 2
    GTKJUNCTIONCORNERBOTTOMLEFT = 4
    GTKJUNCTIONCORNERBOTTOMRIGHT = 8
    GTKJUNCTIONTOP = 3
    GTKJUNCTIONBOTTOM = 12
    GTKJUNCTIONLEFT = 5
    GTKJUNCTIONRIGHT = 10
  end

  enum GtkBorderStyle
    GTKBORDERSTYLENONE = 0
    GTKBORDERSTYLESOLID = 1
    GTKBORDERSTYLEINSET = 2
    GTKBORDERSTYLEOUTSET = 3
    GTKBORDERSTYLEHIDDEN = 4
    GTKBORDERSTYLEDOTTED = 5
    GTKBORDERSTYLEDASHED = 6
    GTKBORDERSTYLEDOUBLE = 7
    GTKBORDERSTYLEGROOVE = 8
    GTKBORDERSTYLERIDGE = 9
  end

  enum GtkLevelBarMode
    GTKLEVELBARMODECONTINUOUS = 0
    GTKLEVELBARMODEDISCRETE = 1
  end

  enum GtkInputPurpose
    GTKINPUTPURPOSEFREEFORM = 0
    GTKINPUTPURPOSEALPHA = 1
    GTKINPUTPURPOSEDIGITS = 2
    GTKINPUTPURPOSENUMBER = 3
    GTKINPUTPURPOSEPHONE = 4
    GTKINPUTPURPOSEURL = 5
    GTKINPUTPURPOSEEMAIL = 6
    GTKINPUTPURPOSENAME = 7
    GTKINPUTPURPOSEPASSWORD = 8
    GTKINPUTPURPOSEPIN = 9
  end

  enum GtkInputHints
    GTKINPUTHINTNONE = 0
    GTKINPUTHINTSPELLCHECK = 1
    GTKINPUTHINTNOSPELLCHECK = 2
    GTKINPUTHINTWORDCOMPLETION = 4
    GTKINPUTHINTLOWERCASE = 8
    GTKINPUTHINTUPPERCASECHARS = 16
    GTKINPUTHINTUPPERCASEWORDS = 32
    GTKINPUTHINTUPPERCASESENTENCES = 64
    GTKINPUTHINTINHIBITOSK = 128
    GTKINPUTHINTVERTICALWRITING = 256
  end

  enum GtkPropagationPhase
    GTKPHASENONE = 0
    GTKPHASECAPTURE = 1
    GTKPHASEBUBBLE = 2
    GTKPHASETARGET = 3
  end

  enum GtkEventSequenceState
    GTKEVENTSEQUENCENONE = 0
    GTKEVENTSEQUENCECLAIMED = 1
    GTKEVENTSEQUENCEDENIED = 2
  end

  enum GtkPanDirection
    GTKPANDIRECTIONLEFT = 0
    GTKPANDIRECTIONRIGHT = 1
    GTKPANDIRECTIONUP = 2
    GTKPANDIRECTIONDOWN = 3
  end

  enum GtkPopoverConstraint
    GTKPOPOVERCONSTRAINTNONE = 0
    GTKPOPOVERCONSTRAINTWINDOW = 1
  end

  enum GtkAccelFlags
    GTKACCELVISIBLE = 1
    GTKACCELLOCKED = 2
    GTKACCELMASK = 7
  end

  enum AtkStateType
    ATKSTATEINVALID = 0
    ATKSTATEACTIVE = 1
    ATKSTATEARMED = 2
    ATKSTATEBUSY = 3
    ATKSTATECHECKED = 4
    ATKSTATEDEFUNCT = 5
    ATKSTATEEDITABLE = 6
    ATKSTATEENABLED = 7
    ATKSTATEEXPANDABLE = 8
    ATKSTATEEXPANDED = 9
    ATKSTATEFOCUSABLE = 10
    ATKSTATEFOCUSED = 11
    ATKSTATEHORIZONTAL = 12
    ATKSTATEICONIFIED = 13
    ATKSTATEMODAL = 14
    ATKSTATEMULTILINE = 15
    ATKSTATEMULTISELECTABLE = 16
    ATKSTATEOPAQUE = 17
    ATKSTATEPRESSED = 18
    ATKSTATERESIZABLE = 19
    ATKSTATESELECTABLE = 20
    ATKSTATESELECTED = 21
    ATKSTATESENSITIVE = 22
    ATKSTATESHOWING = 23
    ATKSTATESINGLELINE = 24
    ATKSTATESTALE = 25
    ATKSTATETRANSIENT = 26
    ATKSTATEVERTICAL = 27
    ATKSTATEVISIBLE = 28
    ATKSTATEMANAGESDESCENDANTS = 29
    ATKSTATEINDETERMINATE = 30
    ATKSTATETRUNCATED = 31
    ATKSTATEREQUIRED = 32
    ATKSTATEINVALIDENTRY = 33
    ATKSTATESUPPORTSAUTOCOMPLETION = 34
    ATKSTATESELECTABLETEXT = 35
    ATKSTATEDEFAULT = 36
    ATKSTATEANIMATED = 37
    ATKSTATEVISITED = 38
    ATKSTATECHECKABLE = 39
    ATKSTATEHASPOPUP = 40
    ATKSTATEHASTOOLTIP = 41
    ATKSTATEREADONLY = 42
    ATKSTATELASTDEFINED = 43
  end

  enum AtkRelationType
    ATKRELATIONNULL = 0
    ATKRELATIONCONTROLLEDBY = 1
    ATKRELATIONCONTROLLERFOR = 2
    ATKRELATIONLABELFOR = 3
    ATKRELATIONLABELLEDBY = 4
    ATKRELATIONMEMBEROF = 5
    ATKRELATIONNODECHILDOF = 6
    ATKRELATIONFLOWSTO = 7
    ATKRELATIONFLOWSFROM = 8
    ATKRELATIONSUBWINDOWOF = 9
    ATKRELATIONEMBEDS = 10
    ATKRELATIONEMBEDDEDBY = 11
    ATKRELATIONPOPUPFOR = 12
    ATKRELATIONPARENTWINDOWOF = 13
    ATKRELATIONDESCRIBEDBY = 14
    ATKRELATIONDESCRIPTIONFOR = 15
    ATKRELATIONNODEPARENTOF = 16
    ATKRELATIONLASTDEFINED = 17
  end

  enum AtkRole
    ATKROLEINVALID = 0
    ATKROLEACCELLABEL = 1
    ATKROLEALERT = 2
    ATKROLEANIMATION = 3
    ATKROLEARROW = 4
    ATKROLECALENDAR = 5
    ATKROLECANVAS = 6
    ATKROLECHECKBOX = 7
    ATKROLECHECKMENUITEM = 8
    ATKROLECOLORCHOOSER = 9
    ATKROLECOLUMNHEADER = 10
    ATKROLECOMBOBOX = 11
    ATKROLEDATEEDITOR = 12
    ATKROLEDESKTOPICON = 13
    ATKROLEDESKTOPFRAME = 14
    ATKROLEDIAL = 15
    ATKROLEDIALOG = 16
    ATKROLEDIRECTORYPANE = 17
    ATKROLEDRAWINGAREA = 18
    ATKROLEFILECHOOSER = 19
    ATKROLEFILLER = 20
    ATKROLEFONTCHOOSER = 21
    ATKROLEFRAME = 22
    ATKROLEGLASSPANE = 23
    ATKROLEHTMLCONTAINER = 24
    ATKROLEICON = 25
    ATKROLEIMAGE = 26
    ATKROLEINTERNALFRAME = 27
    ATKROLELABEL = 28
    ATKROLELAYEREDPANE = 29
    ATKROLELIST = 30
    ATKROLELISTITEM = 31
    ATKROLEMENU = 32
    ATKROLEMENUBAR = 33
    ATKROLEMENUITEM = 34
    ATKROLEOPTIONPANE = 35
    ATKROLEPAGETAB = 36
    ATKROLEPAGETABLIST = 37
    ATKROLEPANEL = 38
    ATKROLEPASSWORDTEXT = 39
    ATKROLEPOPUPMENU = 40
    ATKROLEPROGRESSBAR = 41
    ATKROLEPUSHBUTTON = 42
    ATKROLERADIOBUTTON = 43
    ATKROLERADIOMENUITEM = 44
    ATKROLEROOTPANE = 45
    ATKROLEROWHEADER = 46
    ATKROLESCROLLBAR = 47
    ATKROLESCROLLPANE = 48
    ATKROLESEPARATOR = 49
    ATKROLESLIDER = 50
    ATKROLESPLITPANE = 51
    ATKROLESPINBUTTON = 52
    ATKROLESTATUSBAR = 53
    ATKROLETABLE = 54
    ATKROLETABLECELL = 55
    ATKROLETABLECOLUMNHEADER = 56
    ATKROLETABLEROWHEADER = 57
    ATKROLETEAROFFMENUITEM = 58
    ATKROLETERMINAL = 59
    ATKROLETEXT = 60
    ATKROLETOGGLEBUTTON = 61
    ATKROLETOOLBAR = 62
    ATKROLETOOLTIP = 63
    ATKROLETREE = 64
    ATKROLETREETABLE = 65
    ATKROLEUNKNOWN = 66
    ATKROLEVIEWPORT = 67
    ATKROLEWINDOW = 68
    ATKROLEHEADER = 69
    ATKROLEFOOTER = 70
    ATKROLEPARAGRAPH = 71
    ATKROLERULER = 72
    ATKROLEAPPLICATION = 73
    ATKROLEAUTOCOMPLETE = 74
    ATKROLEEDITBAR = 75
    ATKROLEEMBEDDED = 76
    ATKROLEENTRY = 77
    ATKROLECHART = 78
    ATKROLECAPTION = 79
    ATKROLEDOCUMENTFRAME = 80
    ATKROLEHEADING = 81
    ATKROLEPAGE = 82
    ATKROLESECTION = 83
    ATKROLEREDUNDANTOBJECT = 84
    ATKROLEFORM = 85
    ATKROLELINK = 86
    ATKROLEINPUTMETHODWINDOW = 87
    ATKROLETABLEROW = 88
    ATKROLETREEITEM = 89
    ATKROLEDOCUMENTSPREADSHEET = 90
    ATKROLEDOCUMENTPRESENTATION = 91
    ATKROLEDOCUMENTTEXT = 92
    ATKROLEDOCUMENTWEB = 93
    ATKROLEDOCUMENTEMAIL = 94
    ATKROLECOMMENT = 95
    ATKROLELISTBOX = 96
    ATKROLEGROUPING = 97
    ATKROLEIMAGEMAP = 98
    ATKROLENOTIFICATION = 99
    ATKROLEINFOBAR = 100
    ATKROLELEVELBAR = 101
    ATKROLETITLEBAR = 102
    ATKROLEBLOCKQUOTE = 103
    ATKROLEAUDIO = 104
    ATKROLEVIDEO = 105
    ATKROLEDEFINITION = 106
    ATKROLEARTICLE = 107
    ATKROLELANDMARK = 108
    ATKROLELOG = 109
    ATKROLEMARQUEE = 110
    ATKROLEMATH = 111
    ATKROLERATING = 112
    ATKROLETIMER = 113
    ATKROLEDESCRIPTIONLIST = 114
    ATKROLEDESCRIPTIONTERM = 115
    ATKROLEDESCRIPTIONVALUE = 116
    ATKROLESTATIC = 117
    ATKROLEMATHFRACTION = 118
    ATKROLEMATHROOT = 119
    ATKROLESUBSCRIPT = 120
    ATKROLESUPERSCRIPT = 121
    ATKROLELASTDEFINED = 122
  end

  enum AtkLayer
    ATKLAYERINVALID = 0
    ATKLAYERBACKGROUND = 1
    ATKLAYERCANVAS = 2
    ATKLAYERWIDGET = 3
    ATKLAYERMDI = 4
    ATKLAYERPOPUP = 5
    ATKLAYEROVERLAY = 6
    ATKLAYERWINDOW = 7
  end

  enum AtkKeyEventType
    ATKKEYEVENTPRESS = 0
    ATKKEYEVENTRELEASE = 1
    ATKKEYEVENTLASTDEFINED = 2
  end

  enum AtkCoordType
    ATKXYSCREEN = 0
    ATKXYWINDOW = 1
  end

  enum AtkTextAttribute
    ATKTEXTATTRINVALID = 0
    ATKTEXTATTRLEFTMARGIN = 1
    ATKTEXTATTRRIGHTMARGIN = 2
    ATKTEXTATTRINDENT = 3
    ATKTEXTATTRINVISIBLE = 4
    ATKTEXTATTREDITABLE = 5
    ATKTEXTATTRPIXELSABOVELINES = 6
    ATKTEXTATTRPIXELSBELOWLINES = 7
    ATKTEXTATTRPIXELSINSIDEWRAP = 8
    ATKTEXTATTRBGFULLHEIGHT = 9
    ATKTEXTATTRRISE = 10
    ATKTEXTATTRUNDERLINE = 11
    ATKTEXTATTRSTRIKETHROUGH = 12
    ATKTEXTATTRSIZE = 13
    ATKTEXTATTRSCALE = 14
    ATKTEXTATTRWEIGHT = 15
    ATKTEXTATTRLANGUAGE = 16
    ATKTEXTATTRFAMILYNAME = 17
    ATKTEXTATTRBGCOLOR = 18
    ATKTEXTATTRFGCOLOR = 19
    ATKTEXTATTRBGSTIPPLE = 20
    ATKTEXTATTRFGSTIPPLE = 21
    ATKTEXTATTRWRAPMODE = 22
    ATKTEXTATTRDIRECTION = 23
    ATKTEXTATTRJUSTIFICATION = 24
    ATKTEXTATTRSTRETCH = 25
    ATKTEXTATTRVARIANT = 26
    ATKTEXTATTRSTYLE = 27
    ATKTEXTATTRLASTDEFINED = 28
  end

  enum AtkTextBoundary
    ATKTEXTBOUNDARYCHAR = 0
    ATKTEXTBOUNDARYWORDSTART = 1
    ATKTEXTBOUNDARYWORDEND = 2
    ATKTEXTBOUNDARYSENTENCESTART = 3
    ATKTEXTBOUNDARYSENTENCEEND = 4
    ATKTEXTBOUNDARYLINESTART = 5
    ATKTEXTBOUNDARYLINEEND = 6
  end

  enum AtkTextGranularity
    ATKTEXTGRANULARITYCHAR = 0
    ATKTEXTGRANULARITYWORD = 1
    ATKTEXTGRANULARITYSENTENCE = 2
    ATKTEXTGRANULARITYLINE = 3
    ATKTEXTGRANULARITYPARAGRAPH = 4
  end

  enum AtkTextClipType
    ATKTEXTCLIPNONE = 0
    ATKTEXTCLIPMIN = 1
    ATKTEXTCLIPMAX = 2
    ATKTEXTCLIPBOTH = 3
  end

  enum AtkHyperlinkStateFlags
    ATKHYPERLINKISINLINE = 1
  end

  enum AtkValueType
    ATKVALUEVERYWEAK = 0
    ATKVALUEWEAK = 1
    ATKVALUEACCEPTABLE = 2
    ATKVALUESTRONG = 3
    ATKVALUEVERYSTRONG = 4
    ATKVALUEVERYLOW = 5
    ATKVALUELOW = 6
    ATKVALUEMEDIUM = 7
    ATKVALUEHIGH = 8
    ATKVALUEVERYHIGH = 9
    ATKVALUEVERYBAD = 10
    ATKVALUEBAD = 11
    ATKVALUEGOOD = 12
    ATKVALUEVERYGOOD = 13
    ATKVALUEBEST = 14
    ATKVALUELASTDEFINED = 15
  end

  enum GtkWidgetHelpType
    GTKWIDGETHELPTOOLTIP = 0
    GTKWIDGETHELPWHATSTHIS = 1
  end

  enum GtkApplicationInhibitFlags
    GTKAPPLICATIONINHIBITLOGOUT = 1
    GTKAPPLICATIONINHIBITSWITCH = 2
    GTKAPPLICATIONINHIBITSUSPEND = 4
    GTKAPPLICATIONINHIBITIDLE = 8
  end

  enum GtkResizeMode
    GTKRESIZEPARENT = 0
    GTKRESIZEQUEUE = 1
    GTKRESIZEIMMEDIATE = 2
  end

  enum GtkWindowType
    GTKWINDOWTOPLEVEL = 0
    GTKWINDOWPOPUP = 1
  end

  enum GtkWindowPosition
    GTKWINPOSNONE = 0
    GTKWINPOSCENTER = 1
    GTKWINPOSMOUSE = 2
    GTKWINPOSCENTERALWAYS = 3
    GTKWINPOSCENTERONPARENT = 4
  end

  enum GtkDialogFlags
    GTKDIALOGMODAL = 1
    GTKDIALOGDESTROYWITHPARENT = 2
    GTKDIALOGUSEHEADERBAR = 4
  end

  enum GtkResponseType
    GTKRESPONSENONE = -1
    GTKRESPONSEREJECT = -2
    GTKRESPONSEACCEPT = -3
    GTKRESPONSEDELETEEVENT = -4
    GTKRESPONSEOK = -5
    GTKRESPONSECANCEL = -6
    GTKRESPONSECLOSE = -7
    GTKRESPONSEYES = -8
    GTKRESPONSENO = -9
    GTKRESPONSEAPPLY = -10
    GTKRESPONSEHELP = -11
  end

  enum GtkLicense
    GTKLICENSEUNKNOWN = 0
    GTKLICENSECUSTOM = 1
    GTKLICENSEGPL20 = 2
    GTKLICENSEGPL30 = 3
    GTKLICENSELGPL21 = 4
    GTKLICENSELGPL30 = 5
    GTKLICENSEBSD = 6
    GTKLICENSEMITX11 = 7
    GTKLICENSEARTISTIC = 8
    GTKLICENSEGPL20ONLY = 9
    GTKLICENSEGPL30ONLY = 10
    GTKLICENSELGPL21ONLY = 11
    GTKLICENSELGPL30ONLY = 12
  end

  enum GtkArrowPlacement
    GTKARROWSBOTH = 0
    GTKARROWSSTART = 1
    GTKARROWSEND = 2
  end

  enum GtkTreeModelFlags
    GTKTREEMODELITERSPERSIST = 1
    GTKTREEMODELLISTONLY = 2
  end

  enum GtkCellRendererState
    GTKCELLRENDERERSELECTED = 1
    GTKCELLRENDERERPRELIT = 2
    GTKCELLRENDERERINSENSITIVE = 4
    GTKCELLRENDERERSORTED = 8
    GTKCELLRENDERERFOCUSED = 16
    GTKCELLRENDEREREXPANDABLE = 32
    GTKCELLRENDEREREXPANDED = 64
  end

  enum GtkCellRendererMode
    GTKCELLRENDERERMODEINERT = 0
    GTKCELLRENDERERMODEACTIVATABLE = 1
    GTKCELLRENDERERMODEEDITABLE = 2
  end

  enum GtkTreeViewColumnSizing
    GTKTREEVIEWCOLUMNGROWONLY = 0
    GTKTREEVIEWCOLUMNAUTOSIZE = 1
    GTKTREEVIEWCOLUMNFIXED = 2
  end

  enum GtkTextSearchFlags
    GTKTEXTSEARCHVISIBLEONLY = 1
    GTKTEXTSEARCHTEXTONLY = 2
    GTKTEXTSEARCHCASEINSENSITIVE = 4
  end

  enum GtkDestDefaults
    GTKDESTDEFAULTMOTION = 1
    GTKDESTDEFAULTHIGHLIGHT = 2
    GTKDESTDEFAULTDROP = 4
    GTKDESTDEFAULTALL = 7
  end

  enum GtkTargetFlags
    GTKTARGETSAMEAPP = 1
    GTKTARGETSAMEWIDGET = 2
    GTKTARGETOTHERAPP = 4
    GTKTARGETOTHERWIDGET = 8
  end

  enum GtkImageType
    GTKIMAGEEMPTY = 0
    GTKIMAGEPIXBUF = 1
    GTKIMAGESTOCK = 2
    GTKIMAGEICONSET = 3
    GTKIMAGEANIMATION = 4
    GTKIMAGEICONNAME = 5
    GTKIMAGEGICON = 6
    GTKIMAGESURFACE = 7
  end

  enum GtkEntryIconPosition
    GTKENTRYICONPRIMARY = 0
    GTKENTRYICONSECONDARY = 1
  end

  enum GtkTreeViewDropPosition
    GTKTREEVIEWDROPBEFORE = 0
    GTKTREEVIEWDROPAFTER = 1
    GTKTREEVIEWDROPINTOORBEFORE = 2
    GTKTREEVIEWDROPINTOORAFTER = 3
  end

  enum GtkAssistantPageType
    GTKASSISTANTPAGECONTENT = 0
    GTKASSISTANTPAGEINTRO = 1
    GTKASSISTANTPAGECONFIRM = 2
    GTKASSISTANTPAGESUMMARY = 3
    GTKASSISTANTPAGEPROGRESS = 4
    GTKASSISTANTPAGECUSTOM = 5
  end

  enum GtkButtonBoxStyle
    GTKBUTTONBOXSPREAD = 1
    GTKBUTTONBOXEDGE = 2
    GTKBUTTONBOXSTART = 3
    GTKBUTTONBOXEND = 4
    GTKBUTTONBOXCENTER = 5
    GTKBUTTONBOXEXPAND = 6
  end

  enum GtkBuilderError
    GTKBUILDERERRORINVALIDTYPEFUNCTION = 0
    GTKBUILDERERRORUNHANDLEDTAG = 1
    GTKBUILDERERRORMISSINGATTRIBUTE = 2
    GTKBUILDERERRORINVALIDATTRIBUTE = 3
    GTKBUILDERERRORINVALIDTAG = 4
    GTKBUILDERERRORMISSINGPROPERTYVALUE = 5
    GTKBUILDERERRORINVALIDVALUE = 6
    GTKBUILDERERRORVERSIONMISMATCH = 7
    GTKBUILDERERRORDUPLICATEID = 8
    GTKBUILDERERROROBJECTTYPEREFUSED = 9
    GTKBUILDERERRORTEMPLATEMISMATCH = 10
    GTKBUILDERERRORINVALIDPROPERTY = 11
    GTKBUILDERERRORINVALIDSIGNAL = 12
    GTKBUILDERERRORINVALIDID = 13
  end

  enum GtkCalendarDisplayOptions
    GTKCALENDARSHOWHEADING = 1
    GTKCALENDARSHOWDAYNAMES = 2
    GTKCALENDARNOMONTHCHANGE = 4
    GTKCALENDARSHOWWEEKNUMBERS = 8
    GTKCALENDARSHOWDETAILS = 32
  end

  enum GtkCellRendererAccelMode
    GTKCELLRENDERERACCELMODEGTK = 0
    GTKCELLRENDERERACCELMODEOTHER = 1
  end

  enum GtkCssSectionType
    GTKCSSSECTIONDOCUMENT = 0
    GTKCSSSECTIONIMPORT = 1
    GTKCSSSECTIONCOLORDEFINITION = 2
    GTKCSSSECTIONBINDINGSET = 3
    GTKCSSSECTIONRULESET = 4
    GTKCSSSECTIONSELECTOR = 5
    GTKCSSSECTIONDECLARATION = 6
    GTKCSSSECTIONVALUE = 7
    GTKCSSSECTIONKEYFRAMES = 8
  end

  enum GtkCssProviderError
    GTKCSSPROVIDERERRORFAILED = 0
    GTKCSSPROVIDERERRORSYNTAX = 1
    GTKCSSPROVIDERERRORIMPORT = 2
    GTKCSSPROVIDERERRORNAME = 3
    GTKCSSPROVIDERERRORDEPRECATED = 4
    GTKCSSPROVIDERERRORUNKNOWNVALUE = 5
  end

  enum GtkDebugFlag
    GTKDEBUGMISC = 1
    GTKDEBUGPLUGSOCKET = 2
    GTKDEBUGTEXT = 4
    GTKDEBUGTREE = 8
    GTKDEBUGUPDATES = 16
    GTKDEBUGKEYBINDINGS = 32
    GTKDEBUGMULTIHEAD = 64
    GTKDEBUGMODULES = 128
    GTKDEBUGGEOMETRY = 256
    GTKDEBUGICONTHEME = 512
    GTKDEBUGPRINTING = 1024
    GTKDEBUGBUILDER = 2048
    GTKDEBUGSIZEREQUEST = 4096
    GTKDEBUGNOCSSCACHE = 8192
    GTKDEBUGBASELINES = 16384
    GTKDEBUGPIXELCACHE = 32768
    GTKDEBUGNOPIXELCACHE = 65536
    GTKDEBUGINTERACTIVE = 131072
    GTKDEBUGTOUCHSCREEN = 262144
    GTKDEBUGACTIONS = 524288
    GTKDEBUGRESIZE = 1048576
    GTKDEBUGLAYOUT = 2097152
  end

  enum GtkFileFilterFlags
    GTKFILEFILTERFILENAME = 1
    GTKFILEFILTERURI = 2
    GTKFILEFILTERDISPLAYNAME = 4
    GTKFILEFILTERMIMETYPE = 8
  end

  enum GtkFileChooserAction
    GTKFILECHOOSERACTIONOPEN = 0
    GTKFILECHOOSERACTIONSAVE = 1
    GTKFILECHOOSERACTIONSELECTFOLDER = 2
    GTKFILECHOOSERACTIONCREATEFOLDER = 3
  end

  enum GtkFileChooserConfirmation
    GTKFILECHOOSERCONFIRMATIONCONFIRM = 0
    GTKFILECHOOSERCONFIRMATIONACCEPTFILENAME = 1
    GTKFILECHOOSERCONFIRMATIONSELECTAGAIN = 2
  end

  enum GtkFileChooserError
    GTKFILECHOOSERERRORNONEXISTENT = 0
    GTKFILECHOOSERERRORBADFILENAME = 1
    GTKFILECHOOSERERRORALREADYEXISTS = 2
    GTKFILECHOOSERERRORINCOMPLETEHOSTNAME = 3
  end

  enum GtkStyleContextPrintFlags
    GTKSTYLECONTEXTPRINTNONE = 0
    GTKSTYLECONTEXTPRINTRECURSE = 1
    GTKSTYLECONTEXTPRINTSHOWSTYLE = 2
  end

  enum GtkIconLookupFlags
    GTKICONLOOKUPNOSVG = 1
    GTKICONLOOKUPFORCESVG = 2
    GTKICONLOOKUPUSEBUILTIN = 4
    GTKICONLOOKUPGENERICFALLBACK = 8
    GTKICONLOOKUPFORCESIZE = 16
    GTKICONLOOKUPFORCEREGULAR = 32
    GTKICONLOOKUPFORCESYMBOLIC = 64
    GTKICONLOOKUPDIRLTR = 128
    GTKICONLOOKUPDIRRTL = 256
  end

  enum GtkIconThemeError
    GTKICONTHEMENOTFOUND = 0
    GTKICONTHEMEFAILED = 1
  end

  enum GtkIconViewDropPosition
    GTKICONVIEWNODROP = 0
    GTKICONVIEWDROPINTO = 1
    GTKICONVIEWDROPLEFT = 2
    GTKICONVIEWDROPRIGHT = 3
    GTKICONVIEWDROPABOVE = 4
    GTKICONVIEWDROPBELOW = 5
  end

  enum GtkButtonsType
    GTKBUTTONSNONE = 0
    GTKBUTTONSOK = 1
    GTKBUTTONSCLOSE = 2
    GTKBUTTONSCANCEL = 3
    GTKBUTTONSYESNO = 4
    GTKBUTTONSOKCANCEL = 5
  end

  enum GtkButtonRole
    GTKBUTTONROLENORMAL = 0
    GTKBUTTONROLECHECK = 1
    GTKBUTTONROLERADIO = 2
  end

  enum GtkNotebookTab
    GTKNOTEBOOKTABFIRST = 0
    GTKNOTEBOOKTABLAST = 1
  end

  enum GtkPlacesOpenFlags
    GTKPLACESOPENNORMAL = 1
    GTKPLACESOPENNEWTAB = 2
    GTKPLACESOPENNEWWINDOW = 4
  end

  enum GtkPrintStatus
    GTKPRINTSTATUSINITIAL = 0
    GTKPRINTSTATUSPREPARING = 1
    GTKPRINTSTATUSGENERATINGDATA = 2
    GTKPRINTSTATUSSENDINGDATA = 3
    GTKPRINTSTATUSPENDING = 4
    GTKPRINTSTATUSPENDINGISSUE = 5
    GTKPRINTSTATUSPRINTING = 6
    GTKPRINTSTATUSFINISHED = 7
    GTKPRINTSTATUSFINISHEDABORTED = 8
  end

  enum GtkPrintOperationResult
    GTKPRINTOPERATIONRESULTERROR = 0
    GTKPRINTOPERATIONRESULTAPPLY = 1
    GTKPRINTOPERATIONRESULTCANCEL = 2
    GTKPRINTOPERATIONRESULTINPROGRESS = 3
  end

  enum GtkPrintOperationAction
    GTKPRINTOPERATIONACTIONPRINTDIALOG = 0
    GTKPRINTOPERATIONACTIONPRINT = 1
    GTKPRINTOPERATIONACTIONPREVIEW = 2
    GTKPRINTOPERATIONACTIONEXPORT = 3
  end

  enum GtkPrintError
    GTKPRINTERRORGENERAL = 0
    GTKPRINTERRORINTERNALERROR = 1
    GTKPRINTERRORNOMEM = 2
    GTKPRINTERRORINVALIDFILE = 3
  end

  enum GtkRecentManagerError
    GTKRECENTMANAGERERRORNOTFOUND = 0
    GTKRECENTMANAGERERRORINVALIDURI = 1
    GTKRECENTMANAGERERRORINVALIDENCODING = 2
    GTKRECENTMANAGERERRORNOTREGISTERED = 3
    GTKRECENTMANAGERERRORREAD = 4
    GTKRECENTMANAGERERRORWRITE = 5
    GTKRECENTMANAGERERRORUNKNOWN = 6
  end

  enum GtkRecentFilterFlags
    GTKRECENTFILTERURI = 1
    GTKRECENTFILTERDISPLAYNAME = 2
    GTKRECENTFILTERMIMETYPE = 4
    GTKRECENTFILTERAPPLICATION = 8
    GTKRECENTFILTERGROUP = 16
    GTKRECENTFILTERAGE = 32
  end

  enum GtkRecentSortType
    GTKRECENTSORTNONE = 0
    GTKRECENTSORTMRU = 1
    GTKRECENTSORTLRU = 2
    GTKRECENTSORTCUSTOM = 3
  end

  enum GtkRecentChooserError
    GTKRECENTCHOOSERERRORNOTFOUND = 0
    GTKRECENTCHOOSERERRORINVALIDURI = 1
  end

  enum GtkRevealerTransitionType
    GTKREVEALERTRANSITIONTYPENONE = 0
    GTKREVEALERTRANSITIONTYPECROSSFADE = 1
    GTKREVEALERTRANSITIONTYPESLIDERIGHT = 2
    GTKREVEALERTRANSITIONTYPESLIDELEFT = 3
    GTKREVEALERTRANSITIONTYPESLIDEUP = 4
    GTKREVEALERTRANSITIONTYPESLIDEDOWN = 5
  end

  enum GtkCornerType
    GTKCORNERTOPLEFT = 0
    GTKCORNERBOTTOMLEFT = 1
    GTKCORNERTOPRIGHT = 2
    GTKCORNERBOTTOMRIGHT = 3
  end

  enum GtkPolicyType
    GTKPOLICYALWAYS = 0
    GTKPOLICYAUTOMATIC = 1
    GTKPOLICYNEVER = 2
    GTKPOLICYEXTERNAL = 3
  end

  enum GtkShortcutType
    GTKSHORTCUTACCELERATOR = 0
    GTKSHORTCUTGESTUREPINCH = 1
    GTKSHORTCUTGESTURESTRETCH = 2
    GTKSHORTCUTGESTUREROTATECLOCKWISE = 3
    GTKSHORTCUTGESTUREROTATECOUNTERCLOCKWISE = 4
    GTKSHORTCUTGESTURETWOFINGERSWIPELEFT = 5
    GTKSHORTCUTGESTURETWOFINGERSWIPERIGHT = 6
    GTKSHORTCUTGESTURE = 7
  end

  enum GtkStackTransitionType
    GTKSTACKTRANSITIONTYPENONE = 0
    GTKSTACKTRANSITIONTYPECROSSFADE = 1
    GTKSTACKTRANSITIONTYPESLIDERIGHT = 2
    GTKSTACKTRANSITIONTYPESLIDELEFT = 3
    GTKSTACKTRANSITIONTYPESLIDEUP = 4
    GTKSTACKTRANSITIONTYPESLIDEDOWN = 5
    GTKSTACKTRANSITIONTYPESLIDELEFTRIGHT = 6
    GTKSTACKTRANSITIONTYPESLIDEUPDOWN = 7
    GTKSTACKTRANSITIONTYPEOVERUP = 8
    GTKSTACKTRANSITIONTYPEOVERDOWN = 9
    GTKSTACKTRANSITIONTYPEOVERLEFT = 10
    GTKSTACKTRANSITIONTYPEOVERRIGHT = 11
    GTKSTACKTRANSITIONTYPEUNDERUP = 12
    GTKSTACKTRANSITIONTYPEUNDERDOWN = 13
    GTKSTACKTRANSITIONTYPEUNDERLEFT = 14
    GTKSTACKTRANSITIONTYPEUNDERRIGHT = 15
    GTKSTACKTRANSITIONTYPEOVERUPDOWN = 16
    GTKSTACKTRANSITIONTYPEOVERDOWNUP = 17
    GTKSTACKTRANSITIONTYPEOVERLEFTRIGHT = 18
    GTKSTACKTRANSITIONTYPEOVERRIGHTLEFT = 19
  end

  enum GtkSpinButtonUpdatePolicy
    GTKUPDATEALWAYS = 0
    GTKUPDATEIFVALID = 1
  end

  enum GtkSpinType
    GTKSPINSTEPFORWARD = 0
    GTKSPINSTEPBACKWARD = 1
    GTKSPINPAGEFORWARD = 2
    GTKSPINPAGEBACKWARD = 3
    GTKSPINHOME = 4
    GTKSPINEND = 5
    GTKSPINUSERDEFINED = 6
  end

  enum GtkTextBufferTargetInfo
    GTKTEXTBUFFERTARGETINFOBUFFERCONTENTS = -1
    GTKTEXTBUFFERTARGETINFORICHTEXT = -2
    GTKTEXTBUFFERTARGETINFOTEXT = -3
  end

  enum GtkTextWindowType
    GTKTEXTWINDOWPRIVATE = 0
    GTKTEXTWINDOWWIDGET = 1
    GTKTEXTWINDOWTEXT = 2
    GTKTEXTWINDOWLEFT = 3
    GTKTEXTWINDOWRIGHT = 4
    GTKTEXTWINDOWTOP = 5
    GTKTEXTWINDOWBOTTOM = 6
  end

  enum GtkTextViewLayer
    GTKTEXTVIEWLAYERBELOW = 0
    GTKTEXTVIEWLAYERABOVE = 1
    GTKTEXTVIEWLAYERBELOWTEXT = 2
    GTKTEXTVIEWLAYERABOVETEXT = 3
  end

  enum GtkTextExtendSelection
    GTKTEXTEXTENDSELECTIONWORD = 0
    GTKTEXTEXTENDSELECTIONLINE = 1
  end

  enum GtkToolbarSpaceStyle
    GTKTOOLBARSPACEEMPTY = 0
    GTKTOOLBARSPACELINE = 1
  end

  enum GtkToolPaletteDragTargets
    GTKTOOLPALETTEDRAGITEMS = 1
    GTKTOOLPALETTEDRAGGROUPS = 2
  end

  enum GtkRcFlags
    GTKRCFG = 1
    GTKRCBG = 2
    GTKRCTEXT = 4
    GTKRCBASE = 8
  end

  enum GtkRcTokenType
    GTKRCTOKENINVALID = 270
    GTKRCTOKENINCLUDE = 271
    GTKRCTOKENNORMAL = 272
    GTKRCTOKENACTIVE = 273
    GTKRCTOKENPRELIGHT = 274
    GTKRCTOKENSELECTED = 275
    GTKRCTOKENINSENSITIVE = 276
    GTKRCTOKENFG = 277
    GTKRCTOKENBG = 278
    GTKRCTOKENTEXT = 279
    GTKRCTOKENBASE = 280
    GTKRCTOKENXTHICKNESS = 281
    GTKRCTOKENYTHICKNESS = 282
    GTKRCTOKENFONT = 283
    GTKRCTOKENFONTSET = 284
    GTKRCTOKENFONTNAME = 285
    GTKRCTOKENBGPIXMAP = 286
    GTKRCTOKENPIXMAPPATH = 287
    GTKRCTOKENSTYLE = 288
    GTKRCTOKENBINDING = 289
    GTKRCTOKENBIND = 290
    GTKRCTOKENWIDGET = 291
    GTKRCTOKENWIDGETCLASS = 292
    GTKRCTOKENCLASS = 293
    GTKRCTOKENLOWEST = 294
    GTKRCTOKENGTK = 295
    GTKRCTOKENAPPLICATION = 296
    GTKRCTOKENTHEME = 297
    GTKRCTOKENRC = 298
    GTKRCTOKENHIGHEST = 299
    GTKRCTOKENENGINE = 300
    GTKRCTOKENMODULEPATH = 301
    GTKRCTOKENIMMODULEPATH = 302
    GTKRCTOKENIMMODULEFILE = 303
    GTKRCTOKENSTOCK = 304
    GTKRCTOKENLTR = 305
    GTKRCTOKENRTL = 306
    GTKRCTOKENCOLOR = 307
    GTKRCTOKENUNBIND = 308
    GTKRCTOKENLAST = 309
  end

  enum GtkPathPriorityType
    GTKPATHPRIOLOWEST = 0
    GTKPATHPRIOGTK = 4
    GTKPATHPRIOAPPLICATION = 8
    GTKPATHPRIOTHEME = 10
    GTKPATHPRIORC = 12
    GTKPATHPRIOHIGHEST = 15
  end

  enum GtkPathType
    GTKPATHWIDGET = 0
    GTKPATHWIDGETCLASS = 1
    GTKPATHCLASS = 2
  end

  enum GtkExpanderStyle
    GTKEXPANDERCOLLAPSED = 0
    GTKEXPANDERSEMICOLLAPSED = 1
    GTKEXPANDERSEMIEXPANDED = 2
    GTKEXPANDEREXPANDED = 3
  end

  enum GtkAttachOptions
    GTKEXPAND = 1
    GTKSHRINK = 2
    GTKFILL = 4
  end

  enum GtkUIManagerItemType
    GTKUIMANAGERAUTO = 0
    GTKUIMANAGERMENUBAR = 1
    GTKUIMANAGERMENU = 2
    GTKUIMANAGERTOOLBAR = 4
    GTKUIMANAGERPLACEHOLDER = 8
    GTKUIMANAGERPOPUP = 16
    GTKUIMANAGERMENUITEM = 32
    GTKUIMANAGERTOOLITEM = 64
    GTKUIMANAGERSEPARATOR = 128
    GTKUIMANAGERACCELERATOR = 256
    GTKUIMANAGERPOPUPWITHACCELS = 512
  end

  struct AnonStruct0
    __clang_max_align_nonce1 : Int64
    __clang_max_align_nonce2 : Float64
  end
  struct AnonStruct1
    __val : Int32[2]
  end
  struct Timespec
    tv_sec : X__time_t
    tv_nsec : X__syscall_slong_t
  end
  struct Tm
    tm_sec : Int32
    tm_min : Int32
    tm_hour : Int32
    tm_mday : Int32
    tm_mon : Int32
    tm_year : Int32
    tm_wday : Int32
    tm_yday : Int32
    tm_isdst : Int32
    tm_gmtoff : Int64
    tm_zone : UInt8*
  end
  struct Itimerspec
    it_interval : Timespec
    it_value : Timespec
  end
  struct Sigevent
    sigev_value : SigvalT
    sigev_signo : Int32
    sigev_notify : Int32
    anon_union_8 : AnonUnion8
    _sigev_un : AnonUnion8
  end
  struct X__locale_struct
    __locales : X__locale_data*[13]
    __ctype_b : UInt16*
    __ctype_tolower : Int32*
    __ctype_toupper : Int32*
    __names : UInt8*[13]
  end
  struct X_GTimeVal
    tv_sec : Glong
    tv_usec : Glong
  end
  struct X_GBytes
    __data : UInt8[0]
  end
  struct X_GArray
    data : Gchar*
    len : Guint
  end
  struct X_GByteArray
    data : Guint8*
    len : Guint
  end
  struct X_GPtrArray
    pdata : Gpointer*
    len : Guint
  end
  struct X_GError
    domain : GQuark
    code : Gint
    message : Gchar*
  end
  struct X_GDebugKey
    key : Gchar*
    value : Guint
  end
  struct X_GThread
    func : GThreadFunc
    data : Gpointer
    joinable : Gboolean
    priority : GThreadPriority
  end
  struct X_GRecMutex
    p : Gpointer
    i : Guint[2]
  end
  struct X_GRWLock
    p : Gpointer
    i : Guint[2]
  end
  struct X_GCond
    p : Gpointer
    i : Guint[2]
  end
  struct X_GPrivate
    p : Gpointer
    notify : GDestroyNotify
    future : Gpointer[2]
  end
  struct X_GOnce
    status : GOnceStatus
    retval : Gpointer
  end
  struct X_GAsyncQueue
    __data : UInt8[0]
  end
  struct AnonStruct2
    __val : UInt64[16]
  end
  struct AnonStruct3
    si_signo : Int32
    si_errno : Int32
    si_code : Int32
    anon_union_9 : AnonUnion9
    _sifields : AnonUnion9
  end
  struct Sigaction
    anon_union_10 : AnonUnion10
    __sigaction_handler : AnonUnion10
    sa_mask : X__sigset_t
    sa_flags : Int32
    sa_restorer : ( -> Void)
  end
  struct X_fpx_sw_bytes
    magic1 : X__uint32_t
    extended_size : X__uint32_t
    xstate_bv : X__uint64_t
    xstate_size : X__uint32_t
    padding : X__uint32_t[7]
  end
  struct X_fpreg
    significand : UInt16[4]
    exponent : UInt16
  end
  struct X_fpxreg
    significand : UInt16[4]
    exponent : UInt16
    padding : UInt16[3]
  end
  struct X_xmmreg
    element : X__uint32_t[4]
  end
  struct X_fpstate
    cwd : X__uint16_t
    swd : X__uint16_t
    ftw : X__uint16_t
    fop : X__uint16_t
    rip : X__uint64_t
    rdp : X__uint64_t
    mxcsr : X__uint32_t
    mxcr_mask : X__uint32_t
    _st : X_fpxreg[8]
    _xmm : X_xmmreg[16]
    padding : X__uint32_t[24]
  end
  struct Sigcontext
    r8 : X__uint64_t
    r9 : X__uint64_t
    r10 : X__uint64_t
    r11 : X__uint64_t
    r12 : X__uint64_t
    r13 : X__uint64_t
    r14 : X__uint64_t
    r15 : X__uint64_t
    rdi : X__uint64_t
    rsi : X__uint64_t
    rbp : X__uint64_t
    rbx : X__uint64_t
    rdx : X__uint64_t
    rax : X__uint64_t
    rcx : X__uint64_t
    rsp : X__uint64_t
    rip : X__uint64_t
    eflags : X__uint64_t
    cs : UInt16
    gs : UInt16
    fs : UInt16
    __pad0 : UInt16
    err : X__uint64_t
    trapno : X__uint64_t
    oldmask : X__uint64_t
    cr2 : X__uint64_t
    anon_union_11 : AnonUnion11
                __reserved1 : X__uint64_t[8]
  end
  struct X_xsave_hdr
    xstate_bv : X__uint64_t
    reserved1 : X__uint64_t[2]
    reserved2 : X__uint64_t[5]
  end
  struct X_ymmh_state
    ymmh_space : X__uint32_t[64]
  end
  struct X_xstate
    fpstate : X_fpstate
    xstate_hdr : X_xsave_hdr
    ymmh : X_ymmh_state
  end
  struct Sigstack
    ss_sp : Void*
    ss_onstack : Int32
  end
  struct Sigaltstack
    ss_sp : Void*
    ss_flags : Int32
    ss_size : SizeT
  end
  struct X_libc_fpxreg
    significand : UInt16[4]
    exponent : UInt16
    padding : UInt16[3]
  end
  struct X_libc_xmmreg
    element : X__uint32_t[4]
  end
  struct X_libc_fpstate
    cwd : X__uint16_t
    swd : X__uint16_t
    ftw : X__uint16_t
    fop : X__uint16_t
    rip : X__uint64_t
    rdp : X__uint64_t
    mxcsr : X__uint32_t
    mxcr_mask : X__uint32_t
    _st : X_libc_fpxreg[8]
    _xmm : X_libc_xmmreg[16]
    padding : X__uint32_t[24]
  end
  struct AnonStruct4
    gregs : GregsetT
    fpregs : FpregsetT
    __reserved1 : UInt64[8]
  end
  struct Ucontext
    uc_flags : UInt64
    uc_link : Ucontext*
    uc_stack : StackT
    uc_mcontext : McontextT
    uc_sigmask : X__sigset_t
    __fpregs_mem : X_libc_fpstate
  end
  struct X__pthread_internal_list
    __prev : X__pthread_internal_list*
    __next : X__pthread_internal_list*
  end
  struct X_GBookmarkFile
    __data : UInt8[0]
  end
  struct X_GChecksum
    __data : UInt8[0]
  end
  struct X_GIConv
    __data : UInt8[0]
  end
  struct X_GData
    __data : UInt8[0]
  end
  struct X_GDate
    julian_days : Guint
    julian : Guint
    dmy : Guint
    day : Guint
    month : Guint
    year : Guint
  end
  struct X_GTimeZone
    __data : UInt8[0]
  end
  struct X_GDateTime
    __data : UInt8[0]
  end
  struct Dirent
    d_ino : X__ino_t
    d_off : X__off_t
    d_reclen : UInt16
    d_type : UInt8
    d_name : Int8[256]
  end
  struct X__dirstream
    __data : UInt8[0]
  end
  struct X_GDir
    __data : UInt8[0]
  end
  struct X_GMemVTable
    malloc : (Gsize -> Gpointer)
    realloc : ((Gpointer, Gsize) -> Gpointer)
    free : (Gpointer -> Void)
    calloc : ((Gsize, Gsize) -> Gpointer)
    try_malloc : (Gsize -> Gpointer)
    try_realloc : ((Gpointer, Gsize) -> Gpointer)
  end
  struct X_GNode
    data : Gpointer
    next : GNode*
    prev : GNode*
    parent : GNode*
    children : GNode*
  end
  struct X_GList
    data : Gpointer
    next : GList*
    prev : GList*
  end
  struct X_GHashTable
    __data : UInt8[0]
  end
  struct X_GHashTableIter
    dummy1 : Gpointer
    dummy2 : Gpointer
    dummy3 : Gpointer
    dummy4 : Int32
    dummy5 : Gboolean
    dummy6 : Gpointer
  end
  struct X_GHmac
    __data : UInt8[0]
  end
  struct X_GHook
    data : Gpointer
    next : GHook*
    prev : GHook*
    ref_count : Guint
    hook_id : Gulong
    flags : Guint
    func : Gpointer
    destroy : GDestroyNotify
  end
  struct X_GHookList
    seq_id : Gulong
    hook_size : Guint
    is_setup : Guint
    hooks : GHook*
    dummy3 : Gpointer
    finalize_hook : GHookFinalizeFunc
    dummy : Gpointer[2]
  end
  struct X_GPollFD
    fd : Gint
    events : Gushort
    revents : Gushort
  end
  struct X_GSList
    data : Gpointer
    next : GSList*
  end
  struct X_GMainContext
    __data : UInt8[0]
  end
  struct X_GMainLoop
    __data : UInt8[0]
  end
  struct X_GSource
    callback_data : Gpointer
    callback_funcs : GSourceCallbackFuncs*
    source_funcs : GSourceFuncs*
    ref_count : Guint
    context : GMainContext*
    priority : Gint
    flags : Guint
    source_id : Guint
    poll_fds : GSList*
    prev : GSource*
    next : GSource*
    name : UInt8*
    priv : GSourcePrivate*
  end
  struct X_GSourcePrivate
    __data : UInt8[0]
  end
  struct X_GSourceCallbackFuncs
    ref : (Gpointer -> Void)
    unref : (Gpointer -> Void)
    get : ((Gpointer, GSource*, GSourceFunc*, Gpointer*) -> Void)
  end
  struct X_GSourceFuncs
    prepare : ((GSource*, Gint*) -> Gboolean)
    check : (GSource* -> Gboolean)
    dispatch : ((GSource*, GSourceFunc, Gpointer) -> Gboolean)
    finalize : (GSource* -> Void)
    closure_callback : GSourceFunc
    closure_marshal : GSourceDummyMarshal
  end
  struct X_GString
    str : Gchar*
    len : Gsize
    allocated_len : Gsize
  end
  struct X_GIOChannel
    ref_count : Gint
    funcs : GIOFuncs*
    encoding : Gchar*
    read_cd : GIConv
    write_cd : GIConv
    line_term : Gchar*
    line_term_len : Guint
    buf_size : Gsize
    read_buf : GString*
    encoded_read_buf : GString*
    write_buf : GString*
    partial_write_buf : Gchar[6]
    use_buffer : Guint
    do_encode : Guint
    close_on_unref : Guint
    is_readable : Guint
    is_writeable : Guint
    is_seekable : Guint
    reserved1 : Gpointer
    reserved2 : Gpointer
  end
  struct X_GIOFuncs
    io_read : ((GIOChannel*, Gchar*, Gsize, Gsize*, GError**) -> GIOStatus)
    io_write : ((GIOChannel*, Gchar*, Gsize, Gsize*, GError**) -> GIOStatus)
    io_seek : ((GIOChannel*, Gint64, GSeekType, GError**) -> GIOStatus)
    io_close : ((GIOChannel*, GError**) -> GIOStatus)
    io_create_watch : ((GIOChannel*, GIOCondition) -> GSource*)
    io_free : (GIOChannel* -> Void)
    io_set_flags : ((GIOChannel*, GIOFlags, GError**) -> GIOStatus)
    io_get_flags : (GIOChannel* -> GIOFlags)
  end
  struct X_GKeyFile
    __data : UInt8[0]
  end
  struct X_GMappedFile
    __data : UInt8[0]
  end
  struct X_GMarkupParseContext
    __data : UInt8[0]
  end
  struct X_GMarkupParser
    start_element : ((GMarkupParseContext*, Gchar*, Gchar**, Gchar**, Gpointer, GError**) -> Void)
    end_element : ((GMarkupParseContext*, Gchar*, Gpointer, GError**) -> Void)
    text : ((GMarkupParseContext*, Gchar*, Gsize, Gpointer, GError**) -> Void)
    passthrough : ((GMarkupParseContext*, Gchar*, Gsize, Gpointer, GError**) -> Void)
    error : ((GMarkupParseContext*, GError*, Gpointer) -> Void)
  end
  struct X_GOptionContext
    __data : UInt8[0]
  end
  struct X_GOptionGroup
    __data : UInt8[0]
  end
  struct X_GOptionEntry
    long_name : Gchar*
    short_name : Gchar
    flags : Gint
    arg : GOptionArg
    arg_data : Gpointer
    description : Gchar*
    arg_description : Gchar*
  end
  struct X_GPatternSpec
    __data : UInt8[0]
  end
  struct X_GQueue
    head : GList*
    tail : GList*
    length : Guint
  end
  struct X_GRand
    __data : UInt8[0]
  end
  struct X_GRegex
    __data : UInt8[0]
  end
  struct X_GMatchInfo
    __data : UInt8[0]
  end
  struct X_GScanner
    user_data : Gpointer
    max_parse_errors : Guint
    parse_errors : Guint
    input_name : Gchar*
    qdata : GData*
    config : GScannerConfig*
    token : GTokenType
    value : GTokenValue
    line : Guint
    position : Guint
    next_token : GTokenType
    next_value : GTokenValue
    next_line : Guint
    next_position : Guint
    symbol_table : GHashTable*
    input_fd : Gint
    text : Gchar*
    text_end : Gchar*
    buffer : Gchar*
    scope_id : Guint
    msg_handler : GScannerMsgFunc
  end
  struct X_GScannerConfig
    cset_skip_characters : Gchar*
    cset_identifier_first : Gchar*
    cset_identifier_nth : Gchar*
    cpair_comment_single : Gchar*
    case_sensitive : Guint
    skip_comment_multi : Guint
    skip_comment_single : Guint
    scan_comment_multi : Guint
    scan_identifier : Guint
    scan_identifier_1char : Guint
    scan_identifier_NULL : Guint
    scan_symbols : Guint
    scan_binary : Guint
    scan_octal : Guint
    scan_float : Guint
    scan_hex : Guint
    scan_hex_dollar : Guint
    scan_string_sq : Guint
    scan_string_dq : Guint
    numbers_2_int : Guint
    int_2_float : Guint
    identifier_2_string : Guint
    char_2_token : Guint
    symbol_2_token : Guint
    scope_0_fallback : Guint
    store_int64 : Guint
    padding_dummy : Guint
  end
  struct X_GSequence
    __data : UInt8[0]
  end
  struct X_GSequenceNode
    __data : UInt8[0]
  end
  struct X_GStringChunk
    __data : UInt8[0]
  end
  struct GTestCase
    __data : UInt8[0]
  end
  struct GTestSuite
    __data : UInt8[0]
  end
  struct AnonStruct5
    test_initialized : Gboolean
    test_quick : Gboolean
    test_perf : Gboolean
    test_verbose : Gboolean
    test_quiet : Gboolean
    test_undefined : Gboolean
  end
  struct AnonStruct6
    log_type : GTestLogType
    n_strings : Guint
    strings : Gchar**
    n_nums : Guint
    nums : Float64*
  end
  struct AnonStruct7
    data : GString*
    msgs : GSList*
  end
  struct X_GThreadPool
    func : GFunc
    user_data : Gpointer
    exclusive : Gboolean
  end
  struct X_GTimer
    __data : UInt8[0]
  end
  struct X_GTrashStack
    next : GTrashStack*
  end
  struct X_GTree
    __data : UInt8[0]
  end
  struct X_GVariantType
    __data : UInt8[0]
  end
  struct X_GVariant
    __data : UInt8[0]
  end
  struct X_GVariantIter
    x : Gsize[16]
  end
  struct X_GVariantBuilder
    x : Gsize[16]
  end
  struct X_GVariantDict
    x : Gsize[16]
  end
  struct X_GAllocator
    __data : UInt8[0]
  end
  struct X_GMemChunk
    __data : UInt8[0]
  end
  struct X_GCache
    __data : UInt8[0]
  end
  struct X_GCompletion
    items : GList*
    func : GCompletionFunc
    prefix : Gchar*
    cache : GList*
    strncmp_func : GCompletionStrncmpFunc
  end
  struct X_GRelation
    __data : UInt8[0]
  end
  struct X_GTuples
    len : Guint
  end
  struct X_GThreadFunctions
    mutex_new : ( -> GMutex*)
    mutex_lock : (GMutex* -> Void)
    mutex_trylock : (GMutex* -> Gboolean)
    mutex_unlock : (GMutex* -> Void)
    mutex_free : (GMutex* -> Void)
    cond_new : ( -> GCond*)
    cond_signal : (GCond* -> Void)
    cond_broadcast : (GCond* -> Void)
    cond_wait : ((GCond*, GMutex*) -> Void)
    cond_timed_wait : ((GCond*, GMutex*, GTimeVal*) -> Gboolean)
    cond_free : (GCond* -> Void)
    private_new : (GDestroyNotify -> GPrivate*)
    private_get : (GPrivate* -> Gpointer)
    private_set : ((GPrivate*, Gpointer) -> Void)
    thread_create : ((GThreadFunc, Gpointer, Gulong, Gboolean, Gboolean, GThreadPriority, Gpointer, GError**) -> Void)
    thread_yield : ( -> Void)
    thread_join : (Gpointer -> Void)
    thread_exit : ( -> Void)
    thread_set_priority : ((Gpointer, GThreadPriority) -> Void)
    thread_self : (Gpointer -> Void)
    thread_equal : ((Gpointer, Gpointer) -> Gboolean)
  end
  struct Timeval
    tv_sec : X__time_t
    tv_usec : X__suseconds_t
  end
  struct AnonStruct8
    __fds_bits : X__fd_mask[16]
  end
  struct SchedParam
    __sched_priority : Int32
  end
  struct X__sched_param
    __sched_priority : Int32
  end
  struct AnonStruct9
    __bits : X__cpu_mask[16]
  end
  struct X_pthread_cleanup_buffer
    __routine : (Void* -> Void)
    __arg : Void*
    __canceltype : Int32
    __prev : X_pthread_cleanup_buffer*
  end
  struct AnonStruct10
        __cancel_jmp_buf : AnonStruct26*
    __pad : Void*[4]
  end
  struct X__pthread_cleanup_frame
    __cancel_routine : (Void* -> Void)
    __cancel_arg : Void*
    __do_it : Int32
    __cancel_type : Int32
  end
  struct X__jmp_buf_tag
    __data : UInt8[0]
  end
  struct AnonStruct11
    mutex : GMutex*
    unused : PthreadMutexT
  end
  struct X_GStaticRecMutex
    mutex : GStaticMutex
    depth : Guint
    anon_union_12 : AnonUnion12
    unused : AnonUnion12
  end
  struct X_GStaticRWLock
    mutex : GStaticMutex
    read_cond : GCond*
    write_cond : GCond*
    read_counter : Guint
    have_writer : Gboolean
    want_to_read : Guint
    want_to_write : Guint
  end
  struct X_GStaticPrivate
    index : Guint
  end
  struct X_GValue
    g_type : GType
    anon_union_13 : AnonUnion13
    data : AnonUnion13[2]
  end
  struct X_GTypePlugin
    __data : UInt8[0]
  end
  struct X_GTypeClass
    g_type : GType
  end
  struct X_GTypeInterface
    g_type : GType
    g_instance_type : GType
  end
  struct X_GTypeInstance
    g_class : GTypeClass*
  end
  struct X_GTypeInfo
    class_size : Guint16
    base_init : GBaseInitFunc
    base_finalize : GBaseFinalizeFunc
    class_init : GClassInitFunc
    class_finalize : GClassFinalizeFunc
    class_data : Gconstpointer
    instance_size : Guint16
    n_preallocs : Guint16
    instance_init : GInstanceInitFunc
    value_table : GTypeValueTable*
  end
  struct X_GTypeFundamentalInfo
    type_flags : GTypeFundamentalFlags
  end
  struct X_GInterfaceInfo
    interface_init : GInterfaceInitFunc
    interface_finalize : GInterfaceFinalizeFunc
    interface_data : Gpointer
  end
  struct X_GTypeValueTable
    value_init : (GValue* -> Void)
    value_free : (GValue* -> Void)
    value_copy : ((GValue*, GValue*) -> Void)
    value_peek_pointer : (GValue* -> Gpointer)
    collect_format : Gchar*
    collect_value : ((GValue*, Guint, GTypeCValue*, Guint) -> Gchar*)
    lcopy_format : Gchar*
    lcopy_value : ((GValue*, Guint, GTypeCValue*, Guint) -> Gchar*)
  end
  struct X_GTypeQuery
    type : GType
    type_name : Gchar*
    class_size : Guint
    instance_size : Guint
  end
  struct X_GParamSpec
    g_type_instance : GTypeInstance
    name : Gchar*
    flags : GParamFlags
    value_type : GType
    owner_type : GType
    _nick : Gchar*
    _blurb : Gchar*
    qdata : GData*
    ref_count : Guint
    param_id : Guint
  end
  struct X_GParamSpecClass
    g_type_class : GTypeClass
    value_type : GType
    finalize : (GParamSpec* -> Void)
    value_set_default : ((GParamSpec*, GValue*) -> Void)
    value_validate : ((GParamSpec*, GValue*) -> Gboolean)
    values_cmp : ((GParamSpec*, GValue*, GValue*) -> Gint)
    dummy : Gpointer[4]
  end
  struct X_GParameter
    name : Gchar*
    value : GValue
  end
  struct X_GParamSpecPool
    __data : UInt8[0]
  end
  struct X_GParamSpecTypeInfo
    instance_size : Guint16
    n_preallocs : Guint16
    instance_init : (GParamSpec* -> Void)
    value_type : GType
    finalize : (GParamSpec* -> Void)
    value_set_default : ((GParamSpec*, GValue*) -> Void)
    value_validate : ((GParamSpec*, GValue*) -> Gboolean)
    values_cmp : ((GParamSpec*, GValue*, GValue*) -> Gint)
  end
  struct X_GClosure
    ref_count : Guint
    meta_marshal_nouse : Guint
    n_guards : Guint
    n_fnotifiers : Guint
    n_inotifiers : Guint
    in_inotify : Guint
    floating : Guint
    derivative_flag : Guint
    in_marshal : Guint
    is_invalid : Guint
    marshal : ((GClosure*, GValue*, Guint, GValue*, Gpointer, Gpointer) -> Void)
    data : Gpointer
    notifiers : GClosureNotifyData*
  end
  struct X_GClosureNotifyData
    data : Gpointer
    notify : GClosureNotify
  end
  struct X_GCClosure
    closure : GClosure
    callback : Gpointer
  end
  struct X_GSignalQuery
    signal_id : Guint
    signal_name : Gchar*
    itype : GType
    signal_flags : GSignalFlags
    return_type : GType
    n_params : Guint
    param_types : GType*
  end
  struct X_GSignalInvocationHint
    signal_id : Guint
    detail : GQuark
    run_type : GSignalFlags
  end
  struct X_GObject
    g_type_instance : GTypeInstance
    ref_count : Guint
    qdata : GData*
  end
  struct X_GObjectClass
    g_type_class : GTypeClass
    construct_properties : GSList*
    constructor : ((GType, Guint, GObjectConstructParam*) -> GObject*)
    set_property : ((GObject*, Guint, GValue*, GParamSpec*) -> Void)
    get_property : ((GObject*, Guint, GValue*, GParamSpec*) -> Void)
    dispose : (GObject* -> Void)
    finalize : (GObject* -> Void)
    dispatch_properties_changed : ((GObject*, Guint, GParamSpec**) -> Void)
    notify : ((GObject*, GParamSpec*) -> Void)
    constructed : (GObject* -> Void)
    flags : Gsize
    pdummy : Gpointer[6]
  end
  struct X_GObjectConstructParam
    pspec : GParamSpec*
    value : GValue*
  end
  struct AnonStruct12
    anon_union_14 : AnonUnion14
    priv : AnonUnion14
  end
  struct X_GBinding
    __data : UInt8[0]
  end
  struct X_GEnumClass
    g_type_class : GTypeClass
    minimum : Gint
    maximum : Gint
    n_values : Guint
    values : GEnumValue*
  end
  struct X_GFlagsClass
    g_type_class : GTypeClass
    mask : Guint
    n_values : Guint
    values : GFlagsValue*
  end
  struct X_GEnumValue
    value : Gint
    value_name : Gchar*
    value_nick : Gchar*
  end
  struct X_GFlagsValue
    value : Guint
    value_name : Gchar*
    value_nick : Gchar*
  end
  struct X_GParamSpecChar
    parent_instance : GParamSpec
    minimum : Gint8
    maximum : Gint8
    default_value : Gint8
  end
  struct X_GParamSpecUChar
    parent_instance : GParamSpec
    minimum : Guint8
    maximum : Guint8
    default_value : Guint8
  end
  struct X_GParamSpecBoolean
    parent_instance : GParamSpec
    default_value : Gboolean
  end
  struct X_GParamSpecInt
    parent_instance : GParamSpec
    minimum : Gint
    maximum : Gint
    default_value : Gint
  end
  struct X_GParamSpecUInt
    parent_instance : GParamSpec
    minimum : Guint
    maximum : Guint
    default_value : Guint
  end
  struct X_GParamSpecLong
    parent_instance : GParamSpec
    minimum : Glong
    maximum : Glong
    default_value : Glong
  end
  struct X_GParamSpecULong
    parent_instance : GParamSpec
    minimum : Gulong
    maximum : Gulong
    default_value : Gulong
  end
  struct X_GParamSpecInt64
    parent_instance : GParamSpec
    minimum : Gint64
    maximum : Gint64
    default_value : Gint64
  end
  struct X_GParamSpecUInt64
    parent_instance : GParamSpec
    minimum : Guint64
    maximum : Guint64
    default_value : Guint64
  end
  struct X_GParamSpecUnichar
    parent_instance : GParamSpec
    default_value : Gunichar
  end
  struct X_GParamSpecEnum
    parent_instance : GParamSpec
    enum_class : GEnumClass*
    default_value : Gint
  end
  struct X_GParamSpecFlags
    parent_instance : GParamSpec
    flags_class : GFlagsClass*
    default_value : Guint
  end
  struct X_GParamSpecFloat
    parent_instance : GParamSpec
    minimum : Gfloat
    maximum : Gfloat
    default_value : Gfloat
    epsilon : Gfloat
  end
  struct X_GParamSpecDouble
    parent_instance : GParamSpec
    minimum : Gdouble
    maximum : Gdouble
    default_value : Gdouble
    epsilon : Gdouble
  end
  struct X_GParamSpecString
    parent_instance : GParamSpec
    default_value : Gchar*
    cset_first : Gchar*
    cset_nth : Gchar*
    substitutor : Gchar
    null_fold_if_empty : Guint
    ensure_non_null : Guint
  end
  struct X_GParamSpecParam
    parent_instance : GParamSpec
  end
  struct X_GParamSpecBoxed
    parent_instance : GParamSpec
  end
  struct X_GParamSpecPointer
    parent_instance : GParamSpec
  end
  struct X_GParamSpecValueArray
    parent_instance : GParamSpec
    element_spec : GParamSpec*
    fixed_n_elements : Guint
  end
  struct X_GParamSpecObject
    parent_instance : GParamSpec
  end
  struct X_GParamSpecOverride
    parent_instance : GParamSpec
    overridden : GParamSpec*
  end
  struct X_GParamSpecGType
    parent_instance : GParamSpec
    is_a_type : GType
  end
  struct X_GParamSpecVariant
    parent_instance : GParamSpec
    type : GVariantType*
    default_value : GVariant*
    padding : Gpointer[4]
  end
  struct X_GTypeModule
    parent_instance : GObject
    use_count : Guint
    type_infos : GSList*
    interface_infos : GSList*
    name : Gchar*
  end
  struct X_GTypeModuleClass
    parent_class : GObjectClass
    load : (GTypeModule* -> Gboolean)
    unload : (GTypeModule* -> Void)
    reserved1 : ( -> Void)
    reserved2 : ( -> Void)
    reserved3 : ( -> Void)
    reserved4 : ( -> Void)
  end
  struct X_GTypePluginClass
    base_iface : GTypeInterface
    use_plugin : GTypePluginUse
    unuse_plugin : GTypePluginUnuse
    complete_type_info : GTypePluginCompleteTypeInfo
    complete_interface_info : GTypePluginCompleteInterfaceInfo
  end
  struct X_GValueArray
    n_values : Guint
    values : GValue*
    n_prealloced : Guint
  end
  struct X_GAppLaunchContext
    parent_instance : GObject
    priv : GAppLaunchContextPrivate*
  end
  struct X_GAppInfo
    __data : UInt8[0]
  end
  struct X_GAsyncResult
    __data : UInt8[0]
  end
  struct X_GAsyncInitable
    __data : UInt8[0]
  end
  struct X_GBufferedInputStream
    parent_instance : GFilterInputStream
    priv : GBufferedInputStreamPrivate*
  end
  struct X_GBufferedOutputStream
    parent_instance : GFilterOutputStream
    priv : GBufferedOutputStreamPrivate*
  end
  struct X_GCancellable
    parent_instance : GObject
    priv : GCancellablePrivate*
  end
  struct X_GCharsetConverter
    __data : UInt8[0]
  end
  struct X_GConverter
    __data : UInt8[0]
  end
  struct X_GConverterInputStream
    parent_instance : GFilterInputStream
    priv : GConverterInputStreamPrivate*
  end
  struct X_GConverterOutputStream
    parent_instance : GFilterOutputStream
    priv : GConverterOutputStreamPrivate*
  end
  struct X_GDatagramBased
    __data : UInt8[0]
  end
  struct X_GDataInputStream
    parent_instance : GBufferedInputStream
    priv : GDataInputStreamPrivate*
  end
  struct X_GSimplePermission
    __data : UInt8[0]
  end
  struct X_GZlibCompressor
    __data : UInt8[0]
  end
  struct X_GZlibDecompressor
    __data : UInt8[0]
  end
  struct X_GSimpleActionGroup
    parent_instance : GObject
    priv : GSimpleActionGroupPrivate*
  end
  struct X_GRemoteActionGroup
    __data : UInt8[0]
  end
  struct X_GDBusActionGroup
    __data : UInt8[0]
  end
  struct X_GActionMap
    __data : UInt8[0]
  end
  struct X_GActionGroup
    __data : UInt8[0]
  end
  struct X_GPropertyAction
    __data : UInt8[0]
  end
  struct X_GSimpleAction
    __data : UInt8[0]
  end
  struct X_GAction
    __data : UInt8[0]
  end
  struct X_GApplication
    parent_instance : GObject
    priv : GApplicationPrivate*
  end
  struct X_GApplicationCommandLine
    parent_instance : GObject
    priv : GApplicationCommandLinePrivate*
  end
  struct X_GSettingsBackend
    __data : UInt8[0]
  end
  struct X_GSettings
    parent_instance : GObject
    priv : GSettingsPrivate*
  end
  struct X_GPermission
    parent_instance : GObject
    priv : GPermissionPrivate*
  end
  struct X_GMenuModel
    parent_instance : GObject
    priv : GMenuModelPrivate*
  end
  struct X_GNotification
    __data : UInt8[0]
  end
  struct X_GDrive
    __data : UInt8[0]
  end
  struct X_GFileEnumerator
    parent_instance : GObject
    priv : GFileEnumeratorPrivate*
  end
  struct X_GFileMonitor
    parent_instance : GObject
    priv : GFileMonitorPrivate*
  end
  struct X_GFilterInputStream
    parent_instance : GInputStream
    base_stream : GInputStream*
  end
  struct X_GFilterOutputStream
    parent_instance : GOutputStream
    base_stream : GOutputStream*
  end
  struct X_GFile
    __data : UInt8[0]
  end
  struct X_GFileInfo
    __data : UInt8[0]
  end
  struct X_GFileAttributeMatcher
    __data : UInt8[0]
  end
  struct X_GFileAttributeInfo
    name : UInt8*
    type : GFileAttributeType
    flags : GFileAttributeInfoFlags
  end
  struct X_GFileAttributeInfoList
    infos : GFileAttributeInfo*
    n_infos : Int32
  end
  struct X_GFileDescriptorBased
    __data : UInt8[0]
  end
  struct X_GFileInputStream
    parent_instance : GInputStream
    priv : GFileInputStreamPrivate*
  end
  struct X_GFileOutputStream
    parent_instance : GOutputStream
    priv : GFileOutputStreamPrivate*
  end
  struct X_GFileIOStream
    parent_instance : GIOStream
    priv : GFileIOStreamPrivate*
  end
  struct X_GFileIcon
    __data : UInt8[0]
  end
  struct X_GFilenameCompleter
    __data : UInt8[0]
  end
  struct X_GIcon
    __data : UInt8[0]
  end
  struct X_GInetAddress
    parent_instance : GObject
    priv : GInetAddressPrivate*
  end
  struct X_GInetAddressMask
    parent_instance : GObject
    priv : GInetAddressMaskPrivate*
  end
  struct X_GInetSocketAddress
    parent_instance : GSocketAddress
    priv : GInetSocketAddressPrivate*
  end
  struct X_GNativeSocketAddress
    __data : UInt8[0]
  end
  struct X_GInputStream
    parent_instance : GObject
    priv : GInputStreamPrivate*
  end
  struct X_GInitable
    __data : UInt8[0]
  end
  struct X_GIOModule
    __data : UInt8[0]
  end
  struct X_GIOExtensionPoint
    __data : UInt8[0]
  end
  struct X_GIOExtension
    __data : UInt8[0]
  end
  struct X_GIOSchedulerJob
    __data : UInt8[0]
  end
  struct X_GIOStreamAdapter
    __data : UInt8[0]
  end
  struct X_GLoadableIcon
    __data : UInt8[0]
  end
  struct X_GBytesIcon
    __data : UInt8[0]
  end
  struct X_GMemoryInputStream
    parent_instance : GInputStream
    priv : GMemoryInputStreamPrivate*
  end
  struct X_GMemoryOutputStream
    parent_instance : GOutputStream
    priv : GMemoryOutputStreamPrivate*
  end
  struct X_GMount
    __data : UInt8[0]
  end
  struct X_GMountOperation
    parent_instance : GObject
    priv : GMountOperationPrivate*
  end
  struct X_GNetworkAddress
    parent_instance : GObject
    priv : GNetworkAddressPrivate*
  end
  struct X_GNetworkMonitor
    __data : UInt8[0]
  end
  struct X_GNetworkService
    parent_instance : GObject
    priv : GNetworkServicePrivate*
  end
  struct X_GOutputStream
    parent_instance : GObject
    priv : GOutputStreamPrivate*
  end
  struct X_GIOStream
    parent_instance : GObject
    priv : GIOStreamPrivate*
  end
  struct X_GSimpleIOStream
    __data : UInt8[0]
  end
  struct X_GPollableInputStream
    __data : UInt8[0]
  end
  struct X_GPollableOutputStream
    __data : UInt8[0]
  end
  struct X_GResolver
    parent_instance : GObject
    priv : GResolverPrivate*
  end
  struct X_GResource
    __data : UInt8[0]
  end
  struct X_GSeekable
    __data : UInt8[0]
  end
  struct X_GSimpleAsyncResult
    __data : UInt8[0]
  end
  struct X_GSocket
    parent_instance : GObject
    priv : GSocketPrivate*
  end
  struct X_GSocketControlMessage
    parent_instance : GObject
    priv : GSocketControlMessagePrivate*
  end
  struct X_GSocketClient
    parent_instance : GObject
    priv : GSocketClientPrivate*
  end
  struct X_GSocketConnection
    parent_instance : GIOStream
    priv : GSocketConnectionPrivate*
  end
  struct X_GSocketListener
    parent_instance : GObject
    priv : GSocketListenerPrivate*
  end
  struct X_GSocketService
    parent_instance : GSocketListener
    priv : GSocketServicePrivate*
  end
  struct X_GSocketAddress
    parent_instance : GObject
  end
  struct X_GSocketAddressEnumerator
    parent_instance : GObject
  end
  struct X_GSocketConnectable
    __data : UInt8[0]
  end
  struct X_GSrvTarget
    __data : UInt8[0]
  end
  struct X_GTask
    __data : UInt8[0]
  end
  struct X_GTcpConnection
    parent_instance : GSocketConnection
    priv : GTcpConnectionPrivate*
  end
  struct X_GTcpWrapperConnection
    parent_instance : GTcpConnection
    priv : GTcpWrapperConnectionPrivate*
  end
  struct X_GThreadedSocketService
    parent_instance : GSocketService
    priv : GThreadedSocketServicePrivate*
  end
  struct X_GDtlsConnection
    __data : UInt8[0]
  end
  struct X_GDtlsClientConnection
    __data : UInt8[0]
  end
  struct X_GDtlsServerConnection
    __data : UInt8[0]
  end
  struct X_GThemedIcon
    __data : UInt8[0]
  end
  struct X_GTlsCertificate
    parent_instance : GObject
    priv : GTlsCertificatePrivate*
  end
  struct X_GTlsClientConnection
    __data : UInt8[0]
  end
  struct X_GTlsConnection
    parent_instance : GIOStream
    priv : GTlsConnectionPrivate*
  end
  struct X_GTlsDatabase
    parent_instance : GObject
    priv : GTlsDatabasePrivate*
  end
  struct X_GTlsFileDatabase
    __data : UInt8[0]
  end
  struct X_GTlsInteraction
    parent_instance : GObject
    priv : GTlsInteractionPrivate*
  end
  struct X_GTlsPassword
    parent_instance : GObject
    priv : GTlsPasswordPrivate*
  end
  struct X_GTlsServerConnection
    __data : UInt8[0]
  end
  struct X_GVfs
    parent_instance : GObject
  end
  struct X_GProxyResolver
    __data : UInt8[0]
  end
  struct X_GProxy
    __data : UInt8[0]
  end
  struct X_GProxyAddress
    parent_instance : GInetSocketAddress
    priv : GProxyAddressPrivate*
  end
  struct X_GProxyAddressEnumerator
    parent_instance : GSocketAddressEnumerator
    priv : GProxyAddressEnumeratorPrivate*
  end
  struct X_GVolume
    __data : UInt8[0]
  end
  struct X_GVolumeMonitor
    parent_instance : GObject
    priv : Gpointer
  end
  struct X_GInputVector
    buffer : Gpointer
    size : Gsize
  end
  struct X_GInputMessage
    address : GSocketAddress**
    vectors : GInputVector*
    num_vectors : Guint
    bytes_received : Gsize
    flags : Gint
    control_messages : GSocketControlMessage***
    num_control_messages : Guint*
  end
  struct X_GOutputVector
    buffer : Gconstpointer
    size : Gsize
  end
  struct X_GOutputMessage
    address : GSocketAddress*
    vectors : GOutputVector*
    num_vectors : Guint
    bytes_sent : Guint
    control_messages : GSocketControlMessage**
    num_control_messages : Guint
  end
  struct X_GCredentials
    __data : UInt8[0]
  end
  struct X_GUnixCredentialsMessage
    __data : UInt8[0]
  end
  struct X_GUnixFDList
    __data : UInt8[0]
  end
  struct X_GDBusMessage
    __data : UInt8[0]
  end
  struct X_GDBusConnection
    __data : UInt8[0]
  end
  struct X_GDBusProxy
    parent_instance : GObject
    priv : GDBusProxyPrivate*
  end
  struct X_GDBusMethodInvocation
    __data : UInt8[0]
  end
  struct X_GDBusServer
    __data : UInt8[0]
  end
  struct X_GDBusAuthObserver
    __data : UInt8[0]
  end
  struct X_GDBusErrorEntry
    error_code : Gint
    dbus_error_name : Gchar*
  end
  struct X_GDBusInterfaceVTable
    method_call : GDBusInterfaceMethodCallFunc
    get_property : GDBusInterfaceGetPropertyFunc
    set_property : GDBusInterfaceSetPropertyFunc
    padding : Gpointer[8]
  end
  struct X_GDBusSubtreeVTable
    enumerate : GDBusSubtreeEnumerateFunc
    introspect : GDBusSubtreeIntrospectFunc
    dispatch : GDBusSubtreeDispatchFunc
    padding : Gpointer[8]
  end
  struct X_GDBusAnnotationInfo
    ref_count : Gint
    key : Gchar*
    value : Gchar*
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusArgInfo
    ref_count : Gint
    name : Gchar*
    signature : Gchar*
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusMethodInfo
    ref_count : Gint
    name : Gchar*
    in_args : GDBusArgInfo**
    out_args : GDBusArgInfo**
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusSignalInfo
    ref_count : Gint
    name : Gchar*
    args : GDBusArgInfo**
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusPropertyInfo
    ref_count : Gint
    name : Gchar*
    signature : Gchar*
    flags : GDBusPropertyInfoFlags
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusInterfaceInfo
    ref_count : Gint
    name : Gchar*
    methods : GDBusMethodInfo**
    signals : GDBusSignalInfo**
    properties : GDBusPropertyInfo**
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusNodeInfo
    ref_count : Gint
    path : Gchar*
    interfaces : GDBusInterfaceInfo**
    nodes : GDBusNodeInfo**
    annotations : GDBusAnnotationInfo**
  end
  struct X_GDBusInterface
    __data : UInt8[0]
  end
  struct X_GDBusInterfaceSkeleton
    parent_instance : GObject
    priv : GDBusInterfaceSkeletonPrivate*
  end
  struct X_GDBusObject
    __data : UInt8[0]
  end
  struct X_GDBusObjectSkeleton
    parent_instance : GObject
    priv : GDBusObjectSkeletonPrivate*
  end
  struct X_GDBusObjectProxy
    parent_instance : GObject
    priv : GDBusObjectProxyPrivate*
  end
  struct X_GDBusObjectManager
    __data : UInt8[0]
  end
  struct X_GDBusObjectManagerClient
    parent_instance : GObject
    priv : GDBusObjectManagerClientPrivate*
  end
  struct X_GDBusObjectManagerServer
    parent_instance : GObject
    priv : GDBusObjectManagerServerPrivate*
  end
  struct X_GTestDBus
    __data : UInt8[0]
  end
  struct X_GSubprocess
    __data : UInt8[0]
  end
  struct X_GSubprocessLauncher
    __data : UInt8[0]
  end
  struct X_GActionInterface
    g_iface : GTypeInterface
    get_name : (GAction* -> Gchar*)
    get_parameter_type : (GAction* -> GVariantType*)
    get_state_type : (GAction* -> GVariantType*)
    get_state_hint : (GAction* -> GVariant*)
    get_enabled : (GAction* -> Gboolean)
    get_state : (GAction* -> GVariant*)
    change_state : ((GAction*, GVariant*) -> Void)
    activate : ((GAction*, GVariant*) -> Void)
  end
  struct X_GActionGroupInterface
    g_iface : GTypeInterface
    has_action : ((GActionGroup*, Gchar*) -> Gboolean)
    list_actions : (GActionGroup* -> Gchar**)
    get_action_enabled : ((GActionGroup*, Gchar*) -> Gboolean)
    get_action_parameter_type : ((GActionGroup*, Gchar*) -> GVariantType*)
    get_action_state_type : ((GActionGroup*, Gchar*) -> GVariantType*)
    get_action_state_hint : ((GActionGroup*, Gchar*) -> GVariant*)
    get_action_state : ((GActionGroup*, Gchar*) -> GVariant*)
    change_action_state : ((GActionGroup*, Gchar*, GVariant*) -> Void)
    activate_action : ((GActionGroup*, Gchar*, GVariant*) -> Void)
    action_added : ((GActionGroup*, Gchar*) -> Void)
    action_removed : ((GActionGroup*, Gchar*) -> Void)
    action_enabled_changed : ((GActionGroup*, Gchar*, Gboolean) -> Void)
    action_state_changed : ((GActionGroup*, Gchar*, GVariant*) -> Void)
    query_action : ((GActionGroup*, Gchar*, Gboolean*, GVariantType**, GVariantType**, GVariant**, GVariant**) -> Gboolean)
  end
  struct X_GActionMapInterface
    g_iface : GTypeInterface
    lookup_action : ((GActionMap*, Gchar*) -> GAction*)
    add_action : ((GActionMap*, GAction*) -> Void)
    remove_action : ((GActionMap*, Gchar*) -> Void)
  end
  struct X_GActionEntry
    name : Gchar*
    activate : ((GSimpleAction*, GVariant*, Gpointer) -> Void)
    parameter_type : Gchar*
    state : Gchar*
    change_state : ((GSimpleAction*, GVariant*, Gpointer) -> Void)
    padding : Gsize[3]
  end
  struct X_GAppLaunchContextClass
    parent_class : GObjectClass
    get_display : ((GAppLaunchContext*, GAppInfo*, GList*) -> UInt8*)
    get_startup_notify_id : ((GAppLaunchContext*, GAppInfo*, GList*) -> UInt8*)
    launch_failed : ((GAppLaunchContext*, UInt8*) -> Void)
    launched : ((GAppLaunchContext*, GAppInfo*, GVariant*) -> Void)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
  end
  struct X_GAppLaunchContextPrivate
    __data : UInt8[0]
  end
  struct X_GAppInfoIface
    g_iface : GTypeInterface
    dup : (GAppInfo* -> GAppInfo*)
    equal : ((GAppInfo*, GAppInfo*) -> Gboolean)
    get_id : (GAppInfo* -> UInt8*)
    get_name : (GAppInfo* -> UInt8*)
    get_description : (GAppInfo* -> UInt8*)
    get_executable : (GAppInfo* -> UInt8*)
    get_icon : (GAppInfo* -> GIcon*)
    launch : ((GAppInfo*, GList*, GAppLaunchContext*, GError**) -> Gboolean)
    supports_uris : (GAppInfo* -> Gboolean)
    supports_files : (GAppInfo* -> Gboolean)
    launch_uris : ((GAppInfo*, GList*, GAppLaunchContext*, GError**) -> Gboolean)
    should_show : (GAppInfo* -> Gboolean)
    set_as_default_for_type : ((GAppInfo*, UInt8*, GError**) -> Gboolean)
    set_as_default_for_extension : ((GAppInfo*, UInt8*, GError**) -> Gboolean)
    add_supports_type : ((GAppInfo*, UInt8*, GError**) -> Gboolean)
    can_remove_supports_type : (GAppInfo* -> Gboolean)
    remove_supports_type : ((GAppInfo*, UInt8*, GError**) -> Gboolean)
    can_delete : (GAppInfo* -> Gboolean)
    do_delete : (GAppInfo* -> Gboolean)
    get_commandline : (GAppInfo* -> UInt8*)
    get_display_name : (GAppInfo* -> UInt8*)
    set_as_last_used_for_type : ((GAppInfo*, UInt8*, GError**) -> Gboolean)
    get_supported_types : (GAppInfo* -> UInt8**)
  end
  struct X_GAppInfoMonitor
    __data : UInt8[0]
  end
  struct X_GApplicationPrivate
    __data : UInt8[0]
  end
  struct X_GApplicationClass
    parent_class : GObjectClass
    startup : (GApplication* -> Void)
    activate : (GApplication* -> Void)
    open : ((GApplication*, GFile**, Gint, Gchar*) -> Void)
    command_line : ((GApplication*, GApplicationCommandLine*) -> Int32)
    local_command_line : ((GApplication*, Gchar***, Int32*) -> Gboolean)
    before_emit : ((GApplication*, GVariant*) -> Void)
    after_emit : ((GApplication*, GVariant*) -> Void)
    add_platform_data : ((GApplication*, GVariantBuilder*) -> Void)
    quit_mainloop : (GApplication* -> Void)
    run_mainloop : (GApplication* -> Void)
    shutdown : (GApplication* -> Void)
    dbus_register : ((GApplication*, GDBusConnection*, Gchar*, GError**) -> Gboolean)
    dbus_unregister : ((GApplication*, GDBusConnection*, Gchar*) -> Void)
    handle_local_options : ((GApplication*, GVariantDict*) -> Gint)
    padding : Gpointer[8]
  end
  struct X_GApplicationCommandLinePrivate
    __data : UInt8[0]
  end
  struct X_GApplicationCommandLineClass
    parent_class : GObjectClass
    print_literal : ((GApplicationCommandLine*, Gchar*) -> Void)
    printerr_literal : ((GApplicationCommandLine*, Gchar*) -> Void)
    get_stdin : (GApplicationCommandLine* -> GInputStream*)
    padding : Gpointer[11]
  end
  struct X_GInitableIface
    g_iface : GTypeInterface
    init : ((GInitable*, GCancellable*, GError**) -> Gboolean)
  end
  struct X_GAsyncInitableIface
    g_iface : GTypeInterface
    init_async : ((GAsyncInitable*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    init_finish : ((GAsyncInitable*, GAsyncResult*, GError**) -> Gboolean)
  end
  struct X_GAsyncResultIface
    g_iface : GTypeInterface
    get_user_data : (GAsyncResult* -> Gpointer)
    get_source_object : (GAsyncResult* -> GObject*)
    is_tagged : ((GAsyncResult*, Gpointer) -> Gboolean)
  end
  struct X_GInputStreamClass
    parent_class : GObjectClass
    read_fn : ((GInputStream*, Void*, Gsize, GCancellable*, GError**) -> Gssize)
    skip : ((GInputStream*, Gsize, GCancellable*, GError**) -> Gssize)
    close_fn : ((GInputStream*, GCancellable*, GError**) -> Gboolean)
    read_async : ((GInputStream*, Void*, Gsize, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    read_finish : ((GInputStream*, GAsyncResult*, GError**) -> Gssize)
    skip_async : ((GInputStream*, Gsize, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    skip_finish : ((GInputStream*, GAsyncResult*, GError**) -> Gssize)
    close_async : ((GInputStream*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    close_finish : ((GInputStream*, GAsyncResult*, GError**) -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GInputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GFilterInputStreamClass
    parent_class : GInputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
  end
  struct X_GBufferedInputStreamClass
    parent_class : GFilterInputStreamClass
    fill : ((GBufferedInputStream*, Gssize, GCancellable*, GError**) -> Gssize)
    fill_async : ((GBufferedInputStream*, Gssize, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    fill_finish : ((GBufferedInputStream*, GAsyncResult*, GError**) -> Gssize)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GBufferedInputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GOutputStreamClass
    parent_class : GObjectClass
    write_fn : ((GOutputStream*, Void*, Gsize, GCancellable*, GError**) -> Gssize)
    splice : ((GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, GCancellable*, GError**) -> Gssize)
    flush : ((GOutputStream*, GCancellable*, GError**) -> Gboolean)
    close_fn : ((GOutputStream*, GCancellable*, GError**) -> Gboolean)
    write_async : ((GOutputStream*, Void*, Gsize, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    write_finish : ((GOutputStream*, GAsyncResult*, GError**) -> Gssize)
    splice_async : ((GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    splice_finish : ((GOutputStream*, GAsyncResult*, GError**) -> Gssize)
    flush_async : ((GOutputStream*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    flush_finish : ((GOutputStream*, GAsyncResult*, GError**) -> Gboolean)
    close_async : ((GOutputStream*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    close_finish : ((GOutputStream*, GAsyncResult*, GError**) -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
    _g_reserved7 : ( -> Void)
    _g_reserved8 : ( -> Void)
  end
  struct X_GOutputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GFilterOutputStreamClass
    parent_class : GOutputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
  end
  struct X_GBufferedOutputStreamClass
    parent_class : GFilterOutputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
  end
  struct X_GBufferedOutputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GCancellableClass
    parent_class : GObjectClass
    cancelled : (GCancellable* -> Void)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GCancellablePrivate
    __data : UInt8[0]
  end
  struct X_GConverterIface
    g_iface : GTypeInterface
    convert : ((GConverter*, Void*, Gsize, Void*, Gsize, GConverterFlags, Gsize*, Gsize*, GError**) -> GConverterResult)
    reset : (GConverter* -> Void)
  end
  struct X_GCharsetConverterClass
    parent_class : GObjectClass
  end
  struct X_GConverterInputStreamClass
    parent_class : GFilterInputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GConverterInputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GConverterOutputStreamClass
    parent_class : GFilterOutputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GConverterOutputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GCredentialsClass
    __data : UInt8[0]
  end
  struct X_GDatagramBasedInterface
    g_iface : GTypeInterface
    receive_messages : ((GDatagramBased*, GInputMessage*, Guint, Gint, Gint64, GCancellable*, GError**) -> Gint)
    send_messages : ((GDatagramBased*, GOutputMessage*, Guint, Gint, Gint64, GCancellable*, GError**) -> Gint)
    create_source : ((GDatagramBased*, GIOCondition, GCancellable*) -> GSource*)
    condition_check : ((GDatagramBased*, GIOCondition) -> GIOCondition)
    condition_wait : ((GDatagramBased*, GIOCondition, Gint64, GCancellable*, GError**) -> Gboolean)
  end
  struct X_GDataInputStreamClass
    parent_class : GBufferedInputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GDataInputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GDataOutputStream
    parent_instance : GFilterOutputStream
    priv : GDataOutputStreamPrivate*
  end
  struct X_GDataOutputStreamClass
    parent_class : GFilterOutputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GDataOutputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GDBusProxyClass
    parent_class : GObjectClass
    g_properties_changed : ((GDBusProxy*, GVariant*, Gchar**) -> Void)
    g_signal : ((GDBusProxy*, Gchar*, Gchar*, GVariant*) -> Void)
    padding : Gpointer[32]
  end
  struct X_GDBusProxyPrivate
    __data : UInt8[0]
  end
  struct X_GDriveIface
    g_iface : GTypeInterface
    changed : (GDrive* -> Void)
    disconnected : (GDrive* -> Void)
    eject_button : (GDrive* -> Void)
    get_name : (GDrive* -> UInt8*)
    get_icon : (GDrive* -> GIcon*)
    has_volumes : (GDrive* -> Gboolean)
    get_volumes : (GDrive* -> GList*)
    is_media_removable : (GDrive* -> Gboolean)
    has_media : (GDrive* -> Gboolean)
    is_media_check_automatic : (GDrive* -> Gboolean)
    can_eject : (GDrive* -> Gboolean)
    can_poll_for_media : (GDrive* -> Gboolean)
    eject : ((GDrive*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_finish : ((GDrive*, GAsyncResult*, GError**) -> Gboolean)
    poll_for_media : ((GDrive*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    poll_for_media_finish : ((GDrive*, GAsyncResult*, GError**) -> Gboolean)
    get_identifier : ((GDrive*, UInt8*) -> UInt8*)
    enumerate_identifiers : (GDrive* -> UInt8**)
    get_start_stop_type : (GDrive* -> GDriveStartStopType)
    can_start : (GDrive* -> Gboolean)
    can_start_degraded : (GDrive* -> Gboolean)
    start : ((GDrive*, GDriveStartFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    start_finish : ((GDrive*, GAsyncResult*, GError**) -> Gboolean)
    can_stop : (GDrive* -> Gboolean)
    stop : ((GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    stop_finish : ((GDrive*, GAsyncResult*, GError**) -> Gboolean)
    stop_button : (GDrive* -> Void)
    eject_with_operation : ((GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_with_operation_finish : ((GDrive*, GAsyncResult*, GError**) -> Gboolean)
    get_sort_key : (GDrive* -> Gchar*)
    get_symbolic_icon : (GDrive* -> GIcon*)
  end
  struct X_GDtlsConnectionInterface
    g_iface : GTypeInterface
    accept_certificate : ((GDtlsConnection*, GTlsCertificate*, GTlsCertificateFlags) -> Gboolean)
    handshake : ((GDtlsConnection*, GCancellable*, GError**) -> Gboolean)
    handshake_async : ((GDtlsConnection*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    handshake_finish : ((GDtlsConnection*, GAsyncResult*, GError**) -> Gboolean)
    shutdown : ((GDtlsConnection*, Gboolean, Gboolean, GCancellable*, GError**) -> Gboolean)
    shutdown_async : ((GDtlsConnection*, Gboolean, Gboolean, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    shutdown_finish : ((GDtlsConnection*, GAsyncResult*, GError**) -> Gboolean)
  end
  struct X_GDtlsClientConnectionInterface
    g_iface : GTypeInterface
  end
  struct X_GDtlsServerConnectionInterface
    g_iface : GTypeInterface
  end
  struct X_GIconIface
    g_iface : GTypeInterface
    hash : (GIcon* -> Guint)
    equal : ((GIcon*, GIcon*) -> Gboolean)
    to_tokens : ((GIcon*, GPtrArray*, Gint*) -> Gboolean)
    from_tokens : ((Gchar**, Gint, Gint, GError**) -> GIcon*)
    serialize : (GIcon* -> GVariant*)
  end
  struct X_GEmblem
    __data : UInt8[0]
  end
  struct X_GEmblemClass
    __data : UInt8[0]
  end
  struct X_GEmblemedIcon
    parent_instance : GObject
    priv : GEmblemedIconPrivate*
  end
  struct X_GEmblemedIconClass
    parent_class : GObjectClass
  end
  struct X_GEmblemedIconPrivate
    __data : UInt8[0]
  end
  struct X_GFileEnumeratorClass
    parent_class : GObjectClass
    next_file : ((GFileEnumerator*, GCancellable*, GError**) -> GFileInfo*)
    close_fn : ((GFileEnumerator*, GCancellable*, GError**) -> Gboolean)
    next_files_async : ((GFileEnumerator*, Int32, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    next_files_finish : ((GFileEnumerator*, GAsyncResult*, GError**) -> GList*)
    close_async : ((GFileEnumerator*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    close_finish : ((GFileEnumerator*, GAsyncResult*, GError**) -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
    _g_reserved7 : ( -> Void)
  end
  struct X_GFileEnumeratorPrivate
    __data : UInt8[0]
  end
  struct X_GFileIface
    g_iface : GTypeInterface
    dup : (GFile* -> GFile*)
    hash : (GFile* -> Guint)
    equal : ((GFile*, GFile*) -> Gboolean)
    is_native : (GFile* -> Gboolean)
    has_uri_scheme : ((GFile*, UInt8*) -> Gboolean)
    get_uri_scheme : (GFile* -> UInt8*)
    get_basename : (GFile* -> UInt8*)
    get_path : (GFile* -> UInt8*)
    get_uri : (GFile* -> UInt8*)
    get_parse_name : (GFile* -> UInt8*)
    get_parent : (GFile* -> GFile*)
    prefix_matches : ((GFile*, GFile*) -> Gboolean)
    get_relative_path : ((GFile*, GFile*) -> UInt8*)
    resolve_relative_path : ((GFile*, UInt8*) -> GFile*)
    get_child_for_display_name : ((GFile*, UInt8*, GError**) -> GFile*)
    enumerate_children : ((GFile*, UInt8*, GFileQueryInfoFlags, GCancellable*, GError**) -> GFileEnumerator*)
    enumerate_children_async : ((GFile*, UInt8*, GFileQueryInfoFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    enumerate_children_finish : ((GFile*, GAsyncResult*, GError**) -> GFileEnumerator*)
    query_info : ((GFile*, UInt8*, GFileQueryInfoFlags, GCancellable*, GError**) -> GFileInfo*)
    query_info_async : ((GFile*, UInt8*, GFileQueryInfoFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    query_info_finish : ((GFile*, GAsyncResult*, GError**) -> GFileInfo*)
    query_filesystem_info : ((GFile*, UInt8*, GCancellable*, GError**) -> GFileInfo*)
    query_filesystem_info_async : ((GFile*, UInt8*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    query_filesystem_info_finish : ((GFile*, GAsyncResult*, GError**) -> GFileInfo*)
    find_enclosing_mount : ((GFile*, GCancellable*, GError**) -> GMount*)
    find_enclosing_mount_async : ((GFile*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    find_enclosing_mount_finish : ((GFile*, GAsyncResult*, GError**) -> GMount*)
    set_display_name : ((GFile*, UInt8*, GCancellable*, GError**) -> GFile*)
    set_display_name_async : ((GFile*, UInt8*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    set_display_name_finish : ((GFile*, GAsyncResult*, GError**) -> GFile*)
    query_settable_attributes : ((GFile*, GCancellable*, GError**) -> GFileAttributeInfoList*)
    _query_settable_attributes_async : ( -> Void)
    _query_settable_attributes_finish : ( -> Void)
    query_writable_namespaces : ((GFile*, GCancellable*, GError**) -> GFileAttributeInfoList*)
    _query_writable_namespaces_async : ( -> Void)
    _query_writable_namespaces_finish : ( -> Void)
    set_attribute : ((GFile*, UInt8*, GFileAttributeType, Gpointer, GFileQueryInfoFlags, GCancellable*, GError**) -> Gboolean)
    set_attributes_from_info : ((GFile*, GFileInfo*, GFileQueryInfoFlags, GCancellable*, GError**) -> Gboolean)
    set_attributes_async : ((GFile*, GFileInfo*, GFileQueryInfoFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    set_attributes_finish : ((GFile*, GAsyncResult*, GFileInfo**, GError**) -> Gboolean)
    read_fn : ((GFile*, GCancellable*, GError**) -> GFileInputStream*)
    read_async : ((GFile*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    read_finish : ((GFile*, GAsyncResult*, GError**) -> GFileInputStream*)
    append_to : ((GFile*, GFileCreateFlags, GCancellable*, GError**) -> GFileOutputStream*)
    append_to_async : ((GFile*, GFileCreateFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    append_to_finish : ((GFile*, GAsyncResult*, GError**) -> GFileOutputStream*)
    create : ((GFile*, GFileCreateFlags, GCancellable*, GError**) -> GFileOutputStream*)
    create_async : ((GFile*, GFileCreateFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    create_finish : ((GFile*, GAsyncResult*, GError**) -> GFileOutputStream*)
    replace : ((GFile*, UInt8*, Gboolean, GFileCreateFlags, GCancellable*, GError**) -> GFileOutputStream*)
    replace_async : ((GFile*, UInt8*, Gboolean, GFileCreateFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    replace_finish : ((GFile*, GAsyncResult*, GError**) -> GFileOutputStream*)
    delete_file : ((GFile*, GCancellable*, GError**) -> Gboolean)
    delete_file_async : ((GFile*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    delete_file_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    trash : ((GFile*, GCancellable*, GError**) -> Gboolean)
    trash_async : ((GFile*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    trash_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    make_directory : ((GFile*, GCancellable*, GError**) -> Gboolean)
    make_directory_async : ((GFile*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    make_directory_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    make_symbolic_link : ((GFile*, UInt8*, GCancellable*, GError**) -> Gboolean)
    _make_symbolic_link_async : ( -> Void)
    _make_symbolic_link_finish : ( -> Void)
    copy : ((GFile*, GFile*, GFileCopyFlags, GCancellable*, GFileProgressCallback, Gpointer, GError**) -> Gboolean)
    copy_async : ((GFile*, GFile*, GFileCopyFlags, Int32, GCancellable*, GFileProgressCallback, Gpointer, GAsyncReadyCallback, Gpointer) -> Void)
    copy_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    move : ((GFile*, GFile*, GFileCopyFlags, GCancellable*, GFileProgressCallback, Gpointer, GError**) -> Gboolean)
    _move_async : ( -> Void)
    _move_finish : ( -> Void)
    mount_mountable : ((GFile*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    mount_mountable_finish : ((GFile*, GAsyncResult*, GError**) -> GFile*)
    unmount_mountable : ((GFile*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    unmount_mountable_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    eject_mountable : ((GFile*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_mountable_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    mount_enclosing_volume : ((GFile*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    mount_enclosing_volume_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    monitor_dir : ((GFile*, GFileMonitorFlags, GCancellable*, GError**) -> GFileMonitor*)
    monitor_file : ((GFile*, GFileMonitorFlags, GCancellable*, GError**) -> GFileMonitor*)
    open_readwrite : ((GFile*, GCancellable*, GError**) -> GFileIOStream*)
    open_readwrite_async : ((GFile*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    open_readwrite_finish : ((GFile*, GAsyncResult*, GError**) -> GFileIOStream*)
    create_readwrite : ((GFile*, GFileCreateFlags, GCancellable*, GError**) -> GFileIOStream*)
    create_readwrite_async : ((GFile*, GFileCreateFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    create_readwrite_finish : ((GFile*, GAsyncResult*, GError**) -> GFileIOStream*)
    replace_readwrite : ((GFile*, UInt8*, Gboolean, GFileCreateFlags, GCancellable*, GError**) -> GFileIOStream*)
    replace_readwrite_async : ((GFile*, UInt8*, Gboolean, GFileCreateFlags, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    replace_readwrite_finish : ((GFile*, GAsyncResult*, GError**) -> GFileIOStream*)
    start_mountable : ((GFile*, GDriveStartFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    start_mountable_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    stop_mountable : ((GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    stop_mountable_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    supports_thread_contexts : Gboolean
    unmount_mountable_with_operation : ((GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    unmount_mountable_with_operation_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    eject_mountable_with_operation : ((GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_mountable_with_operation_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    poll_mountable : ((GFile*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    poll_mountable_finish : ((GFile*, GAsyncResult*, GError**) -> Gboolean)
    measure_disk_usage : ((GFile*, GFileMeasureFlags, GCancellable*, GFileMeasureProgressCallback, Gpointer, Guint64*, Guint64*, Guint64*, GError**) -> Gboolean)
    measure_disk_usage_async : ((GFile*, GFileMeasureFlags, Gint, GCancellable*, GFileMeasureProgressCallback, Gpointer, GAsyncReadyCallback, Gpointer) -> Void)
    measure_disk_usage_finish : ((GFile*, GAsyncResult*, Guint64*, Guint64*, Guint64*, GError**) -> Gboolean)
  end
  struct X_GFileIconClass
    __data : UInt8[0]
  end
  struct X_GFileInfoClass
    __data : UInt8[0]
  end
  struct X_GFileInputStreamClass
    parent_class : GInputStreamClass
    tell : (GFileInputStream* -> Goffset)
    can_seek : (GFileInputStream* -> Gboolean)
    seek : ((GFileInputStream*, Goffset, GSeekType, GCancellable*, GError**) -> Gboolean)
    query_info : ((GFileInputStream*, UInt8*, GCancellable*, GError**) -> GFileInfo*)
    query_info_async : ((GFileInputStream*, UInt8*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    query_info_finish : ((GFileInputStream*, GAsyncResult*, GError**) -> GFileInfo*)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GFileInputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GIOStreamPrivate
    __data : UInt8[0]
  end
  struct X_GIOStreamClass
    parent_class : GObjectClass
    get_input_stream : (GIOStream* -> GInputStream*)
    get_output_stream : (GIOStream* -> GOutputStream*)
    close_fn : ((GIOStream*, GCancellable*, GError**) -> Gboolean)
    close_async : ((GIOStream*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    close_finish : ((GIOStream*, GAsyncResult*, GError**) -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
    _g_reserved7 : ( -> Void)
    _g_reserved8 : ( -> Void)
    _g_reserved9 : ( -> Void)
    _g_reserved10 : ( -> Void)
  end
  struct X_GFileIOStreamClass
    parent_class : GIOStreamClass
    tell : (GFileIOStream* -> Goffset)
    can_seek : (GFileIOStream* -> Gboolean)
    seek : ((GFileIOStream*, Goffset, GSeekType, GCancellable*, GError**) -> Gboolean)
    can_truncate : (GFileIOStream* -> Gboolean)
    truncate_fn : ((GFileIOStream*, Goffset, GCancellable*, GError**) -> Gboolean)
    query_info : ((GFileIOStream*, UInt8*, GCancellable*, GError**) -> GFileInfo*)
    query_info_async : ((GFileIOStream*, UInt8*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    query_info_finish : ((GFileIOStream*, GAsyncResult*, GError**) -> GFileInfo*)
    get_etag : (GFileIOStream* -> UInt8*)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GFileIOStreamPrivate
    __data : UInt8[0]
  end
  struct X_GFileMonitorClass
    parent_class : GObjectClass
    changed : ((GFileMonitor*, GFile*, GFile*, GFileMonitorEvent) -> Void)
    cancel : (GFileMonitor* -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GFileMonitorPrivate
    __data : UInt8[0]
  end
  struct X_GFilenameCompleterClass
    parent_class : GObjectClass
    got_completion_data : (GFilenameCompleter* -> Void)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
  end
  struct X_GFileOutputStreamClass
    parent_class : GOutputStreamClass
    tell : (GFileOutputStream* -> Goffset)
    can_seek : (GFileOutputStream* -> Gboolean)
    seek : ((GFileOutputStream*, Goffset, GSeekType, GCancellable*, GError**) -> Gboolean)
    can_truncate : (GFileOutputStream* -> Gboolean)
    truncate_fn : ((GFileOutputStream*, Goffset, GCancellable*, GError**) -> Gboolean)
    query_info : ((GFileOutputStream*, UInt8*, GCancellable*, GError**) -> GFileInfo*)
    query_info_async : ((GFileOutputStream*, UInt8*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    query_info_finish : ((GFileOutputStream*, GAsyncResult*, GError**) -> GFileInfo*)
    get_etag : (GFileOutputStream* -> UInt8*)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GFileOutputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GInetAddressClass
    parent_class : GObjectClass
    to_string : (GInetAddress* -> Gchar*)
    to_bytes : (GInetAddress* -> Guint8*)
  end
  struct X_GInetAddressPrivate
    __data : UInt8[0]
  end
  struct X_GInetAddressMaskClass
    parent_class : GObjectClass
  end
  struct X_GInetAddressMaskPrivate
    __data : UInt8[0]
  end
  struct X_GSocketAddressClass
    parent_class : GObjectClass
    get_family : (GSocketAddress* -> GSocketFamily)
    get_native_size : (GSocketAddress* -> Gssize)
    to_native : ((GSocketAddress*, Gpointer, Gsize, GError**) -> Gboolean)
  end
  struct X_GInetSocketAddressClass
    parent_class : GSocketAddressClass
  end
  struct X_GInetSocketAddressPrivate
    __data : UInt8[0]
  end
  struct X_GModule
    __data : UInt8[0]
  end
  struct X_GIOModuleScope
    __data : UInt8[0]
  end
  struct X_GIOModuleClass
    __data : UInt8[0]
  end
  struct X_GLoadableIconIface
    g_iface : GTypeInterface
    load : ((GLoadableIcon*, Int32, UInt8**, GCancellable*, GError**) -> GInputStream*)
    load_async : ((GLoadableIcon*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    load_finish : ((GLoadableIcon*, GAsyncResult*, UInt8**, GError**) -> GInputStream*)
  end
  struct X_GMemoryInputStreamClass
    parent_class : GInputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GMemoryInputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GMemoryOutputStreamClass
    parent_class : GOutputStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GMemoryOutputStreamPrivate
    __data : UInt8[0]
  end
  struct X_GMountIface
    g_iface : GTypeInterface
    changed : (GMount* -> Void)
    unmounted : (GMount* -> Void)
    get_root : (GMount* -> GFile*)
    get_name : (GMount* -> UInt8*)
    get_icon : (GMount* -> GIcon*)
    get_uuid : (GMount* -> UInt8*)
    get_volume : (GMount* -> GVolume*)
    get_drive : (GMount* -> GDrive*)
    can_unmount : (GMount* -> Gboolean)
    can_eject : (GMount* -> Gboolean)
    unmount : ((GMount*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    unmount_finish : ((GMount*, GAsyncResult*, GError**) -> Gboolean)
    eject : ((GMount*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_finish : ((GMount*, GAsyncResult*, GError**) -> Gboolean)
    remount : ((GMount*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    remount_finish : ((GMount*, GAsyncResult*, GError**) -> Gboolean)
    guess_content_type : ((GMount*, Gboolean, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    guess_content_type_finish : ((GMount*, GAsyncResult*, GError**) -> Gchar**)
    guess_content_type_sync : ((GMount*, Gboolean, GCancellable*, GError**) -> Gchar**)
    pre_unmount : (GMount* -> Void)
    unmount_with_operation : ((GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    unmount_with_operation_finish : ((GMount*, GAsyncResult*, GError**) -> Gboolean)
    eject_with_operation : ((GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_with_operation_finish : ((GMount*, GAsyncResult*, GError**) -> Gboolean)
    get_default_location : (GMount* -> GFile*)
    get_sort_key : (GMount* -> Gchar*)
    get_symbolic_icon : (GMount* -> GIcon*)
  end
  struct X_GMountOperationClass
    parent_class : GObjectClass
    ask_password : ((GMountOperation*, UInt8*, UInt8*, UInt8*, GAskPasswordFlags) -> Void)
    ask_question : ((GMountOperation*, UInt8*, UInt8**) -> Void)
    reply : ((GMountOperation*, GMountOperationResult) -> Void)
    aborted : (GMountOperation* -> Void)
    show_processes : ((GMountOperation*, Gchar*, GArray*, Gchar**) -> Void)
    show_unmount_progress : ((GMountOperation*, Gchar*, Gint64, Gint64) -> Void)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
    _g_reserved7 : ( -> Void)
    _g_reserved8 : ( -> Void)
    _g_reserved9 : ( -> Void)
  end
  struct X_GMountOperationPrivate
    __data : UInt8[0]
  end
  struct X_GVolumeMonitorClass
    parent_class : GObjectClass
    volume_added : ((GVolumeMonitor*, GVolume*) -> Void)
    volume_removed : ((GVolumeMonitor*, GVolume*) -> Void)
    volume_changed : ((GVolumeMonitor*, GVolume*) -> Void)
    mount_added : ((GVolumeMonitor*, GMount*) -> Void)
    mount_removed : ((GVolumeMonitor*, GMount*) -> Void)
    mount_pre_unmount : ((GVolumeMonitor*, GMount*) -> Void)
    mount_changed : ((GVolumeMonitor*, GMount*) -> Void)
    drive_connected : ((GVolumeMonitor*, GDrive*) -> Void)
    drive_disconnected : ((GVolumeMonitor*, GDrive*) -> Void)
    drive_changed : ((GVolumeMonitor*, GDrive*) -> Void)
    is_supported : ( -> Gboolean)
    get_connected_drives : (GVolumeMonitor* -> GList*)
    get_volumes : (GVolumeMonitor* -> GList*)
    get_mounts : (GVolumeMonitor* -> GList*)
    get_volume_for_uuid : ((GVolumeMonitor*, UInt8*) -> GVolume*)
    get_mount_for_uuid : ((GVolumeMonitor*, UInt8*) -> GMount*)
    adopt_orphan_mount : ((GMount*, GVolumeMonitor*) -> GVolume*)
    drive_eject_button : ((GVolumeMonitor*, GDrive*) -> Void)
    drive_stop_button : ((GVolumeMonitor*, GDrive*) -> Void)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
  end
  struct X_GNativeVolumeMonitor
    parent_instance : GVolumeMonitor
  end
  struct X_GNativeVolumeMonitorClass
    parent_class : GVolumeMonitorClass
    get_mount_for_mount_path : ((UInt8*, GCancellable*) -> GMount*)
  end
  struct X_GNetworkAddressClass
    parent_class : GObjectClass
  end
  struct X_GNetworkAddressPrivate
    __data : UInt8[0]
  end
  struct X_GNetworkMonitorInterface
    g_iface : GTypeInterface
    network_changed : ((GNetworkMonitor*, Gboolean) -> Void)
    can_reach : ((GNetworkMonitor*, GSocketConnectable*, GCancellable*, GError**) -> Gboolean)
    can_reach_async : ((GNetworkMonitor*, GSocketConnectable*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    can_reach_finish : ((GNetworkMonitor*, GAsyncResult*, GError**) -> Gboolean)
  end
  struct X_GNetworkServiceClass
    parent_class : GObjectClass
  end
  struct X_GNetworkServicePrivate
    __data : UInt8[0]
  end
  struct X_GPermissionPrivate
    __data : UInt8[0]
  end
  struct X_GPermissionClass
    parent_class : GObjectClass
    acquire : ((GPermission*, GCancellable*, GError**) -> Gboolean)
    acquire_async : ((GPermission*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    acquire_finish : ((GPermission*, GAsyncResult*, GError**) -> Gboolean)
    release : ((GPermission*, GCancellable*, GError**) -> Gboolean)
    release_async : ((GPermission*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    release_finish : ((GPermission*, GAsyncResult*, GError**) -> Gboolean)
    reserved : Gpointer[16]
  end
  struct X_GPollableInputStreamInterface
    g_iface : GTypeInterface
    can_poll : (GPollableInputStream* -> Gboolean)
    is_readable : (GPollableInputStream* -> Gboolean)
    create_source : ((GPollableInputStream*, GCancellable*) -> GSource*)
    read_nonblocking : ((GPollableInputStream*, Void*, Gsize, GError**) -> Gssize)
  end
  struct X_GPollableOutputStreamInterface
    g_iface : GTypeInterface
    can_poll : (GPollableOutputStream* -> Gboolean)
    is_writable : (GPollableOutputStream* -> Gboolean)
    create_source : ((GPollableOutputStream*, GCancellable*) -> GSource*)
    write_nonblocking : ((GPollableOutputStream*, Void*, Gsize, GError**) -> Gssize)
  end
  struct X_GProxyInterface
    g_iface : GTypeInterface
    connect : ((GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GError**) -> GIOStream*)
    connect_async : ((GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    connect_finish : ((GProxy*, GAsyncResult*, GError**) -> GIOStream*)
    supports_hostname : (GProxy* -> Gboolean)
  end
  struct X_GProxyAddressClass
    parent_class : GInetSocketAddressClass
  end
  struct X_GProxyAddressPrivate
    __data : UInt8[0]
  end
  struct X_GSocketAddressEnumeratorClass
    parent_class : GObjectClass
    next : ((GSocketAddressEnumerator*, GCancellable*, GError**) -> GSocketAddress*)
    next_async : ((GSocketAddressEnumerator*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    next_finish : ((GSocketAddressEnumerator*, GAsyncResult*, GError**) -> GSocketAddress*)
  end
  struct X_GProxyAddressEnumeratorClass
    parent_class : GSocketAddressEnumeratorClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
    _g_reserved7 : ( -> Void)
  end
  struct X_GProxyAddressEnumeratorPrivate
    __data : UInt8[0]
  end
  struct X_GProxyResolverInterface
    g_iface : GTypeInterface
    is_supported : (GProxyResolver* -> Gboolean)
    lookup : ((GProxyResolver*, Gchar*, GCancellable*, GError**) -> Gchar**)
    lookup_async : ((GProxyResolver*, Gchar*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_finish : ((GProxyResolver*, GAsyncResult*, GError**) -> Gchar**)
  end
  struct X_GResolverPrivate
    __data : UInt8[0]
  end
  struct X_GResolverClass
    parent_class : GObjectClass
    reload : (GResolver* -> Void)
    lookup_by_name : ((GResolver*, Gchar*, GCancellable*, GError**) -> GList*)
    lookup_by_name_async : ((GResolver*, Gchar*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_by_name_finish : ((GResolver*, GAsyncResult*, GError**) -> GList*)
    lookup_by_address : ((GResolver*, GInetAddress*, GCancellable*, GError**) -> Gchar*)
    lookup_by_address_async : ((GResolver*, GInetAddress*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_by_address_finish : ((GResolver*, GAsyncResult*, GError**) -> Gchar*)
    lookup_service : ((GResolver*, Gchar*, GCancellable*, GError**) -> GList*)
    lookup_service_async : ((GResolver*, Gchar*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_service_finish : ((GResolver*, GAsyncResult*, GError**) -> GList*)
    lookup_records : ((GResolver*, Gchar*, GResolverRecordType, GCancellable*, GError**) -> GList*)
    lookup_records_async : ((GResolver*, Gchar*, GResolverRecordType, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_records_finish : ((GResolver*, GAsyncResult*, GError**) -> GList*)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
  end
  struct X_GStaticResource
    data : Guint8*
    data_len : Gsize
    resource : GResource*
    next : GStaticResource*
    padding : Gpointer
  end
  struct X_GSeekableIface
    g_iface : GTypeInterface
    tell : (GSeekable* -> Goffset)
    can_seek : (GSeekable* -> Gboolean)
    seek : ((GSeekable*, Goffset, GSeekType, GCancellable*, GError**) -> Gboolean)
    can_truncate : (GSeekable* -> Gboolean)
    truncate_fn : ((GSeekable*, Goffset, GCancellable*, GError**) -> Gboolean)
  end
  struct X_GSettingsSchemaSource
    __data : UInt8[0]
  end
  struct X_GSettingsSchema
    __data : UInt8[0]
  end
  struct X_GSettingsSchemaKey
    __data : UInt8[0]
  end
  struct X_GSettingsPrivate
    __data : UInt8[0]
  end
  struct X_GSettingsClass
    parent_class : GObjectClass
    writable_changed : ((GSettings*, Gchar*) -> Void)
    changed : ((GSettings*, Gchar*) -> Void)
    writable_change_event : ((GSettings*, GQuark) -> Gboolean)
    change_event : ((GSettings*, GQuark*, Gint) -> Gboolean)
    padding : Gpointer[20]
  end
  struct X_GSimpleActionGroupPrivate
    __data : UInt8[0]
  end
  struct X_GSimpleActionGroupClass
    parent_class : GObjectClass
    padding : Gpointer[12]
  end
  struct X_GSimpleAsyncResultClass
    __data : UInt8[0]
  end
  struct X_GSocketClientPrivate
    __data : UInt8[0]
  end
  struct X_GSocketClientClass
    parent_class : GObjectClass
    event : ((GSocketClient*, GSocketClientEvent, GSocketConnectable*, GIOStream*) -> Void)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
  end
  struct X_GSocketConnectableIface
    g_iface : GTypeInterface
    enumerate : (GSocketConnectable* -> GSocketAddressEnumerator*)
    proxy_enumerate : (GSocketConnectable* -> GSocketAddressEnumerator*)
    to_string : (GSocketConnectable* -> Gchar*)
  end
  struct X_GSocketPrivate
    __data : UInt8[0]
  end
  struct X_GSocketClass
    parent_class : GObjectClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
    _g_reserved7 : ( -> Void)
    _g_reserved8 : ( -> Void)
    _g_reserved9 : ( -> Void)
    _g_reserved10 : ( -> Void)
  end
  struct X_GSocketConnectionPrivate
    __data : UInt8[0]
  end
  struct X_GSocketConnectionClass
    parent_class : GIOStreamClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
  end
  struct X_GSocketControlMessagePrivate
    __data : UInt8[0]
  end
  struct X_GSocketControlMessageClass
    parent_class : GObjectClass
    get_size : (GSocketControlMessage* -> Gsize)
    get_level : (GSocketControlMessage* -> Int32)
    get_type : (GSocketControlMessage* -> Int32)
    serialize : ((GSocketControlMessage*, Gpointer) -> Void)
    deserialize : ((Int32, Int32, Gsize, Gpointer) -> GSocketControlMessage*)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GSocketListenerPrivate
    __data : UInt8[0]
  end
  struct X_GSocketListenerClass
    parent_class : GObjectClass
    changed : (GSocketListener* -> Void)
    event : ((GSocketListener*, GSocketListenerEvent*, GSocket*) -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
  end
  struct X_GSocketServicePrivate
    __data : UInt8[0]
  end
  struct X_GSocketServiceClass
    parent_class : GSocketListenerClass
    incoming : ((GSocketService*, GSocketConnection*, GObject*) -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
  end
  struct X_GSimpleProxyResolver
    parent_instance : GObject
    priv : GSimpleProxyResolverPrivate*
  end
  struct X_GSimpleProxyResolverPrivate
    __data : UInt8[0]
  end
  struct X_GSimpleProxyResolverClass
    parent_class : GObjectClass
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GTaskClass
    __data : UInt8[0]
  end
  struct X_GTcpConnectionPrivate
    __data : UInt8[0]
  end
  struct X_GTcpConnectionClass
    parent_class : GSocketConnectionClass
  end
  struct X_GTcpWrapperConnectionPrivate
    __data : UInt8[0]
  end
  struct X_GTcpWrapperConnectionClass
    parent_class : GTcpConnectionClass
  end
  struct X_GThemedIconClass
    __data : UInt8[0]
  end
  struct X_GThreadedSocketServicePrivate
    __data : UInt8[0]
  end
  struct X_GThreadedSocketServiceClass
    parent_class : GSocketServiceClass
    run : ((GThreadedSocketService*, GSocketConnection*, GObject*) -> Gboolean)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
  end
  struct X_GTlsBackend
    __data : UInt8[0]
  end
  struct X_GTlsBackendInterface
    g_iface : GTypeInterface
    supports_tls : (GTlsBackend* -> Gboolean)
    get_certificate_type : ( -> GType)
    get_client_connection_type : ( -> GType)
    get_server_connection_type : ( -> GType)
    get_file_database_type : ( -> GType)
    get_default_database : (GTlsBackend* -> GTlsDatabase*)
    supports_dtls : (GTlsBackend* -> Gboolean)
    get_dtls_client_connection_type : ( -> GType)
    get_dtls_server_connection_type : ( -> GType)
  end
  struct X_GTlsCertificateClass
    parent_class : GObjectClass
    verify : ((GTlsCertificate*, GSocketConnectable*, GTlsCertificate*) -> GTlsCertificateFlags)
    padding : Gpointer[8]
  end
  struct X_GTlsCertificatePrivate
    __data : UInt8[0]
  end
  struct X_GTlsConnectionClass
    parent_class : GIOStreamClass
    accept_certificate : ((GTlsConnection*, GTlsCertificate*, GTlsCertificateFlags) -> Gboolean)
    handshake : ((GTlsConnection*, GCancellable*, GError**) -> Gboolean)
    handshake_async : ((GTlsConnection*, Int32, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    handshake_finish : ((GTlsConnection*, GAsyncResult*, GError**) -> Gboolean)
    padding : Gpointer[8]
  end
  struct X_GTlsConnectionPrivate
    __data : UInt8[0]
  end
  struct X_GTlsClientConnectionInterface
    g_iface : GTypeInterface
    copy_session_state : ((GTlsClientConnection*, GTlsClientConnection*) -> Void)
  end
  struct X_GTlsDatabaseClass
    parent_class : GObjectClass
    verify_chain : ((GTlsDatabase*, GTlsCertificate*, Gchar*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GError**) -> GTlsCertificateFlags)
    verify_chain_async : ((GTlsDatabase*, GTlsCertificate*, Gchar*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    verify_chain_finish : ((GTlsDatabase*, GAsyncResult*, GError**) -> GTlsCertificateFlags)
    create_certificate_handle : ((GTlsDatabase*, GTlsCertificate*) -> Gchar*)
    lookup_certificate_for_handle : ((GTlsDatabase*, Gchar*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**) -> GTlsCertificate*)
    lookup_certificate_for_handle_async : ((GTlsDatabase*, Gchar*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_certificate_for_handle_finish : ((GTlsDatabase*, GAsyncResult*, GError**) -> GTlsCertificate*)
    lookup_certificate_issuer : ((GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**) -> GTlsCertificate*)
    lookup_certificate_issuer_async : ((GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_certificate_issuer_finish : ((GTlsDatabase*, GAsyncResult*, GError**) -> GTlsCertificate*)
    lookup_certificates_issued_by : ((GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**) -> GList*)
    lookup_certificates_issued_by_async : ((GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    lookup_certificates_issued_by_finish : ((GTlsDatabase*, GAsyncResult*, GError**) -> GList*)
    padding : Gpointer[16]
  end
  struct X_GTlsDatabasePrivate
    __data : UInt8[0]
  end
  struct X_GTlsFileDatabaseInterface
    g_iface : GTypeInterface
    padding : Gpointer[8]
  end
  struct X_GTlsInteractionClass
    parent_class : GObjectClass
    ask_password : ((GTlsInteraction*, GTlsPassword*, GCancellable*, GError**) -> GTlsInteractionResult)
    ask_password_async : ((GTlsInteraction*, GTlsPassword*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    ask_password_finish : ((GTlsInteraction*, GAsyncResult*, GError**) -> GTlsInteractionResult)
    request_certificate : ((GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, GError**) -> GTlsInteractionResult)
    request_certificate_async : ((GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    request_certificate_finish : ((GTlsInteraction*, GAsyncResult*, GError**) -> GTlsInteractionResult)
    padding : Gpointer[21]
  end
  struct X_GTlsInteractionPrivate
    __data : UInt8[0]
  end
  struct X_GTlsServerConnectionInterface
    g_iface : GTypeInterface
  end
  struct X_GTlsPasswordClass
    parent_class : GObjectClass
    get_value : ((GTlsPassword*, Gsize*) -> Guchar*)
    set_value : ((GTlsPassword*, Guchar*, Gssize, GDestroyNotify) -> Void)
    get_default_warning : (GTlsPassword* -> Gchar*)
    padding : Gpointer[4]
  end
  struct X_GTlsPasswordPrivate
    __data : UInt8[0]
  end
  struct X_GVfsClass
    parent_class : GObjectClass
    is_active : (GVfs* -> Gboolean)
    get_file_for_path : ((GVfs*, UInt8*) -> GFile*)
    get_file_for_uri : ((GVfs*, UInt8*) -> GFile*)
    get_supported_uri_schemes : (GVfs* -> Gchar**)
    parse_name : ((GVfs*, UInt8*) -> GFile*)
    local_file_add_info : ((GVfs*, UInt8*, Guint64, GFileAttributeMatcher*, GFileInfo*, GCancellable*, Gpointer*, GDestroyNotify*) -> Void)
    add_writable_namespaces : ((GVfs*, GFileAttributeInfoList*) -> Void)
    local_file_set_attributes : ((GVfs*, UInt8*, GFileInfo*, GFileQueryInfoFlags, GCancellable*, GError**) -> Gboolean)
    local_file_removed : ((GVfs*, UInt8*) -> Void)
    local_file_moved : ((GVfs*, UInt8*, UInt8*) -> Void)
    deserialize_icon : ((GVfs*, GVariant*) -> GIcon*)
    _g_reserved1 : ( -> Void)
    _g_reserved2 : ( -> Void)
    _g_reserved3 : ( -> Void)
    _g_reserved4 : ( -> Void)
    _g_reserved5 : ( -> Void)
    _g_reserved6 : ( -> Void)
  end
  struct X_GVolumeIface
    g_iface : GTypeInterface
    changed : (GVolume* -> Void)
    removed : (GVolume* -> Void)
    get_name : (GVolume* -> UInt8*)
    get_icon : (GVolume* -> GIcon*)
    get_uuid : (GVolume* -> UInt8*)
    get_drive : (GVolume* -> GDrive*)
    get_mount : (GVolume* -> GMount*)
    can_mount : (GVolume* -> Gboolean)
    can_eject : (GVolume* -> Gboolean)
    mount_fn : ((GVolume*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    mount_finish : ((GVolume*, GAsyncResult*, GError**) -> Gboolean)
    eject : ((GVolume*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_finish : ((GVolume*, GAsyncResult*, GError**) -> Gboolean)
    get_identifier : ((GVolume*, UInt8*) -> UInt8*)
    enumerate_identifiers : (GVolume* -> UInt8**)
    should_automount : (GVolume* -> Gboolean)
    get_activation_root : (GVolume* -> GFile*)
    eject_with_operation : ((GVolume*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, Gpointer) -> Void)
    eject_with_operation_finish : ((GVolume*, GAsyncResult*, GError**) -> Gboolean)
    get_sort_key : (GVolume* -> Gchar*)
    get_symbolic_icon : (GVolume* -> GIcon*)
  end
  struct X_GZlibCompressorClass
    parent_class : GObjectClass
  end
  struct X_GZlibDecompressorClass
    parent_class : GObjectClass
  end
  struct X_GDBusInterfaceIface
    parent_iface : GTypeInterface
    get_info : (GDBusInterface* -> GDBusInterfaceInfo*)
    get_object : (GDBusInterface* -> GDBusObject*)
    set_object : ((GDBusInterface*, GDBusObject*) -> Void)
    dup_object : (GDBusInterface* -> GDBusObject*)
  end
  struct X_GDBusInterfaceSkeletonClass
    parent_class : GObjectClass
    get_info : (GDBusInterfaceSkeleton* -> GDBusInterfaceInfo*)
    get_vtable : (GDBusInterfaceSkeleton* -> GDBusInterfaceVTable*)
    get_properties : (GDBusInterfaceSkeleton* -> GVariant*)
    flush : (GDBusInterfaceSkeleton* -> Void)
    vfunc_padding : Gpointer[8]
    g_authorize_method : ((GDBusInterfaceSkeleton*, GDBusMethodInvocation*) -> Gboolean)
    signal_padding : Gpointer[8]
  end
  struct X_GDBusInterfaceSkeletonPrivate
    __data : UInt8[0]
  end
  struct X_GDBusObjectIface
    parent_iface : GTypeInterface
    get_object_path : (GDBusObject* -> Gchar*)
    get_interfaces : (GDBusObject* -> GList*)
    get_interface : ((GDBusObject*, Gchar*) -> GDBusInterface*)
    interface_added : ((GDBusObject*, GDBusInterface*) -> Void)
    interface_removed : ((GDBusObject*, GDBusInterface*) -> Void)
  end
  struct X_GDBusObjectSkeletonClass
    parent_class : GObjectClass
    authorize_method : ((GDBusObjectSkeleton*, GDBusInterfaceSkeleton*, GDBusMethodInvocation*) -> Gboolean)
    padding : Gpointer[8]
  end
  struct X_GDBusObjectSkeletonPrivate
    __data : UInt8[0]
  end
  struct X_GDBusObjectProxyClass
    parent_class : GObjectClass
    padding : Gpointer[8]
  end
  struct X_GDBusObjectProxyPrivate
    __data : UInt8[0]
  end
  struct X_GDBusObjectManagerIface
    parent_iface : GTypeInterface
    get_object_path : (GDBusObjectManager* -> Gchar*)
    get_objects : (GDBusObjectManager* -> GList*)
    get_object : ((GDBusObjectManager*, Gchar*) -> GDBusObject*)
    get_interface : ((GDBusObjectManager*, Gchar*, Gchar*) -> GDBusInterface*)
    object_added : ((GDBusObjectManager*, GDBusObject*) -> Void)
    object_removed : ((GDBusObjectManager*, GDBusObject*) -> Void)
    interface_added : ((GDBusObjectManager*, GDBusObject*, GDBusInterface*) -> Void)
    interface_removed : ((GDBusObjectManager*, GDBusObject*, GDBusInterface*) -> Void)
  end
  struct X_GDBusObjectManagerClientClass
    parent_class : GObjectClass
    interface_proxy_signal : ((GDBusObjectManagerClient*, GDBusObjectProxy*, GDBusProxy*, Gchar*, Gchar*, GVariant*) -> Void)
    interface_proxy_properties_changed : ((GDBusObjectManagerClient*, GDBusObjectProxy*, GDBusProxy*, GVariant*, Gchar**) -> Void)
    padding : Gpointer[8]
  end
  struct X_GDBusObjectManagerClientPrivate
    __data : UInt8[0]
  end
  struct X_GDBusObjectManagerServerClass
    parent_class : GObjectClass
    padding : Gpointer[8]
  end
  struct X_GDBusObjectManagerServerPrivate
    __data : UInt8[0]
  end
  struct X_GRemoteActionGroupInterface
    g_iface : GTypeInterface
    activate_action_full : ((GRemoteActionGroup*, Gchar*, GVariant*, GVariant*) -> Void)
    change_action_state_full : ((GRemoteActionGroup*, Gchar*, GVariant*, GVariant*) -> Void)
  end
  struct X_GMenuModelPrivate
    __data : UInt8[0]
  end
  struct X_GMenuModelClass
    parent_class : GObjectClass
    is_mutable : (GMenuModel* -> Gboolean)
    get_n_items : (GMenuModel* -> Gint)
    get_item_attributes : ((GMenuModel*, Gint, GHashTable**) -> Void)
    iterate_item_attributes : ((GMenuModel*, Gint) -> GMenuAttributeIter*)
    get_item_attribute_value : ((GMenuModel*, Gint, Gchar*, GVariantType*) -> GVariant*)
    get_item_links : ((GMenuModel*, Gint, GHashTable**) -> Void)
    iterate_item_links : ((GMenuModel*, Gint) -> GMenuLinkIter*)
    get_item_link : ((GMenuModel*, Gint, Gchar*) -> GMenuModel*)
  end
  struct X_GMenuAttributeIterPrivate
    __data : UInt8[0]
  end
  struct X_GMenuAttributeIterClass
    parent_class : GObjectClass
    get_next : ((GMenuAttributeIter*, Gchar**, GVariant**) -> Gboolean)
  end
  struct X_GMenuAttributeIter
    parent_instance : GObject
    priv : GMenuAttributeIterPrivate*
  end
  struct X_GMenuLinkIterPrivate
    __data : UInt8[0]
  end
  struct X_GMenuLinkIterClass
    parent_class : GObjectClass
    get_next : ((GMenuLinkIter*, Gchar**, GMenuModel**) -> Gboolean)
  end
  struct X_GMenuLinkIter
    parent_instance : GObject
    priv : GMenuLinkIterPrivate*
  end
  struct X_GMenuItem
    __data : UInt8[0]
  end
  struct X_GMenu
    __data : UInt8[0]
  end
  struct X_GDBusMenuModel
    __data : UInt8[0]
  end
  struct X_GListModel
    __data : UInt8[0]
  end
  struct X_GListModelInterface
    g_iface : GTypeInterface
    get_item_type : (GListModel* -> GType)
    get_n_items : (GListModel* -> Guint)
    get_item : ((GListModel*, Guint) -> Gpointer)
  end
  struct X_GListStore
    __data : UInt8[0]
  end
  struct AnonStruct13
    parent_class : GObjectClass
  end
  struct X_PangoCoverage
    __data : UInt8[0]
  end
  struct X_PangoLogAttr
    is_line_break : Guint
    is_mandatory_break : Guint
    is_char_break : Guint
    is_white : Guint
    is_cursor_position : Guint
    is_word_start : Guint
    is_word_end : Guint
    is_sentence_boundary : Guint
    is_sentence_start : Guint
    is_sentence_end : Guint
    backspace_deletes_character : Guint
    is_expandable_space : Guint
    is_word_boundary : Guint
  end
  struct X_PangoEngineLang
    __data : UInt8[0]
  end
  struct X_PangoEngineShape
    __data : UInt8[0]
  end
  struct X_PangoFont
    __data : UInt8[0]
  end
  struct X_PangoFontMap
    __data : UInt8[0]
  end
  struct X_PangoRectangle
    x : Int32
    y : Int32
    width : Int32
    height : Int32
  end
  struct X_PangoMatrix
    xx : Float64
    xy : Float64
    yx : Float64
    yy : Float64
    x0 : Float64
    y0 : Float64
  end
  struct X_PangoScriptIter
    __data : UInt8[0]
  end
  struct X_PangoLanguage
    __data : UInt8[0]
  end
  struct X_PangoFontDescription
    __data : UInt8[0]
  end
  struct X_PangoFontMetrics
    __data : UInt8[0]
  end
  struct X_PangoFontFamily
    __data : UInt8[0]
  end
  struct X_PangoFontFace
    __data : UInt8[0]
  end
  struct X_PangoColor
    red : Guint16
    green : Guint16
    blue : Guint16
  end
  struct X_PangoAttribute
    klass : PangoAttrClass*
    start_index : Guint
    end_index : Guint
  end
  struct X_PangoAttrClass
    type : PangoAttrType
    copy : (PangoAttribute* -> PangoAttribute*)
    destroy : (PangoAttribute* -> Void)
    equal : ((PangoAttribute*, PangoAttribute*) -> Gboolean)
  end
  struct X_PangoAttrString
    attr : PangoAttribute
    value : UInt8*
  end
  struct X_PangoAttrLanguage
    attr : PangoAttribute
    value : PangoLanguage*
  end
  struct X_PangoAttrInt
    attr : PangoAttribute
    value : Int32
  end
  struct X_PangoAttrSize
    attr : PangoAttribute
    size : Int32
    absolute : Guint
  end
  struct X_PangoAttrFloat
    attr : PangoAttribute
    value : Float64
  end
  struct X_PangoAttrColor
    attr : PangoAttribute
    color : PangoColor
  end
  struct X_PangoAttrFontDesc
    attr : PangoAttribute
    desc : PangoFontDescription*
  end
  struct X_PangoAttrShape
    attr : PangoAttribute
    ink_rect : PangoRectangle
    logical_rect : PangoRectangle
    data : Gpointer
    copy_func : PangoAttrDataCopyFunc
    destroy_func : GDestroyNotify
  end
  struct X_PangoAttrFontFeatures
    attr : PangoAttribute
    features : Gchar*
  end
  struct X_PangoAttrList
    __data : UInt8[0]
  end
  struct X_PangoAttrIterator
    __data : UInt8[0]
  end
  struct X_PangoAnalysis
    shape_engine : PangoEngineShape*
    lang_engine : PangoEngineLang*
    font : PangoFont*
    level : Guint8
    gravity : Guint8
    flags : Guint8
    script : Guint8
    language : PangoLanguage*
    extra_attrs : GSList*
  end
  struct X_PangoItem
    offset : Gint
    length : Gint
    num_chars : Gint
    analysis : PangoAnalysis
  end
  struct X_PangoFontset
    __data : UInt8[0]
  end
  struct X_PangoContext
    __data : UInt8[0]
  end
  struct X_PangoContextClass
    __data : UInt8[0]
  end
  struct X_PangoGlyphGeometry
    width : PangoGlyphUnit
    x_offset : PangoGlyphUnit
    y_offset : PangoGlyphUnit
  end
  struct X_PangoGlyphVisAttr
    is_cluster_start : Guint
  end
  struct X_PangoGlyphInfo
    glyph : PangoGlyph
    geometry : PangoGlyphGeometry
    attr : PangoGlyphVisAttr
  end
  struct X_PangoGlyphString
    num_glyphs : Gint
    glyphs : PangoGlyphInfo*
    log_clusters : Gint*
    space : Gint
  end
  struct X_PangoGlyphItem
    item : PangoItem*
    glyphs : PangoGlyphString*
  end
  struct X_PangoGlyphItemIter
    glyph_item : PangoGlyphItem*
    text : Gchar*
    start_glyph : Int32
    start_index : Int32
    start_char : Int32
    end_glyph : Int32
    end_index : Int32
    end_char : Int32
  end
  struct X_PangoTabArray
    __data : UInt8[0]
  end
  struct X_PangoLayout
    __data : UInt8[0]
  end
  struct X_PangoLayoutClass
    __data : UInt8[0]
  end
  struct X_PangoLayoutLine
    layout : PangoLayout*
    start_index : Gint
    length : Gint
    runs : GSList*
    is_paragraph_start : Guint
    resolved_dir : Guint
  end
  struct X_PangoLayoutIter
    __data : UInt8[0]
  end
  struct X_PangoRenderer
    parent_instance : GObject
    underline : PangoUnderline
    strikethrough : Gboolean
    active_count : Int32
    matrix : PangoMatrix*
    priv : PangoRendererPrivate*
  end
  struct X_PangoRendererClass
    parent_class : GObjectClass
    draw_glyphs : ((PangoRenderer*, PangoFont*, PangoGlyphString*, Int32, Int32) -> Void)
    draw_rectangle : ((PangoRenderer*, PangoRenderPart, Int32, Int32, Int32, Int32) -> Void)
    draw_error_underline : ((PangoRenderer*, Int32, Int32, Int32, Int32) -> Void)
    draw_shape : ((PangoRenderer*, PangoAttrShape*, Int32, Int32) -> Void)
    draw_trapezoid : ((PangoRenderer*, PangoRenderPart, Float64, Float64, Float64, Float64, Float64, Float64) -> Void)
    draw_glyph : ((PangoRenderer*, PangoFont*, PangoGlyph, Float64, Float64) -> Void)
    part_changed : ((PangoRenderer*, PangoRenderPart) -> Void)
    begin : (PangoRenderer* -> Void)
    end_ : (PangoRenderer* -> Void)
    prepare_run : ((PangoRenderer*, PangoLayoutRun*) -> Void)
    draw_glyph_item : ((PangoRenderer*, UInt8*, PangoGlyphItem*, Int32, Int32) -> Void)
    _pango_reserved2 : ( -> Void)
    _pango_reserved3 : ( -> Void)
    _pango_reserved4 : ( -> Void)
  end
  struct X_PangoRendererPrivate
    __data : UInt8[0]
  end
  struct X_IO_FILE
    _flags : Int32
    _IO_read_ptr : UInt8*
    _IO_read_end : UInt8*
    _IO_read_base : UInt8*
    _IO_write_base : UInt8*
    _IO_write_ptr : UInt8*
    _IO_write_end : UInt8*
    _IO_buf_base : UInt8*
    _IO_buf_end : UInt8*
    _IO_save_base : UInt8*
    _IO_backup_base : UInt8*
    _IO_save_end : UInt8*
    _markers : X_IO_marker*
    _chain : X_IO_FILE*
    _fileno : Int32
    _flags2 : Int32
    _old_offset : X__off_t
    _cur_column : UInt16
    _vtable_offset : Int8
    _shortbuf : UInt8*
    _lock : X_IO_lock_t*
    _offset : X__off64_t
    __pad1 : Void*
    __pad2 : Void*
    __pad3 : Void*
    __pad4 : Void*
    __pad5 : SizeT
    _mode : Int32
    _unused2 : Int8[20]
  end
  struct AnonStruct14
    __count : Int32
    anon_union_15 : AnonUnion15
    __value : AnonUnion15
  end
  struct AnonStruct15
    __pos : X__off_t
    __state : X__mbstate_t
  end
  struct AnonStruct16
    __pos : X__off64_t
    __state : X__mbstate_t
  end
  struct X_IO_jump_t
    __data : UInt8[0]
  end
  struct X_IO_marker
    _next : X_IO_marker*
    _sbuf : X_IO_FILE*
    _pos : Int32
  end
  struct X_IO_FILE_plus
    __data : UInt8[0]
  end
  struct X_cairo
    __data : UInt8[0]
  end
  struct X_cairo_surface
    __data : UInt8[0]
  end
  struct X_cairo_device
    __data : UInt8[0]
  end
  struct X_cairo_matrix
    xx : Float64
    yx : Float64
    xy : Float64
    yy : Float64
    x0 : Float64
    y0 : Float64
  end
  struct X_cairo_pattern
    __data : UInt8[0]
  end
  struct X_cairo_user_data_key
    unused : Int32
  end
  struct X_cairo_rectangle_int
    x : Int32
    y : Int32
    width : Int32
    height : Int32
  end
  struct X_cairo_rectangle
    x : Float64
    y : Float64
    width : Float64
    height : Float64
  end
  struct X_cairo_rectangle_list
    status : CairoStatusT
    rectangles : CairoRectangleT*
    num_rectangles : Int32
  end
  struct X_cairo_scaled_font
    __data : UInt8[0]
  end
  struct X_cairo_font_face
    __data : UInt8[0]
  end
  struct AnonStruct17
    index : UInt64
    x : Float64
    y : Float64
  end
  struct AnonStruct18
    num_bytes : Int32
    num_glyphs : Int32
  end
  struct AnonStruct19
    x_bearing : Float64
    y_bearing : Float64
    width : Float64
    height : Float64
    x_advance : Float64
    y_advance : Float64
  end
  struct AnonStruct20
    ascent : Float64
    descent : Float64
    height : Float64
    max_x_advance : Float64
    max_y_advance : Float64
  end
  struct X_cairo_font_options
    __data : UInt8[0]
  end
  struct CairoPath
    status : CairoStatusT
    data : CairoPathDataT*
    num_data : Int32
  end
  struct X_cairo_region
    __data : UInt8[0]
  end
  struct X_GdkPoint
    x : Gint
    y : Gint
  end
  struct X_GdkAtom
    __data : UInt8[0]
  end
  struct X_GdkColor
    pixel : Guint32
    red : Guint16
    green : Guint16
    blue : Guint16
  end
  struct X_GdkRGBA
    red : Gdouble
    green : Gdouble
    blue : Gdouble
    alpha : Gdouble
  end
  struct X_GdkCursor
    __data : UInt8[0]
  end
  struct X_GdkVisual
    __data : UInt8[0]
  end
  struct X_GdkDevice
    __data : UInt8[0]
  end
  struct X_GdkDragContext
    __data : UInt8[0]
  end
  struct X_GdkDisplayManager
    __data : UInt8[0]
  end
  struct X_GdkDeviceManager
    __data : UInt8[0]
  end
  struct X_GdkDisplay
    __data : UInt8[0]
  end
  struct X_GdkScreen
    __data : UInt8[0]
  end
  struct X_GdkWindow
    __data : UInt8[0]
  end
  struct X_GdkKeymap
    __data : UInt8[0]
  end
  struct X_GdkAppLaunchContext
    __data : UInt8[0]
  end
  struct X_GdkSeat
    parent_instance : GObject
  end
  struct X_GdkGLContext
    __data : UInt8[0]
  end
  struct X_GdkTimeCoord
    time : Guint32
    axes : Gdouble[128]
  end
  struct X_GdkEventAny
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
  end
  struct X_GdkEventExpose
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    area : GdkRectangle
    region : CairoRegionT*
    count : Gint
  end
  struct X_GdkEventVisibility
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    state : GdkVisibilityState
  end
  struct X_GdkEventMotion
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    time : Guint32
    x : Gdouble
    y : Gdouble
    axes : Gdouble*
    state : Guint
    is_hint : Gint16
    device : GdkDevice*
    x_root : Gdouble
    y_root : Gdouble
  end
  struct X_GdkEventButton
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    time : Guint32
    x : Gdouble
    y : Gdouble
    axes : Gdouble*
    state : Guint
    button : Guint
    device : GdkDevice*
    x_root : Gdouble
    y_root : Gdouble
  end
  struct X_GdkEventTouch
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    time : Guint32
    x : Gdouble
    y : Gdouble
    axes : Gdouble*
    state : Guint
    sequence : GdkEventSequence*
    emulating_pointer : Gboolean
    device : GdkDevice*
    x_root : Gdouble
    y_root : Gdouble
  end
  struct X_GdkEventScroll
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    time : Guint32
    x : Gdouble
    y : Gdouble
    state : Guint
    direction : GdkScrollDirection
    device : GdkDevice*
    x_root : Gdouble
    y_root : Gdouble
    delta_x : Gdouble
    delta_y : Gdouble
    is_stop : Guint
  end
  struct X_GdkEventKey
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    time : Guint32
    state : Guint
    keyval : Guint
    length : Gint
    string : Gchar*
    hardware_keycode : Guint16
    group : Guint8
    is_modifier : Guint
  end
  struct X_GdkEventFocus
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    in : Gint16
  end
  struct X_GdkEventCrossing
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    subwindow : GdkWindow*
    time : Guint32
    x : Gdouble
    y : Gdouble
    x_root : Gdouble
    y_root : Gdouble
    mode : GdkCrossingMode
    detail : GdkNotifyType
    focus : Gboolean
    state : Guint
  end
  struct X_GdkEventConfigure
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    x : Gint
    y : Gint
    width : Gint
    height : Gint
  end
  struct X_GdkEventProperty
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    atom : GdkAtom
    time : Guint32
    state : Guint
  end
  struct X_GdkEventSelection
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    selection : GdkAtom
    target : GdkAtom
    property : GdkAtom
    time : Guint32
    requestor : GdkWindow*
  end
  struct X_GdkEventOwnerChange
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    owner : GdkWindow*
    reason : GdkOwnerChange
    selection : GdkAtom
    time : Guint32
    selection_time : Guint32
  end
  struct X_GdkEventProximity
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    time : Guint32
    device : GdkDevice*
  end
  struct X_GdkEventDND
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    context : GdkDragContext*
    time : Guint32
    x_root : Gshort
    y_root : Gshort
  end
  struct X_GdkEventWindowState
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    changed_mask : GdkWindowState
    new_window_state : GdkWindowState
  end
  struct X_GdkEventSetting
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    action : GdkSettingAction
    name : UInt8*
  end
  struct X_GdkEventGrabBroken
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    keyboard : Gboolean
    implicit : Gboolean
    grab_window : GdkWindow*
  end
  struct X_GdkEventTouchpadSwipe
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    phase : Gint8
    n_fingers : Gint8
    time : Guint32
    x : Gdouble
    y : Gdouble
    dx : Gdouble
    dy : Gdouble
    x_root : Gdouble
    y_root : Gdouble
    state : Guint
  end
  struct X_GdkEventTouchpadPinch
    type : GdkEventType
    window : GdkWindow*
    send_event : Gint8
    phase : Gint8
    n_fingers : Gint8
    time : Guint32
    x : Gdouble
    y : Gdouble
    dx : Gdouble
    dy : Gdouble
    angle_delta : Gdouble
    scale : Gdouble
    x_root : Gdouble
    y_root : Gdouble
    state : Guint
  end
  struct X_GdkEventSequence
    __data : UInt8[0]
  end
  struct X_GdkFrameTimings
    __data : UInt8[0]
  end
  struct X_GdkFrameClock
    __data : UInt8[0]
  end
  struct X_GdkFrameClockPrivate
    __data : UInt8[0]
  end
  struct X_GdkFrameClockClass
    __data : UInt8[0]
  end
  struct X_GdkGeometry
    min_width : Gint
    min_height : Gint
    max_width : Gint
    max_height : Gint
    base_width : Gint
    base_height : Gint
    width_inc : Gint
    height_inc : Gint
    min_aspect : Gdouble
    max_aspect : Gdouble
    win_gravity : GdkGravity
  end
  struct X_GdkWindowAttr
    title : Gchar*
    event_mask : Gint
    x : Gint
    y : Gint
    width : Gint
    height : Gint
    wclass : GdkWindowWindowClass
    visual : GdkVisual*
    window_type : GdkWindowType
    cursor : GdkCursor*
    wmclass_name : Gchar*
    wmclass_class : Gchar*
    override_redirect : Gboolean
    type_hint : GdkWindowTypeHint
  end
  struct X_GdkWindowRedirect
    __data : UInt8[0]
  end
  struct X_GdkWindowClass
    parent_class : GObjectClass
    pick_embedded_child : ((GdkWindow*, Gdouble, Gdouble) -> GdkWindow*)
    to_embedder : ((GdkWindow*, Gdouble, Gdouble, Gdouble*, Gdouble*) -> Void)
    from_embedder : ((GdkWindow*, Gdouble, Gdouble, Gdouble*, Gdouble*) -> Void)
    create_surface : ((GdkWindow*, Gint, Gint) -> CairoSurfaceT*)
    _gdk_reserved1 : ( -> Void)
    _gdk_reserved2 : ( -> Void)
    _gdk_reserved3 : ( -> Void)
    _gdk_reserved4 : ( -> Void)
    _gdk_reserved5 : ( -> Void)
    _gdk_reserved6 : ( -> Void)
    _gdk_reserved7 : ( -> Void)
    _gdk_reserved8 : ( -> Void)
  end
  struct X_GdkPixbuf
    __data : UInt8[0]
  end
  struct X_GdkPixbufAnimation
    __data : UInt8[0]
  end
  struct X_GdkPixbufAnimationIter
    __data : UInt8[0]
  end
  struct X_GdkPixbufSimpleAnim
    __data : UInt8[0]
  end
  struct X_GdkPixbufSimpleAnimClass
    __data : UInt8[0]
  end
  struct X_GdkPixbufFormat
    __data : UInt8[0]
  end
  struct X_GdkPixbufLoader
    parent_instance : GObject
    priv : Gpointer
  end
  struct X_GdkPixbufLoaderClass
    parent_class : GObjectClass
    size_prepared : ((GdkPixbufLoader*, Int32, Int32) -> Void)
    area_prepared : (GdkPixbufLoader* -> Void)
    area_updated : ((GdkPixbufLoader*, Int32, Int32, Int32, Int32) -> Void)
    closed : (GdkPixbufLoader* -> Void)
  end
  struct X_PangoCairoFont
    __data : UInt8[0]
  end
  struct X_PangoCairoFontMap
    __data : UInt8[0]
  end
  struct X_GdkKeymapKey
    keycode : Guint
    group : Gint
    level : Gint
  end
  struct X_GtkAccelGroup
    parent : GObject
    priv : GtkAccelGroupPrivate*
  end
  struct X_GtkAccelGroupClass
    parent_class : GObjectClass
    accel_changed : ((GtkAccelGroup*, Guint, GdkModifierType, GClosure*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAccelGroupPrivate
    __data : UInt8[0]
  end
  struct X_GtkAccelKey
    accel_key : Guint
    accel_mods : GdkModifierType
    accel_flags : Guint
  end
  struct X_GtkAccelGroupEntry
    key : GtkAccelKey
    closure : GClosure*
    accel_path_quark : GQuark
  end
  struct X_GtkBorder
    left : Gint16
    right : Gint16
    top : Gint16
    bottom : Gint16
  end
  struct X_GtkAdjustment
    parent_instance : GInitiallyUnowned
    priv : GtkAdjustmentPrivate*
  end
  struct X_GtkBuilder
    parent_instance : GObject
    priv : GtkBuilderPrivate*
  end
  struct X_GtkClipboard
    __data : UInt8[0]
  end
  struct X_GtkIconSet
    __data : UInt8[0]
  end
  struct X_GtkIconSource
    __data : UInt8[0]
  end
  struct X_GtkRcStyle
    parent_instance : GObject
    name : Gchar*
    bg_pixmap_name : Gchar*[5]
    font_desc : PangoFontDescription*
    color_flags : GtkRcFlags[5]
    fg : GdkColor[5]
    bg : GdkColor[5]
    text : GdkColor[5]
    base : GdkColor[5]
    xthickness : Gint
    ythickness : Gint
    rc_properties : GArray*
    rc_style_lists : GSList*
    icon_factories : GSList*
    engine_specified : Guint
  end
  struct X_GtkRequisition
    width : Gint
    height : Gint
  end
  struct X_GtkSelectionData
    __data : UInt8[0]
  end
  struct X_GtkSettings
    parent_instance : GObject
    priv : GtkSettingsPrivate*
  end
  struct X_GtkStyle
    parent_instance : GObject
    fg : GdkColor[5]
    bg : GdkColor[5]
    light : GdkColor[5]
    dark : GdkColor[5]
    mid : GdkColor[5]
    text : GdkColor[5]
    base : GdkColor[5]
    text_aa : GdkColor[5]
    black : GdkColor
    white : GdkColor
    font_desc : PangoFontDescription*
    xthickness : Gint
    ythickness : Gint
    background : CairoPatternT*[5]
    attach_count : Gint
    visual : GdkVisual*
    private_font_desc : PangoFontDescription*
    rc_style : GtkRcStyle*
    styles : GSList*
    property_cache : GArray*
    icon_factories : GSList*
  end
  struct X_GtkStyleContext
    parent_object : GObject
    priv : GtkStyleContextPrivate*
  end
  struct X_GtkTooltip
    __data : UInt8[0]
  end
  struct X_GtkWidget
    parent_instance : GInitiallyUnowned
    priv : GtkWidgetPrivate*
  end
  struct X_GtkWidgetPath
    __data : UInt8[0]
  end
  struct X_GtkWindow
    bin : GtkBin
    priv : GtkWindowPrivate*
  end
  struct X_AtkAttribute
    name : Gchar*
    value : Gchar*
  end
  struct X_AtkImplementor
    __data : UInt8[0]
  end
  struct X_AtkImplementorIface
    parent : GTypeInterface
    ref_accessible : (AtkImplementor* -> AtkObject*)
  end
  struct X_AtkObject
    parent : GObject
    description : Gchar*
    name : Gchar*
    accessible_parent : AtkObject*
    role : AtkRole
    relation_set : AtkRelationSet*
    layer : AtkLayer
  end
  struct X_AtkObjectClass
    parent : GObjectClass
    get_name : (AtkObject* -> Gchar*)
    get_description : (AtkObject* -> Gchar*)
    get_parent : (AtkObject* -> AtkObject*)
    get_n_children : (AtkObject* -> Gint)
    ref_child : ((AtkObject*, Gint) -> AtkObject*)
    get_index_in_parent : (AtkObject* -> Gint)
    ref_relation_set : (AtkObject* -> AtkRelationSet*)
    get_role : (AtkObject* -> AtkRole)
    get_layer : (AtkObject* -> AtkLayer)
    get_mdi_zorder : (AtkObject* -> Gint)
    ref_state_set : (AtkObject* -> AtkStateSet*)
    set_name : ((AtkObject*, Gchar*) -> Void)
    set_description : ((AtkObject*, Gchar*) -> Void)
    set_parent : ((AtkObject*, AtkObject*) -> Void)
    set_role : ((AtkObject*, AtkRole) -> Void)
    connect_property_change_handler : ((AtkObject*, AtkPropertyChangeHandler*) -> Guint)
    remove_property_change_handler : ((AtkObject*, Guint) -> Void)
    initialize : ((AtkObject*, Gpointer) -> Void)
    children_changed : ((AtkObject*, Guint, Gpointer) -> Void)
    focus_event : ((AtkObject*, Gboolean) -> Void)
    property_change : ((AtkObject*, AtkPropertyValues*) -> Void)
    state_change : ((AtkObject*, Gchar*, Gboolean) -> Void)
    visible_data_changed : (AtkObject* -> Void)
    active_descendant_changed : ((AtkObject*, Gpointer*) -> Void)
    get_attributes : (AtkObject* -> AtkAttributeSet*)
    get_object_locale : (AtkObject* -> Gchar*)
    pad1 : AtkFunction
  end
  struct X_AtkRelationSet
    parent : GObject
    relations : GPtrArray*
  end
  struct X_AtkStateSet
    parent : GObject
  end
  struct X_AtkPropertyValues
    property_name : Gchar*
    old_value : GValue
    new_value : GValue
  end
  struct X_AtkAction
    __data : UInt8[0]
  end
  struct X_AtkActionIface
    parent : GTypeInterface
    do_action : ((AtkAction*, Gint) -> Gboolean)
    get_n_actions : (AtkAction* -> Gint)
    get_description : ((AtkAction*, Gint) -> Gchar*)
    get_name : ((AtkAction*, Gint) -> Gchar*)
    get_keybinding : ((AtkAction*, Gint) -> Gchar*)
    set_description : ((AtkAction*, Gint, Gchar*) -> Gboolean)
    get_localized_name : ((AtkAction*, Gint) -> Gchar*)
  end
  struct X_AtkUtil
    parent : GObject
  end
  struct X_AtkUtilClass
    parent : GObjectClass
    add_global_event_listener : ((GSignalEmissionHook, Gchar*) -> Guint)
    remove_global_event_listener : (Guint -> Void)
    add_key_event_listener : ((AtkKeySnoopFunc, Gpointer) -> Guint)
    remove_key_event_listener : (Guint -> Void)
    get_root : ( -> AtkObject*)
    get_toolkit_name : ( -> Gchar*)
    get_toolkit_version : ( -> Gchar*)
  end
  struct X_AtkKeyEventStruct
    type : Gint
    state : Guint
    keyval : Guint
    length : Gint
    string : Gchar*
    keycode : Guint16
    timestamp : Guint32
  end
  struct X_AtkComponent
    __data : UInt8[0]
  end
  struct X_AtkComponentIface
    parent : GTypeInterface
    add_focus_handler : ((AtkComponent*, AtkFocusHandler) -> Guint)
    contains : ((AtkComponent*, Gint, Gint, AtkCoordType) -> Gboolean)
    ref_accessible_at_point : ((AtkComponent*, Gint, Gint, AtkCoordType) -> AtkObject*)
    get_extents : ((AtkComponent*, Gint*, Gint*, Gint*, Gint*, AtkCoordType) -> Void)
    get_position : ((AtkComponent*, Gint*, Gint*, AtkCoordType) -> Void)
    get_size : ((AtkComponent*, Gint*, Gint*) -> Void)
    grab_focus : (AtkComponent* -> Gboolean)
    remove_focus_handler : ((AtkComponent*, Guint) -> Void)
    set_extents : ((AtkComponent*, Gint, Gint, Gint, Gint, AtkCoordType) -> Gboolean)
    set_position : ((AtkComponent*, Gint, Gint, AtkCoordType) -> Gboolean)
    set_size : ((AtkComponent*, Gint, Gint) -> Gboolean)
    get_layer : (AtkComponent* -> AtkLayer)
    get_mdi_zorder : (AtkComponent* -> Gint)
    bounds_changed : ((AtkComponent*, AtkRectangle*) -> Void)
    get_alpha : (AtkComponent* -> Gdouble)
  end
  struct X_AtkRectangle
    x : Gint
    y : Gint
    width : Gint
    height : Gint
  end
  struct X_AtkDocument
    __data : UInt8[0]
  end
  struct X_AtkDocumentIface
    parent : GTypeInterface
    get_document_type : (AtkDocument* -> Gchar*)
    get_document : (AtkDocument* -> Gpointer)
    get_document_locale : (AtkDocument* -> Gchar*)
    get_document_attributes : (AtkDocument* -> AtkAttributeSet*)
    get_document_attribute_value : ((AtkDocument*, Gchar*) -> Gchar*)
    set_document_attribute : ((AtkDocument*, Gchar*, Gchar*) -> Gboolean)
    get_current_page_number : (AtkDocument* -> Gint)
    get_page_count : (AtkDocument* -> Gint)
  end
  struct X_AtkText
    __data : UInt8[0]
  end
  struct X_AtkTextIface
    parent : GTypeInterface
    get_text : ((AtkText*, Gint, Gint) -> Gchar*)
    get_text_after_offset : ((AtkText*, Gint, AtkTextBoundary, Gint*, Gint*) -> Gchar*)
    get_text_at_offset : ((AtkText*, Gint, AtkTextBoundary, Gint*, Gint*) -> Gchar*)
    get_character_at_offset : ((AtkText*, Gint) -> Gunichar)
    get_text_before_offset : ((AtkText*, Gint, AtkTextBoundary, Gint*, Gint*) -> Gchar*)
    get_caret_offset : (AtkText* -> Gint)
    get_run_attributes : ((AtkText*, Gint, Gint*, Gint*) -> AtkAttributeSet*)
    get_default_attributes : (AtkText* -> AtkAttributeSet*)
    get_character_extents : ((AtkText*, Gint, Gint*, Gint*, Gint*, Gint*, AtkCoordType) -> Void)
    get_character_count : (AtkText* -> Gint)
    get_offset_at_point : ((AtkText*, Gint, Gint, AtkCoordType) -> Gint)
    get_n_selections : (AtkText* -> Gint)
    get_selection : ((AtkText*, Gint, Gint*, Gint*) -> Gchar*)
    add_selection : ((AtkText*, Gint, Gint) -> Gboolean)
    remove_selection : ((AtkText*, Gint) -> Gboolean)
    set_selection : ((AtkText*, Gint, Gint, Gint) -> Gboolean)
    set_caret_offset : ((AtkText*, Gint) -> Gboolean)
    text_changed : ((AtkText*, Gint, Gint) -> Void)
    text_caret_moved : ((AtkText*, Gint) -> Void)
    text_selection_changed : (AtkText* -> Void)
    text_attributes_changed : (AtkText* -> Void)
    get_range_extents : ((AtkText*, Gint, Gint, AtkCoordType, AtkTextRectangle*) -> Void)
    get_bounded_ranges : ((AtkText*, AtkTextRectangle*, AtkCoordType, AtkTextClipType, AtkTextClipType) -> AtkTextRange**)
    get_string_at_offset : ((AtkText*, Gint, AtkTextGranularity, Gint*, Gint*) -> Gchar*)
  end
  struct X_AtkTextRectangle
    x : Gint
    y : Gint
    width : Gint
    height : Gint
  end
  struct X_AtkTextRange
    bounds : AtkTextRectangle
    start_offset : Gint
    end_offset : Gint
    content : Gchar*
  end
  struct X_AtkEditableText
    __data : UInt8[0]
  end
  struct X_AtkEditableTextIface
    parent_interface : GTypeInterface
    set_run_attributes : ((AtkEditableText*, AtkAttributeSet*, Gint, Gint) -> Gboolean)
    set_text_contents : ((AtkEditableText*, Gchar*) -> Void)
    insert_text : ((AtkEditableText*, Gchar*, Gint, Gint*) -> Void)
    copy_text : ((AtkEditableText*, Gint, Gint) -> Void)
    cut_text : ((AtkEditableText*, Gint, Gint) -> Void)
    delete_text : ((AtkEditableText*, Gint, Gint) -> Void)
    paste_text : ((AtkEditableText*, Gint) -> Void)
  end
  struct X_AtkGObjectAccessible
    parent : AtkObject
  end
  struct X_AtkGObjectAccessibleClass
    parent_class : AtkObjectClass
    pad1 : AtkFunction
    pad2 : AtkFunction
  end
  struct X_AtkHyperlink
    parent : GObject
  end
  struct X_AtkHyperlinkClass
    parent : GObjectClass
    get_uri : ((AtkHyperlink*, Gint) -> Gchar*)
    get_object : ((AtkHyperlink*, Gint) -> AtkObject*)
    get_end_index : (AtkHyperlink* -> Gint)
    get_start_index : (AtkHyperlink* -> Gint)
    is_valid : (AtkHyperlink* -> Gboolean)
    get_n_anchors : (AtkHyperlink* -> Gint)
    link_state : (AtkHyperlink* -> Guint)
    is_selected_link : (AtkHyperlink* -> Gboolean)
    link_activated : (AtkHyperlink* -> Void)
    pad1 : AtkFunction
  end
  struct X_AtkHyperlinkImpl
    __data : UInt8[0]
  end
  struct X_AtkHyperlinkImplIface
    parent : GTypeInterface
    get_hyperlink : (AtkHyperlinkImpl* -> AtkHyperlink*)
  end
  struct X_AtkHypertext
    __data : UInt8[0]
  end
  struct X_AtkHypertextIface
    parent : GTypeInterface
    get_link : ((AtkHypertext*, Gint) -> AtkHyperlink*)
    get_n_links : (AtkHypertext* -> Gint)
    get_link_index : ((AtkHypertext*, Gint) -> Gint)
    link_selected : ((AtkHypertext*, Gint) -> Void)
  end
  struct X_AtkImage
    __data : UInt8[0]
  end
  struct X_AtkImageIface
    parent : GTypeInterface
    get_image_position : ((AtkImage*, Gint*, Gint*, AtkCoordType) -> Void)
    get_image_description : (AtkImage* -> Gchar*)
    get_image_size : ((AtkImage*, Gint*, Gint*) -> Void)
    set_image_description : ((AtkImage*, Gchar*) -> Gboolean)
    get_image_locale : (AtkImage* -> Gchar*)
  end
  struct X_AtkNoOpObject
    parent : AtkObject
  end
  struct X_AtkNoOpObjectClass
    parent_class : AtkObjectClass
  end
  struct X_AtkObjectFactory
    parent : GObject
  end
  struct X_AtkObjectFactoryClass
    parent_class : GObjectClass
    create_accessible : (GObject* -> AtkObject*)
    invalidate : (AtkObjectFactory* -> Void)
    get_accessible_type : ( -> GType)
    pad1 : AtkFunction
    pad2 : AtkFunction
  end
  struct X_AtkNoOpObjectFactory
    parent : AtkObjectFactory
  end
  struct X_AtkNoOpObjectFactoryClass
    parent_class : AtkObjectFactoryClass
  end
  struct X_AtkPlug
    parent : AtkObject
  end
  struct X_AtkPlugClass
    parent_class : AtkObjectClass
    get_object_id : (AtkPlug* -> Gchar*)
  end
  struct X_AtkRange
    __data : UInt8[0]
  end
  struct X_AtkRegistry
    parent : GObject
    factory_type_registry : GHashTable*
    factory_singleton_cache : GHashTable*
  end
  struct X_AtkRegistryClass
    parent_class : GObjectClass
  end
  struct X_AtkRelation
    parent : GObject
    target : GPtrArray*
    relationship : AtkRelationType
  end
  struct X_AtkRelationClass
    parent : GObjectClass
  end
  struct X_AtkRelationSetClass
    parent : GObjectClass
    pad1 : AtkFunction
    pad2 : AtkFunction
  end
  struct X_AtkSelection
    __data : UInt8[0]
  end
  struct X_AtkSelectionIface
    parent : GTypeInterface
    add_selection : ((AtkSelection*, Gint) -> Gboolean)
    clear_selection : (AtkSelection* -> Gboolean)
    ref_selection : ((AtkSelection*, Gint) -> AtkObject*)
    get_selection_count : (AtkSelection* -> Gint)
    is_child_selected : ((AtkSelection*, Gint) -> Gboolean)
    remove_selection : ((AtkSelection*, Gint) -> Gboolean)
    select_all_selection : (AtkSelection* -> Gboolean)
    selection_changed : (AtkSelection* -> Void)
  end
  struct X_AtkSocket
    parent : AtkObject
    embedded_plug_id : Gchar*
  end
  struct X_AtkSocketClass
    parent_class : AtkObjectClass
    embed : ((AtkSocket*, Gchar*) -> Void)
  end
  struct X_AtkStateSetClass
    parent : GObjectClass
  end
  struct X_AtkStreamableContent
    __data : UInt8[0]
  end
  struct X_AtkStreamableContentIface
    parent : GTypeInterface
    get_n_mime_types : (AtkStreamableContent* -> Gint)
    get_mime_type : ((AtkStreamableContent*, Gint) -> Gchar*)
    get_stream : ((AtkStreamableContent*, Gchar*) -> GIOChannel*)
    get_uri : ((AtkStreamableContent*, Gchar*) -> Gchar*)
    pad1 : AtkFunction
    pad2 : AtkFunction
    pad3 : AtkFunction
  end
  struct X_AtkTable
    __data : UInt8[0]
  end
  struct X_AtkTableIface
    parent : GTypeInterface
    ref_at : ((AtkTable*, Gint, Gint) -> AtkObject*)
    get_index_at : ((AtkTable*, Gint, Gint) -> Gint)
    get_column_at_index : ((AtkTable*, Gint) -> Gint)
    get_row_at_index : ((AtkTable*, Gint) -> Gint)
    get_n_columns : (AtkTable* -> Gint)
    get_n_rows : (AtkTable* -> Gint)
    get_column_extent_at : ((AtkTable*, Gint, Gint) -> Gint)
    get_row_extent_at : ((AtkTable*, Gint, Gint) -> Gint)
    get_caption : (AtkTable* -> AtkObject*)
    get_column_description : ((AtkTable*, Gint) -> Gchar*)
    get_column_header : ((AtkTable*, Gint) -> AtkObject*)
    get_row_description : ((AtkTable*, Gint) -> Gchar*)
    get_row_header : ((AtkTable*, Gint) -> AtkObject*)
    get_summary : (AtkTable* -> AtkObject*)
    set_caption : ((AtkTable*, AtkObject*) -> Void)
    set_column_description : ((AtkTable*, Gint, Gchar*) -> Void)
    set_column_header : ((AtkTable*, Gint, AtkObject*) -> Void)
    set_row_description : ((AtkTable*, Gint, Gchar*) -> Void)
    set_row_header : ((AtkTable*, Gint, AtkObject*) -> Void)
    set_summary : ((AtkTable*, AtkObject*) -> Void)
    get_selected_columns : ((AtkTable*, Gint**) -> Gint)
    get_selected_rows : ((AtkTable*, Gint**) -> Gint)
    is_column_selected : ((AtkTable*, Gint) -> Gboolean)
    is_row_selected : ((AtkTable*, Gint) -> Gboolean)
    is_selected : ((AtkTable*, Gint, Gint) -> Gboolean)
    add_row_selection : ((AtkTable*, Gint) -> Gboolean)
    remove_row_selection : ((AtkTable*, Gint) -> Gboolean)
    add_column_selection : ((AtkTable*, Gint) -> Gboolean)
    remove_column_selection : ((AtkTable*, Gint) -> Gboolean)
    row_inserted : ((AtkTable*, Gint, Gint) -> Void)
    column_inserted : ((AtkTable*, Gint, Gint) -> Void)
    row_deleted : ((AtkTable*, Gint, Gint) -> Void)
    column_deleted : ((AtkTable*, Gint, Gint) -> Void)
    row_reordered : (AtkTable* -> Void)
    column_reordered : (AtkTable* -> Void)
    model_changed : (AtkTable* -> Void)
  end
  struct X_AtkTableCell
    __data : UInt8[0]
  end
  struct X_AtkTableCellIface
    parent : GTypeInterface
    get_column_span : (AtkTableCell* -> Gint)
    get_column_header_cells : (AtkTableCell* -> GPtrArray*)
    get_position : ((AtkTableCell*, Gint*, Gint*) -> Gboolean)
    get_row_span : (AtkTableCell* -> Gint)
    get_row_header_cells : (AtkTableCell* -> GPtrArray*)
    get_row_column_span : ((AtkTableCell*, Gint*, Gint*, Gint*, Gint*) -> Gboolean)
    get_table : (AtkTableCell* -> AtkObject*)
  end
  struct X_AtkMisc
    parent : GObject
  end
  struct X_AtkMiscClass
    parent : GObjectClass
    threads_enter : (AtkMisc* -> Void)
    threads_leave : (AtkMisc* -> Void)
    vfuncs : Gpointer[32]
  end
  struct X_AtkValue
    __data : UInt8[0]
  end
  struct X_AtkValueIface
    parent : GTypeInterface
    get_current_value : ((AtkValue*, GValue*) -> Void)
    get_maximum_value : ((AtkValue*, GValue*) -> Void)
    get_minimum_value : ((AtkValue*, GValue*) -> Void)
    set_current_value : ((AtkValue*, GValue*) -> Gboolean)
    get_minimum_increment : ((AtkValue*, GValue*) -> Void)
    get_value_and_text : ((AtkValue*, Gdouble*, Gchar**) -> Void)
    get_range : (AtkValue* -> AtkRange*)
    get_increment : (AtkValue* -> Gdouble)
    get_sub_ranges : (AtkValue* -> GSList*)
    set_value : ((AtkValue*, Gdouble) -> Void)
  end
  struct X_AtkWindow
    __data : UInt8[0]
  end
  struct X_AtkWindowIface
    parent : GTypeInterface
  end
  struct X_GtkWidgetPrivate
    __data : UInt8[0]
  end
  struct X_GtkWidgetClass
    parent_class : GInitiallyUnownedClass
    activate_signal : Guint
    dispatch_child_properties_changed : ((GtkWidget*, Guint, GParamSpec**) -> Void)
    destroy : (GtkWidget* -> Void)
    show : (GtkWidget* -> Void)
    show_all : (GtkWidget* -> Void)
    hide : (GtkWidget* -> Void)
    map : (GtkWidget* -> Void)
    unmap : (GtkWidget* -> Void)
    realize : (GtkWidget* -> Void)
    unrealize : (GtkWidget* -> Void)
    size_allocate : ((GtkWidget*, GtkAllocation*) -> Void)
    state_changed : ((GtkWidget*, GtkStateType) -> Void)
    state_flags_changed : ((GtkWidget*, GtkStateFlags) -> Void)
    parent_set : ((GtkWidget*, GtkWidget*) -> Void)
    hierarchy_changed : ((GtkWidget*, GtkWidget*) -> Void)
    style_set : ((GtkWidget*, GtkStyle*) -> Void)
    direction_changed : ((GtkWidget*, GtkTextDirection) -> Void)
    grab_notify : ((GtkWidget*, Gboolean) -> Void)
    child_notify : ((GtkWidget*, GParamSpec*) -> Void)
    draw : ((GtkWidget*, CairoT*) -> Gboolean)
    get_request_mode : (GtkWidget* -> GtkSizeRequestMode)
    get_preferred_height : ((GtkWidget*, Gint*, Gint*) -> Void)
    get_preferred_width_for_height : ((GtkWidget*, Gint, Gint*, Gint*) -> Void)
    get_preferred_width : ((GtkWidget*, Gint*, Gint*) -> Void)
    get_preferred_height_for_width : ((GtkWidget*, Gint, Gint*, Gint*) -> Void)
    mnemonic_activate : ((GtkWidget*, Gboolean) -> Gboolean)
    grab_focus : (GtkWidget* -> Void)
    focus : ((GtkWidget*, GtkDirectionType) -> Gboolean)
    move_focus : ((GtkWidget*, GtkDirectionType) -> Void)
    keynav_failed : ((GtkWidget*, GtkDirectionType) -> Gboolean)
    event : ((GtkWidget*, GdkEvent*) -> Gboolean)
    button_press_event : ((GtkWidget*, GdkEventButton*) -> Gboolean)
    button_release_event : ((GtkWidget*, GdkEventButton*) -> Gboolean)
    scroll_event : ((GtkWidget*, GdkEventScroll*) -> Gboolean)
    motion_notify_event : ((GtkWidget*, GdkEventMotion*) -> Gboolean)
    delete_event : ((GtkWidget*, GdkEventAny*) -> Gboolean)
    destroy_event : ((GtkWidget*, GdkEventAny*) -> Gboolean)
    key_press_event : ((GtkWidget*, GdkEventKey*) -> Gboolean)
    key_release_event : ((GtkWidget*, GdkEventKey*) -> Gboolean)
    enter_notify_event : ((GtkWidget*, GdkEventCrossing*) -> Gboolean)
    leave_notify_event : ((GtkWidget*, GdkEventCrossing*) -> Gboolean)
    configure_event : ((GtkWidget*, GdkEventConfigure*) -> Gboolean)
    focus_in_event : ((GtkWidget*, GdkEventFocus*) -> Gboolean)
    focus_out_event : ((GtkWidget*, GdkEventFocus*) -> Gboolean)
    map_event : ((GtkWidget*, GdkEventAny*) -> Gboolean)
    unmap_event : ((GtkWidget*, GdkEventAny*) -> Gboolean)
    property_notify_event : ((GtkWidget*, GdkEventProperty*) -> Gboolean)
    selection_clear_event : ((GtkWidget*, GdkEventSelection*) -> Gboolean)
    selection_request_event : ((GtkWidget*, GdkEventSelection*) -> Gboolean)
    selection_notify_event : ((GtkWidget*, GdkEventSelection*) -> Gboolean)
    proximity_in_event : ((GtkWidget*, GdkEventProximity*) -> Gboolean)
    proximity_out_event : ((GtkWidget*, GdkEventProximity*) -> Gboolean)
    visibility_notify_event : ((GtkWidget*, GdkEventVisibility*) -> Gboolean)
    window_state_event : ((GtkWidget*, GdkEventWindowState*) -> Gboolean)
    damage_event : ((GtkWidget*, GdkEventExpose*) -> Gboolean)
    grab_broken_event : ((GtkWidget*, GdkEventGrabBroken*) -> Gboolean)
    selection_get : ((GtkWidget*, GtkSelectionData*, Guint, Guint) -> Void)
    selection_received : ((GtkWidget*, GtkSelectionData*, Guint) -> Void)
    drag_begin : ((GtkWidget*, GdkDragContext*) -> Void)
    drag_end : ((GtkWidget*, GdkDragContext*) -> Void)
    drag_data_get : ((GtkWidget*, GdkDragContext*, GtkSelectionData*, Guint, Guint) -> Void)
    drag_data_delete : ((GtkWidget*, GdkDragContext*) -> Void)
    drag_leave : ((GtkWidget*, GdkDragContext*, Guint) -> Void)
    drag_motion : ((GtkWidget*, GdkDragContext*, Gint, Gint, Guint) -> Gboolean)
    drag_drop : ((GtkWidget*, GdkDragContext*, Gint, Gint, Guint) -> Gboolean)
    drag_data_received : ((GtkWidget*, GdkDragContext*, Gint, Gint, GtkSelectionData*, Guint, Guint) -> Void)
    drag_failed : ((GtkWidget*, GdkDragContext*, GtkDragResult) -> Gboolean)
    popup_menu : (GtkWidget* -> Gboolean)
    show_help : ((GtkWidget*, GtkWidgetHelpType) -> Gboolean)
    get_accessible : (GtkWidget* -> AtkObject*)
    screen_changed : ((GtkWidget*, GdkScreen*) -> Void)
    can_activate_accel : ((GtkWidget*, Guint) -> Gboolean)
    composited_changed : (GtkWidget* -> Void)
    query_tooltip : ((GtkWidget*, Gint, Gint, Gboolean, GtkTooltip*) -> Gboolean)
    compute_expand : ((GtkWidget*, Gboolean*, Gboolean*) -> Void)
    adjust_size_request : ((GtkWidget*, GtkOrientation, Gint*, Gint*) -> Void)
    adjust_size_allocation : ((GtkWidget*, GtkOrientation, Gint*, Gint*, Gint*, Gint*) -> Void)
    style_updated : (GtkWidget* -> Void)
    touch_event : ((GtkWidget*, GdkEventTouch*) -> Gboolean)
    get_preferred_height_and_baseline_for_width : ((GtkWidget*, Gint, Gint*, Gint*, Gint*, Gint*) -> Void)
    adjust_baseline_request : ((GtkWidget*, Gint*, Gint*) -> Void)
    adjust_baseline_allocation : ((GtkWidget*, Gint*) -> Void)
    queue_draw_region : ((GtkWidget*, CairoRegionT*) -> Void)
    priv : GtkWidgetClassPrivate*
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
  end
  struct X_GtkWidgetClassPrivate
    __data : UInt8[0]
  end
  struct X_GtkApplication
    parent : GApplication
    priv : GtkApplicationPrivate*
  end
  struct X_GtkApplicationClass
    parent_class : GApplicationClass
    window_added : ((GtkApplication*, GtkWindow*) -> Void)
    window_removed : ((GtkApplication*, GtkWindow*) -> Void)
    padding : Gpointer[12]
  end
  struct X_GtkApplicationPrivate
    __data : UInt8[0]
  end
  struct X_GtkContainer
    widget : GtkWidget
    priv : GtkContainerPrivate*
  end
  struct X_GtkContainerPrivate
    __data : UInt8[0]
  end
  struct X_GtkContainerClass
    parent_class : GtkWidgetClass
    add : ((GtkContainer*, GtkWidget*) -> Void)
    remove : ((GtkContainer*, GtkWidget*) -> Void)
    check_resize : (GtkContainer* -> Void)
    forall : ((GtkContainer*, Gboolean, GtkCallback, Gpointer) -> Void)
    set_focus_child : ((GtkContainer*, GtkWidget*) -> Void)
    child_type : (GtkContainer* -> GType)
    composite_name : ((GtkContainer*, GtkWidget*) -> Gchar*)
    set_child_property : ((GtkContainer*, GtkWidget*, Guint, GValue*, GParamSpec*) -> Void)
    get_child_property : ((GtkContainer*, GtkWidget*, Guint, GValue*, GParamSpec*) -> Void)
    get_path_for_child : ((GtkContainer*, GtkWidget*) -> GtkWidgetPath*)
    _handle_border_width : UInt32
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkBin
    container : GtkContainer
    priv : GtkBinPrivate*
  end
  struct X_GtkBinPrivate
    __data : UInt8[0]
  end
  struct X_GtkBinClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkWindowPrivate
    __data : UInt8[0]
  end
  struct X_GtkWindowClass
    parent_class : GtkBinClass
    set_focus : ((GtkWindow*, GtkWidget*) -> Void)
    activate_focus : (GtkWindow* -> Void)
    activate_default : (GtkWindow* -> Void)
    keys_changed : (GtkWindow* -> Void)
    enable_debugging : ((GtkWindow*, Gboolean) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
  end
  struct X_GtkWindowGeometryInfo
    __data : UInt8[0]
  end
  struct X_GtkWindowGroup
    parent_instance : GObject
    priv : GtkWindowGroupPrivate*
  end
  struct X_GtkWindowGroupClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkWindowGroupPrivate
    __data : UInt8[0]
  end
  struct X_GtkDialog
    window : GtkWindow
    priv : GtkDialogPrivate*
  end
  struct X_GtkDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkDialogClass
    parent_class : GtkWindowClass
    response : ((GtkDialog*, Gint) -> Void)
    close : (GtkDialog* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAboutDialog
    parent_instance : GtkDialog
    priv : GtkAboutDialogPrivate*
  end
  struct X_GtkAboutDialogClass
    parent_class : GtkDialogClass
    activate_link : ((GtkAboutDialog*, Gchar*) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAboutDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkMisc
    widget : GtkWidget
    priv : GtkMiscPrivate*
  end
  struct X_GtkMiscPrivate
    __data : UInt8[0]
  end
  struct X_GtkMiscClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuShell
    container : GtkContainer
    priv : GtkMenuShellPrivate*
  end
  struct X_GtkMenuShellClass
    parent_class : GtkContainerClass
    submenu_placement : Guint
    deactivate : (GtkMenuShell* -> Void)
    selection_done : (GtkMenuShell* -> Void)
    move_current : ((GtkMenuShell*, GtkMenuDirectionType) -> Void)
    activate_current : ((GtkMenuShell*, Gboolean) -> Void)
    cancel : (GtkMenuShell* -> Void)
    select_item : ((GtkMenuShell*, GtkWidget*) -> Void)
    insert : ((GtkMenuShell*, GtkWidget*, Gint) -> Void)
    get_popup_delay : (GtkMenuShell* -> Gint)
    move_selected : ((GtkMenuShell*, Gint) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuShellPrivate
    __data : UInt8[0]
  end
  struct X_GtkMenu
    menu_shell : GtkMenuShell
    priv : GtkMenuPrivate*
  end
  struct X_GtkMenuClass
    parent_class : GtkMenuShellClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuPrivate
    __data : UInt8[0]
  end
  struct X_GtkLabel
    misc : GtkMisc
    priv : GtkLabelPrivate*
  end
  struct X_GtkLabelPrivate
    __data : UInt8[0]
  end
  struct X_GtkLabelClass
    parent_class : GtkMiscClass
    move_cursor : ((GtkLabel*, GtkMovementStep, Gint, Gboolean) -> Void)
    copy_clipboard : (GtkLabel* -> Void)
    populate_popup : ((GtkLabel*, GtkMenu*) -> Void)
    activate_link : ((GtkLabel*, Gchar*) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkLabelSelectionInfo
    __data : UInt8[0]
  end
  struct X_GtkAccelLabel
    label : GtkLabel
    priv : GtkAccelLabelPrivate*
  end
  struct X_GtkAccelLabelClass
    parent_class : GtkLabelClass
    signal_quote1 : Gchar*
    signal_quote2 : Gchar*
    mod_name_shift : Gchar*
    mod_name_control : Gchar*
    mod_name_alt : Gchar*
    mod_separator : Gchar*
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAccelLabelPrivate
    __data : UInt8[0]
  end
  struct X_GtkAccelMap
    __data : UInt8[0]
  end
  struct X_GtkAccelMapClass
    __data : UInt8[0]
  end
  struct X_GtkAccessible
    parent : AtkObject
    priv : GtkAccessiblePrivate*
  end
  struct X_GtkAccessiblePrivate
    __data : UInt8[0]
  end
  struct X_GtkAccessibleClass
    parent_class : AtkObjectClass
    connect_widget_destroyed : (GtkAccessible* -> Void)
    widget_set : (GtkAccessible* -> Void)
    widget_unset : (GtkAccessible* -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkActionableInterface
    g_iface : GTypeInterface
    get_action_name : (GtkActionable* -> Gchar*)
    set_action_name : ((GtkActionable*, Gchar*) -> Void)
    get_action_target_value : (GtkActionable* -> GVariant*)
    set_action_target_value : ((GtkActionable*, GVariant*) -> Void)
  end
  struct X_GtkActionable
    __data : UInt8[0]
  end
  struct X_GtkActionBar
    bin : GtkBin
  end
  struct X_GtkActionBarPrivate
    __data : UInt8[0]
  end
  struct X_GtkActionBarClass
    parent_class : GtkBinClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAdjustmentPrivate
    __data : UInt8[0]
  end
  struct X_GtkAdjustmentClass
    parent_class : GInitiallyUnownedClass
    changed : (GtkAdjustment* -> Void)
    value_changed : (GtkAdjustment* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAppChooser
    __data : UInt8[0]
  end
  struct X_GtkAppChooserDialog
    parent : GtkDialog
    priv : GtkAppChooserDialogPrivate*
  end
  struct X_GtkAppChooserDialogClass
    parent_class : GtkDialogClass
    padding : Gpointer[16]
  end
  struct X_GtkAppChooserDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkBox
    container : GtkContainer
    priv : GtkBoxPrivate*
  end
  struct X_GtkBoxPrivate
    __data : UInt8[0]
  end
  struct X_GtkBoxClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAppChooserWidget
    parent : GtkBox
    priv : GtkAppChooserWidgetPrivate*
  end
  struct X_GtkAppChooserWidgetClass
    parent_class : GtkBoxClass
    application_selected : ((GtkAppChooserWidget*, GAppInfo*) -> Void)
    application_activated : ((GtkAppChooserWidget*, GAppInfo*) -> Void)
    populate_popup : ((GtkAppChooserWidget*, GtkMenu*, GAppInfo*) -> Void)
    padding : Gpointer[16]
  end
  struct X_GtkAppChooserWidgetPrivate
    __data : UInt8[0]
  end
  struct X_GtkTreeIter
    stamp : Gint
    user_data : Gpointer
    user_data2 : Gpointer
    user_data3 : Gpointer
  end
  struct X_GtkTreePath
    __data : UInt8[0]
  end
  struct X_GtkTreeRowReference
    __data : UInt8[0]
  end
  struct X_GtkTreeModel
    __data : UInt8[0]
  end
  struct X_GtkTreeModelIface
    g_iface : GTypeInterface
    row_changed : ((GtkTreeModel*, GtkTreePath*, GtkTreeIter*) -> Void)
    row_inserted : ((GtkTreeModel*, GtkTreePath*, GtkTreeIter*) -> Void)
    row_has_child_toggled : ((GtkTreeModel*, GtkTreePath*, GtkTreeIter*) -> Void)
    row_deleted : ((GtkTreeModel*, GtkTreePath*) -> Void)
    rows_reordered : ((GtkTreeModel*, GtkTreePath*, GtkTreeIter*, Gint*) -> Void)
    get_flags : (GtkTreeModel* -> GtkTreeModelFlags)
    get_n_columns : (GtkTreeModel* -> Gint)
    get_column_type : ((GtkTreeModel*, Gint) -> GType)
    get_iter : ((GtkTreeModel*, GtkTreeIter*, GtkTreePath*) -> Gboolean)
    get_path : ((GtkTreeModel*, GtkTreeIter*) -> GtkTreePath*)
    get_value : ((GtkTreeModel*, GtkTreeIter*, Gint, GValue*) -> Void)
    iter_next : ((GtkTreeModel*, GtkTreeIter*) -> Gboolean)
    iter_previous : ((GtkTreeModel*, GtkTreeIter*) -> Gboolean)
    iter_children : ((GtkTreeModel*, GtkTreeIter*, GtkTreeIter*) -> Gboolean)
    iter_has_child : ((GtkTreeModel*, GtkTreeIter*) -> Gboolean)
    iter_n_children : ((GtkTreeModel*, GtkTreeIter*) -> Gint)
    iter_nth_child : ((GtkTreeModel*, GtkTreeIter*, GtkTreeIter*, Gint) -> Gboolean)
    iter_parent : ((GtkTreeModel*, GtkTreeIter*, GtkTreeIter*) -> Gboolean)
    ref_node : ((GtkTreeModel*, GtkTreeIter*) -> Void)
    unref_node : ((GtkTreeModel*, GtkTreeIter*) -> Void)
  end
  struct X_GtkCellEditable
    __data : UInt8[0]
  end
  struct X_GtkCellEditableIface
    g_iface : GTypeInterface
    editing_done : (GtkCellEditable* -> Void)
    remove_widget : (GtkCellEditable* -> Void)
    start_editing : ((GtkCellEditable*, GdkEvent*) -> Void)
  end
  struct X_GtkCellRenderer
    parent_instance : GInitiallyUnowned
    priv : GtkCellRendererPrivate*
  end
  struct X_GtkCellRendererPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererClass
    parent_class : GInitiallyUnownedClass
    get_request_mode : (GtkCellRenderer* -> GtkSizeRequestMode)
    get_preferred_width : ((GtkCellRenderer*, GtkWidget*, Gint*, Gint*) -> Void)
    get_preferred_height_for_width : ((GtkCellRenderer*, GtkWidget*, Gint, Gint*, Gint*) -> Void)
    get_preferred_height : ((GtkCellRenderer*, GtkWidget*, Gint*, Gint*) -> Void)
    get_preferred_width_for_height : ((GtkCellRenderer*, GtkWidget*, Gint, Gint*, Gint*) -> Void)
    get_aligned_area : ((GtkCellRenderer*, GtkWidget*, GtkCellRendererState, GdkRectangle*, GdkRectangle*) -> Void)
    get_size : ((GtkCellRenderer*, GtkWidget*, GdkRectangle*, Gint*, Gint*, Gint*, Gint*) -> Void)
    render : ((GtkCellRenderer*, CairoT*, GtkWidget*, GdkRectangle*, GdkRectangle*, GtkCellRendererState) -> Void)
    activate : ((GtkCellRenderer*, GdkEvent*, GtkWidget*, Gchar*, GdkRectangle*, GdkRectangle*, GtkCellRendererState) -> Gboolean)
    start_editing : ((GtkCellRenderer*, GdkEvent*, GtkWidget*, Gchar*, GdkRectangle*, GdkRectangle*, GtkCellRendererState) -> GtkCellEditable*)
    editing_canceled : (GtkCellRenderer* -> Void)
    editing_started : ((GtkCellRenderer*, GtkCellEditable*, Gchar*) -> Void)
    priv : GtkCellRendererClassPrivate*
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererClassPrivate
    __data : UInt8[0]
  end
  struct X_GtkTreeSortable
    __data : UInt8[0]
  end
  struct X_GtkTreeSortableIface
    g_iface : GTypeInterface
    sort_column_changed : (GtkTreeSortable* -> Void)
    get_sort_column_id : ((GtkTreeSortable*, Gint*, GtkSortType*) -> Gboolean)
    set_sort_column_id : ((GtkTreeSortable*, Gint, GtkSortType) -> Void)
    set_sort_func : ((GtkTreeSortable*, Gint, GtkTreeIterCompareFunc, Gpointer, GDestroyNotify) -> Void)
    set_default_sort_func : ((GtkTreeSortable*, GtkTreeIterCompareFunc, Gpointer, GDestroyNotify) -> Void)
    has_default_sort_func : (GtkTreeSortable* -> Gboolean)
  end
  struct X_GtkCellArea
    parent_instance : GInitiallyUnowned
    priv : GtkCellAreaPrivate*
  end
  struct X_GtkCellAreaClass
    parent_class : GInitiallyUnownedClass
    add : ((GtkCellArea*, GtkCellRenderer*) -> Void)
    remove : ((GtkCellArea*, GtkCellRenderer*) -> Void)
    foreach : ((GtkCellArea*, GtkCellCallback, Gpointer) -> Void)
    foreach_alloc : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, GdkRectangle*, GdkRectangle*, GtkCellAllocCallback, Gpointer) -> Void)
    event : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, GdkEvent*, GdkRectangle*, GtkCellRendererState) -> Gint)
    render : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, CairoT*, GdkRectangle*, GdkRectangle*, GtkCellRendererState, Gboolean) -> Void)
    apply_attributes : ((GtkCellArea*, GtkTreeModel*, GtkTreeIter*, Gboolean, Gboolean) -> Void)
    create_context : (GtkCellArea* -> GtkCellAreaContext*)
    copy_context : ((GtkCellArea*, GtkCellAreaContext*) -> GtkCellAreaContext*)
    get_request_mode : (GtkCellArea* -> GtkSizeRequestMode)
    get_preferred_width : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, Gint*, Gint*) -> Void)
    get_preferred_height_for_width : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, Gint, Gint*, Gint*) -> Void)
    get_preferred_height : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, Gint*, Gint*) -> Void)
    get_preferred_width_for_height : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, Gint, Gint*, Gint*) -> Void)
    set_cell_property : ((GtkCellArea*, GtkCellRenderer*, Guint, GValue*, GParamSpec*) -> Void)
    get_cell_property : ((GtkCellArea*, GtkCellRenderer*, Guint, GValue*, GParamSpec*) -> Void)
    focus : ((GtkCellArea*, GtkDirectionType) -> Gboolean)
    is_activatable : (GtkCellArea* -> Gboolean)
    activate : ((GtkCellArea*, GtkCellAreaContext*, GtkWidget*, GdkRectangle*, GtkCellRendererState, Gboolean) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkCellAreaPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellAreaContext
    parent_instance : GObject
    priv : GtkCellAreaContextPrivate*
  end
  struct X_GtkTreeViewColumn
    parent_instance : GInitiallyUnowned
    priv : GtkTreeViewColumnPrivate*
  end
  struct X_GtkTreeViewColumnClass
    parent_class : GInitiallyUnownedClass
    clicked : (GtkTreeViewColumn* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTreeViewColumnPrivate
    __data : UInt8[0]
  end
  struct X_GtkTextAttributes
    refcount : Guint
    appearance : GtkTextAppearance
    justification : GtkJustification
    direction : GtkTextDirection
    font : PangoFontDescription*
    font_scale : Gdouble
    left_margin : Gint
    right_margin : Gint
    indent : Gint
    pixels_above_lines : Gint
    pixels_below_lines : Gint
    pixels_inside_wrap : Gint
    tabs : PangoTabArray*
    wrap_mode : GtkWrapMode
    language : PangoLanguage*
    pg_bg_color : GdkColor*
    invisible : Guint
    bg_full_height : Guint
    editable : Guint
    no_fallback : Guint
    pg_bg_rgba : GdkRGBA*
    letter_spacing : Gint
    font_features : Gchar*
  end
  struct X_GtkTextAppearance
    bg_color : GdkColor
    fg_color : GdkColor
    rise : Gint
    underline : Guint
    strikethrough : Guint
    draw_bg : Guint
    inside_selection : Guint
    is_text : Guint
    rgba : GdkRGBA*[2]
  end
  struct X_GtkTextChildAnchor
    parent_instance : GObject
    segment : Gpointer
  end
  struct X_GtkTextChildAnchorClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTextIter
    dummy1 : Gpointer
    dummy2 : Gpointer
    dummy3 : Gint
    dummy4 : Gint
    dummy5 : Gint
    dummy6 : Gint
    dummy7 : Gint
    dummy8 : Gint
    dummy9 : Gpointer
    dummy10 : Gpointer
    dummy11 : Gint
    dummy12 : Gint
    dummy13 : Gint
    dummy14 : Gpointer
  end
  struct X_GtkTextTagTable
    parent_instance : GObject
    priv : GtkTextTagTablePrivate*
  end
  struct X_GtkTextTag
    parent_instance : GObject
    priv : GtkTextTagPrivate*
  end
  struct X_GtkTextTagPrivate
    __data : UInt8[0]
  end
  struct X_GtkTextTagClass
    parent_class : GObjectClass
    event : ((GtkTextTag*, GObject*, GdkEvent*, GtkTextIter*) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTextBuffer
    parent_instance : GObject
    priv : GtkTextBufferPrivate*
  end
  struct X_GtkTargetPair
    target : GdkAtom
    flags : Guint
    info : Guint
  end
  struct X_GtkTargetList
    __data : UInt8[0]
  end
  struct X_GtkTargetEntry
    target : Gchar*
    flags : Guint
    info : Guint
  end
  struct X_GtkEditable
    __data : UInt8[0]
  end
  struct X_GtkEditableInterface
    base_iface : GTypeInterface
    insert_text : ((GtkEditable*, Gchar*, Gint, Gint*) -> Void)
    delete_text : ((GtkEditable*, Gint, Gint) -> Void)
    changed : (GtkEditable* -> Void)
    do_insert_text : ((GtkEditable*, Gchar*, Gint, Gint*) -> Void)
    do_delete_text : ((GtkEditable*, Gint, Gint) -> Void)
    get_chars : ((GtkEditable*, Gint, Gint) -> Gchar*)
    set_selection_bounds : ((GtkEditable*, Gint, Gint) -> Void)
    get_selection_bounds : ((GtkEditable*, Gint*, Gint*) -> Gboolean)
    set_position : ((GtkEditable*, Gint) -> Void)
    get_position : (GtkEditable* -> Gint)
  end
  struct X_GtkIMContext
    parent_instance : GObject
  end
  struct X_GtkIMContextClass
    parent_class : GObjectClass
    preedit_start : (GtkIMContext* -> Void)
    preedit_end : (GtkIMContext* -> Void)
    preedit_changed : (GtkIMContext* -> Void)
    commit : ((GtkIMContext*, Gchar*) -> Void)
    retrieve_surrounding : (GtkIMContext* -> Gboolean)
    delete_surrounding : ((GtkIMContext*, Gint, Gint) -> Gboolean)
    set_client_window : ((GtkIMContext*, GdkWindow*) -> Void)
    get_preedit_string : ((GtkIMContext*, Gchar**, PangoAttrList**, Gint*) -> Void)
    filter_keypress : ((GtkIMContext*, GdkEventKey*) -> Gboolean)
    focus_in : (GtkIMContext* -> Void)
    focus_out : (GtkIMContext* -> Void)
    reset : (GtkIMContext* -> Void)
    set_cursor_location : ((GtkIMContext*, GdkRectangle*) -> Void)
    set_use_preedit : ((GtkIMContext*, Gboolean) -> Void)
    set_surrounding : ((GtkIMContext*, Gchar*, Gint, Gint) -> Void)
    get_surrounding : ((GtkIMContext*, Gchar**, Gint*) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
  end
  struct X_GtkEntryBuffer
    parent_instance : GObject
    priv : GtkEntryBufferPrivate*
  end
  struct X_GtkEntryBufferClass
    parent_class : GObjectClass
    inserted_text : ((GtkEntryBuffer*, Guint, Gchar*, Guint) -> Void)
    deleted_text : ((GtkEntryBuffer*, Guint, Guint) -> Void)
    get_text : ((GtkEntryBuffer*, Gsize*) -> Gchar*)
    get_length : (GtkEntryBuffer* -> Guint)
    insert_text : ((GtkEntryBuffer*, Guint, Gchar*, Guint) -> Guint)
    delete_text : ((GtkEntryBuffer*, Guint, Guint) -> Guint)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkEntryBufferPrivate
    __data : UInt8[0]
  end
  struct X_GtkListStore
    parent : GObject
    priv : GtkListStorePrivate*
  end
  struct X_GtkListStorePrivate
    __data : UInt8[0]
  end
  struct X_GtkListStoreClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTreeModelFilter
    parent : GObject
    priv : GtkTreeModelFilterPrivate*
  end
  struct X_GtkTreeModelFilterClass
    parent_class : GObjectClass
    visible : ((GtkTreeModelFilter*, GtkTreeModel*, GtkTreeIter*) -> Gboolean)
    modify : ((GtkTreeModelFilter*, GtkTreeModel*, GtkTreeIter*, GValue*, Gint) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTreeModelFilterPrivate
    __data : UInt8[0]
  end
  struct X_GtkEntryCompletion
    parent_instance : GObject
    priv : GtkEntryCompletionPrivate*
  end
  struct X_GtkEntryCompletionClass
    parent_class : GObjectClass
    match_selected : ((GtkEntryCompletion*, GtkTreeModel*, GtkTreeIter*) -> Gboolean)
    action_activated : ((GtkEntryCompletion*, Gint) -> Void)
    insert_prefix : ((GtkEntryCompletion*, Gchar*) -> Gboolean)
    cursor_on_match : ((GtkEntryCompletion*, GtkTreeModel*, GtkTreeIter*) -> Gboolean)
    no_matches : (GtkEntryCompletion* -> Void)
    _gtk_reserved0 : ( -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
  end
  struct X_GtkEntryCompletionPrivate
    __data : UInt8[0]
  end
  struct X_GtkImage
    misc : GtkMisc
    priv : GtkImagePrivate*
  end
  struct X_GtkImagePrivate
    __data : UInt8[0]
  end
  struct X_GtkImageClass
    parent_class : GtkMiscClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkEntry
    parent_instance : GtkWidget
    priv : GtkEntryPrivate*
  end
  struct X_GtkEntryPrivate
    __data : UInt8[0]
  end
  struct X_GtkEntryClass
    parent_class : GtkWidgetClass
    populate_popup : ((GtkEntry*, GtkWidget*) -> Void)
    activate : (GtkEntry* -> Void)
    move_cursor : ((GtkEntry*, GtkMovementStep, Gint, Gboolean) -> Void)
    insert_at_cursor : ((GtkEntry*, Gchar*) -> Void)
    delete_from_cursor : ((GtkEntry*, GtkDeleteType, Gint) -> Void)
    backspace : (GtkEntry* -> Void)
    cut_clipboard : (GtkEntry* -> Void)
    copy_clipboard : (GtkEntry* -> Void)
    paste_clipboard : (GtkEntry* -> Void)
    toggle_overwrite : (GtkEntry* -> Void)
    get_text_area_size : ((GtkEntry*, Gint*, Gint*, Gint*, Gint*) -> Void)
    get_frame_size : ((GtkEntry*, Gint*, Gint*, Gint*, Gint*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
  end
  struct X_GtkTreeView
    parent : GtkContainer
    priv : GtkTreeViewPrivate*
  end
  struct X_GtkTreeViewClass
    parent_class : GtkContainerClass
    row_activated : ((GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*) -> Void)
    test_expand_row : ((GtkTreeView*, GtkTreeIter*, GtkTreePath*) -> Gboolean)
    test_collapse_row : ((GtkTreeView*, GtkTreeIter*, GtkTreePath*) -> Gboolean)
    row_expanded : ((GtkTreeView*, GtkTreeIter*, GtkTreePath*) -> Void)
    row_collapsed : ((GtkTreeView*, GtkTreeIter*, GtkTreePath*) -> Void)
    columns_changed : (GtkTreeView* -> Void)
    cursor_changed : (GtkTreeView* -> Void)
    move_cursor : ((GtkTreeView*, GtkMovementStep, Gint) -> Gboolean)
    select_all : (GtkTreeView* -> Gboolean)
    unselect_all : (GtkTreeView* -> Gboolean)
    select_cursor_row : ((GtkTreeView*, Gboolean) -> Gboolean)
    toggle_cursor_row : (GtkTreeView* -> Gboolean)
    expand_collapse_cursor_row : ((GtkTreeView*, Gboolean, Gboolean, Gboolean) -> Gboolean)
    select_cursor_parent : (GtkTreeView* -> Gboolean)
    start_interactive_search : (GtkTreeView* -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkTreeViewPrivate
    __data : UInt8[0]
  end
  struct X_GtkTreeSelection
    parent : GObject
    priv : GtkTreeSelectionPrivate*
  end
  struct X_GtkTreeSelectionClass
    parent_class : GObjectClass
    changed : (GtkTreeSelection* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkComboBox
    parent_instance : GtkBin
    priv : GtkComboBoxPrivate*
  end
  struct X_GtkComboBoxClass
    parent_class : GtkBinClass
    changed : (GtkComboBox* -> Void)
    format_entry_text : ((GtkComboBox*, Gchar*) -> Gchar*)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
  end
  struct X_GtkComboBoxPrivate
    __data : UInt8[0]
  end
  struct X_GtkAppChooserButton
    parent : GtkComboBox
    priv : GtkAppChooserButtonPrivate*
  end
  struct X_GtkAppChooserButtonClass
    parent_class : GtkComboBoxClass
    custom_item_activated : ((GtkAppChooserButton*, Gchar*) -> Void)
    padding : Gpointer[16]
  end
  struct X_GtkAppChooserButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkShortcutsWindow
    window : GtkWindow
  end
  struct X_GtkShortcutsWindowClass
    parent_class : GtkWindowClass
    close : (GtkShortcutsWindow* -> Void)
    search : (GtkShortcutsWindow* -> Void)
  end
  struct X_GtkApplicationWindowPrivate
    __data : UInt8[0]
  end
  struct X_GtkApplicationWindowClass
    parent_class : GtkWindowClass
    padding : Gpointer[14]
  end
  struct X_GtkApplicationWindow
    parent_instance : GtkWindow
    priv : GtkApplicationWindowPrivate*
  end
  struct X_GtkFrame
    bin : GtkBin
    priv : GtkFramePrivate*
  end
  struct X_GtkFramePrivate
    __data : UInt8[0]
  end
  struct X_GtkFrameClass
    parent_class : GtkBinClass
    compute_child_allocation : ((GtkFrame*, GtkAllocation*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAspectFrame
    frame : GtkFrame
    priv : GtkAspectFramePrivate*
  end
  struct X_GtkAspectFramePrivate
    __data : UInt8[0]
  end
  struct X_GtkAspectFrameClass
    parent_class : GtkFrameClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAssistant
    parent : GtkWindow
    priv : GtkAssistantPrivate*
  end
  struct X_GtkAssistantPrivate
    __data : UInt8[0]
  end
  struct X_GtkAssistantClass
    parent_class : GtkWindowClass
    prepare : ((GtkAssistant*, GtkWidget*) -> Void)
    apply : (GtkAssistant* -> Void)
    close : (GtkAssistant* -> Void)
    cancel : (GtkAssistant* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
  end
  struct X_GtkButtonBox
    box : GtkBox
    priv : GtkButtonBoxPrivate*
  end
  struct X_GtkButtonBoxPrivate
    __data : UInt8[0]
  end
  struct X_GtkButtonBoxClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkBindingSet
    set_name : Gchar*
    priority : Gint
    widget_path_pspecs : GSList*
    widget_class_pspecs : GSList*
    class_branch_pspecs : GSList*
    entries : GtkBindingEntry*
    current : GtkBindingEntry*
    parsed : Guint
  end
  struct X_GtkBindingEntry
    keyval : Guint
    modifiers : GdkModifierType
    binding_set : GtkBindingSet*
    destroyed : Guint
    in_emission : Guint
    marks_unbound : Guint
    set_next : GtkBindingEntry*
    hash_next : GtkBindingEntry*
    signals : GtkBindingSignal*
  end
  struct X_GtkBindingSignal
    next : GtkBindingSignal*
    signal_name : Gchar*
    n_args : Guint
    args : GtkBindingArg*
  end
  struct X_GtkBindingArg
    arg_type : GType
    anon_union_16 : AnonUnion16
    d : AnonUnion16
  end
  struct X_GtkBuilderClass
    parent_class : GObjectClass
    get_type_from_name : ((GtkBuilder*, UInt8*) -> GType)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkBuilderPrivate
    __data : UInt8[0]
  end
  struct X_GtkBuildable
    __data : UInt8[0]
  end
  struct X_GtkBuildableIface
    g_iface : GTypeInterface
    set_name : ((GtkBuildable*, Gchar*) -> Void)
    get_name : (GtkBuildable* -> Gchar*)
    add_child : ((GtkBuildable*, GtkBuilder*, GObject*, Gchar*) -> Void)
    set_buildable_property : ((GtkBuildable*, GtkBuilder*, Gchar*, GValue*) -> Void)
    construct_child : ((GtkBuildable*, GtkBuilder*, Gchar*) -> GObject*)
    custom_tag_start : ((GtkBuildable*, GtkBuilder*, GObject*, Gchar*, GMarkupParser*, Gpointer*) -> Gboolean)
    custom_tag_end : ((GtkBuildable*, GtkBuilder*, GObject*, Gchar*, Gpointer*) -> Void)
    custom_finished : ((GtkBuildable*, GtkBuilder*, GObject*, Gchar*, Gpointer) -> Void)
    parser_finished : ((GtkBuildable*, GtkBuilder*) -> Void)
    get_internal_child : ((GtkBuildable*, GtkBuilder*, Gchar*) -> GObject*)
  end
  struct X_GtkButton
    bin : GtkBin
    priv : GtkButtonPrivate*
  end
  struct X_GtkButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkButtonClass
    parent_class : GtkBinClass
    pressed : (GtkButton* -> Void)
    released : (GtkButton* -> Void)
    clicked : (GtkButton* -> Void)
    enter : (GtkButton* -> Void)
    leave : (GtkButton* -> Void)
    activate : (GtkButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCalendar
    widget : GtkWidget
    priv : GtkCalendarPrivate*
  end
  struct X_GtkCalendarClass
    parent_class : GtkWidgetClass
    month_changed : (GtkCalendar* -> Void)
    day_selected : (GtkCalendar* -> Void)
    day_selected_double_click : (GtkCalendar* -> Void)
    prev_month : (GtkCalendar* -> Void)
    next_month : (GtkCalendar* -> Void)
    prev_year : (GtkCalendar* -> Void)
    next_year : (GtkCalendar* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCalendarPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellAreaBox
    parent_instance : GtkCellArea
    priv : GtkCellAreaBoxPrivate*
  end
  struct X_GtkCellAreaBoxClass
    parent_class : GtkCellAreaClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellAreaBoxPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellAreaContextPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellAreaContextClass
    parent_class : GObjectClass
    allocate : ((GtkCellAreaContext*, Gint, Gint) -> Void)
    reset : (GtkCellAreaContext* -> Void)
    get_preferred_height_for_width : ((GtkCellAreaContext*, Gint, Gint*, Gint*) -> Void)
    get_preferred_width_for_height : ((GtkCellAreaContext*, Gint, Gint*, Gint*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
  end
  struct X_GtkCellLayout
    __data : UInt8[0]
  end
  struct X_GtkCellLayoutIface
    g_iface : GTypeInterface
    pack_start : ((GtkCellLayout*, GtkCellRenderer*, Gboolean) -> Void)
    pack_end : ((GtkCellLayout*, GtkCellRenderer*, Gboolean) -> Void)
    clear : (GtkCellLayout* -> Void)
    add_attribute : ((GtkCellLayout*, GtkCellRenderer*, Gchar*, Gint) -> Void)
    set_cell_data_func : ((GtkCellLayout*, GtkCellRenderer*, GtkCellLayoutDataFunc, Gpointer, GDestroyNotify) -> Void)
    clear_attributes : ((GtkCellLayout*, GtkCellRenderer*) -> Void)
    reorder : ((GtkCellLayout*, GtkCellRenderer*, Gint) -> Void)
    get_cells : (GtkCellLayout* -> GList*)
    get_area : (GtkCellLayout* -> GtkCellArea*)
  end
  struct X_GtkCellRendererText
    parent : GtkCellRenderer
    priv : GtkCellRendererTextPrivate*
  end
  struct X_GtkCellRendererTextPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererTextClass
    parent_class : GtkCellRendererClass
    edited : ((GtkCellRendererText*, Gchar*, Gchar*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererAccel
    parent : GtkCellRendererText
    priv : GtkCellRendererAccelPrivate*
  end
  struct X_GtkCellRendererAccelPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererAccelClass
    parent_class : GtkCellRendererTextClass
    accel_edited : ((GtkCellRendererAccel*, Gchar*, Guint, GdkModifierType, Guint) -> Void)
    accel_cleared : ((GtkCellRendererAccel*, Gchar*) -> Void)
    _gtk_reserved0 : ( -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererCombo
    parent : GtkCellRendererText
    priv : GtkCellRendererComboPrivate*
  end
  struct X_GtkCellRendererComboPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererComboClass
    parent : GtkCellRendererTextClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererPixbuf
    parent : GtkCellRenderer
    priv : GtkCellRendererPixbufPrivate*
  end
  struct X_GtkCellRendererPixbufPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererPixbufClass
    parent_class : GtkCellRendererClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererProgress
    parent_instance : GtkCellRenderer
    priv : GtkCellRendererProgressPrivate*
  end
  struct X_GtkCellRendererProgressClass
    parent_class : GtkCellRendererClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererProgressPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererSpin
    parent : GtkCellRendererText
    priv : GtkCellRendererSpinPrivate*
  end
  struct X_GtkCellRendererSpinClass
    parent : GtkCellRendererTextClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererSpinPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererSpinner
    parent : GtkCellRenderer
    priv : GtkCellRendererSpinnerPrivate*
  end
  struct X_GtkCellRendererSpinnerClass
    parent_class : GtkCellRendererClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellRendererSpinnerPrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererToggle
    parent : GtkCellRenderer
    priv : GtkCellRendererTogglePrivate*
  end
  struct X_GtkCellRendererTogglePrivate
    __data : UInt8[0]
  end
  struct X_GtkCellRendererToggleClass
    parent_class : GtkCellRendererClass
    toggled : ((GtkCellRendererToggle*, Gchar*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellView
    parent_instance : GtkWidget
    priv : GtkCellViewPrivate*
  end
  struct X_GtkCellViewClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCellViewPrivate
    __data : UInt8[0]
  end
  struct X_GtkToggleButton
    button : GtkButton
    priv : GtkToggleButtonPrivate*
  end
  struct X_GtkToggleButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkToggleButtonClass
    parent_class : GtkButtonClass
    toggled : (GtkToggleButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCheckButton
    toggle_button : GtkToggleButton
  end
  struct X_GtkCheckButtonClass
    parent_class : GtkToggleButtonClass
    draw_indicator : ((GtkCheckButton*, CairoT*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuItem
    bin : GtkBin
    priv : GtkMenuItemPrivate*
  end
  struct X_GtkMenuItemClass
    parent_class : GtkBinClass
    hide_on_activate : Guint
    activate : (GtkMenuItem* -> Void)
    activate_item : (GtkMenuItem* -> Void)
    toggle_size_request : ((GtkMenuItem*, Gint*) -> Void)
    toggle_size_allocate : ((GtkMenuItem*, Gint) -> Void)
    set_label : ((GtkMenuItem*, Gchar*) -> Void)
    get_label : (GtkMenuItem* -> Gchar*)
    select : (GtkMenuItem* -> Void)
    deselect : (GtkMenuItem* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkCheckMenuItem
    menu_item : GtkMenuItem
    priv : GtkCheckMenuItemPrivate*
  end
  struct X_GtkCheckMenuItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkCheckMenuItemClass
    parent_class : GtkMenuItemClass
    toggled : (GtkCheckMenuItem* -> Void)
    draw_indicator : ((GtkCheckMenuItem*, CairoT*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkColorButton
    button : GtkButton
    priv : GtkColorButtonPrivate*
  end
  struct X_GtkColorButtonClass
    parent_class : GtkButtonClass
    color_set : (GtkColorButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkColorButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkColorChooser
    __data : UInt8[0]
  end
  struct X_GtkColorChooserInterface
    base_interface : GTypeInterface
    get_rgba : ((GtkColorChooser*, GdkRGBA*) -> Void)
    set_rgba : ((GtkColorChooser*, GdkRGBA*) -> Void)
    add_palette : ((GtkColorChooser*, GtkOrientation, Gint, Gint, GdkRGBA*) -> Void)
    color_activated : ((GtkColorChooser*, GdkRGBA*) -> Void)
    padding : Gpointer[12]
  end
  struct X_GtkColorChooserDialog
    parent_instance : GtkDialog
    priv : GtkColorChooserDialogPrivate*
  end
  struct X_GtkColorChooserDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkColorChooserDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkColorChooserWidget
    parent_instance : GtkBox
    priv : GtkColorChooserWidgetPrivate*
  end
  struct X_GtkColorChooserWidgetPrivate
    __data : UInt8[0]
  end
  struct X_GtkColorChooserWidgetClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkComboBoxText
    parent_instance : GtkComboBox
    priv : GtkComboBoxTextPrivate*
  end
  struct X_GtkComboBoxTextPrivate
    __data : UInt8[0]
  end
  struct X_GtkComboBoxTextClass
    parent_class : GtkComboBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCssSection
    __data : UInt8[0]
  end
  struct X_GtkCssProvider
    parent_instance : GObject
    priv : GtkCssProviderPrivate*
  end
  struct X_GtkCssProviderClass
    parent_class : GObjectClass
    parsing_error : ((GtkCssProvider*, GtkCssSection*, GError*) -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkCssProviderPrivate
    __data : UInt8[0]
  end
  struct X_GtkDrawingArea
    widget : GtkWidget
    dummy : Gpointer
  end
  struct X_GtkDrawingAreaClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkEventBox
    bin : GtkBin
    priv : GtkEventBoxPrivate*
  end
  struct X_GtkEventBoxClass
    parent_class : GtkBinClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkEventBoxPrivate
    __data : UInt8[0]
  end
  struct X_GtkEventController
    __data : UInt8[0]
  end
  struct X_GtkEventControllerClass
    __data : UInt8[0]
  end
  struct X_GtkExpander
    bin : GtkBin
    priv : GtkExpanderPrivate*
  end
  struct X_GtkExpanderClass
    parent_class : GtkBinClass
    activate : (GtkExpander* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkExpanderPrivate
    __data : UInt8[0]
  end
  struct X_GtkFixed
    container : GtkContainer
    priv : GtkFixedPrivate*
  end
  struct X_GtkFixedPrivate
    __data : UInt8[0]
  end
  struct X_GtkFixedClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFixedChild
    widget : GtkWidget*
    x : Gint
    y : Gint
  end
  struct X_GtkFileFilter
    __data : UInt8[0]
  end
  struct X_GtkFileFilterInfo
    contains : GtkFileFilterFlags
    filename : Gchar*
    uri : Gchar*
    display_name : Gchar*
    mime_type : Gchar*
  end
  struct X_GtkFileChooser
    __data : UInt8[0]
  end
  struct X_GtkFileChooserButton
    parent : GtkBox
    priv : GtkFileChooserButtonPrivate*
  end
  struct X_GtkFileChooserButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkFileChooserButtonClass
    parent_class : GtkBoxClass
    file_set : (GtkFileChooserButton* -> Void)
    __gtk_reserved1 : Void*
    __gtk_reserved2 : Void*
    __gtk_reserved3 : Void*
    __gtk_reserved4 : Void*
  end
  struct X_GtkFileChooserDialog
    parent_instance : GtkDialog
    priv : GtkFileChooserDialogPrivate*
  end
  struct X_GtkFileChooserDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkFileChooserDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkNativeDialog
    parent_instance : GObject
  end
  struct X_GtkNativeDialogClass
    parent_class : GObjectClass
    response : ((GtkNativeDialog*, Gint) -> Void)
    show : (GtkNativeDialog* -> Void)
    hide : (GtkNativeDialog* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFileChooserNative
    __data : UInt8[0]
  end
  struct AnonStruct21
    parent_class : GtkNativeDialogClass
  end
  struct X_GtkFileChooserWidget
    parent_instance : GtkBox
    priv : GtkFileChooserWidgetPrivate*
  end
  struct X_GtkFileChooserWidgetPrivate
    __data : UInt8[0]
  end
  struct X_GtkFileChooserWidgetClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFlowBox
    container : GtkContainer
  end
  struct X_GtkFlowBoxClass
    parent_class : GtkContainerClass
    child_activated : ((GtkFlowBox*, GtkFlowBoxChild*) -> Void)
    selected_children_changed : (GtkFlowBox* -> Void)
    activate_cursor_child : (GtkFlowBox* -> Void)
    toggle_cursor_child : (GtkFlowBox* -> Void)
    move_cursor : ((GtkFlowBox*, GtkMovementStep, Gint) -> Gboolean)
    select_all : (GtkFlowBox* -> Void)
    unselect_all : (GtkFlowBox* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
  end
  struct X_GtkFlowBoxChild
    parent_instance : GtkBin
  end
  struct X_GtkFlowBoxChildClass
    parent_class : GtkBinClass
    activate : (GtkFlowBoxChild* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
  end
  struct X_GtkFontButton
    button : GtkButton
    priv : GtkFontButtonPrivate*
  end
  struct X_GtkFontButtonClass
    parent_class : GtkButtonClass
    font_set : (GtkFontButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFontButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkFontChooser
    __data : UInt8[0]
  end
  struct X_GtkFontChooserIface
    base_iface : GTypeInterface
    get_font_family : (GtkFontChooser* -> PangoFontFamily*)
    get_font_face : (GtkFontChooser* -> PangoFontFace*)
    get_font_size : (GtkFontChooser* -> Gint)
    set_filter_func : ((GtkFontChooser*, GtkFontFilterFunc, Gpointer, GDestroyNotify) -> Void)
    font_activated : ((GtkFontChooser*, Gchar*) -> Void)
    set_font_map : ((GtkFontChooser*, PangoFontMap*) -> Void)
    get_font_map : (GtkFontChooser* -> PangoFontMap*)
    padding : Gpointer[10]
  end
  struct X_GtkFontChooserDialog
    parent_instance : GtkDialog
    priv : GtkFontChooserDialogPrivate*
  end
  struct X_GtkFontChooserDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkFontChooserDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFontChooserWidget
    parent_instance : GtkBox
    priv : GtkFontChooserWidgetPrivate*
  end
  struct X_GtkFontChooserWidgetPrivate
    __data : UInt8[0]
  end
  struct X_GtkFontChooserWidgetClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkGesture
    __data : UInt8[0]
  end
  struct X_GtkGestureClass
    __data : UInt8[0]
  end
  struct X_GtkGestureSingle
    __data : UInt8[0]
  end
  struct X_GtkGestureSingleClass
    __data : UInt8[0]
  end
  struct X_GtkGestureDrag
    __data : UInt8[0]
  end
  struct X_GtkGestureDragClass
    __data : UInt8[0]
  end
  struct X_GtkGestureLongPress
    __data : UInt8[0]
  end
  struct X_GtkGestureLongPressClass
    __data : UInt8[0]
  end
  struct X_GtkGestureMultiPress
    __data : UInt8[0]
  end
  struct X_GtkGestureMultiPressClass
    __data : UInt8[0]
  end
  struct X_GtkGesturePan
    __data : UInt8[0]
  end
  struct X_GtkGesturePanClass
    __data : UInt8[0]
  end
  struct X_GtkGestureRotate
    __data : UInt8[0]
  end
  struct X_GtkGestureRotateClass
    __data : UInt8[0]
  end
  struct X_GtkGestureSwipe
    __data : UInt8[0]
  end
  struct X_GtkGestureSwipeClass
    __data : UInt8[0]
  end
  struct X_GtkGestureZoom
    __data : UInt8[0]
  end
  struct X_GtkGestureZoomClass
    __data : UInt8[0]
  end
  struct X_GtkGLArea
    parent_instance : GtkWidget
  end
  struct X_GtkGLAreaClass
    parent_class : GtkWidgetClass
    render : ((GtkGLArea*, GdkGLContext*) -> Gboolean)
    resize : ((GtkGLArea*, Int32, Int32) -> Void)
    create_context : (GtkGLArea* -> GdkGLContext*)
    _padding : Gpointer[6]
  end
  struct X_GtkGrid
    container : GtkContainer
    priv : GtkGridPrivate*
  end
  struct X_GtkGridPrivate
    __data : UInt8[0]
  end
  struct X_GtkGridClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkHeaderBar
    container : GtkContainer
  end
  struct X_GtkHeaderBarPrivate
    __data : UInt8[0]
  end
  struct X_GtkHeaderBarClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkIconFactory
    parent_instance : GObject
    priv : GtkIconFactoryPrivate*
  end
  struct X_GtkIconFactoryPrivate
    __data : UInt8[0]
  end
  struct X_GtkIconFactoryClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkStyleProperties
    parent_object : GObject
    priv : GtkStylePropertiesPrivate*
  end
  struct X_GtkStylePropertiesClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkStylePropertiesPrivate
    __data : UInt8[0]
  end
  struct X_GtkSymbolicColor
    __data : UInt8[0]
  end
  struct X_GtkGradient
    __data : UInt8[0]
  end
  struct X_GtkStyleProviderIface
    g_iface : GTypeInterface
    get_style : ((GtkStyleProvider*, GtkWidgetPath*) -> GtkStyleProperties*)
    get_style_property : ((GtkStyleProvider*, GtkWidgetPath*, GtkStateFlags, GParamSpec*, GValue*) -> Gboolean)
    get_icon_factory : ((GtkStyleProvider*, GtkWidgetPath*) -> GtkIconFactory*)
  end
  struct X_GtkStyleProvider
    __data : UInt8[0]
  end
  struct X_GtkStyleContextClass
    parent_class : GObjectClass
    changed : (GtkStyleContext* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkStyleContextPrivate
    __data : UInt8[0]
  end
  struct X_GtkIconInfo
    __data : UInt8[0]
  end
  struct X_GtkIconInfoClass
    __data : UInt8[0]
  end
  struct X_GtkIconTheme
    parent_instance : GObject
    priv : GtkIconThemePrivate*
  end
  struct X_GtkIconThemeClass
    parent_class : GObjectClass
    changed : (GtkIconTheme* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkIconThemePrivate
    __data : UInt8[0]
  end
  struct X_GtkIconView
    parent : GtkContainer
    priv : GtkIconViewPrivate*
  end
  struct X_GtkIconViewClass
    parent_class : GtkContainerClass
    item_activated : ((GtkIconView*, GtkTreePath*) -> Void)
    selection_changed : (GtkIconView* -> Void)
    select_all : (GtkIconView* -> Void)
    unselect_all : (GtkIconView* -> Void)
    select_cursor_item : (GtkIconView* -> Void)
    toggle_cursor_item : (GtkIconView* -> Void)
    move_cursor : ((GtkIconView*, GtkMovementStep, Gint) -> Gboolean)
    activate_cursor_item : (GtkIconView* -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkIconViewPrivate
    __data : UInt8[0]
  end
  struct X_GtkIMContextInfo
    context_id : Gchar*
    context_name : Gchar*
    domain : Gchar*
    domain_dirname : Gchar*
    default_locales : Gchar*
  end
  struct X_GtkIMContextSimple
    object : GtkIMContext
    priv : GtkIMContextSimplePrivate*
  end
  struct X_GtkIMContextSimplePrivate
    __data : UInt8[0]
  end
  struct X_GtkIMContextSimpleClass
    parent_class : GtkIMContextClass
  end
  struct X_GtkIMMulticontext
    object : GtkIMContext
    priv : GtkIMMulticontextPrivate*
  end
  struct X_GtkIMMulticontextClass
    parent_class : GtkIMContextClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkIMMulticontextPrivate
    __data : UInt8[0]
  end
  struct X_GtkInfoBarPrivate
    __data : UInt8[0]
  end
  struct X_GtkInfoBarClass
    parent_class : GtkBoxClass
    response : ((GtkInfoBar*, Gint) -> Void)
    close : (GtkInfoBar* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkInfoBar
    parent : GtkBox
    priv : GtkInfoBarPrivate*
  end
  struct X_GtkInvisible
    widget : GtkWidget
    priv : GtkInvisiblePrivate*
  end
  struct X_GtkInvisiblePrivate
    __data : UInt8[0]
  end
  struct X_GtkInvisibleClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkLayout
    container : GtkContainer
    priv : GtkLayoutPrivate*
  end
  struct X_GtkLayoutPrivate
    __data : UInt8[0]
  end
  struct X_GtkLayoutClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkLevelBarClass
    parent_class : GtkWidgetClass
    offset_changed : ((GtkLevelBar*, Gchar*) -> Void)
    padding : Gpointer[16]
  end
  struct X_GtkLevelBar
    parent : GtkWidget
    priv : GtkLevelBarPrivate*
  end
  struct X_GtkLevelBarPrivate
    __data : UInt8[0]
  end
  struct X_GtkLinkButton
    parent_instance : GtkButton
    priv : GtkLinkButtonPrivate*
  end
  struct X_GtkLinkButtonClass
    parent_class : GtkButtonClass
    activate_link : (GtkLinkButton* -> Gboolean)
    _gtk_padding1 : ( -> Void)
    _gtk_padding2 : ( -> Void)
    _gtk_padding3 : ( -> Void)
    _gtk_padding4 : ( -> Void)
  end
  struct X_GtkLinkButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkListBox
    parent_instance : GtkContainer
  end
  struct X_GtkListBoxClass
    parent_class : GtkContainerClass
    row_selected : ((GtkListBox*, GtkListBoxRow*) -> Void)
    row_activated : ((GtkListBox*, GtkListBoxRow*) -> Void)
    activate_cursor_row : (GtkListBox* -> Void)
    toggle_cursor_row : (GtkListBox* -> Void)
    move_cursor : ((GtkListBox*, GtkMovementStep, Gint) -> Void)
    selected_rows_changed : (GtkListBox* -> Void)
    select_all : (GtkListBox* -> Void)
    unselect_all : (GtkListBox* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
  end
  struct X_GtkListBoxRow
    parent_instance : GtkBin
  end
  struct X_GtkListBoxRowClass
    parent_class : GtkBinClass
    activate : (GtkListBoxRow* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
  end
  struct X_GtkLockButton
    parent : GtkButton
    priv : GtkLockButtonPrivate*
  end
  struct X_GtkLockButtonClass
    parent_class : GtkButtonClass
    reserved0 : ( -> Void)
    reserved1 : ( -> Void)
    reserved2 : ( -> Void)
    reserved3 : ( -> Void)
    reserved4 : ( -> Void)
    reserved5 : ( -> Void)
    reserved6 : ( -> Void)
    reserved7 : ( -> Void)
  end
  struct X_GtkLockButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkMenuBar
    menu_shell : GtkMenuShell
    priv : GtkMenuBarPrivate*
  end
  struct X_GtkMenuBarPrivate
    __data : UInt8[0]
  end
  struct X_GtkMenuBarClass
    parent_class : GtkMenuShellClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkPopover
    parent_instance : GtkBin
    priv : GtkPopoverPrivate*
  end
  struct X_GtkPopoverClass
    parent_class : GtkBinClass
    closed : (GtkPopover* -> Void)
    reserved : Gpointer[10]
  end
  struct X_GtkPopoverPrivate
    __data : UInt8[0]
  end
  struct X_GtkMenuButton
    parent : GtkToggleButton
    priv : GtkMenuButtonPrivate*
  end
  struct X_GtkMenuButtonClass
    parent_class : GtkToggleButtonClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkSizeGroup
    parent_instance : GObject
    priv : GtkSizeGroupPrivate*
  end
  struct X_GtkSizeGroupPrivate
    __data : UInt8[0]
  end
  struct X_GtkSizeGroupClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToolItem
    parent : GtkBin
    priv : GtkToolItemPrivate*
  end
  struct X_GtkToolItemClass
    parent_class : GtkBinClass
    create_menu_proxy : (GtkToolItem* -> Gboolean)
    toolbar_reconfigured : (GtkToolItem* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToolItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkToolButton
    parent : GtkToolItem
    priv : GtkToolButtonPrivate*
  end
  struct X_GtkToolButtonClass
    parent_class : GtkToolItemClass
    button_type : GType
    clicked : (GtkToolButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToolButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkMenuToolButtonClass
    parent_class : GtkToolButtonClass
    show_menu : (GtkMenuToolButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMenuToolButton
    parent : GtkToolButton
    priv : GtkMenuToolButtonPrivate*
  end
  struct X_GtkMenuToolButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkMessageDialog
    parent_instance : GtkDialog
    priv : GtkMessageDialogPrivate*
  end
  struct X_GtkMessageDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkMessageDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkModelButton
    __data : UInt8[0]
  end
  struct X_GtkMountOperation
    parent_instance : GMountOperation
    priv : GtkMountOperationPrivate*
  end
  struct X_GtkMountOperationClass
    parent_class : GMountOperationClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkMountOperationPrivate
    __data : UInt8[0]
  end
  struct X_GtkNotebook
    container : GtkContainer
    priv : GtkNotebookPrivate*
  end
  struct X_GtkNotebookPrivate
    __data : UInt8[0]
  end
  struct X_GtkNotebookClass
    parent_class : GtkContainerClass
    switch_page : ((GtkNotebook*, GtkWidget*, Guint) -> Void)
    select_page : ((GtkNotebook*, Gboolean) -> Gboolean)
    focus_tab : ((GtkNotebook*, GtkNotebookTab) -> Gboolean)
    change_current_page : ((GtkNotebook*, Gint) -> Gboolean)
    move_focus_out : ((GtkNotebook*, GtkDirectionType) -> Void)
    reorder_tab : ((GtkNotebook*, GtkDirectionType, Gboolean) -> Gboolean)
    insert_page : ((GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*, Gint) -> Gint)
    create_window : ((GtkNotebook*, GtkWidget*, Gint, Gint) -> GtkNotebook*)
    page_reordered : ((GtkNotebook*, GtkWidget*, Guint) -> Void)
    page_removed : ((GtkNotebook*, GtkWidget*, Guint) -> Void)
    page_added : ((GtkNotebook*, GtkWidget*, Guint) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkOffscreenWindow
    parent_object : GtkWindow
  end
  struct X_GtkOffscreenWindowClass
    parent_class : GtkWindowClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkOrientable
    __data : UInt8[0]
  end
  struct X_GtkOrientableIface
    base_iface : GTypeInterface
  end
  struct X_GtkOverlay
    parent : GtkBin
    priv : GtkOverlayPrivate*
  end
  struct X_GtkOverlayClass
    parent_class : GtkBinClass
    get_child_position : ((GtkOverlay*, GtkWidget*, GtkAllocation*) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkOverlayPrivate
    __data : UInt8[0]
  end
  struct X_GtkPaperSize
    __data : UInt8[0]
  end
  struct X_GtkPageSetup
    __data : UInt8[0]
  end
  struct X_GtkPaned
    container : GtkContainer
    priv : GtkPanedPrivate*
  end
  struct X_GtkPanedClass
    parent_class : GtkContainerClass
    cycle_child_focus : ((GtkPaned*, Gboolean) -> Gboolean)
    toggle_handle_focus : (GtkPaned* -> Gboolean)
    move_handle : ((GtkPaned*, GtkScrollType) -> Gboolean)
    cycle_handle_focus : ((GtkPaned*, Gboolean) -> Gboolean)
    accept_position : (GtkPaned* -> Gboolean)
    cancel_position : (GtkPaned* -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkPanedPrivate
    __data : UInt8[0]
  end
  struct X_GtkPlacesSidebar
    __data : UInt8[0]
  end
  struct X_GtkPlacesSidebarClass
    __data : UInt8[0]
  end
  struct X_GtkPopoverMenu
    __data : UInt8[0]
  end
  struct X_GtkPopoverMenuClass
    parent_class : GtkPopoverClass
    reserved : Gpointer[10]
  end
  struct X_GtkPrintContext
    __data : UInt8[0]
  end
  struct X_GtkPrintSettings
    __data : UInt8[0]
  end
  struct X_GtkPageRange
    start : Gint
    end_ : Gint
  end
  struct X_GtkPrintOperationPreview
    __data : UInt8[0]
  end
  struct X_GtkPrintOperationPreviewIface
    g_iface : GTypeInterface
    ready : ((GtkPrintOperationPreview*, GtkPrintContext*) -> Void)
    got_page_size : ((GtkPrintOperationPreview*, GtkPrintContext*, GtkPageSetup*) -> Void)
    render_page : ((GtkPrintOperationPreview*, Gint) -> Void)
    is_selected : ((GtkPrintOperationPreview*, Gint) -> Gboolean)
    end_preview : (GtkPrintOperationPreview* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkPrintOperationClass
    parent_class : GObjectClass
    done : ((GtkPrintOperation*, GtkPrintOperationResult) -> Void)
    begin_print : ((GtkPrintOperation*, GtkPrintContext*) -> Void)
    paginate : ((GtkPrintOperation*, GtkPrintContext*) -> Gboolean)
    request_page_setup : ((GtkPrintOperation*, GtkPrintContext*, Gint, GtkPageSetup*) -> Void)
    draw_page : ((GtkPrintOperation*, GtkPrintContext*, Gint) -> Void)
    end_print : ((GtkPrintOperation*, GtkPrintContext*) -> Void)
    status_changed : (GtkPrintOperation* -> Void)
    create_custom_widget : (GtkPrintOperation* -> GtkWidget*)
    custom_widget_apply : ((GtkPrintOperation*, GtkWidget*) -> Void)
    preview : ((GtkPrintOperation*, GtkPrintOperationPreview*, GtkPrintContext*, GtkWindow*) -> Gboolean)
    update_custom_widget : ((GtkPrintOperation*, GtkWidget*, GtkPageSetup*, GtkPrintSettings*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
  end
  struct X_GtkPrintOperationPrivate
    __data : UInt8[0]
  end
  struct X_GtkPrintOperation
    parent_instance : GObject
    priv : GtkPrintOperationPrivate*
  end
  struct X_GtkProgressBar
    parent : GtkWidget
    priv : GtkProgressBarPrivate*
  end
  struct X_GtkProgressBarPrivate
    __data : UInt8[0]
  end
  struct X_GtkProgressBarClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRadioButton
    check_button : GtkCheckButton
    priv : GtkRadioButtonPrivate*
  end
  struct X_GtkRadioButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkRadioButtonClass
    parent_class : GtkCheckButtonClass
    group_changed : (GtkRadioButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRadioMenuItem
    check_menu_item : GtkCheckMenuItem
    priv : GtkRadioMenuItemPrivate*
  end
  struct X_GtkRadioMenuItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkRadioMenuItemClass
    parent_class : GtkCheckMenuItemClass
    group_changed : (GtkRadioMenuItem* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToggleToolButton
    parent : GtkToolButton
    priv : GtkToggleToolButtonPrivate*
  end
  struct X_GtkToggleToolButtonClass
    parent_class : GtkToolButtonClass
    toggled : (GtkToggleToolButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToggleToolButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkRadioToolButton
    parent : GtkToggleToolButton
  end
  struct X_GtkRadioToolButtonClass
    parent_class : GtkToggleToolButtonClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRange
    widget : GtkWidget
    priv : GtkRangePrivate*
  end
  struct X_GtkRangePrivate
    __data : UInt8[0]
  end
  struct X_GtkRangeClass
    parent_class : GtkWidgetClass
    slider_detail : Gchar*
    stepper_detail : Gchar*
    value_changed : (GtkRange* -> Void)
    adjust_bounds : ((GtkRange*, Gdouble) -> Void)
    move_slider : ((GtkRange*, GtkScrollType) -> Void)
    get_range_border : ((GtkRange*, GtkBorder*) -> Void)
    change_value : ((GtkRange*, GtkScrollType, Gdouble) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRecentInfo
    __data : UInt8[0]
  end
  struct X_GtkRecentData
    display_name : Gchar*
    description : Gchar*
    mime_type : Gchar*
    app_name : Gchar*
    app_exec : Gchar*
    groups : Gchar**
    is_private : Gboolean
  end
  struct X_GtkRecentManager
    parent_instance : GObject
    priv : GtkRecentManagerPrivate*
  end
  struct X_GtkRecentManagerClass
    parent_class : GObjectClass
    changed : (GtkRecentManager* -> Void)
    _gtk_recent1 : ( -> Void)
    _gtk_recent2 : ( -> Void)
    _gtk_recent3 : ( -> Void)
    _gtk_recent4 : ( -> Void)
  end
  struct X_GtkRecentManagerPrivate
    __data : UInt8[0]
  end
  struct X_GtkRecentFilter
    __data : UInt8[0]
  end
  struct X_GtkRecentFilterInfo
    contains : GtkRecentFilterFlags
    uri : Gchar*
    display_name : Gchar*
    mime_type : Gchar*
    applications : Gchar**
    groups : Gchar**
    age : Gint
  end
  struct X_GtkRecentChooser
    __data : UInt8[0]
  end
  struct X_GtkRecentChooserIface
    base_iface : GTypeInterface
    set_current_uri : ((GtkRecentChooser*, Gchar*, GError**) -> Gboolean)
    get_current_uri : (GtkRecentChooser* -> Gchar*)
    select_uri : ((GtkRecentChooser*, Gchar*, GError**) -> Gboolean)
    unselect_uri : ((GtkRecentChooser*, Gchar*) -> Void)
    select_all : (GtkRecentChooser* -> Void)
    unselect_all : (GtkRecentChooser* -> Void)
    get_items : (GtkRecentChooser* -> GList*)
    get_recent_manager : (GtkRecentChooser* -> GtkRecentManager*)
    add_filter : ((GtkRecentChooser*, GtkRecentFilter*) -> Void)
    remove_filter : ((GtkRecentChooser*, GtkRecentFilter*) -> Void)
    list_filters : (GtkRecentChooser* -> GSList*)
    set_sort_func : ((GtkRecentChooser*, GtkRecentSortFunc, Gpointer, GDestroyNotify) -> Void)
    item_activated : (GtkRecentChooser* -> Void)
    selection_changed : (GtkRecentChooser* -> Void)
  end
  struct X_GtkRecentChooserDialog
    parent_instance : GtkDialog
    priv : GtkRecentChooserDialogPrivate*
  end
  struct X_GtkRecentChooserDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRecentChooserDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkRecentChooserMenu
    parent_instance : GtkMenu
    priv : GtkRecentChooserMenuPrivate*
  end
  struct X_GtkRecentChooserMenuClass
    parent_class : GtkMenuClass
    gtk_recent1 : ( -> Void)
    gtk_recent2 : ( -> Void)
    gtk_recent3 : ( -> Void)
    gtk_recent4 : ( -> Void)
  end
  struct X_GtkRecentChooserMenuPrivate
    __data : UInt8[0]
  end
  struct X_GtkRecentChooserWidget
    parent_instance : GtkBox
    priv : GtkRecentChooserWidgetPrivate*
  end
  struct X_GtkRecentChooserWidgetClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRecentChooserWidgetPrivate
    __data : UInt8[0]
  end
  struct X_GtkRevealer
    parent_instance : GtkBin
  end
  struct X_GtkRevealerClass
    parent_class : GtkBinClass
  end
  struct X_GtkScale
    range : GtkRange
    priv : GtkScalePrivate*
  end
  struct X_GtkScalePrivate
    __data : UInt8[0]
  end
  struct X_GtkScaleClass
    parent_class : GtkRangeClass
    format_value : ((GtkScale*, Gdouble) -> Gchar*)
    draw_value : (GtkScale* -> Void)
    get_layout_offsets : ((GtkScale*, Gint*, Gint*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkScaleButton
    parent : GtkButton
    priv : GtkScaleButtonPrivate*
  end
  struct X_GtkScaleButtonClass
    parent_class : GtkButtonClass
    value_changed : ((GtkScaleButton*, Gdouble) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkScaleButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkScrollable
    __data : UInt8[0]
  end
  struct X_GtkScrollableInterface
    base_iface : GTypeInterface
    get_border : ((GtkScrollable*, GtkBorder*) -> Gboolean)
  end
  struct X_GtkScrollbar
    range : GtkRange
  end
  struct X_GtkScrollbarClass
    parent_class : GtkRangeClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkScrolledWindow
    container : GtkBin
    priv : GtkScrolledWindowPrivate*
  end
  struct X_GtkScrolledWindowPrivate
    __data : UInt8[0]
  end
  struct X_GtkScrolledWindowClass
    parent_class : GtkBinClass
    scrollbar_spacing : Gint
    scroll_child : ((GtkScrolledWindow*, GtkScrollType, Gboolean) -> Gboolean)
    move_focus_out : ((GtkScrolledWindow*, GtkDirectionType) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSearchBar
    parent : GtkBin
  end
  struct X_GtkSearchBarClass
    parent_class : GtkBinClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSearchEntry
    parent : GtkEntry
  end
  struct X_GtkSearchEntryClass
    parent_class : GtkEntryClass
    search_changed : (GtkSearchEntry* -> Void)
    next_match : (GtkSearchEntry* -> Void)
    previous_match : (GtkSearchEntry* -> Void)
    stop_search : (GtkSearchEntry* -> Void)
  end
  struct X_GtkSeparator
    widget : GtkWidget
    priv : GtkSeparatorPrivate*
  end
  struct X_GtkSeparatorPrivate
    __data : UInt8[0]
  end
  struct X_GtkSeparatorClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSeparatorMenuItem
    menu_item : GtkMenuItem
  end
  struct X_GtkSeparatorMenuItemClass
    parent_class : GtkMenuItemClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSeparatorToolItem
    parent : GtkToolItem
    priv : GtkSeparatorToolItemPrivate*
  end
  struct X_GtkSeparatorToolItemClass
    parent_class : GtkToolItemClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSeparatorToolItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkSettingsPrivate
    __data : UInt8[0]
  end
  struct X_GtkSettingsClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSettingsValue
    origin : Gchar*
    value : GValue
  end
  struct X_GtkShortcutsGroup
    __data : UInt8[0]
  end
  struct X_GtkShortcutsGroupClass
    __data : UInt8[0]
  end
  struct X_GtkShortcutsSection
    __data : UInt8[0]
  end
  struct X_GtkShortcutsSectionClass
    __data : UInt8[0]
  end
  struct X_GtkShortcutsShortcut
    __data : UInt8[0]
  end
  struct X_GtkShortcutsShortcutClass
    __data : UInt8[0]
  end
  struct X_GtkStack
    parent_instance : GtkContainer
  end
  struct X_GtkStackClass
    parent_class : GtkContainerClass
  end
  struct X_GtkStackSidebar
    parent : GtkBin
  end
  struct X_GtkStackSidebarPrivate
    __data : UInt8[0]
  end
  struct X_GtkStackSidebarClass
    parent_class : GtkBinClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRequestedSize
    data : Gpointer
    minimum_size : Gint
    natural_size : Gint
  end
  struct X_GtkSpinButton
    entry : GtkEntry
    priv : GtkSpinButtonPrivate*
  end
  struct X_GtkSpinButtonPrivate
    __data : UInt8[0]
  end
  struct X_GtkSpinButtonClass
    parent_class : GtkEntryClass
    input : ((GtkSpinButton*, Gdouble*) -> Gint)
    output : (GtkSpinButton* -> Gint)
    value_changed : (GtkSpinButton* -> Void)
    change_value : ((GtkSpinButton*, GtkScrollType) -> Void)
    wrapped : (GtkSpinButton* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSpinner
    parent : GtkWidget
    priv : GtkSpinnerPrivate*
  end
  struct X_GtkSpinnerClass
    parent_class : GtkWidgetClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSpinnerPrivate
    __data : UInt8[0]
  end
  struct X_GtkStackSwitcher
    widget : GtkBox
  end
  struct X_GtkStackSwitcherClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkStatusbar
    parent_widget : GtkBox
    priv : GtkStatusbarPrivate*
  end
  struct X_GtkStatusbarPrivate
    __data : UInt8[0]
  end
  struct X_GtkStatusbarClass
    parent_class : GtkBoxClass
    reserved : Gpointer
    text_pushed : ((GtkStatusbar*, Guint, Gchar*) -> Void)
    text_popped : ((GtkStatusbar*, Guint, Gchar*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkSwitch
    parent_instance : GtkWidget
    priv : GtkSwitchPrivate*
  end
  struct X_GtkSwitchPrivate
    __data : UInt8[0]
  end
  struct X_GtkSwitchClass
    parent_class : GtkWidgetClass
    activate : (GtkSwitch* -> Void)
    state_set : ((GtkSwitch*, Gboolean) -> Gboolean)
    _switch_padding_1 : ( -> Void)
    _switch_padding_2 : ( -> Void)
    _switch_padding_3 : ( -> Void)
    _switch_padding_4 : ( -> Void)
    _switch_padding_5 : ( -> Void)
  end
  struct X_GtkTextTagTablePrivate
    __data : UInt8[0]
  end
  struct X_GtkTextTagTableClass
    parent_class : GObjectClass
    tag_changed : ((GtkTextTagTable*, GtkTextTag*, Gboolean) -> Void)
    tag_added : ((GtkTextTagTable*, GtkTextTag*) -> Void)
    tag_removed : ((GtkTextTagTable*, GtkTextTag*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTextMark
    parent_instance : GObject
    segment : Gpointer
  end
  struct X_GtkTextMarkClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTextBTree
    __data : UInt8[0]
  end
  struct X_GtkTextBufferPrivate
    __data : UInt8[0]
  end
  struct X_GtkTextBufferClass
    parent_class : GObjectClass
    insert_text : ((GtkTextBuffer*, GtkTextIter*, Gchar*, Gint) -> Void)
    insert_pixbuf : ((GtkTextBuffer*, GtkTextIter*, GdkPixbuf*) -> Void)
    insert_child_anchor : ((GtkTextBuffer*, GtkTextIter*, GtkTextChildAnchor*) -> Void)
    delete_range : ((GtkTextBuffer*, GtkTextIter*, GtkTextIter*) -> Void)
    changed : (GtkTextBuffer* -> Void)
    modified_changed : (GtkTextBuffer* -> Void)
    mark_set : ((GtkTextBuffer*, GtkTextIter*, GtkTextMark*) -> Void)
    mark_deleted : ((GtkTextBuffer*, GtkTextMark*) -> Void)
    apply_tag : ((GtkTextBuffer*, GtkTextTag*, GtkTextIter*, GtkTextIter*) -> Void)
    remove_tag : ((GtkTextBuffer*, GtkTextTag*, GtkTextIter*, GtkTextIter*) -> Void)
    begin_user_action : (GtkTextBuffer* -> Void)
    end_user_action : (GtkTextBuffer* -> Void)
    paste_done : ((GtkTextBuffer*, GtkClipboard*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTextView
    parent_instance : GtkContainer
    priv : GtkTextViewPrivate*
  end
  struct X_GtkTextViewPrivate
    __data : UInt8[0]
  end
  struct X_GtkTextViewClass
    parent_class : GtkContainerClass
    populate_popup : ((GtkTextView*, GtkWidget*) -> Void)
    move_cursor : ((GtkTextView*, GtkMovementStep, Gint, Gboolean) -> Void)
    set_anchor : (GtkTextView* -> Void)
    insert_at_cursor : ((GtkTextView*, Gchar*) -> Void)
    delete_from_cursor : ((GtkTextView*, GtkDeleteType, Gint) -> Void)
    backspace : (GtkTextView* -> Void)
    cut_clipboard : (GtkTextView* -> Void)
    copy_clipboard : (GtkTextView* -> Void)
    paste_clipboard : (GtkTextView* -> Void)
    toggle_overwrite : (GtkTextView* -> Void)
    create_buffer : (GtkTextView* -> GtkTextBuffer*)
    draw_layer : ((GtkTextView*, GtkTextViewLayer, CairoT*) -> Void)
    extend_selection : ((GtkTextView*, GtkTextExtendSelection, GtkTextIter*, GtkTextIter*, GtkTextIter*) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
  end
  struct X_GtkToolbar
    container : GtkContainer
    priv : GtkToolbarPrivate*
  end
  struct X_GtkToolbarPrivate
    __data : UInt8[0]
  end
  struct X_GtkToolbarClass
    parent_class : GtkContainerClass
    orientation_changed : ((GtkToolbar*, GtkOrientation) -> Void)
    style_changed : ((GtkToolbar*, GtkToolbarStyle) -> Void)
    popup_context_menu : ((GtkToolbar*, Gint, Gint, Gint) -> Gboolean)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToolItemGroup
    parent_instance : GtkContainer
    priv : GtkToolItemGroupPrivate*
  end
  struct X_GtkToolItemGroupClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToolItemGroupPrivate
    __data : UInt8[0]
  end
  struct X_GtkToolPalette
    parent_instance : GtkContainer
    priv : GtkToolPalettePrivate*
  end
  struct X_GtkToolPaletteClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkToolPalettePrivate
    __data : UInt8[0]
  end
  struct X_GtkToolShell
    __data : UInt8[0]
  end
  struct X_GtkToolShellIface
    g_iface : GTypeInterface
    get_icon_size : (GtkToolShell* -> GtkIconSize)
    get_orientation : (GtkToolShell* -> GtkOrientation)
    get_style : (GtkToolShell* -> GtkToolbarStyle)
    get_relief_style : (GtkToolShell* -> GtkReliefStyle)
    rebuild_menu : (GtkToolShell* -> Void)
    get_text_orientation : (GtkToolShell* -> GtkOrientation)
    get_text_alignment : (GtkToolShell* -> Gfloat)
    get_ellipsize_mode : (GtkToolShell* -> PangoEllipsizeMode)
    get_text_size_group : (GtkToolShell* -> GtkSizeGroup*)
  end
  struct X_GtkTreeDragSource
    __data : UInt8[0]
  end
  struct X_GtkTreeDragSourceIface
    g_iface : GTypeInterface
    row_draggable : ((GtkTreeDragSource*, GtkTreePath*) -> Gboolean)
    drag_data_get : ((GtkTreeDragSource*, GtkTreePath*, GtkSelectionData*) -> Gboolean)
    drag_data_delete : ((GtkTreeDragSource*, GtkTreePath*) -> Gboolean)
  end
  struct X_GtkTreeDragDest
    __data : UInt8[0]
  end
  struct X_GtkTreeDragDestIface
    g_iface : GTypeInterface
    drag_data_received : ((GtkTreeDragDest*, GtkTreePath*, GtkSelectionData*) -> Gboolean)
    row_drop_possible : ((GtkTreeDragDest*, GtkTreePath*, GtkSelectionData*) -> Gboolean)
  end
  struct X_GtkTreeModelSort
    parent : GObject
    priv : GtkTreeModelSortPrivate*
  end
  struct X_GtkTreeModelSortClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTreeModelSortPrivate
    __data : UInt8[0]
  end
  struct X_GtkTreeSelectionPrivate
    __data : UInt8[0]
  end
  struct X_GtkTreeStore
    parent : GObject
    priv : GtkTreeStorePrivate*
  end
  struct X_GtkTreeStoreClass
    parent_class : GObjectClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTreeStorePrivate
    __data : UInt8[0]
  end
  struct X_GtkViewport
    bin : GtkBin
    priv : GtkViewportPrivate*
  end
  struct X_GtkViewportPrivate
    __data : UInt8[0]
  end
  struct X_GtkViewportClass
    parent_class : GtkBinClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkVolumeButton
    parent : GtkScaleButton
  end
  struct X_GtkVolumeButtonClass
    parent_class : GtkScaleButtonClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkArrow
    misc : GtkMisc
    priv : GtkArrowPrivate*
  end
  struct X_GtkArrowPrivate
    __data : UInt8[0]
  end
  struct X_GtkArrowClass
    parent_class : GtkMiscClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkAction
    object : GObject
    private_data : GtkActionPrivate*
  end
  struct X_GtkActionClass
    parent_class : GObjectClass
    activate : (GtkAction* -> Void)
    menu_item_type : GType
    toolbar_item_type : GType
    create_menu_item : (GtkAction* -> GtkWidget*)
    create_tool_item : (GtkAction* -> GtkWidget*)
    connect_proxy : ((GtkAction*, GtkWidget*) -> Void)
    disconnect_proxy : ((GtkAction*, GtkWidget*) -> Void)
    create_menu : (GtkAction* -> GtkWidget*)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkActionPrivate
    __data : UInt8[0]
  end
  struct X_GtkActivatable
    __data : UInt8[0]
  end
  struct X_GtkActivatableIface
    g_iface : GTypeInterface
    update : ((GtkActivatable*, GtkAction*, Gchar*) -> Void)
    sync_action_properties : ((GtkActivatable*, GtkAction*) -> Void)
  end
  struct X_GtkStockItem
    stock_id : Gchar*
    label : Gchar*
    modifier : GdkModifierType
    keyval : Guint
    translation_domain : Gchar*
  end
  struct X_GtkActionGroup
    parent : GObject
    priv : GtkActionGroupPrivate*
  end
  struct X_GtkActionGroupPrivate
    __data : UInt8[0]
  end
  struct X_GtkActionGroupClass
    parent_class : GObjectClass
    get_action : ((GtkActionGroup*, Gchar*) -> GtkAction*)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkActionEntry
    name : Gchar*
    stock_id : Gchar*
    label : Gchar*
    accelerator : Gchar*
    tooltip : Gchar*
    callback : GCallback
  end
  struct X_GtkToggleActionEntry
    name : Gchar*
    stock_id : Gchar*
    label : Gchar*
    accelerator : Gchar*
    tooltip : Gchar*
    callback : GCallback
    is_active : Gboolean
  end
  struct X_GtkRadioActionEntry
    name : Gchar*
    stock_id : Gchar*
    label : Gchar*
    accelerator : Gchar*
    tooltip : Gchar*
    value : Gint
  end
  struct X_GtkAlignment
    bin : GtkBin
    priv : GtkAlignmentPrivate*
  end
  struct X_GtkAlignmentPrivate
    __data : UInt8[0]
  end
  struct X_GtkAlignmentClass
    parent_class : GtkBinClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkColorSelection
    parent_instance : GtkBox
    private_data : GtkColorSelectionPrivate*
  end
  struct X_GtkColorSelectionPrivate
    __data : UInt8[0]
  end
  struct X_GtkColorSelectionClass
    parent_class : GtkBoxClass
    color_changed : (GtkColorSelection* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkColorSelectionDialog
    parent_instance : GtkDialog
    priv : GtkColorSelectionDialogPrivate*
  end
  struct X_GtkColorSelectionDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkColorSelectionDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFontSelection
    parent_instance : GtkBox
    priv : GtkFontSelectionPrivate*
  end
  struct X_GtkFontSelectionPrivate
    __data : UInt8[0]
  end
  struct X_GtkFontSelectionClass
    parent_class : GtkBoxClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkFontSelectionDialog
    parent_instance : GtkDialog
    priv : GtkFontSelectionDialogPrivate*
  end
  struct X_GtkFontSelectionDialogPrivate
    __data : UInt8[0]
  end
  struct X_GtkFontSelectionDialogClass
    parent_class : GtkDialogClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkHandleBox
    bin : GtkBin
    priv : GtkHandleBoxPrivate*
  end
  struct X_GtkHandleBoxPrivate
    __data : UInt8[0]
  end
  struct X_GtkHandleBoxClass
    parent_class : GtkBinClass
    child_attached : ((GtkHandleBox*, GtkWidget*) -> Void)
    child_detached : ((GtkHandleBox*, GtkWidget*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkHButtonBox
    button_box : GtkButtonBox
  end
  struct X_GtkHButtonBoxClass
    parent_class : GtkButtonBoxClass
  end
  struct X_GtkHBox
    box : GtkBox
  end
  struct X_GtkHBoxClass
    parent_class : GtkBoxClass
  end
  struct X_GtkHPaned
    paned : GtkPaned
  end
  struct X_GtkHPanedClass
    parent_class : GtkPanedClass
  end
  struct X_GtkHSV
    parent_instance : GtkWidget
    priv : GtkHSVPrivate*
  end
  struct X_GtkHSVPrivate
    __data : UInt8[0]
  end
  struct X_GtkHSVClass
    parent_class : GtkWidgetClass
    changed : (GtkHSV* -> Void)
    move : ((GtkHSV*, GtkDirectionType) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkHScale
    scale : GtkScale
  end
  struct X_GtkHScaleClass
    parent_class : GtkScaleClass
  end
  struct X_GtkHScrollbar
    scrollbar : GtkScrollbar
  end
  struct X_GtkHScrollbarClass
    parent_class : GtkScrollbarClass
  end
  struct X_GtkHSeparator
    separator : GtkSeparator
  end
  struct X_GtkHSeparatorClass
    parent_class : GtkSeparatorClass
  end
  struct X_GtkImageMenuItem
    menu_item : GtkMenuItem
    priv : GtkImageMenuItemPrivate*
  end
  struct X_GtkImageMenuItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkImageMenuItemClass
    parent_class : GtkMenuItemClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkNumerableIcon
    parent : GEmblemedIcon
    priv : GtkNumerableIconPrivate*
  end
  struct X_GtkNumerableIconClass
    parent_class : GEmblemedIconClass
    padding : Gpointer[16]
  end
  struct X_GtkNumerableIconPrivate
    __data : UInt8[0]
  end
  struct X_GtkToggleAction
    parent : GtkAction
    private_data : GtkToggleActionPrivate*
  end
  struct X_GtkToggleActionPrivate
    __data : UInt8[0]
  end
  struct X_GtkToggleActionClass
    parent_class : GtkActionClass
    toggled : (GtkToggleAction* -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRadioAction
    parent : GtkToggleAction
    private_data : GtkRadioActionPrivate*
  end
  struct X_GtkRadioActionPrivate
    __data : UInt8[0]
  end
  struct X_GtkRadioActionClass
    parent_class : GtkToggleActionClass
    changed : ((GtkRadioAction*, GtkRadioAction*) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRcContext
    __data : UInt8[0]
  end
  struct X_GtkRcStyleClass
    parent_class : GObjectClass
    create_rc_style : (GtkRcStyle* -> GtkRcStyle*)
    parse : ((GtkRcStyle*, GtkSettings*, GScanner*) -> Guint)
    merge : ((GtkRcStyle*, GtkRcStyle*) -> Void)
    create_style : (GtkRcStyle* -> GtkStyle*)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkRcProperty
    type_name : GQuark
    property_name : GQuark
    origin : Gchar*
    value : GValue
  end
  struct X_GtkRecentAction
    parent_instance : GtkAction
    priv : GtkRecentActionPrivate*
  end
  struct X_GtkRecentActionPrivate
    __data : UInt8[0]
  end
  struct X_GtkRecentActionClass
    parent_class : GtkActionClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkStatusIcon
    parent_instance : GObject
    priv : GtkStatusIconPrivate*
  end
  struct X_GtkStatusIconClass
    parent_class : GObjectClass
    activate : (GtkStatusIcon* -> Void)
    popup_menu : ((GtkStatusIcon*, Guint, Guint32) -> Void)
    size_changed : ((GtkStatusIcon*, Gint) -> Gboolean)
    button_press_event : ((GtkStatusIcon*, GdkEventButton*) -> Gboolean)
    button_release_event : ((GtkStatusIcon*, GdkEventButton*) -> Gboolean)
    scroll_event : ((GtkStatusIcon*, GdkEventScroll*) -> Gboolean)
    query_tooltip : ((GtkStatusIcon*, Gint, Gint, Gboolean, GtkTooltip*) -> Gboolean)
    __gtk_reserved1 : Void*
    __gtk_reserved2 : Void*
    __gtk_reserved3 : Void*
    __gtk_reserved4 : Void*
  end
  struct X_GtkStatusIconPrivate
    __data : UInt8[0]
  end
  struct X_GtkStyleClass
    parent_class : GObjectClass
    realize : (GtkStyle* -> Void)
    unrealize : (GtkStyle* -> Void)
    copy : ((GtkStyle*, GtkStyle*) -> Void)
    clone : (GtkStyle* -> GtkStyle*)
    init_from_rc : ((GtkStyle*, GtkRcStyle*) -> Void)
    set_background : ((GtkStyle*, GdkWindow*, GtkStateType) -> Void)
    render_icon : ((GtkStyle*, GtkIconSource*, GtkTextDirection, GtkStateType, GtkIconSize, GtkWidget*, Gchar*) -> GdkPixbuf*)
    draw_hline : ((GtkStyle*, CairoT*, GtkStateType, GtkWidget*, Gchar*, Gint, Gint, Gint) -> Void)
    draw_vline : ((GtkStyle*, CairoT*, GtkStateType, GtkWidget*, Gchar*, Gint, Gint, Gint) -> Void)
    draw_shadow : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_arrow : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, GtkArrowType, Gboolean, Gint, Gint, Gint, Gint) -> Void)
    draw_diamond : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_box : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_flat_box : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_check : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_option : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_tab : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_shadow_gap : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint, GtkPositionType, Gint, Gint) -> Void)
    draw_box_gap : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint, GtkPositionType, Gint, Gint) -> Void)
    draw_extension : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint, GtkPositionType) -> Void)
    draw_focus : ((GtkStyle*, CairoT*, GtkStateType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint) -> Void)
    draw_slider : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint, GtkOrientation) -> Void)
    draw_handle : ((GtkStyle*, CairoT*, GtkStateType, GtkShadowType, GtkWidget*, Gchar*, Gint, Gint, Gint, Gint, GtkOrientation) -> Void)
    draw_expander : ((GtkStyle*, CairoT*, GtkStateType, GtkWidget*, Gchar*, Gint, Gint, GtkExpanderStyle) -> Void)
    draw_layout : ((GtkStyle*, CairoT*, GtkStateType, Gboolean, GtkWidget*, Gchar*, Gint, Gint, PangoLayout*) -> Void)
    draw_resize_grip : ((GtkStyle*, CairoT*, GtkStateType, GtkWidget*, Gchar*, GdkWindowEdge, Gint, Gint, Gint, Gint) -> Void)
    draw_spinner : ((GtkStyle*, CairoT*, GtkStateType, GtkWidget*, Gchar*, Guint, Gint, Gint, Gint, Gint) -> Void)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
    _gtk_reserved5 : ( -> Void)
    _gtk_reserved6 : ( -> Void)
    _gtk_reserved7 : ( -> Void)
    _gtk_reserved8 : ( -> Void)
    _gtk_reserved9 : ( -> Void)
    _gtk_reserved10 : ( -> Void)
    _gtk_reserved11 : ( -> Void)
  end
  struct X_GtkThemeEngine
    __data : UInt8[0]
  end
  struct X_GtkTable
    container : GtkContainer
    priv : GtkTablePrivate*
  end
  struct X_GtkTablePrivate
    __data : UInt8[0]
  end
  struct X_GtkTableClass
    parent_class : GtkContainerClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkTableChild
    widget : GtkWidget*
    left_attach : Guint16
    right_attach : Guint16
    top_attach : Guint16
    bottom_attach : Guint16
    xpadding : Guint16
    ypadding : Guint16
    xexpand : Guint
    yexpand : Guint
    xshrink : Guint
    yshrink : Guint
    xfill : Guint
    yfill : Guint
  end
  struct X_GtkTableRowCol
    requisition : Guint16
    allocation : Guint16
    spacing : Guint16
    need_expand : Guint
    need_shrink : Guint
    expand : Guint
    shrink : Guint
    empty : Guint
  end
  struct X_GtkTearoffMenuItem
    menu_item : GtkMenuItem
    priv : GtkTearoffMenuItemPrivate*
  end
  struct X_GtkTearoffMenuItemPrivate
    __data : UInt8[0]
  end
  struct X_GtkTearoffMenuItemClass
    parent_class : GtkMenuItemClass
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkThemingEngine
    parent_object : GObject
    priv : GtkThemingEnginePrivate*
  end
  struct GtkThemingEnginePrivate
    __data : UInt8[0]
  end
  struct X_GtkThemingEngineClass
    parent_class : GObjectClass
    render_line : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_background : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_frame : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_frame_gap : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble, GtkPositionType, Gdouble, Gdouble) -> Void)
    render_extension : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble, GtkPositionType) -> Void)
    render_check : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_option : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_arrow : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_expander : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_focus : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_layout : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, PangoLayout*) -> Void)
    render_slider : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble, GtkOrientation) -> Void)
    render_handle : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_activity : ((GtkThemingEngine*, CairoT*, Gdouble, Gdouble, Gdouble, Gdouble) -> Void)
    render_icon_pixbuf : ((GtkThemingEngine*, GtkIconSource*, GtkIconSize) -> GdkPixbuf*)
    render_icon : ((GtkThemingEngine*, CairoT*, GdkPixbuf*, Gdouble, Gdouble) -> Void)
    render_icon_surface : ((GtkThemingEngine*, CairoT*, CairoSurfaceT*, Gdouble, Gdouble) -> Void)
    padding : Gpointer[14]
  end
  struct X_GtkUIManager
    parent : GObject
    private_data : GtkUIManagerPrivate*
  end
  struct X_GtkUIManagerClass
    parent_class : GObjectClass
    add_widget : ((GtkUIManager*, GtkWidget*) -> Void)
    actions_changed : (GtkUIManager* -> Void)
    connect_proxy : ((GtkUIManager*, GtkAction*, GtkWidget*) -> Void)
    disconnect_proxy : ((GtkUIManager*, GtkAction*, GtkWidget*) -> Void)
    pre_activate : ((GtkUIManager*, GtkAction*) -> Void)
    post_activate : ((GtkUIManager*, GtkAction*) -> Void)
    get_widget : ((GtkUIManager*, Gchar*) -> GtkWidget*)
    get_action : ((GtkUIManager*, Gchar*) -> GtkAction*)
    _gtk_reserved1 : ( -> Void)
    _gtk_reserved2 : ( -> Void)
    _gtk_reserved3 : ( -> Void)
    _gtk_reserved4 : ( -> Void)
  end
  struct X_GtkUIManagerPrivate
    __data : UInt8[0]
  end
  struct X_GtkVButtonBox
    button_box : GtkButtonBox
  end
  struct X_GtkVButtonBoxClass
    parent_class : GtkButtonBoxClass
  end
  struct X_GtkVBox
    box : GtkBox
  end
  struct X_GtkVBoxClass
    parent_class : GtkBoxClass
  end
  struct X_GtkVPaned
    paned : GtkPaned
  end
  struct X_GtkVPanedClass
    parent_class : GtkPanedClass
  end
  struct X_GtkVScale
    scale : GtkScale
  end
  struct X_GtkVScaleClass
    parent_class : GtkScaleClass
  end
  struct X_GtkVScrollbar
    scrollbar : GtkScrollbar
  end
  struct X_GtkVScrollbarClass
    parent_class : GtkScrollbarClass
  end
  struct X_GtkVSeparator
    separator : GtkSeparator
  end
  struct X_GtkVSeparatorClass
    parent_class : GtkSeparatorClass
  end
  struct AnonStruct22
    mantissa_low : Guint
    mantissa_high : Guint
    biased_exponent : Guint
    sign : Guint
  end
  struct AnonStruct23
    mantissa : Guint
    biased_exponent : Guint
    sign : Guint
  end
  struct AnonStruct24
    __lock : Int32
    __futex : UInt32
    __total_seq : UInt64
    __wakeup_seq : UInt64
    __woken_seq : UInt64
    __mutex : Void*
    __nwaiters : UInt32
    __broadcast_seq : UInt32
  end
  struct AnonStruct25
    __lock : Int32
    __nr_readers : UInt32
    __readers_wakeup : UInt32
    __writer_wakeup : UInt32
    __nr_readers_queued : UInt32
    __nr_writers_queued : UInt32
    __writer : Int32
    __shared : Int32
    __rwelision : Int8
    __pad1 : UInt8[7]
    __pad2 : UInt64
    __flags : UInt32
  end
  struct AnonStruct26
    __cancel_jmp_buf : X__jmp_buf
    __mask_was_saved : Int32
  end
  struct AnonStruct27
    type : CairoPathDataTypeT
    length : Int32
  end
  struct AnonStruct28
    x : Float64
    y : Float64
  end
  struct X__va_list_tag
    gp_offset : UInt32
    fp_offset : UInt32
    overflow_arg_area : Void*
    reg_save_area : Void*
  end
  struct AnonStruct29
    _function : (SigvalT -> Void)
    _attribute : PthreadAttrT*
  end
  struct AnonStruct30
    si_pid : X__pid_t
    si_uid : X__uid_t
  end
  struct AnonStruct31
    si_tid : Int32
    si_overrun : Int32
    si_sigval : SigvalT
  end
  struct AnonStruct32
    si_pid : X__pid_t
    si_uid : X__uid_t
    si_sigval : SigvalT
  end
  struct AnonStruct33
    si_pid : X__pid_t
    si_uid : X__uid_t
    si_status : Int32
    si_utime : X__sigchld_clock_t
    si_stime : X__sigchld_clock_t
  end
  struct AnonStruct34
    si_addr : Void*
    si_addr_lsb : Int16
        si_addr_bnd : AnonStruct37
  end
  struct AnonStruct35
    si_band : Int64
    si_fd : Int32
  end
  struct AnonStruct36
    _call_addr : Void*
    _syscall : Int32
    _arch : UInt32
  end
  struct X__pthread_mutex_s
    __lock : Int32
    __count : UInt32
    __owner : Int32
    __nusers : UInt32
    __kind : Int32
    __spins : Int16
    __elision : Int16
    __list : X__pthread_list_t
  end
  struct AnonStruct37
    _lower : Void*
    _upper : Void*
  end
  struct X__locale_data
    __data : UInt8[0]
  end
  union X_GDoubleIEEE754
    v_double : Gdouble
        mpn : AnonStruct22
  end
  union X_GFloatIEEE754
    v_float : Gfloat
        mpn : AnonStruct23
  end
  union X_GMutex
    p : Gpointer
    i : Guint[2]
  end
  union Sigval
    sival_int : Int32
    sival_ptr : Void*
  end
  union PthreadAttrT
    __size : Int8[56]
    __align : Int64
  end
  union AnonUnion0
    __data : X__pthread_mutex_s
    __size : Int8[40]
    __align : Int64
  end
  union AnonUnion1
    __size : Int8[4]
    __align : Int32
  end
  union AnonUnion2
        __data : AnonStruct24
    __size : Int8[48]
    __align : Int64
  end
  union AnonUnion3
    __size : Int8[4]
    __align : Int32
  end
  union AnonUnion4
        __data : AnonStruct25
    __size : Int8[56]
    __align : Int64
  end
  union AnonUnion5
    __size : Int8[8]
    __align : Int64
  end
  union AnonUnion6
    __size : Int8[32]
    __align : Int64
  end
  union AnonUnion7
    __size : Int8[4]
    __align : Int32
  end
  union X_GTokenValue
    v_symbol : Gpointer
    v_identifier : Gchar*
    v_binary : Gulong
    v_octal : Gulong
    v_int : Gulong
    v_int64 : Guint64
    v_float : Gdouble
    v_hex : Gulong
    v_string : Gchar*
    v_comment : Gchar*
    v_char : Guchar
    v_error : Guint
  end
  union X_GTypeCValue
    __data : UInt8[0]
  end
  union X_cairo_path_data_t
        header : AnonStruct27
        point : AnonStruct28
  end
  union X_GdkEvent
    type : GdkEventType
    any : GdkEventAny
    expose : GdkEventExpose
    visibility : GdkEventVisibility
    motion : GdkEventMotion
    button : GdkEventButton
    touch : GdkEventTouch
    scroll : GdkEventScroll
    key : GdkEventKey
    crossing : GdkEventCrossing
    focus_change : GdkEventFocus
    configure : GdkEventConfigure
    property : GdkEventProperty
    selection : GdkEventSelection
    owner_change : GdkEventOwnerChange
    proximity : GdkEventProximity
    dnd : GdkEventDND
    window_state : GdkEventWindowState
    setting : GdkEventSetting
    grab_broken : GdkEventGrabBroken
    touchpad_swipe : GdkEventTouchpadSwipe
    touchpad_pinch : GdkEventTouchpadPinch
  end
  union AnonUnion8
    _pad : Int32[12]
    _tid : X__pid_t
        _sigev_thread : AnonStruct29
  end
  union AnonUnion9
    _pad : Int32[28]
        _kill : AnonStruct30
        _timer : AnonStruct31
        _rt : AnonStruct32
        _sigchld : AnonStruct33
        _sigfault : AnonStruct34
        _sigpoll : AnonStruct35
        _sigsys : AnonStruct36
  end
  union AnonUnion10
    sa_handler : X__sighandler_t
    sa_sigaction : ((Int32, SiginfoT*, Void*) -> Void)
  end
  union AnonUnion11
    fpstate : X_fpstate*
    __fpstate_word : X__uint64_t
  end
  union AnonUnion12
    owner : PthreadT
    dummy : Gdouble
  end
  union AnonUnion13
    v_int : Gint
    v_uint : Guint
    v_long : Glong
    v_ulong : Gulong
    v_int64 : Gint64
    v_uint64 : Guint64
    v_float : Gfloat
    v_double : Gdouble
    v_pointer : Gpointer
  end
  union AnonUnion14
    p : Gpointer
  end
  union AnonUnion15
    __wch : UInt32
    __wchb : Int8[4]
  end
  union AnonUnion16
    long_data : Glong
    double_data : Gdouble
    string_data : Gchar*
  end
  alias X__int128_t = Int64
  alias X__uint128_t = UInt64
  alias X__builtin_ms_va_list = UInt8*
  alias X__builtin_va_list = X__va_list_tag*
  alias PtrdiffT = Int64
  alias SizeT = UInt64
  alias WcharT = Int32
  alias MaxAlignT = AnonStruct0
  alias Gint8 = Int8
  alias Guint8 = UInt8
  alias Gint16 = Int16
  alias Guint16 = UInt16
  alias Gint32 = Int32
  alias Guint32 = UInt32
  alias Gint64 = Int64
  alias Guint64 = UInt64
  alias Gssize = Int64
  alias Gsize = UInt64
  alias Goffset = Gint64
  alias Gintptr = Int64
  alias Guintptr = UInt64
  alias GPid = Int32
  alias X__u_char = UInt8
  alias X__u_short = UInt16
  alias X__u_int = UInt32
  alias X__u_long = UInt64
  alias X__int8_t = Int8
  alias X__uint8_t = UInt8
  alias X__int16_t = Int16
  alias X__uint16_t = UInt16
  alias X__int32_t = Int32
  alias X__uint32_t = UInt32
  alias X__int64_t = Int64
  alias X__uint64_t = UInt64
  alias X__quad_t = Int64
  alias X__u_quad_t = UInt64
  alias X__dev_t = UInt64
  alias X__uid_t = UInt32
  alias X__gid_t = UInt32
  alias X__ino_t = UInt64
  alias X__ino64_t = UInt64
  alias X__mode_t = UInt32
  alias X__nlink_t = UInt64
  alias X__off_t = Int64
  alias X__off64_t = Int64
  alias X__pid_t = Int32
  alias X__fsid_t = AnonStruct1
  alias X__clock_t = Int64
  alias X__rlim_t = UInt64
  alias X__rlim64_t = UInt64
  alias X__id_t = UInt32
  alias X__time_t = Int64
  alias X__useconds_t = UInt32
  alias X__suseconds_t = Int64
  alias X__daddr_t = Int32
  alias X__key_t = Int32
  alias X__clockid_t = Int32
  alias X__timer_t = Void*
  alias X__blksize_t = Int64
  alias X__blkcnt_t = Int64
  alias X__blkcnt64_t = Int64
  alias X__fsblkcnt_t = UInt64
  alias X__fsblkcnt64_t = UInt64
  alias X__fsfilcnt_t = UInt64
  alias X__fsfilcnt64_t = UInt64
  alias X__fsword_t = Int64
  alias X__ssize_t = Int64
  alias X__syscall_slong_t = Int64
  alias X__syscall_ulong_t = UInt64
  alias X__loff_t = X__off64_t
  alias X__qaddr_t = X__quad_t*
  alias X__caddr_t = UInt8*
  alias X__intptr_t = Int64
  alias X__socklen_t = UInt32
  alias ClockT = X__clock_t
  alias TimeT = X__time_t
  alias ClockidT = X__clockid_t
  alias TimerT = X__timer_t
  alias PidT = X__pid_t
  alias X__locale_t = X__locale_struct*
  alias LocaleT = X__locale_t
  alias Gchar = Int8
  alias Gshort = Int16
  alias Glong = Int64
  alias Gint = Int32
  alias Gboolean = Gint
  alias Guchar = UInt8
  alias Gushort = UInt16
  alias Gulong = UInt64
  alias Guint = UInt32
  alias Gfloat = Float32
  alias Gdouble = Float64
  alias Gpointer = Void*
  alias Gconstpointer = Void*
  alias GCompareFunc = ((Gconstpointer, Gconstpointer) -> Gint)
  alias GCompareDataFunc = ((Gconstpointer, Gconstpointer, Gpointer) -> Gint)
  alias GEqualFunc = ((Gconstpointer, Gconstpointer) -> Gboolean)
  alias GDestroyNotify = (Gpointer -> Void)
  alias GFunc = ((Gpointer, Gpointer) -> Void)
  alias GHashFunc = (Gconstpointer -> Guint)
  alias GHFunc = ((Gpointer, Gpointer, Gpointer) -> Void)
  alias GFreeFunc = (Gpointer -> Void)
  alias GTranslateFunc = ((Gchar*, Gpointer) -> Gchar*)
  alias GDoubleIEEE754 = X_GDoubleIEEE754
  alias GFloatIEEE754 = X_GFloatIEEE754
  alias GTimeVal = X_GTimeVal
  alias GBytes = X_GBytes
  alias GArray = X_GArray
  alias GByteArray = X_GByteArray
  alias GPtrArray = X_GPtrArray
  alias VaList = X__builtin_va_list
  alias X__gnuc_va_list = X__builtin_va_list
  alias GQuark = Guint32
  alias GError = X_GError
  alias GDebugKey = X_GDebugKey
  alias GVoidFunc = ( -> Void)
  alias GThreadFunc = (Gpointer -> Gpointer)
  alias GThread = X_GThread
  alias GMutex = X_GMutex
  alias GRecMutex = X_GRecMutex
  alias GRWLock = X_GRWLock
  alias GCond = X_GCond
  alias GPrivate = X_GPrivate
  alias GOnce = X_GOnce
  alias GMutexLocker = Void
  alias GAsyncQueue = X_GAsyncQueue
  alias X__sig_atomic_t = Int32
  alias X__sigset_t = AnonStruct2
  alias SigAtomicT = X__sig_atomic_t
  alias SigsetT = X__sigset_t
  alias UidT = X__uid_t
  alias SigvalT = Sigval
  alias X__sigchld_clock_t = X__clock_t
  alias SiginfoT = AnonStruct3
  alias SigeventT = Sigevent
  alias X__sighandler_t = (Int32 -> Void)
  alias SigT = X__sighandler_t
  alias StackT = Sigaltstack
  alias GregT = Int64
  alias GregsetT = GregT[23]
  alias FpregsetT = X_libc_fpstate*
  alias McontextT = AnonStruct4
  alias UcontextT = Ucontext
  alias PthreadT = UInt64
  alias X__pthread_list_t = X__pthread_internal_list
  alias PthreadMutexT = AnonUnion0
  alias PthreadMutexattrT = AnonUnion1
  alias PthreadCondT = AnonUnion2
  alias PthreadCondattrT = AnonUnion3
  alias PthreadKeyT = UInt32
  alias PthreadOnceT = Int32
  alias PthreadRwlockT = AnonUnion4
  alias PthreadRwlockattrT = AnonUnion5
  alias PthreadSpinlockT = Int32
  alias PthreadBarrierT = AnonUnion6
  alias PthreadBarrierattrT = AnonUnion7
  alias GBookmarkFile = X_GBookmarkFile
  alias GChecksum = X_GChecksum
  alias GIConv = X_GIConv*
  alias GData = X_GData
  alias GDataForeachFunc = ((GQuark, Gpointer, Gpointer) -> Void)
  alias GDuplicateFunc = ((Gpointer, Gpointer) -> Gpointer)
  alias GTime = Gint32
  alias GDateYear = Guint16
  alias GDateDay = Guint8
  alias GDate = X_GDate
  alias GTimeZone = X_GTimeZone
  alias GTimeSpan = Gint64
  alias GDateTime = X_GDateTime
  alias DIR = X__dirstream
  alias GDir = X_GDir
  alias GMemVTable = X_GMemVTable
  alias GNode = X_GNode
  alias GNodeTraverseFunc = ((GNode*, Gpointer) -> Gboolean)
  alias GNodeForeachFunc = ((GNode*, Gpointer) -> Void)
  alias GCopyFunc = ((Gconstpointer, Gpointer) -> Gpointer)
  alias GList = X_GList
  alias GHashTable = X_GHashTable
  alias GHRFunc = ((Gpointer, Gpointer, Gpointer) -> Gboolean)
  alias GHashTableIter = X_GHashTableIter
  alias GHmac = X_GHmac
  alias GHook = X_GHook
  alias GHookList = X_GHookList
  alias GHookCompareFunc = ((GHook*, GHook*) -> Gint)
  alias GHookFindFunc = ((GHook*, Gpointer) -> Gboolean)
  alias GHookMarshaller = ((GHook*, Gpointer) -> Void)
  alias GHookCheckMarshaller = ((GHook*, Gpointer) -> Gboolean)
  alias GHookFunc = (Gpointer -> Void)
  alias GHookCheckFunc = (Gpointer -> Gboolean)
  alias GHookFinalizeFunc = ((GHookList*, GHook*) -> Void)
  alias GPollFD = X_GPollFD
  alias GPollFunc = ((GPollFD*, Guint, Gint) -> Gint)
  alias GSList = X_GSList
  alias GMainContext = X_GMainContext
  alias GMainLoop = X_GMainLoop
  alias GSource = X_GSource
  alias GSourcePrivate = X_GSourcePrivate
  alias GSourceCallbackFuncs = X_GSourceCallbackFuncs
  alias GSourceFuncs = X_GSourceFuncs
  alias GSourceFunc = (Gpointer -> Gboolean)
  alias GChildWatchFunc = ((GPid, Gint, Gpointer) -> Void)
  alias GSourceDummyMarshal = ( -> Void)
  alias Gunichar = Guint32
  alias Gunichar2 = Guint16
  alias GString = X_GString
  alias GIOChannel = X_GIOChannel
  alias GIOFuncs = X_GIOFuncs
  alias GIOFunc = ((GIOChannel*, GIOCondition, Gpointer) -> Gboolean)
  alias GKeyFile = X_GKeyFile
  alias GMappedFile = X_GMappedFile
  alias GMarkupParseContext = X_GMarkupParseContext
  alias GMarkupParser = X_GMarkupParser
  alias GLogFunc = ((Gchar*, GLogLevelFlags, Gchar*, Gpointer) -> Void)
  alias GPrintFunc = (Gchar* -> Void)
  alias GOptionContext = X_GOptionContext
  alias GOptionGroup = X_GOptionGroup
  alias GOptionEntry = X_GOptionEntry
  alias GOptionArgFunc = ((Gchar*, Gchar*, Gpointer, GError**) -> Gboolean)
  alias GOptionParseFunc = ((GOptionContext*, GOptionGroup*, Gpointer, GError**) -> Gboolean)
  alias GOptionErrorFunc = ((GOptionContext*, GOptionGroup*, Gpointer, GError**) -> Void)
  alias GPatternSpec = X_GPatternSpec
  alias GQueue = X_GQueue
  alias GRand = X_GRand
  alias GRegex = X_GRegex
  alias GMatchInfo = X_GMatchInfo
  alias GRegexEvalCallback = ((GMatchInfo*, GString*, Gpointer) -> Gboolean)
  alias GScanner = X_GScanner
  alias GScannerConfig = X_GScannerConfig
  alias GTokenValue = X_GTokenValue
  alias GScannerMsgFunc = ((GScanner*, Gchar*, Gboolean) -> Void)
  alias GSequence = X_GSequence
  alias GSequenceIter = X_GSequenceNode
  alias GSequenceIterCompareFunc = ((GSequenceIter*, GSequenceIter*, Gpointer) -> Gint)
  alias GSpawnChildSetupFunc = (Gpointer -> Void)
  alias GStrv = Gchar**
  alias GStringChunk = X_GStringChunk
  alias GTestFunc = ( -> Void)
  alias GTestDataFunc = (Gconstpointer -> Void)
  alias GTestFixtureFunc = ((Gpointer, Gconstpointer) -> Void)
  alias GTestConfig = AnonStruct5
  alias GTestLogMsg = AnonStruct6
  alias GTestLogBuffer = AnonStruct7
  alias GTestLogFatalFunc = ((Gchar*, GLogLevelFlags, Gchar*, Gpointer) -> Gboolean)
  alias GThreadPool = X_GThreadPool
  alias GTimer = X_GTimer
  alias GTrashStack = X_GTrashStack
  alias GTree = X_GTree
  alias GTraverseFunc = ((Gpointer, Gpointer, Gpointer) -> Gboolean)
  alias GVariantType = X_GVariantType
  alias GVariant = X_GVariant
  alias GVariantIter = X_GVariantIter
  alias GVariantBuilder = X_GVariantBuilder
  alias GVariantDict = X_GVariantDict
  alias GAllocator = X_GAllocator
  alias GMemChunk = X_GMemChunk
  alias GCache = X_GCache
  alias GCacheNewFunc = (Gpointer -> Gpointer)
  alias GCacheDupFunc = (Gpointer -> Gpointer)
  alias GCacheDestroyFunc = (Gpointer -> Void)
  alias GCompletion = X_GCompletion
  alias GCompletionFunc = (Gpointer -> Gchar*)
  alias GCompletionStrncmpFunc = ((Gchar*, Gchar*, Gsize) -> Gint)
  alias GRelation = X_GRelation
  alias GTuples = X_GTuples
  alias GThreadFunctions = X_GThreadFunctions
  alias UChar = X__u_char
  alias UShort = X__u_short
  alias UInt = X__u_int
  alias ULong = X__u_long
  alias QuadT = X__quad_t
  alias UQuadT = X__u_quad_t
  alias FsidT = X__fsid_t
  alias LoffT = X__loff_t
  alias InoT = X__ino_t
  alias DevT = X__dev_t
  alias GidT = X__gid_t
  alias ModeT = X__mode_t
  alias NlinkT = X__nlink_t
  alias OffT = X__off_t
  alias IdT = X__id_t
  alias SsizeT = X__ssize_t
  alias DaddrT = X__daddr_t
  alias CaddrT = X__caddr_t
  alias KeyT = X__key_t
  alias Ulong = UInt64
  alias Ushort = UInt16
  alias Uint = UInt32
  alias Int8T = Int8
  alias Int16T = Int16
  alias Int32T = Int32
  alias Int64T = Int64
  alias UInt8T = UInt8
  alias UInt16T = UInt16
  alias UInt32T = UInt32
  alias UInt64T = UInt64
  alias RegisterT = Int64
  alias SusecondsT = X__suseconds_t
  alias X__fd_mask = Int64
  alias FdSet = AnonStruct8
  alias FdMask = X__fd_mask
  alias BlksizeT = X__blksize_t
  alias BlkcntT = X__blkcnt_t
  alias FsblkcntT = X__fsblkcnt_t
  alias FsfilcntT = X__fsfilcnt_t
  alias X__cpu_mask = UInt64
  alias CpuSetT = AnonStruct9
  alias X__jmp_buf = Int64[8]
  alias X__pthread_unwind_buf_t = AnonStruct10
  alias GStaticMutex = AnonStruct11
  alias GStaticRecMutex = X_GStaticRecMutex
  alias GStaticRWLock = X_GStaticRWLock
  alias GStaticPrivate = X_GStaticPrivate
  alias GAsyncQueueAutoptr = GAsyncQueue*
  alias GBookmarkFileAutoptr = GBookmarkFile*
  alias GBytesAutoptr = GBytes*
  alias GChecksumAutoptr = GChecksum*
  alias GDateTimeAutoptr = GDateTime*
  alias GDirAutoptr = GDir*
  alias GErrorAutoptr = GError*
  alias GHashTableAutoptr = GHashTable*
  alias GHmacAutoptr = GHmac*
  alias GIOChannelAutoptr = GIOChannel*
  alias GKeyFileAutoptr = GKeyFile*
  alias GListAutoptr = GList*
  alias GArrayAutoptr = GArray*
  alias GPtrArrayAutoptr = GPtrArray*
  alias GByteArrayAutoptr = GByteArray*
  alias GMainContextAutoptr = GMainContext*
  alias GMainLoopAutoptr = GMainLoop*
  alias GSourceAutoptr = GSource*
  alias GMappedFileAutoptr = GMappedFile*
  alias GMarkupParseContextAutoptr = GMarkupParseContext*
  alias GNodeAutoptr = GNode*
  alias GOptionContextAutoptr = GOptionContext*
  alias GOptionGroupAutoptr = GOptionGroup*
  alias GPatternSpecAutoptr = GPatternSpec*
  alias GQueueAutoptr = GQueue*
  alias GRandAutoptr = GRand*
  alias GRegexAutoptr = GRegex*
  alias GMatchInfoAutoptr = GMatchInfo*
  alias GScannerAutoptr = GScanner*
  alias GSequenceAutoptr = GSequence*
  alias GSListAutoptr = GSList*
  alias GStringAutoptr = GString*
  alias GStringChunkAutoptr = GStringChunk*
  alias GThreadAutoptr = GThread*
  alias GMutexLockerAutoptr = GMutexLocker*
  alias GTimerAutoptr = GTimer*
  alias GTimeZoneAutoptr = GTimeZone*
  alias GTreeAutoptr = GTree*
  alias GVariantAutoptr = GVariant*
  alias GVariantBuilderAutoptr = GVariantBuilder*
  alias GVariantIterAutoptr = GVariantIter*
  alias GVariantDictAutoptr = GVariantDict*
  alias GVariantTypeAutoptr = GVariantType*
  alias GType = Gsize
  alias GValue = X_GValue
  alias GTypeCValue = X_GTypeCValue
  alias GTypePlugin = X_GTypePlugin
  alias GTypeClass = X_GTypeClass
  alias GTypeInterface = X_GTypeInterface
  alias GTypeInstance = X_GTypeInstance
  alias GTypeInfo = X_GTypeInfo
  alias GTypeFundamentalInfo = X_GTypeFundamentalInfo
  alias GInterfaceInfo = X_GInterfaceInfo
  alias GTypeValueTable = X_GTypeValueTable
  alias GTypeQuery = X_GTypeQuery
  alias GBaseInitFunc = (Gpointer -> Void)
  alias GBaseFinalizeFunc = (Gpointer -> Void)
  alias GClassInitFunc = ((Gpointer, Gpointer) -> Void)
  alias GClassFinalizeFunc = ((Gpointer, Gpointer) -> Void)
  alias GInstanceInitFunc = ((GTypeInstance*, Gpointer) -> Void)
  alias GInterfaceInitFunc = ((Gpointer, Gpointer) -> Void)
  alias GInterfaceFinalizeFunc = ((Gpointer, Gpointer) -> Void)
  alias GTypeClassCacheFunc = ((Gpointer, GTypeClass*) -> Gboolean)
  alias GTypeInterfaceCheckFunc = ((Gpointer, Gpointer) -> Void)
  alias GValueTransform = ((GValue*, GValue*) -> Void)
  alias GParamSpec = X_GParamSpec
  alias GParamSpecClass = X_GParamSpecClass
  alias GParameter = X_GParameter
  alias GParamSpecPool = X_GParamSpecPool
  alias GParamSpecTypeInfo = X_GParamSpecTypeInfo
  alias GClosure = X_GClosure
  alias GClosureNotifyData = X_GClosureNotifyData
  alias GCallback = ( -> Void)
  alias GClosureNotify = ((Gpointer, GClosure*) -> Void)
  alias GClosureMarshal = ((GClosure*, GValue*, Guint, GValue*, Gpointer, Gpointer) -> Void)
  alias GVaClosureMarshal = ((GClosure*, GValue*, Gpointer, X__va_list_tag*, Gpointer, Int32, GType*) -> Void)
  alias GCClosure = X_GCClosure
  alias GSignalQuery = X_GSignalQuery
  alias GSignalInvocationHint = X_GSignalInvocationHint
  alias GSignalCMarshaller = GClosureMarshal
  alias GSignalCVaMarshaller = GVaClosureMarshal
  alias GSignalEmissionHook = ((GSignalInvocationHint*, Guint, GValue*, Gpointer) -> Gboolean)
  alias GSignalAccumulator = ((GSignalInvocationHint*, GValue*, GValue*, Gpointer) -> Gboolean)
  alias GBoxedCopyFunc = (Gpointer -> Gpointer)
  alias GBoxedFreeFunc = (Gpointer -> Void)
  alias GObject = X_GObject
  alias GObjectClass = X_GObjectClass
  alias GInitiallyUnowned = X_GObject
  alias GInitiallyUnownedClass = X_GObjectClass
  alias GObjectConstructParam = X_GObjectConstructParam
  alias GObjectGetPropertyFunc = ((GObject*, Guint, GValue*, GParamSpec*) -> Void)
  alias GObjectSetPropertyFunc = ((GObject*, Guint, GValue*, GParamSpec*) -> Void)
  alias GObjectFinalizeFunc = (GObject* -> Void)
  alias GWeakNotify = ((Gpointer, GObject*) -> Void)
  alias GToggleNotify = ((Gpointer, GObject*, Gboolean) -> Void)
  alias GWeakRef = AnonStruct12
  alias GBinding = X_GBinding
  alias GBindingTransformFunc = ((GBinding*, GValue*, GValue*, Gpointer) -> Gboolean)
  alias GEnumClass = X_GEnumClass
  alias GFlagsClass = X_GFlagsClass
  alias GEnumValue = X_GEnumValue
  alias GFlagsValue = X_GFlagsValue
  alias GParamSpecChar = X_GParamSpecChar
  alias GParamSpecUChar = X_GParamSpecUChar
  alias GParamSpecBoolean = X_GParamSpecBoolean
  alias GParamSpecInt = X_GParamSpecInt
  alias GParamSpecUInt = X_GParamSpecUInt
  alias GParamSpecLong = X_GParamSpecLong
  alias GParamSpecULong = X_GParamSpecULong
  alias GParamSpecInt64 = X_GParamSpecInt64
  alias GParamSpecUInt64 = X_GParamSpecUInt64
  alias GParamSpecUnichar = X_GParamSpecUnichar
  alias GParamSpecEnum = X_GParamSpecEnum
  alias GParamSpecFlags = X_GParamSpecFlags
  alias GParamSpecFloat = X_GParamSpecFloat
  alias GParamSpecDouble = X_GParamSpecDouble
  alias GParamSpecString = X_GParamSpecString
  alias GParamSpecParam = X_GParamSpecParam
  alias GParamSpecBoxed = X_GParamSpecBoxed
  alias GParamSpecPointer = X_GParamSpecPointer
  alias GParamSpecValueArray = X_GParamSpecValueArray
  alias GParamSpecObject = X_GParamSpecObject
  alias GParamSpecOverride = X_GParamSpecOverride
  alias GParamSpecGType = X_GParamSpecGType
  alias GParamSpecVariant = X_GParamSpecVariant
  alias GTypeModule = X_GTypeModule
  alias GTypeModuleClass = X_GTypeModuleClass
  alias GTypePluginClass = X_GTypePluginClass
  alias GTypePluginUse = (GTypePlugin* -> Void)
  alias GTypePluginUnuse = (GTypePlugin* -> Void)
  alias GTypePluginCompleteTypeInfo = ((GTypePlugin*, GType, GTypeInfo*, GTypeValueTable*) -> Void)
  alias GTypePluginCompleteInterfaceInfo = ((GTypePlugin*, GType, GType, GInterfaceInfo*) -> Void)
  alias GValueArray = X_GValueArray
  alias Gchararray = Gchar*
  alias GObjectAutoptr = GObject*
  alias GInitiallyUnownedAutoptr = GInitiallyUnowned*
  alias GTlsPasswordFlags = X_GTlsPasswordFlags
  alias GAppLaunchContext = X_GAppLaunchContext
  alias GAppInfo = X_GAppInfo
  alias GAsyncResult = X_GAsyncResult
  alias GAsyncInitable = X_GAsyncInitable
  alias GBufferedInputStream = X_GBufferedInputStream
  alias GBufferedOutputStream = X_GBufferedOutputStream
  alias GCancellable = X_GCancellable
  alias GCharsetConverter = X_GCharsetConverter
  alias GConverter = X_GConverter
  alias GConverterInputStream = X_GConverterInputStream
  alias GConverterOutputStream = X_GConverterOutputStream
  alias GDatagramBased = X_GDatagramBased
  alias GDataInputStream = X_GDataInputStream
  alias GSimplePermission = X_GSimplePermission
  alias GZlibCompressor = X_GZlibCompressor
  alias GZlibDecompressor = X_GZlibDecompressor
  alias GSimpleActionGroup = X_GSimpleActionGroup
  alias GRemoteActionGroup = X_GRemoteActionGroup
  alias GDBusActionGroup = X_GDBusActionGroup
  alias GActionMap = X_GActionMap
  alias GActionGroup = X_GActionGroup
  alias GPropertyAction = X_GPropertyAction
  alias GSimpleAction = X_GSimpleAction
  alias GAction = X_GAction
  alias GApplication = X_GApplication
  alias GApplicationCommandLine = X_GApplicationCommandLine
  alias GSettingsBackend = X_GSettingsBackend
  alias GSettings = X_GSettings
  alias GPermission = X_GPermission
  alias GMenuModel = X_GMenuModel
  alias GNotification = X_GNotification
  alias GDrive = X_GDrive
  alias GFileEnumerator = X_GFileEnumerator
  alias GFileMonitor = X_GFileMonitor
  alias GFilterInputStream = X_GFilterInputStream
  alias GFilterOutputStream = X_GFilterOutputStream
  alias GFile = X_GFile
  alias GFileInfo = X_GFileInfo
  alias GFileAttributeMatcher = X_GFileAttributeMatcher
  alias GFileAttributeInfo = X_GFileAttributeInfo
  alias GFileAttributeInfoList = X_GFileAttributeInfoList
  alias GFileDescriptorBased = X_GFileDescriptorBased
  alias GFileInputStream = X_GFileInputStream
  alias GFileOutputStream = X_GFileOutputStream
  alias GFileIOStream = X_GFileIOStream
  alias GFileIcon = X_GFileIcon
  alias GFilenameCompleter = X_GFilenameCompleter
  alias GIcon = X_GIcon
  alias GInetAddress = X_GInetAddress
  alias GInetAddressMask = X_GInetAddressMask
  alias GInetSocketAddress = X_GInetSocketAddress
  alias GNativeSocketAddress = X_GNativeSocketAddress
  alias GInputStream = X_GInputStream
  alias GInitable = X_GInitable
  alias GIOModule = X_GIOModule
  alias GIOExtensionPoint = X_GIOExtensionPoint
  alias GIOExtension = X_GIOExtension
  alias GIOSchedulerJob = X_GIOSchedulerJob
  alias GIOStreamAdapter = X_GIOStreamAdapter
  alias GLoadableIcon = X_GLoadableIcon
  alias GBytesIcon = X_GBytesIcon
  alias GMemoryInputStream = X_GMemoryInputStream
  alias GMemoryOutputStream = X_GMemoryOutputStream
  alias GMount = X_GMount
  alias GMountOperation = X_GMountOperation
  alias GNetworkAddress = X_GNetworkAddress
  alias GNetworkMonitor = X_GNetworkMonitor
  alias GNetworkService = X_GNetworkService
  alias GOutputStream = X_GOutputStream
  alias GIOStream = X_GIOStream
  alias GSimpleIOStream = X_GSimpleIOStream
  alias GPollableInputStream = X_GPollableInputStream
  alias GPollableOutputStream = X_GPollableOutputStream
  alias GResolver = X_GResolver
  alias GResource = X_GResource
  alias GSeekable = X_GSeekable
  alias GSimpleAsyncResult = X_GSimpleAsyncResult
  alias GSocket = X_GSocket
  alias GSocketControlMessage = X_GSocketControlMessage
  alias GSocketClient = X_GSocketClient
  alias GSocketConnection = X_GSocketConnection
  alias GSocketListener = X_GSocketListener
  alias GSocketService = X_GSocketService
  alias GSocketAddress = X_GSocketAddress
  alias GSocketAddressEnumerator = X_GSocketAddressEnumerator
  alias GSocketConnectable = X_GSocketConnectable
  alias GSrvTarget = X_GSrvTarget
  alias GTask = X_GTask
  alias GTcpConnection = X_GTcpConnection
  alias GTcpWrapperConnection = X_GTcpWrapperConnection
  alias GThreadedSocketService = X_GThreadedSocketService
  alias GDtlsConnection = X_GDtlsConnection
  alias GDtlsClientConnection = X_GDtlsClientConnection
  alias GDtlsServerConnection = X_GDtlsServerConnection
  alias GThemedIcon = X_GThemedIcon
  alias GTlsCertificate = X_GTlsCertificate
  alias GTlsClientConnection = X_GTlsClientConnection
  alias GTlsConnection = X_GTlsConnection
  alias GTlsDatabase = X_GTlsDatabase
  alias GTlsFileDatabase = X_GTlsFileDatabase
  alias GTlsInteraction = X_GTlsInteraction
  alias GTlsPassword = X_GTlsPassword
  alias GTlsServerConnection = X_GTlsServerConnection
  alias GVfs = X_GVfs
  alias GProxyResolver = X_GProxyResolver
  alias GProxy = X_GProxy
  alias GProxyAddress = X_GProxyAddress
  alias GProxyAddressEnumerator = X_GProxyAddressEnumerator
  alias GVolume = X_GVolume
  alias GVolumeMonitor = X_GVolumeMonitor
  alias GAsyncReadyCallback = ((GObject*, GAsyncResult*, Gpointer) -> Void)
  alias GFileProgressCallback = ((Goffset, Goffset, Gpointer) -> Void)
  alias GFileReadMoreCallback = ((UInt8*, Goffset, Gpointer) -> Gboolean)
  alias GFileMeasureProgressCallback = ((Gboolean, Guint64, Guint64, Guint64, Gpointer) -> Void)
  alias GIOSchedulerJobFunc = ((GIOSchedulerJob*, GCancellable*, Gpointer) -> Gboolean)
  alias GSimpleAsyncThreadFunc = ((GSimpleAsyncResult*, GObject*, GCancellable*) -> Void)
  alias GSocketSourceFunc = ((GSocket*, GIOCondition, Gpointer) -> Gboolean)
  alias GDatagramBasedSourceFunc = ((GDatagramBased*, GIOCondition, Gpointer) -> Gboolean)
  alias GInputVector = X_GInputVector
  alias GInputMessage = X_GInputMessage
  alias GOutputVector = X_GOutputVector
  alias GOutputMessage = X_GOutputMessage
  alias GCredentials = X_GCredentials
  alias GUnixCredentialsMessage = X_GUnixCredentialsMessage
  alias GUnixFDList = X_GUnixFDList
  alias GDBusMessage = X_GDBusMessage
  alias GDBusConnection = X_GDBusConnection
  alias GDBusProxy = X_GDBusProxy
  alias GDBusMethodInvocation = X_GDBusMethodInvocation
  alias GDBusServer = X_GDBusServer
  alias GDBusAuthObserver = X_GDBusAuthObserver
  alias GDBusErrorEntry = X_GDBusErrorEntry
  alias GDBusInterfaceVTable = X_GDBusInterfaceVTable
  alias GDBusSubtreeVTable = X_GDBusSubtreeVTable
  alias GDBusAnnotationInfo = X_GDBusAnnotationInfo
  alias GDBusArgInfo = X_GDBusArgInfo
  alias GDBusMethodInfo = X_GDBusMethodInfo
  alias GDBusSignalInfo = X_GDBusSignalInfo
  alias GDBusPropertyInfo = X_GDBusPropertyInfo
  alias GDBusInterfaceInfo = X_GDBusInterfaceInfo
  alias GDBusNodeInfo = X_GDBusNodeInfo
  alias GCancellableSourceFunc = ((GCancellable*, Gpointer) -> Gboolean)
  alias GPollableSourceFunc = ((GObject*, Gpointer) -> Gboolean)
  alias GDBusInterface = X_GDBusInterface
  alias GDBusInterfaceSkeleton = X_GDBusInterfaceSkeleton
  alias GDBusObject = X_GDBusObject
  alias GDBusObjectSkeleton = X_GDBusObjectSkeleton
  alias GDBusObjectProxy = X_GDBusObjectProxy
  alias GDBusObjectManager = X_GDBusObjectManager
  alias GDBusObjectManagerClient = X_GDBusObjectManagerClient
  alias GDBusObjectManagerServer = X_GDBusObjectManagerServer
  alias GDBusProxyTypeFunc = ((GDBusObjectManagerClient*, Gchar*, Gchar*, Gpointer) -> GType)
  alias GTestDBus = X_GTestDBus
  alias GSubprocess = X_GSubprocess
  alias GSubprocessLauncher = X_GSubprocessLauncher
  alias GActionInterface = X_GActionInterface
  alias GActionGroupInterface = X_GActionGroupInterface
  alias GActionMapInterface = X_GActionMapInterface
  alias GActionEntry = X_GActionEntry
  alias GAppLaunchContextClass = X_GAppLaunchContextClass
  alias GAppLaunchContextPrivate = X_GAppLaunchContextPrivate
  alias GAppInfoIface = X_GAppInfoIface
  alias GAppInfoMonitor = X_GAppInfoMonitor
  alias GApplicationPrivate = X_GApplicationPrivate
  alias GApplicationClass = X_GApplicationClass
  alias GApplicationCommandLinePrivate = X_GApplicationCommandLinePrivate
  alias GApplicationCommandLineClass = X_GApplicationCommandLineClass
  alias GInitableIface = X_GInitableIface
  alias GAsyncInitableIface = X_GAsyncInitableIface
  alias GAsyncResultIface = X_GAsyncResultIface
  alias GInputStreamClass = X_GInputStreamClass
  alias GInputStreamPrivate = X_GInputStreamPrivate
  alias GFilterInputStreamClass = X_GFilterInputStreamClass
  alias GBufferedInputStreamClass = X_GBufferedInputStreamClass
  alias GBufferedInputStreamPrivate = X_GBufferedInputStreamPrivate
  alias GOutputStreamClass = X_GOutputStreamClass
  alias GOutputStreamPrivate = X_GOutputStreamPrivate
  alias GFilterOutputStreamClass = X_GFilterOutputStreamClass
  alias GBufferedOutputStreamClass = X_GBufferedOutputStreamClass
  alias GBufferedOutputStreamPrivate = X_GBufferedOutputStreamPrivate
  alias GCancellableClass = X_GCancellableClass
  alias GCancellablePrivate = X_GCancellablePrivate
  alias GConverterIface = X_GConverterIface
  alias GCharsetConverterClass = X_GCharsetConverterClass
  alias GConverterInputStreamClass = X_GConverterInputStreamClass
  alias GConverterInputStreamPrivate = X_GConverterInputStreamPrivate
  alias GConverterOutputStreamClass = X_GConverterOutputStreamClass
  alias GConverterOutputStreamPrivate = X_GConverterOutputStreamPrivate
  alias UsecondsT = X__useconds_t
  alias IntptrT = X__intptr_t
  alias SocklenT = X__socklen_t
  alias GCredentialsClass = X_GCredentialsClass
  alias GDatagramBasedInterface = X_GDatagramBasedInterface
  alias GDataInputStreamClass = X_GDataInputStreamClass
  alias GDataInputStreamPrivate = X_GDataInputStreamPrivate
  alias GDataOutputStream = X_GDataOutputStream
  alias GDataOutputStreamClass = X_GDataOutputStreamClass
  alias GDataOutputStreamPrivate = X_GDataOutputStreamPrivate
  alias GDBusInterfaceMethodCallFunc = ((GDBusConnection*, Gchar*, Gchar*, Gchar*, Gchar*, GVariant*, GDBusMethodInvocation*, Gpointer) -> Void)
  alias GDBusInterfaceGetPropertyFunc = ((GDBusConnection*, Gchar*, Gchar*, Gchar*, Gchar*, GError**, Gpointer) -> GVariant*)
  alias GDBusInterfaceSetPropertyFunc = ((GDBusConnection*, Gchar*, Gchar*, Gchar*, Gchar*, GVariant*, GError**, Gpointer) -> Gboolean)
  alias GDBusSubtreeEnumerateFunc = ((GDBusConnection*, Gchar*, Gchar*, Gpointer) -> Gchar**)
  alias GDBusSubtreeIntrospectFunc = ((GDBusConnection*, Gchar*, Gchar*, Gchar*, Gpointer) -> GDBusInterfaceInfo**)
  alias GDBusSubtreeDispatchFunc = ((GDBusConnection*, Gchar*, Gchar*, Gchar*, Gchar*, Gpointer*, Gpointer) -> GDBusInterfaceVTable*)
  alias GDBusSignalCallback = ((GDBusConnection*, Gchar*, Gchar*, Gchar*, Gchar*, GVariant*, Gpointer) -> Void)
  alias GDBusMessageFilterFunction = ((GDBusConnection*, GDBusMessage*, Gboolean, Gpointer) -> GDBusMessage*)
  alias GBusAcquiredCallback = ((GDBusConnection*, Gchar*, Gpointer) -> Void)
  alias GBusNameAcquiredCallback = ((GDBusConnection*, Gchar*, Gpointer) -> Void)
  alias GBusNameLostCallback = ((GDBusConnection*, Gchar*, Gpointer) -> Void)
  alias GBusNameAppearedCallback = ((GDBusConnection*, Gchar*, Gchar*, Gpointer) -> Void)
  alias GBusNameVanishedCallback = ((GDBusConnection*, Gchar*, Gpointer) -> Void)
  alias GDBusProxyClass = X_GDBusProxyClass
  alias GDBusProxyPrivate = X_GDBusProxyPrivate
  alias GDriveIface = X_GDriveIface
  alias GDtlsConnectionInterface = X_GDtlsConnectionInterface
  alias GDtlsClientConnectionInterface = X_GDtlsClientConnectionInterface
  alias GDtlsServerConnectionInterface = X_GDtlsServerConnectionInterface
  alias GIconIface = X_GIconIface
  alias GEmblem = X_GEmblem
  alias GEmblemClass = X_GEmblemClass
  alias GEmblemedIcon = X_GEmblemedIcon
  alias GEmblemedIconClass = X_GEmblemedIconClass
  alias GEmblemedIconPrivate = X_GEmblemedIconPrivate
  alias GFileEnumeratorClass = X_GFileEnumeratorClass
  alias GFileEnumeratorPrivate = X_GFileEnumeratorPrivate
  alias GFileIface = X_GFileIface
  alias GFileIconClass = X_GFileIconClass
  alias GFileInfoClass = X_GFileInfoClass
  alias GFileInputStreamClass = X_GFileInputStreamClass
  alias GFileInputStreamPrivate = X_GFileInputStreamPrivate
  alias GIOStreamPrivate = X_GIOStreamPrivate
  alias GIOStreamClass = X_GIOStreamClass
  alias GFileIOStreamClass = X_GFileIOStreamClass
  alias GFileIOStreamPrivate = X_GFileIOStreamPrivate
  alias GFileMonitorClass = X_GFileMonitorClass
  alias GFileMonitorPrivate = X_GFileMonitorPrivate
  alias GFilenameCompleterClass = X_GFilenameCompleterClass
  alias GFileOutputStreamClass = X_GFileOutputStreamClass
  alias GFileOutputStreamPrivate = X_GFileOutputStreamPrivate
  alias GInetAddressClass = X_GInetAddressClass
  alias GInetAddressPrivate = X_GInetAddressPrivate
  alias GInetAddressMaskClass = X_GInetAddressMaskClass
  alias GInetAddressMaskPrivate = X_GInetAddressMaskPrivate
  alias GSocketAddressClass = X_GSocketAddressClass
  alias GInetSocketAddressClass = X_GInetSocketAddressClass
  alias GInetSocketAddressPrivate = X_GInetSocketAddressPrivate
  alias GModule = X_GModule
  alias GModuleCheckInit = (GModule* -> Gchar*)
  alias GModuleUnload = (GModule* -> Void)
  alias GIOModuleScope = X_GIOModuleScope
  alias GIOModuleClass = X_GIOModuleClass
  alias GLoadableIconIface = X_GLoadableIconIface
  alias GMemoryInputStreamClass = X_GMemoryInputStreamClass
  alias GMemoryInputStreamPrivate = X_GMemoryInputStreamPrivate
  alias GMemoryOutputStreamClass = X_GMemoryOutputStreamClass
  alias GMemoryOutputStreamPrivate = X_GMemoryOutputStreamPrivate
  alias GReallocFunc = ((Gpointer, Gsize) -> Gpointer)
  alias GMountIface = X_GMountIface
  alias GMountOperationClass = X_GMountOperationClass
  alias GMountOperationPrivate = X_GMountOperationPrivate
  alias GVolumeMonitorClass = X_GVolumeMonitorClass
  alias GNativeVolumeMonitor = X_GNativeVolumeMonitor
  alias GNativeVolumeMonitorClass = X_GNativeVolumeMonitorClass
  alias GNetworkAddressClass = X_GNetworkAddressClass
  alias GNetworkAddressPrivate = X_GNetworkAddressPrivate
  alias GNetworkMonitorInterface = X_GNetworkMonitorInterface
  alias GNetworkServiceClass = X_GNetworkServiceClass
  alias GNetworkServicePrivate = X_GNetworkServicePrivate
  alias GPermissionPrivate = X_GPermissionPrivate
  alias GPermissionClass = X_GPermissionClass
  alias GPollableInputStreamInterface = X_GPollableInputStreamInterface
  alias GPollableOutputStreamInterface = X_GPollableOutputStreamInterface
  alias GProxyInterface = X_GProxyInterface
  alias GProxyAddressClass = X_GProxyAddressClass
  alias GProxyAddressPrivate = X_GProxyAddressPrivate
  alias GSocketAddressEnumeratorClass = X_GSocketAddressEnumeratorClass
  alias GProxyAddressEnumeratorClass = X_GProxyAddressEnumeratorClass
  alias GProxyAddressEnumeratorPrivate = X_GProxyAddressEnumeratorPrivate
  alias GProxyResolverInterface = X_GProxyResolverInterface
  alias GResolverPrivate = X_GResolverPrivate
  alias GResolverClass = X_GResolverClass
  alias GStaticResource = X_GStaticResource
  alias GSeekableIface = X_GSeekableIface
  alias GSettingsSchemaSource = X_GSettingsSchemaSource
  alias GSettingsSchema = X_GSettingsSchema
  alias GSettingsSchemaKey = X_GSettingsSchemaKey
  alias GSettingsPrivate = X_GSettingsPrivate
  alias GSettingsClass = X_GSettingsClass
  alias GSettingsBindSetMapping = ((GValue*, GVariantType*, Gpointer) -> GVariant*)
  alias GSettingsBindGetMapping = ((GValue*, GVariant*, Gpointer) -> Gboolean)
  alias GSettingsGetMapping = ((GVariant*, Gpointer*, Gpointer) -> Gboolean)
  alias GSimpleActionGroupPrivate = X_GSimpleActionGroupPrivate
  alias GSimpleActionGroupClass = X_GSimpleActionGroupClass
  alias GSimpleAsyncResultClass = X_GSimpleAsyncResultClass
  alias GSocketClientPrivate = X_GSocketClientPrivate
  alias GSocketClientClass = X_GSocketClientClass
  alias GSocketConnectableIface = X_GSocketConnectableIface
  alias GSocketPrivate = X_GSocketPrivate
  alias GSocketClass = X_GSocketClass
  alias GSocketConnectionPrivate = X_GSocketConnectionPrivate
  alias GSocketConnectionClass = X_GSocketConnectionClass
  alias GSocketControlMessagePrivate = X_GSocketControlMessagePrivate
  alias GSocketControlMessageClass = X_GSocketControlMessageClass
  alias GSocketListenerPrivate = X_GSocketListenerPrivate
  alias GSocketListenerClass = X_GSocketListenerClass
  alias GSocketServicePrivate = X_GSocketServicePrivate
  alias GSocketServiceClass = X_GSocketServiceClass
  alias GSimpleProxyResolver = X_GSimpleProxyResolver
  alias GSimpleProxyResolverPrivate = X_GSimpleProxyResolverPrivate
  alias GSimpleProxyResolverClass = X_GSimpleProxyResolverClass
  alias GTaskClass = X_GTaskClass
  alias GTaskThreadFunc = ((GTask*, Gpointer, Gpointer, GCancellable*) -> Void)
  alias GTcpConnectionPrivate = X_GTcpConnectionPrivate
  alias GTcpConnectionClass = X_GTcpConnectionClass
  alias GTcpWrapperConnectionPrivate = X_GTcpWrapperConnectionPrivate
  alias GTcpWrapperConnectionClass = X_GTcpWrapperConnectionClass
  alias GThemedIconClass = X_GThemedIconClass
  alias GThreadedSocketServicePrivate = X_GThreadedSocketServicePrivate
  alias GThreadedSocketServiceClass = X_GThreadedSocketServiceClass
  alias GTlsBackend = X_GTlsBackend
  alias GTlsBackendInterface = X_GTlsBackendInterface
  alias GTlsCertificateClass = X_GTlsCertificateClass
  alias GTlsCertificatePrivate = X_GTlsCertificatePrivate
  alias GTlsConnectionClass = X_GTlsConnectionClass
  alias GTlsConnectionPrivate = X_GTlsConnectionPrivate
  alias GTlsClientConnectionInterface = X_GTlsClientConnectionInterface
  alias GTlsDatabaseClass = X_GTlsDatabaseClass
  alias GTlsDatabasePrivate = X_GTlsDatabasePrivate
  alias GTlsFileDatabaseInterface = X_GTlsFileDatabaseInterface
  alias GTlsInteractionClass = X_GTlsInteractionClass
  alias GTlsInteractionPrivate = X_GTlsInteractionPrivate
  alias GTlsServerConnectionInterface = X_GTlsServerConnectionInterface
  alias GTlsPasswordClass = X_GTlsPasswordClass
  alias GTlsPasswordPrivate = X_GTlsPasswordPrivate
  alias GVfsClass = X_GVfsClass
  alias GVolumeIface = X_GVolumeIface
  alias GZlibCompressorClass = X_GZlibCompressorClass
  alias GZlibDecompressorClass = X_GZlibDecompressorClass
  alias GDBusInterfaceIface = X_GDBusInterfaceIface
  alias GDBusInterfaceSkeletonClass = X_GDBusInterfaceSkeletonClass
  alias GDBusInterfaceSkeletonPrivate = X_GDBusInterfaceSkeletonPrivate
  alias GDBusObjectIface = X_GDBusObjectIface
  alias GDBusObjectSkeletonClass = X_GDBusObjectSkeletonClass
  alias GDBusObjectSkeletonPrivate = X_GDBusObjectSkeletonPrivate
  alias GDBusObjectProxyClass = X_GDBusObjectProxyClass
  alias GDBusObjectProxyPrivate = X_GDBusObjectProxyPrivate
  alias GDBusObjectManagerIface = X_GDBusObjectManagerIface
  alias GDBusObjectManagerClientClass = X_GDBusObjectManagerClientClass
  alias GDBusObjectManagerClientPrivate = X_GDBusObjectManagerClientPrivate
  alias GDBusObjectManagerServerClass = X_GDBusObjectManagerServerClass
  alias GDBusObjectManagerServerPrivate = X_GDBusObjectManagerServerPrivate
  alias GRemoteActionGroupInterface = X_GRemoteActionGroupInterface
  alias GMenuModelPrivate = X_GMenuModelPrivate
  alias GMenuModelClass = X_GMenuModelClass
  alias GMenuAttributeIterPrivate = X_GMenuAttributeIterPrivate
  alias GMenuAttributeIterClass = X_GMenuAttributeIterClass
  alias GMenuAttributeIter = X_GMenuAttributeIter
  alias GMenuLinkIterPrivate = X_GMenuLinkIterPrivate
  alias GMenuLinkIterClass = X_GMenuLinkIterClass
  alias GMenuLinkIter = X_GMenuLinkIter
  alias GMenuItem = X_GMenuItem
  alias GMenu = X_GMenu
  alias GDBusMenuModel = X_GDBusMenuModel
  alias GListModel = X_GListModel
  alias GListModelInterface = X_GListModelInterface
  alias GListModelAutoptr = GListModel*
  alias GListStore = X_GListStore
  alias GListStoreClass = AnonStruct13
  alias GListStoreAutoptr = GListStore*
  alias GActionAutoptr = GAction*
  alias GActionMapAutoptr = GActionMap*
  alias GAppInfoAutoptr = GAppInfo*
  alias GAppLaunchContextAutoptr = GAppLaunchContext*
  alias GAppInfoMonitorAutoptr = GAppInfoMonitor*
  alias GApplicationCommandLineAutoptr = GApplicationCommandLine*
  alias GApplicationAutoptr = GApplication*
  alias GAsyncInitableAutoptr = GAsyncInitable*
  alias GAsyncResultAutoptr = GAsyncResult*
  alias GBufferedInputStreamAutoptr = GBufferedInputStream*
  alias GBufferedOutputStreamAutoptr = GBufferedOutputStream*
  alias GBytesIconAutoptr = GBytesIcon*
  alias GCancellableAutoptr = GCancellable*
  alias GCharsetConverterAutoptr = GCharsetConverter*
  alias GConverterAutoptr = GConverter*
  alias GConverterInputStreamAutoptr = GConverterInputStream*
  alias GConverterOutputStreamAutoptr = GConverterOutputStream*
  alias GCredentialsAutoptr = GCredentials*
  alias GDatagramBasedAutoptr = GDatagramBased*
  alias GDataInputStreamAutoptr = GDataInputStream*
  alias GDataOutputStreamAutoptr = GDataOutputStream*
  alias GDBusActionGroupAutoptr = GDBusActionGroup*
  alias GDBusAuthObserverAutoptr = GDBusAuthObserver*
  alias GDBusConnectionAutoptr = GDBusConnection*
  alias GDBusInterfaceAutoptr = GDBusInterface*
  alias GDBusInterfaceSkeletonAutoptr = GDBusInterfaceSkeleton*
  alias GDBusMenuModelAutoptr = GDBusMenuModel*
  alias GDBusMessageAutoptr = GDBusMessage*
  alias GDBusMethodInvocationAutoptr = GDBusMethodInvocation*
  alias GDBusNodeInfoAutoptr = GDBusNodeInfo*
  alias GDBusObjectAutoptr = GDBusObject*
  alias GDBusObjectManagerClientAutoptr = GDBusObjectManagerClient*
  alias GDBusObjectManagerAutoptr = GDBusObjectManager*
  alias GDBusObjectManagerServerAutoptr = GDBusObjectManagerServer*
  alias GDBusObjectProxyAutoptr = GDBusObjectProxy*
  alias GDBusObjectSkeletonAutoptr = GDBusObjectSkeleton*
  alias GDBusProxyAutoptr = GDBusProxy*
  alias GDBusServerAutoptr = GDBusServer*
  alias GDriveAutoptr = GDrive*
  alias GEmblemedIconAutoptr = GEmblemedIcon*
  alias GEmblemAutoptr = GEmblem*
  alias GFileEnumeratorAutoptr = GFileEnumerator*
  alias GFileAutoptr = GFile*
  alias GFileIconAutoptr = GFileIcon*
  alias GFileInfoAutoptr = GFileInfo*
  alias GFileInputStreamAutoptr = GFileInputStream*
  alias GFileIOStreamAutoptr = GFileIOStream*
  alias GFileMonitorAutoptr = GFileMonitor*
  alias GFilenameCompleterAutoptr = GFilenameCompleter*
  alias GFileOutputStreamAutoptr = GFileOutputStream*
  alias GFilterInputStreamAutoptr = GFilterInputStream*
  alias GFilterOutputStreamAutoptr = GFilterOutputStream*
  alias GIconAutoptr = GIcon*
  alias GInetAddressAutoptr = GInetAddress*
  alias GInetAddressMaskAutoptr = GInetAddressMask*
  alias GInetSocketAddressAutoptr = GInetSocketAddress*
  alias GInitableAutoptr = GInitable*
  alias GInputStreamAutoptr = GInputStream*
  alias GIOModuleAutoptr = GIOModule*
  alias GIOStreamAutoptr = GIOStream*
  alias GLoadableIconAutoptr = GLoadableIcon*
  alias GMemoryInputStreamAutoptr = GMemoryInputStream*
  alias GMemoryOutputStreamAutoptr = GMemoryOutputStream*
  alias GMenuAutoptr = GMenu*
  alias GMenuItemAutoptr = GMenuItem*
  alias GMenuModelAutoptr = GMenuModel*
  alias GMenuAttributeIterAutoptr = GMenuAttributeIter*
  alias GMenuLinkIterAutoptr = GMenuLinkIter*
  alias GMountAutoptr = GMount*
  alias GMountOperationAutoptr = GMountOperation*
  alias GNativeVolumeMonitorAutoptr = GNativeVolumeMonitor*
  alias GNetworkAddressAutoptr = GNetworkAddress*
  alias GNetworkMonitorAutoptr = GNetworkMonitor*
  alias GNetworkServiceAutoptr = GNetworkService*
  alias GNotificationAutoptr = GNotification*
  alias GOutputStreamAutoptr = GOutputStream*
  alias GPermissionAutoptr = GPermission*
  alias GPollableInputStreamAutoptr = GPollableInputStream*
  alias GPollableOutputStreamAutoptr = GPollableOutputStream*
  alias GPropertyActionAutoptr = GPropertyAction*
  alias GProxyAddressEnumeratorAutoptr = GProxyAddressEnumerator*
  alias GProxyAddressAutoptr = GProxyAddress*
  alias GProxyAutoptr = GProxy*
  alias GProxyResolverAutoptr = GProxyResolver*
  alias GRemoteActionGroupAutoptr = GRemoteActionGroup*
  alias GResolverAutoptr = GResolver*
  alias GSeekableAutoptr = GSeekable*
  alias GSettingsBackendAutoptr = GSettingsBackend*
  alias GSettingsSchemaAutoptr = GSettingsSchema*
  alias GSettingsAutoptr = GSettings*
  alias GSimpleActionGroupAutoptr = GSimpleActionGroup*
  alias GSimpleActionAutoptr = GSimpleAction*
  alias GSimpleAsyncResultAutoptr = GSimpleAsyncResult*
  alias GSimplePermissionAutoptr = GSimplePermission*
  alias GSimpleProxyResolverAutoptr = GSimpleProxyResolver*
  alias GSocketAddressEnumeratorAutoptr = GSocketAddressEnumerator*
  alias GSocketAddressAutoptr = GSocketAddress*
  alias GSocketClientAutoptr = GSocketClient*
  alias GSocketConnectableAutoptr = GSocketConnectable*
  alias GSocketConnectionAutoptr = GSocketConnection*
  alias GSocketControlMessageAutoptr = GSocketControlMessage*
  alias GSocketAutoptr = GSocket*
  alias GSocketListenerAutoptr = GSocketListener*
  alias GSocketServiceAutoptr = GSocketService*
  alias GSubprocessAutoptr = GSubprocess*
  alias GSubprocessLauncherAutoptr = GSubprocessLauncher*
  alias GTaskAutoptr = GTask*
  alias GTcpConnectionAutoptr = GTcpConnection*
  alias GTcpWrapperConnectionAutoptr = GTcpWrapperConnection*
  alias GTestDBusAutoptr = GTestDBus*
  alias GThemedIconAutoptr = GThemedIcon*
  alias GThreadedSocketServiceAutoptr = GThreadedSocketService*
  alias GTlsBackendAutoptr = GTlsBackend*
  alias GTlsCertificateAutoptr = GTlsCertificate*
  alias GTlsClientConnectionAutoptr = GTlsClientConnection*
  alias GTlsConnectionAutoptr = GTlsConnection*
  alias GTlsDatabaseAutoptr = GTlsDatabase*
  alias GTlsFileDatabaseAutoptr = GTlsFileDatabase*
  alias GTlsInteractionAutoptr = GTlsInteraction*
  alias GTlsPasswordAutoptr = GTlsPassword*
  alias GTlsServerConnectionAutoptr = GTlsServerConnection*
  alias GVfsAutoptr = GVfs*
  alias GVolumeAutoptr = GVolume*
  alias GVolumeMonitorAutoptr = GVolumeMonitor*
  alias GZlibCompressorAutoptr = GZlibCompressor*
  alias GZlibDecompressorAutoptr = GZlibDecompressor*
  alias PangoCoverage = X_PangoCoverage
  alias PangoLogAttr = X_PangoLogAttr
  alias PangoEngineLang = X_PangoEngineLang
  alias PangoEngineShape = X_PangoEngineShape
  alias PangoFont = X_PangoFont
  alias PangoFontMap = X_PangoFontMap
  alias PangoRectangle = X_PangoRectangle
  alias PangoGlyph = Guint32
  alias PangoMatrix = X_PangoMatrix
  alias PangoScriptIter = X_PangoScriptIter
  alias PangoLanguage = X_PangoLanguage
  alias PangoFontDescription = X_PangoFontDescription
  alias PangoFontMetrics = X_PangoFontMetrics
  alias PangoFontFamily = X_PangoFontFamily
  alias PangoFontFace = X_PangoFontFace
  alias PangoColor = X_PangoColor
  alias PangoAttribute = X_PangoAttribute
  alias PangoAttrClass = X_PangoAttrClass
  alias PangoAttrString = X_PangoAttrString
  alias PangoAttrLanguage = X_PangoAttrLanguage
  alias PangoAttrInt = X_PangoAttrInt
  alias PangoAttrSize = X_PangoAttrSize
  alias PangoAttrFloat = X_PangoAttrFloat
  alias PangoAttrColor = X_PangoAttrColor
  alias PangoAttrFontDesc = X_PangoAttrFontDesc
  alias PangoAttrShape = X_PangoAttrShape
  alias PangoAttrFontFeatures = X_PangoAttrFontFeatures
  alias PangoAttrList = X_PangoAttrList
  alias PangoAttrIterator = X_PangoAttrIterator
  alias PangoAttrFilterFunc = ((PangoAttribute*, Gpointer) -> Gboolean)
  alias PangoAttrDataCopyFunc = (Gconstpointer -> Gpointer)
  alias PangoAnalysis = X_PangoAnalysis
  alias PangoItem = X_PangoItem
  alias PangoFontset = X_PangoFontset
  alias PangoFontsetForeachFunc = ((PangoFontset*, PangoFont*, Gpointer) -> Gboolean)
  alias PangoContext = X_PangoContext
  alias PangoContextClass = X_PangoContextClass
  alias PangoGlyphGeometry = X_PangoGlyphGeometry
  alias PangoGlyphVisAttr = X_PangoGlyphVisAttr
  alias PangoGlyphInfo = X_PangoGlyphInfo
  alias PangoGlyphString = X_PangoGlyphString
  alias PangoGlyphUnit = Gint32
  alias PangoGlyphItem = X_PangoGlyphItem
  alias PangoGlyphItemIter = X_PangoGlyphItemIter
  alias PangoTabArray = X_PangoTabArray
  alias PangoLayout = X_PangoLayout
  alias PangoLayoutClass = X_PangoLayoutClass
  alias PangoLayoutLine = X_PangoLayoutLine
  alias PangoLayoutRun = PangoGlyphItem
  alias PangoLayoutIter = X_PangoLayoutIter
  alias PangoRenderer = X_PangoRenderer
  alias PangoRendererClass = X_PangoRendererClass
  alias PangoRendererPrivate = X_PangoRendererPrivate
  alias FILE = X_IO_FILE
  alias X__FILE = X_IO_FILE
  alias X__mbstate_t = AnonStruct14
  alias X_G_fpos_t = AnonStruct15
  alias X_G_fpos64_t = AnonStruct16
  alias X_IO_lock_t = Void
  alias X__io_read_fn = ((Void*, UInt8*, SizeT) -> X__ssize_t)
  alias X__io_write_fn = ((Void*, UInt8*, SizeT) -> X__ssize_t)
  alias X__io_seek_fn = ((Void*, X__off64_t*, Int32) -> Int32)
  alias X__io_close_fn = (Void* -> Int32)
  alias FposT = X_G_fpos_t
  alias CairoBoolT = Int32
  alias CairoT = X_cairo
  alias CairoSurfaceT = X_cairo_surface
  alias CairoDeviceT = X_cairo_device
  alias CairoMatrixT = X_cairo_matrix
  alias CairoPatternT = X_cairo_pattern
  alias CairoDestroyFuncT = (Void* -> Void)
  alias CairoUserDataKeyT = X_cairo_user_data_key
  alias CairoStatusT = X_cairo_status
  alias CairoContentT = X_cairo_content
  alias CairoFormatT = X_cairo_format
  alias CairoWriteFuncT = ((Void*, UInt8*, UInt32) -> CairoStatusT)
  alias CairoReadFuncT = ((Void*, UInt8*, UInt32) -> CairoStatusT)
  alias CairoRectangleIntT = X_cairo_rectangle_int
  alias CairoOperatorT = X_cairo_operator
  alias CairoAntialiasT = X_cairo_antialias
  alias CairoFillRuleT = X_cairo_fill_rule
  alias CairoLineCapT = X_cairo_line_cap
  alias CairoLineJoinT = X_cairo_line_join
  alias CairoRectangleT = X_cairo_rectangle
  alias CairoRectangleListT = X_cairo_rectangle_list
  alias CairoScaledFontT = X_cairo_scaled_font
  alias CairoFontFaceT = X_cairo_font_face
  alias CairoGlyphT = AnonStruct17
  alias CairoTextClusterT = AnonStruct18
  alias CairoTextClusterFlagsT = X_cairo_text_cluster_flags
  alias CairoTextExtentsT = AnonStruct19
  alias CairoFontExtentsT = AnonStruct20
  alias CairoFontSlantT = X_cairo_font_slant
  alias CairoFontWeightT = X_cairo_font_weight
  alias CairoSubpixelOrderT = X_cairo_subpixel_order
  alias CairoHintStyleT = X_cairo_hint_style
  alias CairoHintMetricsT = X_cairo_hint_metrics
  alias CairoFontOptionsT = X_cairo_font_options
  alias CairoFontTypeT = X_cairo_font_type
  alias CairoUserScaledFontInitFuncT = ((CairoScaledFontT*, CairoT*, CairoFontExtentsT*) -> CairoStatusT)
  alias CairoUserScaledFontRenderGlyphFuncT = ((CairoScaledFontT*, UInt64, CairoT*, CairoTextExtentsT*) -> CairoStatusT)
  alias CairoUserScaledFontTextToGlyphsFuncT = ((CairoScaledFontT*, UInt8*, Int32, CairoGlyphT**, Int32*, CairoTextClusterT**, Int32*, CairoTextClusterFlagsT*) -> CairoStatusT)
  alias CairoUserScaledFontUnicodeToGlyphFuncT = ((CairoScaledFontT*, UInt64, UInt64*) -> CairoStatusT)
  alias CairoPathDataTypeT = X_cairo_path_data_type
  alias CairoPathDataT = X_cairo_path_data_t
  alias CairoPathT = CairoPath
  alias CairoDeviceTypeT = X_cairo_device_type
  alias CairoSurfaceObserverCallbackT = ((CairoSurfaceT*, CairoSurfaceT*, Void*) -> Void)
  alias CairoSurfaceTypeT = X_cairo_surface_type
  alias CairoRasterSourceAcquireFuncT = ((CairoPatternT*, Void*, CairoSurfaceT*, CairoRectangleIntT*) -> CairoSurfaceT*)
  alias CairoRasterSourceReleaseFuncT = ((CairoPatternT*, Void*, CairoSurfaceT*) -> Void)
  alias CairoRasterSourceSnapshotFuncT = ((CairoPatternT*, Void*) -> CairoStatusT)
  alias CairoRasterSourceCopyFuncT = ((CairoPatternT*, Void*, CairoPatternT*) -> CairoStatusT)
  alias CairoRasterSourceFinishFuncT = ((CairoPatternT*, Void*) -> Void)
  alias CairoPatternTypeT = X_cairo_pattern_type
  alias CairoExtendT = X_cairo_extend
  alias CairoFilterT = X_cairo_filter
  alias CairoRegionT = X_cairo_region
  alias CairoRegionOverlapT = X_cairo_region_overlap
  alias GdkPoint = X_GdkPoint
  alias GdkRectangle = CairoRectangleIntT
  alias GdkAtom = X_GdkAtom*
  alias GdkColor = X_GdkColor
  alias GdkRGBA = X_GdkRGBA
  alias GdkCursor = X_GdkCursor
  alias GdkVisual = X_GdkVisual
  alias GdkDevice = X_GdkDevice
  alias GdkDragContext = X_GdkDragContext
  alias GdkDisplayManager = X_GdkDisplayManager
  alias GdkDeviceManager = X_GdkDeviceManager
  alias GdkDisplay = X_GdkDisplay
  alias GdkScreen = X_GdkScreen
  alias GdkWindow = X_GdkWindow
  alias GdkKeymap = X_GdkKeymap
  alias GdkAppLaunchContext = X_GdkAppLaunchContext
  alias GdkSeat = X_GdkSeat
  alias GdkGLContext = X_GdkGLContext
  alias GdkTimeCoord = X_GdkTimeCoord
  alias GdkEventAny = X_GdkEventAny
  alias GdkEventExpose = X_GdkEventExpose
  alias GdkEventVisibility = X_GdkEventVisibility
  alias GdkEventMotion = X_GdkEventMotion
  alias GdkEventButton = X_GdkEventButton
  alias GdkEventTouch = X_GdkEventTouch
  alias GdkEventScroll = X_GdkEventScroll
  alias GdkEventKey = X_GdkEventKey
  alias GdkEventFocus = X_GdkEventFocus
  alias GdkEventCrossing = X_GdkEventCrossing
  alias GdkEventConfigure = X_GdkEventConfigure
  alias GdkEventProperty = X_GdkEventProperty
  alias GdkEventSelection = X_GdkEventSelection
  alias GdkEventOwnerChange = X_GdkEventOwnerChange
  alias GdkEventProximity = X_GdkEventProximity
  alias GdkEventDND = X_GdkEventDND
  alias GdkEventWindowState = X_GdkEventWindowState
  alias GdkEventSetting = X_GdkEventSetting
  alias GdkEventGrabBroken = X_GdkEventGrabBroken
  alias GdkEventTouchpadSwipe = X_GdkEventTouchpadSwipe
  alias GdkEventTouchpadPinch = X_GdkEventTouchpadPinch
  alias GdkEventSequence = X_GdkEventSequence
  alias GdkEvent = X_GdkEvent
  alias GdkEventFunc = ((GdkEvent*, Gpointer) -> Void)
  alias GdkXEvent = Void
  alias GdkFilterFunc = ((GdkXEvent*, GdkEvent*, Gpointer) -> GdkFilterReturn)
  alias GdkFrameTimings = X_GdkFrameTimings
  alias GdkFrameClock = X_GdkFrameClock
  alias GdkFrameClockPrivate = X_GdkFrameClockPrivate
  alias GdkFrameClockClass = X_GdkFrameClockClass
  alias GdkGeometry = X_GdkGeometry
  alias GdkWindowAttr = X_GdkWindowAttr
  alias GdkWindowRedirect = X_GdkWindowRedirect
  alias GdkWindowClass = X_GdkWindowClass
  alias GdkWindowInvalidateHandlerFunc = ((GdkWindow*, CairoRegionT*) -> Void)
  alias GdkWindowChildFunc = ((GdkWindow*, Gpointer) -> Gboolean)
  alias GdkSeatGrabPrepareFunc = ((GdkSeat*, GdkWindow*, Gpointer) -> Void)
  alias GdkPixbuf = X_GdkPixbuf
  alias GdkPixbufDestroyNotify = ((Guchar*, Gpointer) -> Void)
  alias GdkPixbufSaveFunc = ((Gchar*, Gsize, GError**, Gpointer) -> Gboolean)
  alias GdkPixbufAnimation = X_GdkPixbufAnimation
  alias GdkPixbufAnimationIter = X_GdkPixbufAnimationIter
  alias GdkPixbufSimpleAnim = X_GdkPixbufSimpleAnim
  alias GdkPixbufSimpleAnimClass = X_GdkPixbufSimpleAnimClass
  alias GdkPixbufFormat = X_GdkPixbufFormat
  alias GdkPixbufLoader = X_GdkPixbufLoader
  alias GdkPixbufLoaderClass = X_GdkPixbufLoaderClass
  alias GdkPixbufAutoptr = GdkPixbuf*
  alias GdkPixbufAnimationAutoptr = GdkPixbufAnimation*
  alias GdkPixbufAnimationIterAutoptr = GdkPixbufAnimationIter*
  alias GdkPixbufLoaderAutoptr = GdkPixbufLoader*
  alias GdkPixbufSimpleAnimAutoptr = GdkPixbufSimpleAnim*
  alias PangoCairoFont = X_PangoCairoFont
  alias PangoCairoFontMap = X_PangoCairoFontMap
  alias PangoCairoShapeRendererFunc = ((CairoT*, PangoAttrShape*, Gboolean, Gpointer) -> Void)
  alias GdkKeymapKey = X_GdkKeymapKey
  alias GdkAppLaunchContextAutoptr = GdkAppLaunchContext*
  alias GdkCursorAutoptr = GdkCursor*
  alias GdkDeviceAutoptr = GdkDevice*
  alias GdkDeviceManagerAutoptr = GdkDeviceManager*
  alias GdkDisplayAutoptr = GdkDisplay*
  alias GdkDisplayManagerAutoptr = GdkDisplayManager*
  alias GdkDragContextAutoptr = GdkDragContext*
  alias GdkFrameClockAutoptr = GdkFrameClock*
  alias GdkGLContextAutoptr = GdkGLContext*
  alias GdkKeymapAutoptr = GdkKeymap*
  alias GdkScreenAutoptr = GdkScreen*
  alias GdkVisualAutoptr = GdkVisual*
  alias GdkWindowAutoptr = GdkWindow*
  alias GdkEventAutoptr = GdkEvent*
  alias GdkFrameTimingsAutoptr = GdkFrameTimings*
  alias GdkRGBAAutoptr = GdkRGBA*
  alias GtkAccelGroup = X_GtkAccelGroup
  alias GtkAccelGroupClass = X_GtkAccelGroupClass
  alias GtkAccelGroupPrivate = X_GtkAccelGroupPrivate
  alias GtkAccelKey = X_GtkAccelKey
  alias GtkAccelGroupEntry = X_GtkAccelGroupEntry
  alias GtkAccelGroupActivate = ((GtkAccelGroup*, GObject*, Guint, GdkModifierType) -> Gboolean)
  alias GtkAccelGroupFindFunc = ((GtkAccelKey*, GClosure*, Gpointer) -> Gboolean)
  alias GtkAccelGroupAutoptr = GtkAccelGroup*
  alias GtkBorder = X_GtkBorder
  alias GtkBorderAutoptr = GtkBorder*
  alias GtkAdjustment = X_GtkAdjustment
  alias GtkBuilder = X_GtkBuilder
  alias GtkClipboard = X_GtkClipboard
  alias GtkIconSet = X_GtkIconSet
  alias GtkIconSource = X_GtkIconSource
  alias GtkRcStyle = X_GtkRcStyle
  alias GtkRequisition = X_GtkRequisition
  alias GtkSelectionData = X_GtkSelectionData
  alias GtkSettings = X_GtkSettings
  alias GtkStyle = X_GtkStyle
  alias GtkStyleContext = X_GtkStyleContext
  alias GtkTooltip = X_GtkTooltip
  alias GtkWidget = X_GtkWidget
  alias GtkWidgetPath = X_GtkWidgetPath
  alias GtkWindow = X_GtkWindow
  alias GtkRcPropertyParser = ((GParamSpec*, GString*, GValue*) -> Gboolean)
  alias GtkBuilderConnectFunc = ((GtkBuilder*, GObject*, Gchar*, Gchar*, GObject*, GConnectFlags, Gpointer) -> Void)
  alias AtkState = Guint64
  alias AtkAttributeSet = GSList
  alias AtkAttribute = X_AtkAttribute
  alias AtkImplementor = X_AtkImplementor
  alias AtkImplementorIface = X_AtkImplementorIface
  alias AtkObject = X_AtkObject
  alias AtkObjectClass = X_AtkObjectClass
  alias AtkRelationSet = X_AtkRelationSet
  alias AtkStateSet = X_AtkStateSet
  alias AtkPropertyValues = X_AtkPropertyValues
  alias AtkFunction = (Gpointer -> Gboolean)
  alias AtkPropertyChangeHandler = ((AtkObject*, AtkPropertyValues*) -> Void)
  alias AtkAction = X_AtkAction
  alias AtkActionIface = X_AtkActionIface
  alias AtkUtil = X_AtkUtil
  alias AtkUtilClass = X_AtkUtilClass
  alias AtkKeyEventStruct = X_AtkKeyEventStruct
  alias AtkEventListener = (AtkObject* -> Void)
  alias AtkEventListenerInit = ( -> Void)
  alias AtkKeySnoopFunc = ((AtkKeyEventStruct*, Gpointer) -> Gint)
  alias AtkComponent = X_AtkComponent
  alias AtkComponentIface = X_AtkComponentIface
  alias AtkFocusHandler = ((AtkObject*, Gboolean) -> Void)
  alias AtkRectangle = X_AtkRectangle
  alias AtkDocument = X_AtkDocument
  alias AtkDocumentIface = X_AtkDocumentIface
  alias AtkText = X_AtkText
  alias AtkTextIface = X_AtkTextIface
  alias AtkTextRectangle = X_AtkTextRectangle
  alias AtkTextRange = X_AtkTextRange
  alias AtkEditableText = X_AtkEditableText
  alias AtkEditableTextIface = X_AtkEditableTextIface
  alias AtkGObjectAccessible = X_AtkGObjectAccessible
  alias AtkGObjectAccessibleClass = X_AtkGObjectAccessibleClass
  alias AtkHyperlink = X_AtkHyperlink
  alias AtkHyperlinkClass = X_AtkHyperlinkClass
  alias AtkHyperlinkImpl = X_AtkHyperlinkImpl
  alias AtkHyperlinkImplIface = X_AtkHyperlinkImplIface
  alias AtkHypertext = X_AtkHypertext
  alias AtkHypertextIface = X_AtkHypertextIface
  alias AtkImage = X_AtkImage
  alias AtkImageIface = X_AtkImageIface
  alias AtkNoOpObject = X_AtkNoOpObject
  alias AtkNoOpObjectClass = X_AtkNoOpObjectClass
  alias AtkObjectFactory = X_AtkObjectFactory
  alias AtkObjectFactoryClass = X_AtkObjectFactoryClass
  alias AtkNoOpObjectFactory = X_AtkNoOpObjectFactory
  alias AtkNoOpObjectFactoryClass = X_AtkNoOpObjectFactoryClass
  alias AtkPlug = X_AtkPlug
  alias AtkPlugClass = X_AtkPlugClass
  alias AtkRange = X_AtkRange
  alias AtkRegistry = X_AtkRegistry
  alias AtkRegistryClass = X_AtkRegistryClass
  alias AtkRelation = X_AtkRelation
  alias AtkRelationClass = X_AtkRelationClass
  alias AtkRelationSetClass = X_AtkRelationSetClass
  alias AtkSelection = X_AtkSelection
  alias AtkSelectionIface = X_AtkSelectionIface
  alias AtkSocket = X_AtkSocket
  alias AtkSocketClass = X_AtkSocketClass
  alias AtkStateSetClass = X_AtkStateSetClass
  alias AtkStreamableContent = X_AtkStreamableContent
  alias AtkStreamableContentIface = X_AtkStreamableContentIface
  alias AtkTable = X_AtkTable
  alias AtkTableIface = X_AtkTableIface
  alias AtkTableCell = X_AtkTableCell
  alias AtkTableCellIface = X_AtkTableCellIface
  alias AtkMisc = X_AtkMisc
  alias AtkMiscClass = X_AtkMiscClass
  alias AtkValue = X_AtkValue
  alias AtkValueIface = X_AtkValueIface
  alias AtkWindow = X_AtkWindow
  alias AtkWindowIface = X_AtkWindowIface
  alias GtkWidgetPrivate = X_GtkWidgetPrivate
  alias GtkWidgetClass = X_GtkWidgetClass
  alias GtkWidgetClassPrivate = X_GtkWidgetClassPrivate
  alias GtkAllocation = GdkRectangle
  alias GtkCallback = ((GtkWidget*, Gpointer) -> Void)
  alias GtkTickCallback = ((GtkWidget*, GdkFrameClock*, Gpointer) -> Gboolean)
  alias GtkWidgetAutoptr = GtkWidget*
  alias GtkRequisitionAutoptr = GtkRequisition*
  alias GtkApplication = X_GtkApplication
  alias GtkApplicationClass = X_GtkApplicationClass
  alias GtkApplicationPrivate = X_GtkApplicationPrivate
  alias GtkApplicationAutoptr = GtkApplication*
  alias GtkContainer = X_GtkContainer
  alias GtkContainerPrivate = X_GtkContainerPrivate
  alias GtkContainerClass = X_GtkContainerClass
  alias GtkContainerAutoptr = GtkContainer*
  alias GtkBin = X_GtkBin
  alias GtkBinPrivate = X_GtkBinPrivate
  alias GtkBinClass = X_GtkBinClass
  alias GtkBinAutoptr = GtkBin*
  alias GtkWindowPrivate = X_GtkWindowPrivate
  alias GtkWindowClass = X_GtkWindowClass
  alias GtkWindowGeometryInfo = X_GtkWindowGeometryInfo
  alias GtkWindowGroup = X_GtkWindowGroup
  alias GtkWindowGroupClass = X_GtkWindowGroupClass
  alias GtkWindowGroupPrivate = X_GtkWindowGroupPrivate
  alias GtkWindowAutoptr = GtkWindow*
  alias GtkWindowGroupAutoptr = GtkWindowGroup*
  alias GtkDialog = X_GtkDialog
  alias GtkDialogPrivate = X_GtkDialogPrivate
  alias GtkDialogClass = X_GtkDialogClass
  alias GtkDialogAutoptr = GtkDialog*
  alias GtkAboutDialog = X_GtkAboutDialog
  alias GtkAboutDialogClass = X_GtkAboutDialogClass
  alias GtkAboutDialogPrivate = X_GtkAboutDialogPrivate
  alias GtkAboutDialogAutoptr = GtkAboutDialog*
  alias GtkMisc = X_GtkMisc
  alias GtkMiscPrivate = X_GtkMiscPrivate
  alias GtkMiscClass = X_GtkMiscClass
  alias GtkMenuShell = X_GtkMenuShell
  alias GtkMenuShellClass = X_GtkMenuShellClass
  alias GtkMenuShellPrivate = X_GtkMenuShellPrivate
  alias GtkMenuShellAutoptr = GtkMenuShell*
  alias GtkMenu = X_GtkMenu
  alias GtkMenuClass = X_GtkMenuClass
  alias GtkMenuPrivate = X_GtkMenuPrivate
  alias GtkMenuPositionFunc = ((GtkMenu*, Gint*, Gint*, Gboolean*, Gpointer) -> Void)
  alias GtkMenuDetachFunc = ((GtkWidget*, GtkMenu*) -> Void)
  alias GtkMenuAutoptr = GtkMenu*
  alias GtkLabel = X_GtkLabel
  alias GtkLabelPrivate = X_GtkLabelPrivate
  alias GtkLabelClass = X_GtkLabelClass
  alias GtkLabelSelectionInfo = X_GtkLabelSelectionInfo
  alias GtkLabelAutoptr = GtkLabel*
  alias GtkAccelLabel = X_GtkAccelLabel
  alias GtkAccelLabelClass = X_GtkAccelLabelClass
  alias GtkAccelLabelPrivate = X_GtkAccelLabelPrivate
  alias GtkAccelLabelAutoptr = GtkAccelLabel*
  alias GtkAccelMap = X_GtkAccelMap
  alias GtkAccelMapClass = X_GtkAccelMapClass
  alias GtkAccelMapForeach = ((Gpointer, Gchar*, Guint, GdkModifierType, Gboolean) -> Void)
  alias GtkAccelMapAutoptr = GtkAccelMap*
  alias GtkAccessible = X_GtkAccessible
  alias GtkAccessiblePrivate = X_GtkAccessiblePrivate
  alias GtkAccessibleClass = X_GtkAccessibleClass
  alias GtkActionableInterface = X_GtkActionableInterface
  alias GtkActionable = X_GtkActionable
  alias GtkActionBar = X_GtkActionBar
  alias GtkActionBarPrivate = X_GtkActionBarPrivate
  alias GtkActionBarClass = X_GtkActionBarClass
  alias GtkAdjustmentPrivate = X_GtkAdjustmentPrivate
  alias GtkAdjustmentClass = X_GtkAdjustmentClass
  alias GtkAppChooser = X_GtkAppChooser
  alias GtkAppChooserDialog = X_GtkAppChooserDialog
  alias GtkAppChooserDialogClass = X_GtkAppChooserDialogClass
  alias GtkAppChooserDialogPrivate = X_GtkAppChooserDialogPrivate
  alias GtkBox = X_GtkBox
  alias GtkBoxPrivate = X_GtkBoxPrivate
  alias GtkBoxClass = X_GtkBoxClass
  alias GtkAppChooserWidget = X_GtkAppChooserWidget
  alias GtkAppChooserWidgetClass = X_GtkAppChooserWidgetClass
  alias GtkAppChooserWidgetPrivate = X_GtkAppChooserWidgetPrivate
  alias GtkTreeIter = X_GtkTreeIter
  alias GtkTreePath = X_GtkTreePath
  alias GtkTreeRowReference = X_GtkTreeRowReference
  alias GtkTreeModel = X_GtkTreeModel
  alias GtkTreeModelIface = X_GtkTreeModelIface
  alias GtkTreeModelForeachFunc = ((GtkTreeModel*, GtkTreePath*, GtkTreeIter*, Gpointer) -> Gboolean)
  alias GtkCellEditable = X_GtkCellEditable
  alias GtkCellEditableIface = X_GtkCellEditableIface
  alias GtkCellRenderer = X_GtkCellRenderer
  alias GtkCellRendererPrivate = X_GtkCellRendererPrivate
  alias GtkCellRendererClass = X_GtkCellRendererClass
  alias GtkCellRendererClassPrivate = X_GtkCellRendererClassPrivate
  alias GtkTreeSortable = X_GtkTreeSortable
  alias GtkTreeSortableIface = X_GtkTreeSortableIface
  alias GtkTreeIterCompareFunc = ((GtkTreeModel*, GtkTreeIter*, GtkTreeIter*, Gpointer) -> Gint)
  alias GtkCellArea = X_GtkCellArea
  alias GtkCellAreaClass = X_GtkCellAreaClass
  alias GtkCellAreaPrivate = X_GtkCellAreaPrivate
  alias GtkCellAreaContext = X_GtkCellAreaContext
  alias GtkCellCallback = ((GtkCellRenderer*, Gpointer) -> Gboolean)
  alias GtkCellAllocCallback = ((GtkCellRenderer*, GdkRectangle*, GdkRectangle*, Gpointer) -> Gboolean)
  alias GtkTreeViewColumn = X_GtkTreeViewColumn
  alias GtkTreeViewColumnClass = X_GtkTreeViewColumnClass
  alias GtkTreeViewColumnPrivate = X_GtkTreeViewColumnPrivate
  alias GtkTreeCellDataFunc = ((GtkTreeViewColumn*, GtkCellRenderer*, GtkTreeModel*, GtkTreeIter*, Gpointer) -> Void)
  alias GtkTextAttributes = X_GtkTextAttributes
  alias GtkTextAppearance = X_GtkTextAppearance
  alias GtkTextChildAnchor = X_GtkTextChildAnchor
  alias GtkTextChildAnchorClass = X_GtkTextChildAnchorClass
  alias GtkTextIter = X_GtkTextIter
  alias GtkTextTagTable = X_GtkTextTagTable
  alias GtkTextTag = X_GtkTextTag
  alias GtkTextTagPrivate = X_GtkTextTagPrivate
  alias GtkTextTagClass = X_GtkTextTagClass
  alias GtkTextBuffer = X_GtkTextBuffer
  alias GtkTextCharPredicate = ((Gunichar, Gpointer) -> Gboolean)
  alias GtkTargetPair = X_GtkTargetPair
  alias GtkTargetList = X_GtkTargetList
  alias GtkTargetEntry = X_GtkTargetEntry
  alias GtkEditable = X_GtkEditable
  alias GtkEditableInterface = X_GtkEditableInterface
  alias GtkIMContext = X_GtkIMContext
  alias GtkIMContextClass = X_GtkIMContextClass
  alias GtkEntryBuffer = X_GtkEntryBuffer
  alias GtkEntryBufferClass = X_GtkEntryBufferClass
  alias GtkEntryBufferPrivate = X_GtkEntryBufferPrivate
  alias GtkListStore = X_GtkListStore
  alias GtkListStorePrivate = X_GtkListStorePrivate
  alias GtkListStoreClass = X_GtkListStoreClass
  alias GtkTreeModelFilterVisibleFunc = ((GtkTreeModel*, GtkTreeIter*, Gpointer) -> Gboolean)
  alias GtkTreeModelFilterModifyFunc = ((GtkTreeModel*, GtkTreeIter*, GValue*, Gint, Gpointer) -> Void)
  alias GtkTreeModelFilter = X_GtkTreeModelFilter
  alias GtkTreeModelFilterClass = X_GtkTreeModelFilterClass
  alias GtkTreeModelFilterPrivate = X_GtkTreeModelFilterPrivate
  alias GtkEntryCompletion = X_GtkEntryCompletion
  alias GtkEntryCompletionClass = X_GtkEntryCompletionClass
  alias GtkEntryCompletionPrivate = X_GtkEntryCompletionPrivate
  alias GtkEntryCompletionMatchFunc = ((GtkEntryCompletion*, Gchar*, GtkTreeIter*, Gpointer) -> Gboolean)
  alias GtkImage = X_GtkImage
  alias GtkImagePrivate = X_GtkImagePrivate
  alias GtkImageClass = X_GtkImageClass
  alias GtkEntry = X_GtkEntry
  alias GtkEntryPrivate = X_GtkEntryPrivate
  alias GtkEntryClass = X_GtkEntryClass
  alias GtkTreeView = X_GtkTreeView
  alias GtkTreeViewClass = X_GtkTreeViewClass
  alias GtkTreeViewPrivate = X_GtkTreeViewPrivate
  alias GtkTreeSelection = X_GtkTreeSelection
  alias GtkTreeSelectionClass = X_GtkTreeSelectionClass
  alias GtkTreeViewColumnDropFunc = ((GtkTreeView*, GtkTreeViewColumn*, GtkTreeViewColumn*, GtkTreeViewColumn*, Gpointer) -> Gboolean)
  alias GtkTreeViewMappingFunc = ((GtkTreeView*, GtkTreePath*, Gpointer) -> Void)
  alias GtkTreeViewSearchEqualFunc = ((GtkTreeModel*, Gint, Gchar*, GtkTreeIter*, Gpointer) -> Gboolean)
  alias GtkTreeViewRowSeparatorFunc = ((GtkTreeModel*, GtkTreeIter*, Gpointer) -> Gboolean)
  alias GtkTreeViewSearchPositionFunc = ((GtkTreeView*, GtkWidget*, Gpointer) -> Void)
  alias GtkTreeDestroyCountFunc = ((GtkTreeView*, GtkTreePath*, Gint, Gpointer) -> Void)
  alias GtkComboBox = X_GtkComboBox
  alias GtkComboBoxClass = X_GtkComboBoxClass
  alias GtkComboBoxPrivate = X_GtkComboBoxPrivate
  alias GtkAppChooserButton = X_GtkAppChooserButton
  alias GtkAppChooserButtonClass = X_GtkAppChooserButtonClass
  alias GtkAppChooserButtonPrivate = X_GtkAppChooserButtonPrivate
  alias GtkShortcutsWindow = X_GtkShortcutsWindow
  alias GtkShortcutsWindowClass = X_GtkShortcutsWindowClass
  alias GtkShortcutsWindowAutoptr = GtkShortcutsWindow*
  alias GtkApplicationWindowPrivate = X_GtkApplicationWindowPrivate
  alias GtkApplicationWindowClass = X_GtkApplicationWindowClass
  alias GtkApplicationWindow = X_GtkApplicationWindow
  alias GtkFrame = X_GtkFrame
  alias GtkFramePrivate = X_GtkFramePrivate
  alias GtkFrameClass = X_GtkFrameClass
  alias GtkAspectFrame = X_GtkAspectFrame
  alias GtkAspectFramePrivate = X_GtkAspectFramePrivate
  alias GtkAspectFrameClass = X_GtkAspectFrameClass
  alias GtkAssistant = X_GtkAssistant
  alias GtkAssistantPrivate = X_GtkAssistantPrivate
  alias GtkAssistantClass = X_GtkAssistantClass
  alias GtkAssistantPageFunc = ((Gint, Gpointer) -> Gint)
  alias GtkButtonBox = X_GtkButtonBox
  alias GtkButtonBoxPrivate = X_GtkButtonBoxPrivate
  alias GtkButtonBoxClass = X_GtkButtonBoxClass
  alias GtkBindingSet = X_GtkBindingSet
  alias GtkBindingEntry = X_GtkBindingEntry
  alias GtkBindingSignal = X_GtkBindingSignal
  alias GtkBindingArg = X_GtkBindingArg
  alias GtkBuilderClass = X_GtkBuilderClass
  alias GtkBuilderPrivate = X_GtkBuilderPrivate
  alias GtkBuildable = X_GtkBuildable
  alias GtkBuildableIface = X_GtkBuildableIface
  alias GtkButton = X_GtkButton
  alias GtkButtonPrivate = X_GtkButtonPrivate
  alias GtkButtonClass = X_GtkButtonClass
  alias GtkCalendar = X_GtkCalendar
  alias GtkCalendarClass = X_GtkCalendarClass
  alias GtkCalendarPrivate = X_GtkCalendarPrivate
  alias GtkCalendarDetailFunc = ((GtkCalendar*, Guint, Guint, Guint, Gpointer) -> Gchar*)
  alias GtkCellAreaBox = X_GtkCellAreaBox
  alias GtkCellAreaBoxClass = X_GtkCellAreaBoxClass
  alias GtkCellAreaBoxPrivate = X_GtkCellAreaBoxPrivate
  alias GtkCellAreaContextPrivate = X_GtkCellAreaContextPrivate
  alias GtkCellAreaContextClass = X_GtkCellAreaContextClass
  alias GtkCellLayout = X_GtkCellLayout
  alias GtkCellLayoutIface = X_GtkCellLayoutIface
  alias GtkCellLayoutDataFunc = ((GtkCellLayout*, GtkCellRenderer*, GtkTreeModel*, GtkTreeIter*, Gpointer) -> Void)
  alias GtkCellRendererText = X_GtkCellRendererText
  alias GtkCellRendererTextPrivate = X_GtkCellRendererTextPrivate
  alias GtkCellRendererTextClass = X_GtkCellRendererTextClass
  alias GtkCellRendererAccel = X_GtkCellRendererAccel
  alias GtkCellRendererAccelPrivate = X_GtkCellRendererAccelPrivate
  alias GtkCellRendererAccelClass = X_GtkCellRendererAccelClass
  alias GtkCellRendererCombo = X_GtkCellRendererCombo
  alias GtkCellRendererComboPrivate = X_GtkCellRendererComboPrivate
  alias GtkCellRendererComboClass = X_GtkCellRendererComboClass
  alias GtkCellRendererPixbuf = X_GtkCellRendererPixbuf
  alias GtkCellRendererPixbufPrivate = X_GtkCellRendererPixbufPrivate
  alias GtkCellRendererPixbufClass = X_GtkCellRendererPixbufClass
  alias GtkCellRendererProgress = X_GtkCellRendererProgress
  alias GtkCellRendererProgressClass = X_GtkCellRendererProgressClass
  alias GtkCellRendererProgressPrivate = X_GtkCellRendererProgressPrivate
  alias GtkCellRendererSpin = X_GtkCellRendererSpin
  alias GtkCellRendererSpinClass = X_GtkCellRendererSpinClass
  alias GtkCellRendererSpinPrivate = X_GtkCellRendererSpinPrivate
  alias GtkCellRendererSpinner = X_GtkCellRendererSpinner
  alias GtkCellRendererSpinnerClass = X_GtkCellRendererSpinnerClass
  alias GtkCellRendererSpinnerPrivate = X_GtkCellRendererSpinnerPrivate
  alias GtkCellRendererToggle = X_GtkCellRendererToggle
  alias GtkCellRendererTogglePrivate = X_GtkCellRendererTogglePrivate
  alias GtkCellRendererToggleClass = X_GtkCellRendererToggleClass
  alias GtkCellView = X_GtkCellView
  alias GtkCellViewClass = X_GtkCellViewClass
  alias GtkCellViewPrivate = X_GtkCellViewPrivate
  alias GtkToggleButton = X_GtkToggleButton
  alias GtkToggleButtonPrivate = X_GtkToggleButtonPrivate
  alias GtkToggleButtonClass = X_GtkToggleButtonClass
  alias GtkCheckButton = X_GtkCheckButton
  alias GtkCheckButtonClass = X_GtkCheckButtonClass
  alias GtkMenuItem = X_GtkMenuItem
  alias GtkMenuItemClass = X_GtkMenuItemClass
  alias GtkMenuItemPrivate = X_GtkMenuItemPrivate
  alias GtkCheckMenuItem = X_GtkCheckMenuItem
  alias GtkCheckMenuItemPrivate = X_GtkCheckMenuItemPrivate
  alias GtkCheckMenuItemClass = X_GtkCheckMenuItemClass
  alias GtkClipboardReceivedFunc = ((GtkClipboard*, GtkSelectionData*, Gpointer) -> Void)
  alias GtkClipboardTextReceivedFunc = ((GtkClipboard*, Gchar*, Gpointer) -> Void)
  alias GtkClipboardRichTextReceivedFunc = ((GtkClipboard*, GdkAtom, Guint8*, Gsize, Gpointer) -> Void)
  alias GtkClipboardImageReceivedFunc = ((GtkClipboard*, GdkPixbuf*, Gpointer) -> Void)
  alias GtkClipboardURIReceivedFunc = ((GtkClipboard*, Gchar**, Gpointer) -> Void)
  alias GtkClipboardTargetsReceivedFunc = ((GtkClipboard*, GdkAtom*, Gint, Gpointer) -> Void)
  alias GtkClipboardGetFunc = ((GtkClipboard*, GtkSelectionData*, Guint, Gpointer) -> Void)
  alias GtkClipboardClearFunc = ((GtkClipboard*, Gpointer) -> Void)
  alias GtkColorButton = X_GtkColorButton
  alias GtkColorButtonClass = X_GtkColorButtonClass
  alias GtkColorButtonPrivate = X_GtkColorButtonPrivate
  alias GtkColorChooser = X_GtkColorChooser
  alias GtkColorChooserInterface = X_GtkColorChooserInterface
  alias GtkColorChooserDialog = X_GtkColorChooserDialog
  alias GtkColorChooserDialogPrivate = X_GtkColorChooserDialogPrivate
  alias GtkColorChooserDialogClass = X_GtkColorChooserDialogClass
  alias GtkColorChooserWidget = X_GtkColorChooserWidget
  alias GtkColorChooserWidgetPrivate = X_GtkColorChooserWidgetPrivate
  alias GtkColorChooserWidgetClass = X_GtkColorChooserWidgetClass
  alias GtkComboBoxText = X_GtkComboBoxText
  alias GtkComboBoxTextPrivate = X_GtkComboBoxTextPrivate
  alias GtkComboBoxTextClass = X_GtkComboBoxTextClass
  alias GtkCssSection = X_GtkCssSection
  alias GtkCssProvider = X_GtkCssProvider
  alias GtkCssProviderClass = X_GtkCssProviderClass
  alias GtkCssProviderPrivate = X_GtkCssProviderPrivate
  alias GtkDrawingArea = X_GtkDrawingArea
  alias GtkDrawingAreaClass = X_GtkDrawingAreaClass
  alias GtkEventBox = X_GtkEventBox
  alias GtkEventBoxClass = X_GtkEventBoxClass
  alias GtkEventBoxPrivate = X_GtkEventBoxPrivate
  alias GtkEventController = X_GtkEventController
  alias GtkEventControllerClass = X_GtkEventControllerClass
  alias GtkExpander = X_GtkExpander
  alias GtkExpanderClass = X_GtkExpanderClass
  alias GtkExpanderPrivate = X_GtkExpanderPrivate
  alias GtkFixed = X_GtkFixed
  alias GtkFixedPrivate = X_GtkFixedPrivate
  alias GtkFixedClass = X_GtkFixedClass
  alias GtkFixedChild = X_GtkFixedChild
  alias GtkFileFilter = X_GtkFileFilter
  alias GtkFileFilterInfo = X_GtkFileFilterInfo
  alias GtkFileFilterFunc = ((GtkFileFilterInfo*, Gpointer) -> Gboolean)
  alias GtkFileChooser = X_GtkFileChooser
  alias GtkFileChooserButton = X_GtkFileChooserButton
  alias GtkFileChooserButtonPrivate = X_GtkFileChooserButtonPrivate
  alias GtkFileChooserButtonClass = X_GtkFileChooserButtonClass
  alias GtkFileChooserDialog = X_GtkFileChooserDialog
  alias GtkFileChooserDialogPrivate = X_GtkFileChooserDialogPrivate
  alias GtkFileChooserDialogClass = X_GtkFileChooserDialogClass
  alias GtkNativeDialog = X_GtkNativeDialog
  alias GtkNativeDialogClass = X_GtkNativeDialogClass
  alias GtkNativeDialogAutoptr = GtkNativeDialog*
  alias GtkFileChooserNative = X_GtkFileChooserNative
  alias GtkFileChooserNativeClass = AnonStruct21
  alias GtkFileChooserNativeAutoptr = GtkFileChooserNative*
  alias GtkFileChooserWidget = X_GtkFileChooserWidget
  alias GtkFileChooserWidgetPrivate = X_GtkFileChooserWidgetPrivate
  alias GtkFileChooserWidgetClass = X_GtkFileChooserWidgetClass
  alias GtkFlowBox = X_GtkFlowBox
  alias GtkFlowBoxClass = X_GtkFlowBoxClass
  alias GtkFlowBoxChild = X_GtkFlowBoxChild
  alias GtkFlowBoxChildClass = X_GtkFlowBoxChildClass
  alias GtkFlowBoxCreateWidgetFunc = ((Gpointer, Gpointer) -> GtkWidget*)
  alias GtkFlowBoxForeachFunc = ((GtkFlowBox*, GtkFlowBoxChild*, Gpointer) -> Void)
  alias GtkFlowBoxFilterFunc = ((GtkFlowBoxChild*, Gpointer) -> Gboolean)
  alias GtkFlowBoxSortFunc = ((GtkFlowBoxChild*, GtkFlowBoxChild*, Gpointer) -> Gint)
  alias GtkFontButton = X_GtkFontButton
  alias GtkFontButtonClass = X_GtkFontButtonClass
  alias GtkFontButtonPrivate = X_GtkFontButtonPrivate
  alias GtkFontFilterFunc = ((PangoFontFamily*, PangoFontFace*, Gpointer) -> Gboolean)
  alias GtkFontChooser = X_GtkFontChooser
  alias GtkFontChooserIface = X_GtkFontChooserIface
  alias GtkFontChooserDialog = X_GtkFontChooserDialog
  alias GtkFontChooserDialogPrivate = X_GtkFontChooserDialogPrivate
  alias GtkFontChooserDialogClass = X_GtkFontChooserDialogClass
  alias GtkFontChooserWidget = X_GtkFontChooserWidget
  alias GtkFontChooserWidgetPrivate = X_GtkFontChooserWidgetPrivate
  alias GtkFontChooserWidgetClass = X_GtkFontChooserWidgetClass
  alias GtkGesture = X_GtkGesture
  alias GtkGestureClass = X_GtkGestureClass
  alias GtkGestureSingle = X_GtkGestureSingle
  alias GtkGestureSingleClass = X_GtkGestureSingleClass
  alias GtkGestureDrag = X_GtkGestureDrag
  alias GtkGestureDragClass = X_GtkGestureDragClass
  alias GtkGestureLongPress = X_GtkGestureLongPress
  alias GtkGestureLongPressClass = X_GtkGestureLongPressClass
  alias GtkGestureMultiPress = X_GtkGestureMultiPress
  alias GtkGestureMultiPressClass = X_GtkGestureMultiPressClass
  alias GtkGesturePan = X_GtkGesturePan
  alias GtkGesturePanClass = X_GtkGesturePanClass
  alias GtkGestureRotate = X_GtkGestureRotate
  alias GtkGestureRotateClass = X_GtkGestureRotateClass
  alias GtkGestureSwipe = X_GtkGestureSwipe
  alias GtkGestureSwipeClass = X_GtkGestureSwipeClass
  alias GtkGestureZoom = X_GtkGestureZoom
  alias GtkGestureZoomClass = X_GtkGestureZoomClass
  alias GtkGLArea = X_GtkGLArea
  alias GtkGLAreaClass = X_GtkGLAreaClass
  alias GtkGrid = X_GtkGrid
  alias GtkGridPrivate = X_GtkGridPrivate
  alias GtkGridClass = X_GtkGridClass
  alias GtkHeaderBar = X_GtkHeaderBar
  alias GtkHeaderBarPrivate = X_GtkHeaderBarPrivate
  alias GtkHeaderBarClass = X_GtkHeaderBarClass
  alias GtkIconFactory = X_GtkIconFactory
  alias GtkIconFactoryPrivate = X_GtkIconFactoryPrivate
  alias GtkIconFactoryClass = X_GtkIconFactoryClass
  alias GtkStyleProperties = X_GtkStyleProperties
  alias GtkStylePropertiesClass = X_GtkStylePropertiesClass
  alias GtkStylePropertiesPrivate = X_GtkStylePropertiesPrivate
  alias GtkSymbolicColor = X_GtkSymbolicColor
  alias GtkGradient = X_GtkGradient
  alias GtkStylePropertyParser = ((Gchar*, GValue*, GError**) -> Gboolean)
  alias GtkStyleProviderIface = X_GtkStyleProviderIface
  alias GtkStyleProvider = X_GtkStyleProvider
  alias GtkStyleContextClass = X_GtkStyleContextClass
  alias GtkStyleContextPrivate = X_GtkStyleContextPrivate
  alias GtkIconInfo = X_GtkIconInfo
  alias GtkIconInfoClass = X_GtkIconInfoClass
  alias GtkIconTheme = X_GtkIconTheme
  alias GtkIconThemeClass = X_GtkIconThemeClass
  alias GtkIconThemePrivate = X_GtkIconThemePrivate
  alias GtkIconView = X_GtkIconView
  alias GtkIconViewClass = X_GtkIconViewClass
  alias GtkIconViewPrivate = X_GtkIconViewPrivate
  alias GtkIconViewForeachFunc = ((GtkIconView*, GtkTreePath*, Gpointer) -> Void)
  alias GtkIMContextInfo = X_GtkIMContextInfo
  alias GtkIMContextSimple = X_GtkIMContextSimple
  alias GtkIMContextSimplePrivate = X_GtkIMContextSimplePrivate
  alias GtkIMContextSimpleClass = X_GtkIMContextSimpleClass
  alias GtkIMMulticontext = X_GtkIMMulticontext
  alias GtkIMMulticontextClass = X_GtkIMMulticontextClass
  alias GtkIMMulticontextPrivate = X_GtkIMMulticontextPrivate
  alias GtkInfoBarPrivate = X_GtkInfoBarPrivate
  alias GtkInfoBarClass = X_GtkInfoBarClass
  alias GtkInfoBar = X_GtkInfoBar
  alias GtkInvisible = X_GtkInvisible
  alias GtkInvisiblePrivate = X_GtkInvisiblePrivate
  alias GtkInvisibleClass = X_GtkInvisibleClass
  alias GtkLayout = X_GtkLayout
  alias GtkLayoutPrivate = X_GtkLayoutPrivate
  alias GtkLayoutClass = X_GtkLayoutClass
  alias GtkLevelBarClass = X_GtkLevelBarClass
  alias GtkLevelBar = X_GtkLevelBar
  alias GtkLevelBarPrivate = X_GtkLevelBarPrivate
  alias GtkLinkButton = X_GtkLinkButton
  alias GtkLinkButtonClass = X_GtkLinkButtonClass
  alias GtkLinkButtonPrivate = X_GtkLinkButtonPrivate
  alias GtkListBox = X_GtkListBox
  alias GtkListBoxClass = X_GtkListBoxClass
  alias GtkListBoxRow = X_GtkListBoxRow
  alias GtkListBoxRowClass = X_GtkListBoxRowClass
  alias GtkListBoxFilterFunc = ((GtkListBoxRow*, Gpointer) -> Gboolean)
  alias GtkListBoxSortFunc = ((GtkListBoxRow*, GtkListBoxRow*, Gpointer) -> Gint)
  alias GtkListBoxUpdateHeaderFunc = ((GtkListBoxRow*, GtkListBoxRow*, Gpointer) -> Void)
  alias GtkListBoxCreateWidgetFunc = ((Gpointer, Gpointer) -> GtkWidget*)
  alias GtkListBoxForeachFunc = ((GtkListBox*, GtkListBoxRow*, Gpointer) -> Void)
  alias GtkListBoxAutoptr = GtkListBox*
  alias GtkListBoxRowAutoptr = GtkListBoxRow*
  alias GtkLockButton = X_GtkLockButton
  alias GtkLockButtonClass = X_GtkLockButtonClass
  alias GtkLockButtonPrivate = X_GtkLockButtonPrivate
  alias GtkKeySnoopFunc = ((GtkWidget*, GdkEventKey*, Gpointer) -> Gint)
  alias GtkMenuBar = X_GtkMenuBar
  alias GtkMenuBarPrivate = X_GtkMenuBarPrivate
  alias GtkMenuBarClass = X_GtkMenuBarClass
  alias GtkPopover = X_GtkPopover
  alias GtkPopoverClass = X_GtkPopoverClass
  alias GtkPopoverPrivate = X_GtkPopoverPrivate
  alias GtkMenuButton = X_GtkMenuButton
  alias GtkMenuButtonClass = X_GtkMenuButtonClass
  alias GtkMenuButtonPrivate = X_GtkMenuButtonPrivate
  alias GtkSizeGroup = X_GtkSizeGroup
  alias GtkSizeGroupPrivate = X_GtkSizeGroupPrivate
  alias GtkSizeGroupClass = X_GtkSizeGroupClass
  alias GtkToolItem = X_GtkToolItem
  alias GtkToolItemClass = X_GtkToolItemClass
  alias GtkToolItemPrivate = X_GtkToolItemPrivate
  alias GtkToolButton = X_GtkToolButton
  alias GtkToolButtonClass = X_GtkToolButtonClass
  alias GtkToolButtonPrivate = X_GtkToolButtonPrivate
  alias GtkMenuToolButtonClass = X_GtkMenuToolButtonClass
  alias GtkMenuToolButton = X_GtkMenuToolButton
  alias GtkMenuToolButtonPrivate = X_GtkMenuToolButtonPrivate
  alias GtkMessageDialog = X_GtkMessageDialog
  alias GtkMessageDialogPrivate = X_GtkMessageDialogPrivate
  alias GtkMessageDialogClass = X_GtkMessageDialogClass
  alias GtkModelButton = X_GtkModelButton
  alias GtkModuleInitFunc = ((Gint*, Gchar***) -> Void)
  alias GtkModuleDisplayInitFunc = (GdkDisplay* -> Void)
  alias GtkMountOperation = X_GtkMountOperation
  alias GtkMountOperationClass = X_GtkMountOperationClass
  alias GtkMountOperationPrivate = X_GtkMountOperationPrivate
  alias GtkNotebook = X_GtkNotebook
  alias GtkNotebookPrivate = X_GtkNotebookPrivate
  alias GtkNotebookClass = X_GtkNotebookClass
  alias GtkOffscreenWindow = X_GtkOffscreenWindow
  alias GtkOffscreenWindowClass = X_GtkOffscreenWindowClass
  alias GtkOrientable = X_GtkOrientable
  alias GtkOrientableIface = X_GtkOrientableIface
  alias GtkOverlay = X_GtkOverlay
  alias GtkOverlayClass = X_GtkOverlayClass
  alias GtkOverlayPrivate = X_GtkOverlayPrivate
  alias GtkPaperSize = X_GtkPaperSize
  alias GtkPageSetup = X_GtkPageSetup
  alias GtkPaned = X_GtkPaned
  alias GtkPanedClass = X_GtkPanedClass
  alias GtkPanedPrivate = X_GtkPanedPrivate
  alias GtkPlacesSidebar = X_GtkPlacesSidebar
  alias GtkPlacesSidebarClass = X_GtkPlacesSidebarClass
  alias GtkPopoverMenu = X_GtkPopoverMenu
  alias GtkPopoverMenuClass = X_GtkPopoverMenuClass
  alias GtkPrintContext = X_GtkPrintContext
  alias GtkPrintSettings = X_GtkPrintSettings
  alias GtkPrintSettingsFunc = ((Gchar*, Gchar*, Gpointer) -> Void)
  alias GtkPageRange = X_GtkPageRange
  alias GtkPrintOperationPreview = X_GtkPrintOperationPreview
  alias GtkPrintOperationPreviewIface = X_GtkPrintOperationPreviewIface
  alias GtkPrintOperationClass = X_GtkPrintOperationClass
  alias GtkPrintOperationPrivate = X_GtkPrintOperationPrivate
  alias GtkPrintOperation = X_GtkPrintOperation
  alias GtkPageSetupDoneFunc = ((GtkPageSetup*, Gpointer) -> Void)
  alias GtkProgressBar = X_GtkProgressBar
  alias GtkProgressBarPrivate = X_GtkProgressBarPrivate
  alias GtkProgressBarClass = X_GtkProgressBarClass
  alias GtkRadioButton = X_GtkRadioButton
  alias GtkRadioButtonPrivate = X_GtkRadioButtonPrivate
  alias GtkRadioButtonClass = X_GtkRadioButtonClass
  alias GtkRadioMenuItem = X_GtkRadioMenuItem
  alias GtkRadioMenuItemPrivate = X_GtkRadioMenuItemPrivate
  alias GtkRadioMenuItemClass = X_GtkRadioMenuItemClass
  alias GtkToggleToolButton = X_GtkToggleToolButton
  alias GtkToggleToolButtonClass = X_GtkToggleToolButtonClass
  alias GtkToggleToolButtonPrivate = X_GtkToggleToolButtonPrivate
  alias GtkRadioToolButton = X_GtkRadioToolButton
  alias GtkRadioToolButtonClass = X_GtkRadioToolButtonClass
  alias GtkRange = X_GtkRange
  alias GtkRangePrivate = X_GtkRangePrivate
  alias GtkRangeClass = X_GtkRangeClass
  alias GtkRecentInfo = X_GtkRecentInfo
  alias GtkRecentData = X_GtkRecentData
  alias GtkRecentManager = X_GtkRecentManager
  alias GtkRecentManagerClass = X_GtkRecentManagerClass
  alias GtkRecentManagerPrivate = X_GtkRecentManagerPrivate
  alias GtkRecentFilter = X_GtkRecentFilter
  alias GtkRecentFilterInfo = X_GtkRecentFilterInfo
  alias GtkRecentFilterFunc = ((GtkRecentFilterInfo*, Gpointer) -> Gboolean)
  alias GtkRecentSortFunc = ((GtkRecentInfo*, GtkRecentInfo*, Gpointer) -> Gint)
  alias GtkRecentChooser = X_GtkRecentChooser
  alias GtkRecentChooserIface = X_GtkRecentChooserIface
  alias GtkRecentChooserDialog = X_GtkRecentChooserDialog
  alias GtkRecentChooserDialogClass = X_GtkRecentChooserDialogClass
  alias GtkRecentChooserDialogPrivate = X_GtkRecentChooserDialogPrivate
  alias GtkRecentChooserMenu = X_GtkRecentChooserMenu
  alias GtkRecentChooserMenuClass = X_GtkRecentChooserMenuClass
  alias GtkRecentChooserMenuPrivate = X_GtkRecentChooserMenuPrivate
  alias GtkRecentChooserWidget = X_GtkRecentChooserWidget
  alias GtkRecentChooserWidgetClass = X_GtkRecentChooserWidgetClass
  alias GtkRecentChooserWidgetPrivate = X_GtkRecentChooserWidgetPrivate
  alias GtkRevealer = X_GtkRevealer
  alias GtkRevealerClass = X_GtkRevealerClass
  alias GtkScale = X_GtkScale
  alias GtkScalePrivate = X_GtkScalePrivate
  alias GtkScaleClass = X_GtkScaleClass
  alias GtkScaleButton = X_GtkScaleButton
  alias GtkScaleButtonClass = X_GtkScaleButtonClass
  alias GtkScaleButtonPrivate = X_GtkScaleButtonPrivate
  alias GtkScrollable = X_GtkScrollable
  alias GtkScrollableInterface = X_GtkScrollableInterface
  alias GtkScrollbar = X_GtkScrollbar
  alias GtkScrollbarClass = X_GtkScrollbarClass
  alias GtkScrolledWindow = X_GtkScrolledWindow
  alias GtkScrolledWindowPrivate = X_GtkScrolledWindowPrivate
  alias GtkScrolledWindowClass = X_GtkScrolledWindowClass
  alias GtkSearchBar = X_GtkSearchBar
  alias GtkSearchBarClass = X_GtkSearchBarClass
  alias GtkSearchEntry = X_GtkSearchEntry
  alias GtkSearchEntryClass = X_GtkSearchEntryClass
  alias GtkSeparator = X_GtkSeparator
  alias GtkSeparatorPrivate = X_GtkSeparatorPrivate
  alias GtkSeparatorClass = X_GtkSeparatorClass
  alias GtkSeparatorMenuItem = X_GtkSeparatorMenuItem
  alias GtkSeparatorMenuItemClass = X_GtkSeparatorMenuItemClass
  alias GtkSeparatorToolItem = X_GtkSeparatorToolItem
  alias GtkSeparatorToolItemClass = X_GtkSeparatorToolItemClass
  alias GtkSeparatorToolItemPrivate = X_GtkSeparatorToolItemPrivate
  alias GtkSettingsPrivate = X_GtkSettingsPrivate
  alias GtkSettingsClass = X_GtkSettingsClass
  alias GtkSettingsValue = X_GtkSettingsValue
  alias GtkShortcutsGroup = X_GtkShortcutsGroup
  alias GtkShortcutsGroupClass = X_GtkShortcutsGroupClass
  alias GtkShortcutsSection = X_GtkShortcutsSection
  alias GtkShortcutsSectionClass = X_GtkShortcutsSectionClass
  alias GtkShortcutsShortcut = X_GtkShortcutsShortcut
  alias GtkShortcutsShortcutClass = X_GtkShortcutsShortcutClass
  alias GtkStack = X_GtkStack
  alias GtkStackClass = X_GtkStackClass
  alias GtkStackSidebar = X_GtkStackSidebar
  alias GtkStackSidebarPrivate = X_GtkStackSidebarPrivate
  alias GtkStackSidebarClass = X_GtkStackSidebarClass
  alias GtkRequestedSize = X_GtkRequestedSize
  alias GtkSpinButton = X_GtkSpinButton
  alias GtkSpinButtonPrivate = X_GtkSpinButtonPrivate
  alias GtkSpinButtonClass = X_GtkSpinButtonClass
  alias GtkSpinner = X_GtkSpinner
  alias GtkSpinnerClass = X_GtkSpinnerClass
  alias GtkSpinnerPrivate = X_GtkSpinnerPrivate
  alias GtkStackSwitcher = X_GtkStackSwitcher
  alias GtkStackSwitcherClass = X_GtkStackSwitcherClass
  alias GtkStatusbar = X_GtkStatusbar
  alias GtkStatusbarPrivate = X_GtkStatusbarPrivate
  alias GtkStatusbarClass = X_GtkStatusbarClass
  alias GtkSwitch = X_GtkSwitch
  alias GtkSwitchPrivate = X_GtkSwitchPrivate
  alias GtkSwitchClass = X_GtkSwitchClass
  alias GtkTextTagTableForeach = ((GtkTextTag*, Gpointer) -> Void)
  alias GtkTextTagTablePrivate = X_GtkTextTagTablePrivate
  alias GtkTextTagTableClass = X_GtkTextTagTableClass
  alias GtkTextMark = X_GtkTextMark
  alias GtkTextMarkClass = X_GtkTextMarkClass
  alias GtkTextBTree = X_GtkTextBTree
  alias GtkTextBufferPrivate = X_GtkTextBufferPrivate
  alias GtkTextBufferClass = X_GtkTextBufferClass
  alias GtkTextBufferSerializeFunc = ((GtkTextBuffer*, GtkTextBuffer*, GtkTextIter*, GtkTextIter*, Gsize*, Gpointer) -> Guint8*)
  alias GtkTextBufferDeserializeFunc = ((GtkTextBuffer*, GtkTextBuffer*, GtkTextIter*, Guint8*, Gsize, Gboolean, Gpointer, GError**) -> Gboolean)
  alias GtkTextView = X_GtkTextView
  alias GtkTextViewPrivate = X_GtkTextViewPrivate
  alias GtkTextViewClass = X_GtkTextViewClass
  alias GtkToolbar = X_GtkToolbar
  alias GtkToolbarPrivate = X_GtkToolbarPrivate
  alias GtkToolbarClass = X_GtkToolbarClass
  alias GtkToolItemGroup = X_GtkToolItemGroup
  alias GtkToolItemGroupClass = X_GtkToolItemGroupClass
  alias GtkToolItemGroupPrivate = X_GtkToolItemGroupPrivate
  alias GtkToolPalette = X_GtkToolPalette
  alias GtkToolPaletteClass = X_GtkToolPaletteClass
  alias GtkToolPalettePrivate = X_GtkToolPalettePrivate
  alias GtkToolShell = X_GtkToolShell
  alias GtkToolShellIface = X_GtkToolShellIface
  alias GtkTreeDragSource = X_GtkTreeDragSource
  alias GtkTreeDragSourceIface = X_GtkTreeDragSourceIface
  alias GtkTreeDragDest = X_GtkTreeDragDest
  alias GtkTreeDragDestIface = X_GtkTreeDragDestIface
  alias GtkTreeModelSort = X_GtkTreeModelSort
  alias GtkTreeModelSortClass = X_GtkTreeModelSortClass
  alias GtkTreeModelSortPrivate = X_GtkTreeModelSortPrivate
  alias GtkTreeSelectionPrivate = X_GtkTreeSelectionPrivate
  alias GtkTreeSelectionFunc = ((GtkTreeSelection*, GtkTreeModel*, GtkTreePath*, Gboolean, Gpointer) -> Gboolean)
  alias GtkTreeSelectionForeachFunc = ((GtkTreeModel*, GtkTreePath*, GtkTreeIter*, Gpointer) -> Void)
  alias GtkTreeStore = X_GtkTreeStore
  alias GtkTreeStoreClass = X_GtkTreeStoreClass
  alias GtkTreeStorePrivate = X_GtkTreeStorePrivate
  alias GtkViewport = X_GtkViewport
  alias GtkViewportPrivate = X_GtkViewportPrivate
  alias GtkViewportClass = X_GtkViewportClass
  alias GtkVolumeButton = X_GtkVolumeButton
  alias GtkVolumeButtonClass = X_GtkVolumeButtonClass
  alias GtkArrow = X_GtkArrow
  alias GtkArrowPrivate = X_GtkArrowPrivate
  alias GtkArrowClass = X_GtkArrowClass
  alias GtkAction = X_GtkAction
  alias GtkActionClass = X_GtkActionClass
  alias GtkActionPrivate = X_GtkActionPrivate
  alias GtkActivatable = X_GtkActivatable
  alias GtkActivatableIface = X_GtkActivatableIface
  alias GtkTranslateFunc = ((Gchar*, Gpointer) -> Gchar*)
  alias GtkStockItem = X_GtkStockItem
  alias GtkStock = UInt8*
  alias GtkActionGroup = X_GtkActionGroup
  alias GtkActionGroupPrivate = X_GtkActionGroupPrivate
  alias GtkActionGroupClass = X_GtkActionGroupClass
  alias GtkActionEntry = X_GtkActionEntry
  alias GtkToggleActionEntry = X_GtkToggleActionEntry
  alias GtkRadioActionEntry = X_GtkRadioActionEntry
  alias GtkAlignment = X_GtkAlignment
  alias GtkAlignmentPrivate = X_GtkAlignmentPrivate
  alias GtkAlignmentClass = X_GtkAlignmentClass
  alias GtkColorSelection = X_GtkColorSelection
  alias GtkColorSelectionPrivate = X_GtkColorSelectionPrivate
  alias GtkColorSelectionClass = X_GtkColorSelectionClass
  alias GtkColorSelectionChangePaletteFunc = ((GdkColor*, Gint) -> Void)
  alias GtkColorSelectionChangePaletteWithScreenFunc = ((GdkScreen*, GdkColor*, Gint) -> Void)
  alias GtkColorSelectionDialog = X_GtkColorSelectionDialog
  alias GtkColorSelectionDialogPrivate = X_GtkColorSelectionDialogPrivate
  alias GtkColorSelectionDialogClass = X_GtkColorSelectionDialogClass
  alias GtkFontSelection = X_GtkFontSelection
  alias GtkFontSelectionPrivate = X_GtkFontSelectionPrivate
  alias GtkFontSelectionClass = X_GtkFontSelectionClass
  alias GtkFontSelectionDialog = X_GtkFontSelectionDialog
  alias GtkFontSelectionDialogPrivate = X_GtkFontSelectionDialogPrivate
  alias GtkFontSelectionDialogClass = X_GtkFontSelectionDialogClass
  alias GtkHandleBox = X_GtkHandleBox
  alias GtkHandleBoxPrivate = X_GtkHandleBoxPrivate
  alias GtkHandleBoxClass = X_GtkHandleBoxClass
  alias GtkHButtonBox = X_GtkHButtonBox
  alias GtkHButtonBoxClass = X_GtkHButtonBoxClass
  alias GtkHBox = X_GtkHBox
  alias GtkHBoxClass = X_GtkHBoxClass
  alias GtkHPaned = X_GtkHPaned
  alias GtkHPanedClass = X_GtkHPanedClass
  alias GtkHSV = X_GtkHSV
  alias GtkHSVPrivate = X_GtkHSVPrivate
  alias GtkHSVClass = X_GtkHSVClass
  alias GtkHScale = X_GtkHScale
  alias GtkHScaleClass = X_GtkHScaleClass
  alias GtkHScrollbar = X_GtkHScrollbar
  alias GtkHScrollbarClass = X_GtkHScrollbarClass
  alias GtkHSeparator = X_GtkHSeparator
  alias GtkHSeparatorClass = X_GtkHSeparatorClass
  alias GtkImageMenuItem = X_GtkImageMenuItem
  alias GtkImageMenuItemPrivate = X_GtkImageMenuItemPrivate
  alias GtkImageMenuItemClass = X_GtkImageMenuItemClass
  alias GtkNumerableIcon = X_GtkNumerableIcon
  alias GtkNumerableIconClass = X_GtkNumerableIconClass
  alias GtkNumerableIconPrivate = X_GtkNumerableIconPrivate
  alias GtkToggleAction = X_GtkToggleAction
  alias GtkToggleActionPrivate = X_GtkToggleActionPrivate
  alias GtkToggleActionClass = X_GtkToggleActionClass
  alias GtkRadioAction = X_GtkRadioAction
  alias GtkRadioActionPrivate = X_GtkRadioActionPrivate
  alias GtkRadioActionClass = X_GtkRadioActionClass
  alias GtkRcContext = X_GtkRcContext
  alias GtkRcStyleClass = X_GtkRcStyleClass
  alias GtkRecentAction = X_GtkRecentAction
  alias GtkRecentActionPrivate = X_GtkRecentActionPrivate
  alias GtkRecentActionClass = X_GtkRecentActionClass
  alias GtkStatusIcon = X_GtkStatusIcon
  alias GtkStatusIconClass = X_GtkStatusIconClass
  alias GtkStatusIconPrivate = X_GtkStatusIconPrivate
  alias GtkStyleClass = X_GtkStyleClass
  alias GtkThemeEngine = X_GtkThemeEngine
  alias GtkRcProperty = X_GtkRcProperty
  alias GtkTable = X_GtkTable
  alias GtkTablePrivate = X_GtkTablePrivate
  alias GtkTableClass = X_GtkTableClass
  alias GtkTableChild = X_GtkTableChild
  alias GtkTableRowCol = X_GtkTableRowCol
  alias GtkTearoffMenuItem = X_GtkTearoffMenuItem
  alias GtkTearoffMenuItemPrivate = X_GtkTearoffMenuItemPrivate
  alias GtkTearoffMenuItemClass = X_GtkTearoffMenuItemClass
  alias GtkThemingEngine = X_GtkThemingEngine
  alias GtkThemingEngineClass = X_GtkThemingEngineClass
  alias GtkUIManager = X_GtkUIManager
  alias GtkUIManagerClass = X_GtkUIManagerClass
  alias GtkUIManagerPrivate = X_GtkUIManagerPrivate
  alias GtkVButtonBox = X_GtkVButtonBox
  alias GtkVButtonBoxClass = X_GtkVButtonBoxClass
  alias GtkVBox = X_GtkVBox
  alias GtkVBoxClass = X_GtkVBoxClass
  alias GtkVPaned = X_GtkVPaned
  alias GtkVPanedClass = X_GtkVPanedClass
  alias GtkVScale = X_GtkVScale
  alias GtkVScaleClass = X_GtkVScaleClass
  alias GtkVScrollbar = X_GtkVScrollbar
  alias GtkVScrollbarClass = X_GtkVScrollbarClass
  alias GtkVSeparator = X_GtkVSeparator
  alias GtkVSeparatorClass = X_GtkVSeparatorClass
  alias GtkAccessibleAutoptr = GtkAccessible*
  alias GtkActionBarAutoptr = GtkActionBar*
  alias GtkActionableAutoptr = GtkActionable*
  alias GtkAdjustmentAutoptr = GtkAdjustment*
  alias GtkAppChooserAutoptr = GtkAppChooser*
  alias GtkAppChooserButtonAutoptr = GtkAppChooserButton*
  alias GtkAppChooserDialogAutoptr = GtkAppChooserDialog*
  alias GtkAppChooserWidgetAutoptr = GtkAppChooserWidget*
  alias GtkApplicationWindowAutoptr = GtkApplicationWindow*
  alias GtkAspectFrameAutoptr = GtkAspectFrame*
  alias GtkAssistantAutoptr = GtkAssistant*
  alias GtkBoxAutoptr = GtkBox*
  alias GtkBuildableAutoptr = GtkBuildable*
  alias GtkBuilderAutoptr = GtkBuilder*
  alias GtkButtonAutoptr = GtkButton*
  alias GtkButtonBoxAutoptr = GtkButtonBox*
  alias GtkCalendarAutoptr = GtkCalendar*
  alias GtkCellAreaAutoptr = GtkCellArea*
  alias GtkCellAreaBoxAutoptr = GtkCellAreaBox*
  alias GtkCellAreaContextAutoptr = GtkCellAreaContext*
  alias GtkCellEditableAutoptr = GtkCellEditable*
  alias GtkCellLayoutAutoptr = GtkCellLayout*
  alias GtkCellRendererAutoptr = GtkCellRenderer*
  alias GtkCellRendererAccelAutoptr = GtkCellRendererAccel*
  alias GtkCellRendererComboAutoptr = GtkCellRendererCombo*
  alias GtkCellRendererPixbufAutoptr = GtkCellRendererPixbuf*
  alias GtkCellRendererProgressAutoptr = GtkCellRendererProgress*
  alias GtkCellRendererSpinAutoptr = GtkCellRendererSpin*
  alias GtkCellRendererSpinnerAutoptr = GtkCellRendererSpinner*
  alias GtkCellRendererTextAutoptr = GtkCellRendererText*
  alias GtkCellRendererToggleAutoptr = GtkCellRendererToggle*
  alias GtkCellViewAutoptr = GtkCellView*
  alias GtkCheckButtonAutoptr = GtkCheckButton*
  alias GtkCheckMenuItemAutoptr = GtkCheckMenuItem*
  alias GtkClipboardAutoptr = GtkClipboard*
  alias GtkColorButtonAutoptr = GtkColorButton*
  alias GtkColorChooserAutoptr = GtkColorChooser*
  alias GtkColorChooserDialogAutoptr = GtkColorChooserDialog*
  alias GtkColorChooserWidgetAutoptr = GtkColorChooserWidget*
  alias GtkComboBoxAutoptr = GtkComboBox*
  alias GtkComboBoxTextAutoptr = GtkComboBoxText*
  alias GtkCssProviderAutoptr = GtkCssProvider*
  alias GtkDrawingAreaAutoptr = GtkDrawingArea*
  alias GtkEditableAutoptr = GtkEditable*
  alias GtkEntryAutoptr = GtkEntry*
  alias GtkEntryBufferAutoptr = GtkEntryBuffer*
  alias GtkEntryCompletionAutoptr = GtkEntryCompletion*
  alias GtkEventBoxAutoptr = GtkEventBox*
  alias GtkEventControllerAutoptr = GtkEventController*
  alias GtkExpanderAutoptr = GtkExpander*
  alias GtkFileChooserButtonAutoptr = GtkFileChooserButton*
  alias GtkFileChooserDialogAutoptr = GtkFileChooserDialog*
  alias GtkFileChooserWidgetAutoptr = GtkFileChooserWidget*
  alias GtkFileFilterAutoptr = GtkFileFilter*
  alias GtkFixedAutoptr = GtkFixed*
  alias GtkFlowBoxAutoptr = GtkFlowBox*
  alias GtkFlowBoxChildAutoptr = GtkFlowBoxChild*
  alias GtkFontButtonAutoptr = GtkFontButton*
  alias GtkFontChooserAutoptr = GtkFontChooser*
  alias GtkFontChooserDialogAutoptr = GtkFontChooserDialog*
  alias GtkFontChooserWidgetAutoptr = GtkFontChooserWidget*
  alias GtkFrameAutoptr = GtkFrame*
  alias GtkGLAreaAutoptr = GtkGLArea*
  alias GtkGestureAutoptr = GtkGesture*
  alias GtkGestureDragAutoptr = GtkGestureDrag*
  alias GtkGestureLongPressAutoptr = GtkGestureLongPress*
  alias GtkGestureMultiPressAutoptr = GtkGestureMultiPress*
  alias GtkGesturePanAutoptr = GtkGesturePan*
  alias GtkGestureRotateAutoptr = GtkGestureRotate*
  alias GtkGestureSingleAutoptr = GtkGestureSingle*
  alias GtkGestureSwipeAutoptr = GtkGestureSwipe*
  alias GtkGestureZoomAutoptr = GtkGestureZoom*
  alias GtkGridAutoptr = GtkGrid*
  alias GtkHeaderBarAutoptr = GtkHeaderBar*
  alias GtkIMContextAutoptr = GtkIMContext*
  alias GtkIMContextSimpleAutoptr = GtkIMContextSimple*
  alias GtkIMMulticontextAutoptr = GtkIMMulticontext*
  alias GtkIconInfoAutoptr = GtkIconInfo*
  alias GtkIconThemeAutoptr = GtkIconTheme*
  alias GtkIconViewAutoptr = GtkIconView*
  alias GtkImageAutoptr = GtkImage*
  alias GtkInfoBarAutoptr = GtkInfoBar*
  alias GtkInvisibleAutoptr = GtkInvisible*
  alias GtkLayoutAutoptr = GtkLayout*
  alias GtkLevelBarAutoptr = GtkLevelBar*
  alias GtkLinkButtonAutoptr = GtkLinkButton*
  alias GtkListStoreAutoptr = GtkListStore*
  alias GtkLockButtonAutoptr = GtkLockButton*
  alias GtkMenuBarAutoptr = GtkMenuBar*
  alias GtkMenuButtonAutoptr = GtkMenuButton*
  alias GtkMenuItemAutoptr = GtkMenuItem*
  alias GtkMenuToolButtonAutoptr = GtkMenuToolButton*
  alias GtkMessageDialogAutoptr = GtkMessageDialog*
  alias GtkMountOperationAutoptr = GtkMountOperation*
  alias GtkNotebookAutoptr = GtkNotebook*
  alias GtkOffscreenWindowAutoptr = GtkOffscreenWindow*
  alias GtkOrientableAutoptr = GtkOrientable*
  alias GtkOverlayAutoptr = GtkOverlay*
  alias GtkPageSetupAutoptr = GtkPageSetup*
  alias GtkPanedAutoptr = GtkPaned*
  alias GtkPlacesSidebarAutoptr = GtkPlacesSidebar*
  alias GtkPopoverAutoptr = GtkPopover*
  alias GtkPopoverMenuAutoptr = GtkPopoverMenu*
  alias GtkPrintContextAutoptr = GtkPrintContext*
  alias GtkPrintOperationAutoptr = GtkPrintOperation*
  alias GtkPrintOperationPreviewAutoptr = GtkPrintOperationPreview*
  alias GtkPrintSettingsAutoptr = GtkPrintSettings*
  alias GtkProgressBarAutoptr = GtkProgressBar*
  alias GtkRadioButtonAutoptr = GtkRadioButton*
  alias GtkRadioMenuItemAutoptr = GtkRadioMenuItem*
  alias GtkRadioToolButtonAutoptr = GtkRadioToolButton*
  alias GtkRangeAutoptr = GtkRange*
  alias GtkRcStyleAutoptr = GtkRcStyle*
  alias GtkRecentChooserAutoptr = GtkRecentChooser*
  alias GtkRecentChooserDialogAutoptr = GtkRecentChooserDialog*
  alias GtkRecentChooserMenuAutoptr = GtkRecentChooserMenu*
  alias GtkRecentChooserWidgetAutoptr = GtkRecentChooserWidget*
  alias GtkRecentFilterAutoptr = GtkRecentFilter*
  alias GtkRecentManagerAutoptr = GtkRecentManager*
  alias GtkRevealerAutoptr = GtkRevealer*
  alias GtkScaleAutoptr = GtkScale*
  alias GtkScaleButtonAutoptr = GtkScaleButton*
  alias GtkScrollableAutoptr = GtkScrollable*
  alias GtkScrollbarAutoptr = GtkScrollbar*
  alias GtkScrolledWindowAutoptr = GtkScrolledWindow*
  alias GtkSearchBarAutoptr = GtkSearchBar*
  alias GtkSearchEntryAutoptr = GtkSearchEntry*
  alias GtkSeparatorAutoptr = GtkSeparator*
  alias GtkSeparatorMenuItemAutoptr = GtkSeparatorMenuItem*
  alias GtkSeparatorToolItemAutoptr = GtkSeparatorToolItem*
  alias GtkSettingsAutoptr = GtkSettings*
  alias GtkStackSidebarAutoptr = GtkStackSidebar*
  alias GtkSizeGroupAutoptr = GtkSizeGroup*
  alias GtkSpinButtonAutoptr = GtkSpinButton*
  alias GtkSpinnerAutoptr = GtkSpinner*
  alias GtkStackAutoptr = GtkStack*
  alias GtkStackSwitcherAutoptr = GtkStackSwitcher*
  alias GtkStatusbarAutoptr = GtkStatusbar*
  alias GtkStyleAutoptr = GtkStyle*
  alias GtkStyleContextAutoptr = GtkStyleContext*
  alias GtkStylePropertiesAutoptr = GtkStyleProperties*
  alias GtkStyleProviderAutoptr = GtkStyleProvider*
  alias GtkSwitchAutoptr = GtkSwitch*
  alias GtkTextBufferAutoptr = GtkTextBuffer*
  alias GtkTextChildAnchorAutoptr = GtkTextChildAnchor*
  alias GtkTextMarkAutoptr = GtkTextMark*
  alias GtkTextTagAutoptr = GtkTextTag*
  alias GtkTextTagTableAutoptr = GtkTextTagTable*
  alias GtkTextViewAutoptr = GtkTextView*
  alias GtkToggleButtonAutoptr = GtkToggleButton*
  alias GtkToggleToolButtonAutoptr = GtkToggleToolButton*
  alias GtkToolButtonAutoptr = GtkToolButton*
  alias GtkToolItemAutoptr = GtkToolItem*
  alias GtkToolItemGroupAutoptr = GtkToolItemGroup*
  alias GtkToolPaletteAutoptr = GtkToolPalette*
  alias GtkToolShellAutoptr = GtkToolShell*
  alias GtkToolbarAutoptr = GtkToolbar*
  alias GtkTooltipAutoptr = GtkTooltip*
  alias GtkTreeDragDestAutoptr = GtkTreeDragDest*
  alias GtkTreeDragSourceAutoptr = GtkTreeDragSource*
  alias GtkTreeModelAutoptr = GtkTreeModel*
  alias GtkTreeModelFilterAutoptr = GtkTreeModelFilter*
  alias GtkTreeModelSortAutoptr = GtkTreeModelSort*
  alias GtkTreeSelectionAutoptr = GtkTreeSelection*
  alias GtkTreeSortableAutoptr = GtkTreeSortable*
  alias GtkTreeStoreAutoptr = GtkTreeStore*
  alias GtkTreeViewAutoptr = GtkTreeView*
  alias GtkTreeViewColumnAutoptr = GtkTreeViewColumn*
  alias GtkViewportAutoptr = GtkViewport*
  alias GtkVolumeButtonAutoptr = GtkVolumeButton*
  alias GtkPaperSizeAutoptr = GtkPaperSize*
  alias GtkSelectionDataAutoptr = GtkSelectionData*
  alias GtkTargetListAutoptr = GtkTargetList*
  alias GtkTextAttributesAutoptr = GtkTextAttributes*
  alias GtkTextIterAutoptr = GtkTextIter*
  alias GtkTreeIterAutoptr = GtkTreeIter*
  alias GtkTreeRowReferenceAutoptr = GtkTreeRowReference*
  alias GtkWidgetPathAutoptr = GtkWidgetPath*
  fun _glib_checked_add_u32(dest : Guint32*, a : Guint32, b : Guint32) : Gboolean
  fun __builtin_uadd_overflow(arg1 : UInt32, arg2 : UInt32, arg3 : UInt32*) : Bool
  fun _glib_checked_mul_u32(dest : Guint32*, a : Guint32, b : Guint32) : Gboolean
  fun __builtin_umul_overflow(arg1 : UInt32, arg2 : UInt32, arg3 : UInt32*) : Bool
  fun _glib_checked_add_u64(dest : Guint64*, a : Guint64, b : Guint64) : Gboolean
  fun __builtin_uaddll_overflow(arg1 : UInt64, arg2 : UInt64, arg3 : UInt64*) : Bool
  fun _glib_checked_mul_u64(dest : Guint64*, a : Guint64, b : Guint64) : Gboolean
  fun __builtin_umulll_overflow(arg1 : UInt64, arg2 : UInt64, arg3 : UInt64*) : Bool
  fun g_array_new(zero_terminated : Gboolean, clear_ : Gboolean, element_size : Guint) : GArray*
  fun g_array_sized_new(zero_terminated : Gboolean, clear_ : Gboolean, element_size : Guint, reserved_size : Guint) : GArray*
  fun g_array_free(array : GArray*, free_segment : Gboolean) : Gchar*
  fun g_array_ref(array : GArray*) : GArray*
  fun g_array_unref(array : GArray*) : Void
  fun g_array_get_element_size(array : GArray*) : Guint
  fun g_array_append_vals(array : GArray*, data : Gconstpointer, len : Guint) : GArray*
  fun g_array_prepend_vals(array : GArray*, data : Gconstpointer, len : Guint) : GArray*
  fun g_array_insert_vals(array : GArray*, index_ : Guint, data : Gconstpointer, len : Guint) : GArray*
  fun g_array_set_size(array : GArray*, length : Guint) : GArray*
  fun g_array_remove_index(array : GArray*, index_ : Guint) : GArray*
  fun g_array_remove_index_fast(array : GArray*, index_ : Guint) : GArray*
  fun g_array_remove_range(array : GArray*, index_ : Guint, length : Guint) : GArray*
  fun g_array_sort(array : GArray*, compare_func : GCompareFunc) : Void
  fun g_array_sort_with_data(array : GArray*, compare_func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_array_set_clear_func(array : GArray*, clear_func : GDestroyNotify) : Void
  fun g_ptr_array_new : GPtrArray*
  fun g_ptr_array_new_with_free_func(element_free_func : GDestroyNotify) : GPtrArray*
  fun g_ptr_array_sized_new(reserved_size : Guint) : GPtrArray*
  fun g_ptr_array_new_full(reserved_size : Guint, element_free_func : GDestroyNotify) : GPtrArray*
  fun g_ptr_array_free(array : GPtrArray*, free_seg : Gboolean) : Gpointer*
  fun g_ptr_array_ref(array : GPtrArray*) : GPtrArray*
  fun g_ptr_array_unref(array : GPtrArray*) : Void
  fun g_ptr_array_set_free_func(array : GPtrArray*, element_free_func : GDestroyNotify) : Void
  fun g_ptr_array_set_size(array : GPtrArray*, length : Gint) : Void
  fun g_ptr_array_remove_index(array : GPtrArray*, index_ : Guint) : Gpointer
  fun g_ptr_array_remove_index_fast(array : GPtrArray*, index_ : Guint) : Gpointer
  fun g_ptr_array_remove(array : GPtrArray*, data : Gpointer) : Gboolean
  fun g_ptr_array_remove_fast(array : GPtrArray*, data : Gpointer) : Gboolean
  fun g_ptr_array_remove_range(array : GPtrArray*, index_ : Guint, length : Guint) : GPtrArray*
  fun g_ptr_array_add(array : GPtrArray*, data : Gpointer) : Void
  fun g_ptr_array_insert(array : GPtrArray*, index_ : Gint, data : Gpointer) : Void
  fun g_ptr_array_sort(array : GPtrArray*, compare_func : GCompareFunc) : Void
  fun g_ptr_array_sort_with_data(array : GPtrArray*, compare_func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_ptr_array_foreach(array : GPtrArray*, func : GFunc, user_data : Gpointer) : Void
  fun g_byte_array_new : GByteArray*
  fun g_byte_array_new_take(data : Guint8*, len : Gsize) : GByteArray*
  fun g_byte_array_sized_new(reserved_size : Guint) : GByteArray*
  fun g_byte_array_free(array : GByteArray*, free_segment : Gboolean) : Guint8*
  fun g_byte_array_free_to_bytes(array : GByteArray*) : GBytes*
  fun g_byte_array_ref(array : GByteArray*) : GByteArray*
  fun g_byte_array_unref(array : GByteArray*) : Void
  fun g_byte_array_append(array : GByteArray*, data : Guint8*, len : Guint) : GByteArray*
  fun g_byte_array_prepend(array : GByteArray*, data : Guint8*, len : Guint) : GByteArray*
  fun g_byte_array_set_size(array : GByteArray*, length : Guint) : GByteArray*
  fun g_byte_array_remove_index(array : GByteArray*, index_ : Guint) : GByteArray*
  fun g_byte_array_remove_index_fast(array : GByteArray*, index_ : Guint) : GByteArray*
  fun g_byte_array_remove_range(array : GByteArray*, index_ : Guint, length : Guint) : GByteArray*
  fun g_byte_array_sort(array : GByteArray*, compare_func : GCompareFunc) : Void
  fun g_byte_array_sort_with_data(array : GByteArray*, compare_func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_atomic_int_get(atomic : Gint*) : Gint
  fun g_atomic_int_set(atomic : Gint*, newval : Gint) : Void
  fun g_atomic_int_inc(atomic : Gint*) : Void
  fun g_atomic_int_dec_and_test(atomic : Gint*) : Gboolean
  fun g_atomic_int_compare_and_exchange(atomic : Gint*, oldval : Gint, newval : Gint) : Gboolean
  fun g_atomic_int_add(atomic : Gint*, val : Gint) : Gint
  fun g_atomic_int_and(atomic : Guint*, val : Guint) : Guint
  fun g_atomic_int_or(atomic : Guint*, val : Guint) : Guint
  fun g_atomic_int_xor(atomic : Guint*, val : Guint) : Guint
  fun g_atomic_pointer_get(atomic : Void*) : Gpointer
  fun g_atomic_pointer_set(atomic : Void*, newval : Gpointer) : Void
  fun g_atomic_pointer_compare_and_exchange(atomic : Void*, oldval : Gpointer, newval : Gpointer) : Gboolean
  fun g_atomic_pointer_add(atomic : Void*, val : Gssize) : Gssize
  fun g_atomic_pointer_and(atomic : Void*, val : Gsize) : Gsize
  fun g_atomic_pointer_or(atomic : Void*, val : Gsize) : Gsize
  fun g_atomic_pointer_xor(atomic : Void*, val : Gsize) : Gsize
  fun g_atomic_int_exchange_and_add(atomic : Gint*, val : Gint) : Gint
  fun g_quark_try_string(string : Gchar*) : GQuark
  fun g_quark_from_static_string(string : Gchar*) : GQuark
  fun g_quark_from_string(string : Gchar*) : GQuark
  fun g_quark_to_string(quark : GQuark) : Gchar*
  fun g_intern_string(string : Gchar*) : Gchar*
  fun g_intern_static_string(string : Gchar*) : Gchar*
  fun g_error_new(domain : GQuark, code : Gint, format : Gchar*) : GError*
  fun g_error_new_literal(domain : GQuark, code : Gint, message : Gchar*) : GError*
  fun g_error_new_valist(domain : GQuark, code : Gint, format : Gchar*, args : X__va_list_tag*) : GError*
  fun g_error_free(error : GError*) : Void
  fun g_error_copy(error : GError*) : GError*
  fun g_error_matches(error : GError*, domain : GQuark, code : Gint) : Gboolean
  fun g_set_error(err : GError**, domain : GQuark, code : Gint, format : Gchar*) : Void
  fun g_set_error_literal(err : GError**, domain : GQuark, code : Gint, message : Gchar*) : Void
  fun g_propagate_error(dest : GError**, src : GError*) : Void
  fun g_clear_error(err : GError**) : Void
  fun g_prefix_error(err : GError**, format : Gchar*) : Void
  fun g_propagate_prefixed_error(dest : GError**, src : GError*, format : Gchar*) : Void
  fun g_get_user_name : Gchar*
  fun g_get_real_name : Gchar*
  fun g_get_home_dir : Gchar*
  fun g_get_tmp_dir : Gchar*
  fun g_get_host_name : Gchar*
  fun g_get_prgname : Gchar*
  fun g_set_prgname(prgname : Gchar*) : Void
  fun g_get_application_name : Gchar*
  fun g_set_application_name(application_name : Gchar*) : Void
  fun g_reload_user_special_dirs_cache : Void
  fun g_get_user_data_dir : Gchar*
  fun g_get_user_config_dir : Gchar*
  fun g_get_user_cache_dir : Gchar*
  fun g_get_system_data_dirs : Gchar**
  fun g_get_system_config_dirs : Gchar**
  fun g_get_user_runtime_dir : Gchar*
  fun g_get_user_special_dir(directory : GUserDirectory) : Gchar*
  fun g_parse_debug_string(string : Gchar*, keys : GDebugKey*, nkeys : Guint) : Guint
  fun g_snprintf(string : Gchar*, n : Gulong, format : Gchar*) : Gint
  fun g_vsnprintf(string : Gchar*, n : Gulong, format : Gchar*, args : X__va_list_tag*) : Gint
  fun g_nullify_pointer(nullify_location : Gpointer*) : Void
  fun g_format_size_full(size : Guint64, flags : GFormatSizeFlags) : Gchar*
  fun g_format_size(size : Guint64) : Gchar*
  fun g_format_size_for_display(size : Goffset) : Gchar*
  fun g_atexit(func : GVoidFunc) : Void
  fun g_find_program_in_path(program : Gchar*) : Gchar*
  fun g_bit_nth_lsf(mask : Gulong, nth_bit : Gint) : Gint
  fun g_bit_nth_msf(mask : Gulong, nth_bit : Gint) : Gint
  fun g_bit_storage(number : Gulong) : Guint
  fun g_bit_nth_lsf_impl(mask : Gulong, nth_bit : Gint) : Gint
  fun g_bit_nth_msf_impl(mask : Gulong, nth_bit : Gint) : Gint
  fun g_bit_storage_impl(number : Gulong) : Guint
  fun g_thread_error_quark : GQuark
  fun g_thread_ref(thread : GThread*) : GThread*
  fun g_thread_unref(thread : GThread*) : Void
  fun g_thread_new(name : Gchar*, func : GThreadFunc, data : Gpointer) : GThread*
  fun g_thread_try_new(name : Gchar*, func : GThreadFunc, data : Gpointer, error : GError**) : GThread*
  fun g_thread_self : GThread*
  fun g_thread_exit(retval : Gpointer) : Void
  fun g_thread_join(thread : GThread*) : Gpointer
  fun g_thread_yield : Void
  fun g_mutex_init(mutex : GMutex*) : Void
  fun g_mutex_clear(mutex : GMutex*) : Void
  fun g_mutex_lock(mutex : GMutex*) : Void
  fun g_mutex_trylock(mutex : GMutex*) : Gboolean
  fun g_mutex_unlock(mutex : GMutex*) : Void
  fun g_rw_lock_init(rw_lock : GRWLock*) : Void
  fun g_rw_lock_clear(rw_lock : GRWLock*) : Void
  fun g_rw_lock_writer_lock(rw_lock : GRWLock*) : Void
  fun g_rw_lock_writer_trylock(rw_lock : GRWLock*) : Gboolean
  fun g_rw_lock_writer_unlock(rw_lock : GRWLock*) : Void
  fun g_rw_lock_reader_lock(rw_lock : GRWLock*) : Void
  fun g_rw_lock_reader_trylock(rw_lock : GRWLock*) : Gboolean
  fun g_rw_lock_reader_unlock(rw_lock : GRWLock*) : Void
  fun g_rec_mutex_init(rec_mutex : GRecMutex*) : Void
  fun g_rec_mutex_clear(rec_mutex : GRecMutex*) : Void
  fun g_rec_mutex_lock(rec_mutex : GRecMutex*) : Void
  fun g_rec_mutex_trylock(rec_mutex : GRecMutex*) : Gboolean
  fun g_rec_mutex_unlock(rec_mutex : GRecMutex*) : Void
  fun g_cond_init(cond : GCond*) : Void
  fun g_cond_clear(cond : GCond*) : Void
  fun g_cond_wait(cond : GCond*, mutex : GMutex*) : Void
  fun g_cond_signal(cond : GCond*) : Void
  fun g_cond_broadcast(cond : GCond*) : Void
  fun g_cond_wait_until(cond : GCond*, mutex : GMutex*, end_time : Gint64) : Gboolean
  fun g_private_get(key : GPrivate*) : Gpointer
  fun g_private_set(key : GPrivate*, value : Gpointer) : Void
  fun g_private_replace(key : GPrivate*, value : Gpointer) : Void
  fun g_once_impl(once : GOnce*, func : GThreadFunc, arg : Gpointer) : Gpointer
  fun g_once_init_enter(location : Void*) : Gboolean
  fun g_once_init_leave(location : Void*, result : Gsize) : Void
  fun g_get_num_processors : Guint
  fun g_mutex_locker_new(mutex : GMutex*) : GMutexLocker*
  fun g_mutex_locker_free(locker : GMutexLocker*) : Void
  fun g_async_queue_new : GAsyncQueue*
  fun g_async_queue_new_full(item_free_func : GDestroyNotify) : GAsyncQueue*
  fun g_async_queue_lock(queue : GAsyncQueue*) : Void
  fun g_async_queue_unlock(queue : GAsyncQueue*) : Void
  fun g_async_queue_ref(queue : GAsyncQueue*) : GAsyncQueue*
  fun g_async_queue_unref(queue : GAsyncQueue*) : Void
  fun g_async_queue_ref_unlocked(queue : GAsyncQueue*) : Void
  fun g_async_queue_unref_and_unlock(queue : GAsyncQueue*) : Void
  fun g_async_queue_push(queue : GAsyncQueue*, data : Gpointer) : Void
  fun g_async_queue_push_unlocked(queue : GAsyncQueue*, data : Gpointer) : Void
  fun g_async_queue_push_sorted(queue : GAsyncQueue*, data : Gpointer, func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_async_queue_push_sorted_unlocked(queue : GAsyncQueue*, data : Gpointer, func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_async_queue_pop(queue : GAsyncQueue*) : Gpointer
  fun g_async_queue_pop_unlocked(queue : GAsyncQueue*) : Gpointer
  fun g_async_queue_try_pop(queue : GAsyncQueue*) : Gpointer
  fun g_async_queue_try_pop_unlocked(queue : GAsyncQueue*) : Gpointer
  fun g_async_queue_timeout_pop(queue : GAsyncQueue*, timeout : Guint64) : Gpointer
  fun g_async_queue_timeout_pop_unlocked(queue : GAsyncQueue*, timeout : Guint64) : Gpointer
  fun g_async_queue_length(queue : GAsyncQueue*) : Gint
  fun g_async_queue_length_unlocked(queue : GAsyncQueue*) : Gint
  fun g_async_queue_sort(queue : GAsyncQueue*, func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_async_queue_sort_unlocked(queue : GAsyncQueue*, func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_async_queue_remove(queue : GAsyncQueue*, item : Gpointer) : Gboolean
  fun g_async_queue_remove_unlocked(queue : GAsyncQueue*, item : Gpointer) : Gboolean
  fun g_async_queue_push_front(queue : GAsyncQueue*, item : Gpointer) : Void
  fun g_async_queue_push_front_unlocked(queue : GAsyncQueue*, item : Gpointer) : Void
  fun g_async_queue_timed_pop(queue : GAsyncQueue*, end_time : GTimeVal*) : Gpointer
  fun g_async_queue_timed_pop_unlocked(queue : GAsyncQueue*, end_time : GTimeVal*) : Gpointer
  fun g_on_error_query(prg_name : Gchar*) : Void
  fun g_on_error_stack_trace(prg_name : Gchar*) : Void
  fun g_base64_encode_step(in : Guchar*, len : Gsize, break_lines : Gboolean, out : Gchar*, state : Gint*, save : Gint*) : Gsize
  fun g_base64_encode_close(break_lines : Gboolean, out : Gchar*, state : Gint*, save : Gint*) : Gsize
  fun g_base64_encode(data : Guchar*, len : Gsize) : Gchar*
  fun g_base64_decode_step(in : Gchar*, len : Gsize, out : Guchar*, state : Gint*, save : Guint*) : Gsize
  fun g_base64_decode(text : Gchar*, out_len : Gsize*) : Guchar*
  fun g_base64_decode_inplace(text : Gchar*, out_len : Gsize*) : Guchar*
  fun g_bit_lock(address : Gint*, lock_bit : Gint) : Void
  fun g_bit_trylock(address : Gint*, lock_bit : Gint) : Gboolean
  fun g_bit_unlock(address : Gint*, lock_bit : Gint) : Void
  fun g_pointer_bit_lock(address : Void*, lock_bit : Gint) : Void
  fun g_pointer_bit_trylock(address : Void*, lock_bit : Gint) : Gboolean
  fun g_pointer_bit_unlock(address : Void*, lock_bit : Gint) : Void
  fun g_bookmark_file_error_quark : GQuark
  fun g_bookmark_file_new : GBookmarkFile*
  fun g_bookmark_file_free(bookmark : GBookmarkFile*) : Void
  fun g_bookmark_file_load_from_file(bookmark : GBookmarkFile*, filename : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_load_from_data(bookmark : GBookmarkFile*, data : Gchar*, length : Gsize, error : GError**) : Gboolean
  fun g_bookmark_file_load_from_data_dirs(bookmark : GBookmarkFile*, file : Gchar*, full_path : Gchar**, error : GError**) : Gboolean
  fun g_bookmark_file_to_data(bookmark : GBookmarkFile*, length : Gsize*, error : GError**) : Gchar*
  fun g_bookmark_file_to_file(bookmark : GBookmarkFile*, filename : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_set_title(bookmark : GBookmarkFile*, uri : Gchar*, title : Gchar*) : Void
  fun g_bookmark_file_get_title(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : Gchar*
  fun g_bookmark_file_set_description(bookmark : GBookmarkFile*, uri : Gchar*, description : Gchar*) : Void
  fun g_bookmark_file_get_description(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : Gchar*
  fun g_bookmark_file_set_mime_type(bookmark : GBookmarkFile*, uri : Gchar*, mime_type : Gchar*) : Void
  fun g_bookmark_file_get_mime_type(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : Gchar*
  fun g_bookmark_file_set_groups(bookmark : GBookmarkFile*, uri : Gchar*, groups : Gchar**, length : Gsize) : Void
  fun g_bookmark_file_add_group(bookmark : GBookmarkFile*, uri : Gchar*, group : Gchar*) : Void
  fun g_bookmark_file_has_group(bookmark : GBookmarkFile*, uri : Gchar*, group : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_get_groups(bookmark : GBookmarkFile*, uri : Gchar*, length : Gsize*, error : GError**) : Gchar**
  fun g_bookmark_file_add_application(bookmark : GBookmarkFile*, uri : Gchar*, name : Gchar*, exec : Gchar*) : Void
  fun g_bookmark_file_has_application(bookmark : GBookmarkFile*, uri : Gchar*, name : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_get_applications(bookmark : GBookmarkFile*, uri : Gchar*, length : Gsize*, error : GError**) : Gchar**
  fun g_bookmark_file_set_app_info(bookmark : GBookmarkFile*, uri : Gchar*, name : Gchar*, exec : Gchar*, count : Gint, stamp : TimeT, error : GError**) : Gboolean
  fun g_bookmark_file_get_app_info(bookmark : GBookmarkFile*, uri : Gchar*, name : Gchar*, exec : Gchar**, count : Guint*, stamp : TimeT*, error : GError**) : Gboolean
  fun g_bookmark_file_set_is_private(bookmark : GBookmarkFile*, uri : Gchar*, is_private : Gboolean) : Void
  fun g_bookmark_file_get_is_private(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_set_icon(bookmark : GBookmarkFile*, uri : Gchar*, href : Gchar*, mime_type : Gchar*) : Void
  fun g_bookmark_file_get_icon(bookmark : GBookmarkFile*, uri : Gchar*, href : Gchar**, mime_type : Gchar**, error : GError**) : Gboolean
  fun g_bookmark_file_set_added(bookmark : GBookmarkFile*, uri : Gchar*, added : TimeT) : Void
  fun g_bookmark_file_get_added(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : TimeT
  fun g_bookmark_file_set_modified(bookmark : GBookmarkFile*, uri : Gchar*, modified : TimeT) : Void
  fun g_bookmark_file_get_modified(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : TimeT
  fun g_bookmark_file_set_visited(bookmark : GBookmarkFile*, uri : Gchar*, visited : TimeT) : Void
  fun g_bookmark_file_get_visited(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : TimeT
  fun g_bookmark_file_has_item(bookmark : GBookmarkFile*, uri : Gchar*) : Gboolean
  fun g_bookmark_file_get_size(bookmark : GBookmarkFile*) : Gint
  fun g_bookmark_file_get_uris(bookmark : GBookmarkFile*, length : Gsize*) : Gchar**
  fun g_bookmark_file_remove_group(bookmark : GBookmarkFile*, uri : Gchar*, group : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_remove_application(bookmark : GBookmarkFile*, uri : Gchar*, name : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_remove_item(bookmark : GBookmarkFile*, uri : Gchar*, error : GError**) : Gboolean
  fun g_bookmark_file_move_item(bookmark : GBookmarkFile*, old_uri : Gchar*, new_uri : Gchar*, error : GError**) : Gboolean
  fun g_bytes_new(data : Gconstpointer, size : Gsize) : GBytes*
  fun g_bytes_new_take(data : Gpointer, size : Gsize) : GBytes*
  fun g_bytes_new_static(data : Gconstpointer, size : Gsize) : GBytes*
  fun g_bytes_new_with_free_func(data : Gconstpointer, size : Gsize, free_func : GDestroyNotify, user_data : Gpointer) : GBytes*
  fun g_bytes_new_from_bytes(bytes : GBytes*, offset : Gsize, length : Gsize) : GBytes*
  fun g_bytes_get_data(bytes : GBytes*, size : Gsize*) : Gconstpointer
  fun g_bytes_get_size(bytes : GBytes*) : Gsize
  fun g_bytes_ref(bytes : GBytes*) : GBytes*
  fun g_bytes_unref(bytes : GBytes*) : Void
  fun g_bytes_unref_to_data(bytes : GBytes*, size : Gsize*) : Gpointer
  fun g_bytes_unref_to_array(bytes : GBytes*) : GByteArray*
  fun g_bytes_hash(bytes : Gconstpointer) : Guint
  fun g_bytes_equal(bytes1 : Gconstpointer, bytes2 : Gconstpointer) : Gboolean
  fun g_bytes_compare(bytes1 : Gconstpointer, bytes2 : Gconstpointer) : Gint
  fun g_get_charset(charset : UInt8**) : Gboolean
  fun g_get_codeset : Gchar*
  fun g_get_language_names : Gchar**
  fun g_get_locale_variants(locale : Gchar*) : Gchar**
  fun g_checksum_type_get_length(checksum_type : GChecksumType) : Gssize
  fun g_checksum_new(checksum_type : GChecksumType) : GChecksum*
  fun g_checksum_reset(checksum : GChecksum*) : Void
  fun g_checksum_copy(checksum : GChecksum*) : GChecksum*
  fun g_checksum_free(checksum : GChecksum*) : Void
  fun g_checksum_update(checksum : GChecksum*, data : Guchar*, length : Gssize) : Void
  fun g_checksum_get_string(checksum : GChecksum*) : Gchar*
  fun g_checksum_get_digest(checksum : GChecksum*, buffer : Guint8*, digest_len : Gsize*) : Void
  fun g_compute_checksum_for_data(checksum_type : GChecksumType, data : Guchar*, length : Gsize) : Gchar*
  fun g_compute_checksum_for_string(checksum_type : GChecksumType, str : Gchar*, length : Gssize) : Gchar*
  fun g_compute_checksum_for_bytes(checksum_type : GChecksumType, data : GBytes*) : Gchar*
  fun g_convert_error_quark : GQuark
  fun g_iconv_open(to_codeset : Gchar*, from_codeset : Gchar*) : GIConv
  fun g_iconv(converter : GIConv, inbuf : Gchar**, inbytes_left : Gsize*, outbuf : Gchar**, outbytes_left : Gsize*) : Gsize
  fun g_iconv_close(converter : GIConv) : Gint
  fun g_convert(str : Gchar*, len : Gssize, to_codeset : Gchar*, from_codeset : Gchar*, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_convert_with_iconv(str : Gchar*, len : Gssize, converter : GIConv, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_convert_with_fallback(str : Gchar*, len : Gssize, to_codeset : Gchar*, from_codeset : Gchar*, fallback : Gchar*, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_locale_to_utf8(opsysstring : Gchar*, len : Gssize, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_locale_from_utf8(utf8string : Gchar*, len : Gssize, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_filename_to_utf8(opsysstring : Gchar*, len : Gssize, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_filename_from_utf8(utf8string : Gchar*, len : Gssize, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : Gchar*
  fun g_filename_from_uri(uri : Gchar*, hostname : Gchar**, error : GError**) : Gchar*
  fun g_filename_to_uri(filename : Gchar*, hostname : Gchar*, error : GError**) : Gchar*
  fun g_filename_display_name(filename : Gchar*) : Gchar*
  fun g_get_filename_charsets(charsets : Gchar***) : Gboolean
  fun g_filename_display_basename(filename : Gchar*) : Gchar*
  fun g_uri_list_extract_uris(uri_list : Gchar*) : Gchar**
  fun g_datalist_init(datalist : GData**) : Void
  fun g_datalist_clear(datalist : GData**) : Void
  fun g_datalist_id_get_data(datalist : GData**, key_id : GQuark) : Gpointer
  fun g_datalist_id_set_data_full(datalist : GData**, key_id : GQuark, data : Gpointer, destroy_func : GDestroyNotify) : Void
  fun g_datalist_id_dup_data(datalist : GData**, key_id : GQuark, dup_func : GDuplicateFunc, user_data : Gpointer) : Gpointer
  fun g_datalist_id_replace_data(datalist : GData**, key_id : GQuark, oldval : Gpointer, newval : Gpointer, destroy : GDestroyNotify, old_destroy : GDestroyNotify*) : Gboolean
  fun g_datalist_id_remove_no_notify(datalist : GData**, key_id : GQuark) : Gpointer
  fun g_datalist_foreach(datalist : GData**, func : GDataForeachFunc, user_data : Gpointer) : Void
  fun g_datalist_set_flags(datalist : GData**, flags : Guint) : Void
  fun g_datalist_unset_flags(datalist : GData**, flags : Guint) : Void
  fun g_datalist_get_flags(datalist : GData**) : Guint
  fun g_dataset_destroy(dataset_location : Gconstpointer) : Void
  fun g_dataset_id_get_data(dataset_location : Gconstpointer, key_id : GQuark) : Gpointer
  fun g_datalist_get_data(datalist : GData**, key : Gchar*) : Gpointer
  fun g_dataset_id_set_data_full(dataset_location : Gconstpointer, key_id : GQuark, data : Gpointer, destroy_func : GDestroyNotify) : Void
  fun g_dataset_id_remove_no_notify(dataset_location : Gconstpointer, key_id : GQuark) : Gpointer
  fun g_dataset_foreach(dataset_location : Gconstpointer, func : GDataForeachFunc, user_data : Gpointer) : Void
  fun g_date_new : GDate*
  fun g_date_new_dmy(day : GDateDay, month : GDateMonth, year : GDateYear) : GDate*
  fun g_date_new_julian(julian_day : Guint32) : GDate*
  fun g_date_free(date : GDate*) : Void
  fun g_date_valid(date : GDate*) : Gboolean
  fun g_date_valid_day(day : GDateDay) : Gboolean
  fun g_date_valid_month(month : GDateMonth) : Gboolean
  fun g_date_valid_year(year : GDateYear) : Gboolean
  fun g_date_valid_weekday(weekday : GDateWeekday) : Gboolean
  fun g_date_valid_julian(julian_date : Guint32) : Gboolean
  fun g_date_valid_dmy(day : GDateDay, month : GDateMonth, year : GDateYear) : Gboolean
  fun g_date_get_weekday(date : GDate*) : GDateWeekday
  fun g_date_get_month(date : GDate*) : GDateMonth
  fun g_date_get_year(date : GDate*) : GDateYear
  fun g_date_get_day(date : GDate*) : GDateDay
  fun g_date_get_julian(date : GDate*) : Guint32
  fun g_date_get_day_of_year(date : GDate*) : Guint
  fun g_date_get_monday_week_of_year(date : GDate*) : Guint
  fun g_date_get_sunday_week_of_year(date : GDate*) : Guint
  fun g_date_get_iso8601_week_of_year(date : GDate*) : Guint
  fun g_date_clear(date : GDate*, n_dates : Guint) : Void
  fun g_date_set_parse(date : GDate*, str : Gchar*) : Void
  fun g_date_set_time_t(date : GDate*, timet : TimeT) : Void
  fun g_date_set_time_val(date : GDate*, timeval : GTimeVal*) : Void
  fun g_date_set_time(date : GDate*, time_ : GTime) : Void
  fun g_date_set_month(date : GDate*, month : GDateMonth) : Void
  fun g_date_set_day(date : GDate*, day : GDateDay) : Void
  fun g_date_set_year(date : GDate*, year : GDateYear) : Void
  fun g_date_set_dmy(date : GDate*, day : GDateDay, month : GDateMonth, y : GDateYear) : Void
  fun g_date_set_julian(date : GDate*, julian_date : Guint32) : Void
  fun g_date_is_first_of_month(date : GDate*) : Gboolean
  fun g_date_is_last_of_month(date : GDate*) : Gboolean
  fun g_date_add_days(date : GDate*, n_days : Guint) : Void
  fun g_date_subtract_days(date : GDate*, n_days : Guint) : Void
  fun g_date_add_months(date : GDate*, n_months : Guint) : Void
  fun g_date_subtract_months(date : GDate*, n_months : Guint) : Void
  fun g_date_add_years(date : GDate*, n_years : Guint) : Void
  fun g_date_subtract_years(date : GDate*, n_years : Guint) : Void
  fun g_date_is_leap_year(year : GDateYear) : Gboolean
  fun g_date_get_days_in_month(month : GDateMonth, year : GDateYear) : Guint8
  fun g_date_get_monday_weeks_in_year(year : GDateYear) : Guint8
  fun g_date_get_sunday_weeks_in_year(year : GDateYear) : Guint8
  fun g_date_days_between(date1 : GDate*, date2 : GDate*) : Gint
  fun g_date_compare(lhs : GDate*, rhs : GDate*) : Gint
  fun g_date_to_struct_tm(date : GDate*, tm : Tm*) : Void
  fun g_date_clamp(date : GDate*, min_date : GDate*, max_date : GDate*) : Void
  fun g_date_order(date1 : GDate*, date2 : GDate*) : Void
  fun g_date_strftime(s : Gchar*, slen : Gsize, format : Gchar*, date : GDate*) : Gsize
  fun g_time_zone_new(identifier : Gchar*) : GTimeZone*
  fun g_time_zone_new_utc : GTimeZone*
  fun g_time_zone_new_local : GTimeZone*
  fun g_time_zone_ref(tz : GTimeZone*) : GTimeZone*
  fun g_time_zone_unref(tz : GTimeZone*) : Void
  fun g_time_zone_find_interval(tz : GTimeZone*, type : GTimeType, time_ : Gint64) : Gint
  fun g_time_zone_adjust_time(tz : GTimeZone*, type : GTimeType, time_ : Gint64*) : Gint
  fun g_time_zone_get_abbreviation(tz : GTimeZone*, interval : Gint) : Gchar*
  fun g_time_zone_get_offset(tz : GTimeZone*, interval : Gint) : Gint32
  fun g_time_zone_is_dst(tz : GTimeZone*, interval : Gint) : Gboolean
  fun g_date_time_unref(datetime : GDateTime*) : Void
  fun g_date_time_ref(datetime : GDateTime*) : GDateTime*
  fun g_date_time_new_now(tz : GTimeZone*) : GDateTime*
  fun g_date_time_new_now_local : GDateTime*
  fun g_date_time_new_now_utc : GDateTime*
  fun g_date_time_new_from_unix_local(t : Gint64) : GDateTime*
  fun g_date_time_new_from_unix_utc(t : Gint64) : GDateTime*
  fun g_date_time_new_from_timeval_local(tv : GTimeVal*) : GDateTime*
  fun g_date_time_new_from_timeval_utc(tv : GTimeVal*) : GDateTime*
  fun g_date_time_new(tz : GTimeZone*, year : Gint, month : Gint, day : Gint, hour : Gint, minute : Gint, seconds : Gdouble) : GDateTime*
  fun g_date_time_new_local(year : Gint, month : Gint, day : Gint, hour : Gint, minute : Gint, seconds : Gdouble) : GDateTime*
  fun g_date_time_new_utc(year : Gint, month : Gint, day : Gint, hour : Gint, minute : Gint, seconds : Gdouble) : GDateTime*
  fun g_date_time_add(datetime : GDateTime*, timespan : GTimeSpan) : GDateTime*
  fun g_date_time_add_years(datetime : GDateTime*, years : Gint) : GDateTime*
  fun g_date_time_add_months(datetime : GDateTime*, months : Gint) : GDateTime*
  fun g_date_time_add_weeks(datetime : GDateTime*, weeks : Gint) : GDateTime*
  fun g_date_time_add_days(datetime : GDateTime*, days : Gint) : GDateTime*
  fun g_date_time_add_hours(datetime : GDateTime*, hours : Gint) : GDateTime*
  fun g_date_time_add_minutes(datetime : GDateTime*, minutes : Gint) : GDateTime*
  fun g_date_time_add_seconds(datetime : GDateTime*, seconds : Gdouble) : GDateTime*
  fun g_date_time_add_full(datetime : GDateTime*, years : Gint, months : Gint, days : Gint, hours : Gint, minutes : Gint, seconds : Gdouble) : GDateTime*
  fun g_date_time_compare(dt1 : Gconstpointer, dt2 : Gconstpointer) : Gint
  fun g_date_time_difference(end : GDateTime*, begin : GDateTime*) : GTimeSpan
  fun g_date_time_hash(datetime : Gconstpointer) : Guint
  fun g_date_time_equal(dt1 : Gconstpointer, dt2 : Gconstpointer) : Gboolean
  fun g_date_time_get_ymd(datetime : GDateTime*, year : Gint*, month : Gint*, day : Gint*) : Void
  fun g_date_time_get_year(datetime : GDateTime*) : Gint
  fun g_date_time_get_month(datetime : GDateTime*) : Gint
  fun g_date_time_get_day_of_month(datetime : GDateTime*) : Gint
  fun g_date_time_get_week_numbering_year(datetime : GDateTime*) : Gint
  fun g_date_time_get_week_of_year(datetime : GDateTime*) : Gint
  fun g_date_time_get_day_of_week(datetime : GDateTime*) : Gint
  fun g_date_time_get_day_of_year(datetime : GDateTime*) : Gint
  fun g_date_time_get_hour(datetime : GDateTime*) : Gint
  fun g_date_time_get_minute(datetime : GDateTime*) : Gint
  fun g_date_time_get_second(datetime : GDateTime*) : Gint
  fun g_date_time_get_microsecond(datetime : GDateTime*) : Gint
  fun g_date_time_get_seconds(datetime : GDateTime*) : Gdouble
  fun g_date_time_to_unix(datetime : GDateTime*) : Gint64
  fun g_date_time_to_timeval(datetime : GDateTime*, tv : GTimeVal*) : Gboolean
  fun g_date_time_get_utc_offset(datetime : GDateTime*) : GTimeSpan
  fun g_date_time_get_timezone_abbreviation(datetime : GDateTime*) : Gchar*
  fun g_date_time_is_daylight_savings(datetime : GDateTime*) : Gboolean
  fun g_date_time_to_timezone(datetime : GDateTime*, tz : GTimeZone*) : GDateTime*
  fun g_date_time_to_local(datetime : GDateTime*) : GDateTime*
  fun g_date_time_to_utc(datetime : GDateTime*) : GDateTime*
  fun g_date_time_format(datetime : GDateTime*, format : Gchar*) : Gchar*
  fun opendir(__name : UInt8*) : DIR*
  fun fdopendir(__fd : Int32) : DIR*
  fun closedir(__dirp : DIR*) : Int32
  fun readdir(__dirp : DIR*) : Dirent*
  fun readdir_r(__dirp : DIR*, __entry : Dirent*, __result : Dirent**) : Int32
  fun rewinddir(__dirp : DIR*) : Void
  fun seekdir(__dirp : DIR*, __pos : Int64) : Void
  fun telldir(__dirp : DIR*) : Int64
  fun dirfd(__dirp : DIR*) : Int32
  fun scandir(__dir : UInt8*, __namelist : Dirent***, __selector : (Dirent* -> Int32), __cmp : ((Dirent**, Dirent**) -> Int32)) : Int32
  fun alphasort(__e1 : Dirent**, __e2 : Dirent**) : Int32
  fun getdirentries(__fd : Int32, __buf : UInt8*, __nbytes : SizeT, __basep : X__off_t*) : X__ssize_t
  fun g_dir_open(path : Gchar*, flags : Guint, error : GError**) : GDir*
  fun g_dir_read_name(dir : GDir*) : Gchar*
  fun g_dir_rewind(dir : GDir*) : Void
  fun g_dir_close(dir : GDir*) : Void
  fun g_getenv(variable : Gchar*) : Gchar*
  fun g_setenv(variable : Gchar*, value : Gchar*, overwrite : Gboolean) : Gboolean
  fun g_unsetenv(variable : Gchar*) : Void
  fun g_listenv : Gchar**
  fun g_get_environ : Gchar**
  fun g_environ_getenv(envp : Gchar**, variable : Gchar*) : Gchar*
  fun g_environ_setenv(envp : Gchar**, variable : Gchar*, value : Gchar*, overwrite : Gboolean) : Gchar**
  fun g_environ_unsetenv(envp : Gchar**, variable : Gchar*) : Gchar**
  fun g_file_error_quark : GQuark
  fun g_file_error_from_errno(err_no : Gint) : GFileError
  fun g_file_test(filename : Gchar*, test : GFileTest) : Gboolean
  fun g_file_get_contents(filename : Gchar*, contents : Gchar**, length : Gsize*, error : GError**) : Gboolean
  fun g_file_set_contents(filename : Gchar*, contents : Gchar*, length : Gssize, error : GError**) : Gboolean
  fun g_file_read_link(filename : Gchar*, error : GError**) : Gchar*
  fun g_mkdtemp(tmpl : Gchar*) : Gchar*
  fun g_mkdtemp_full(tmpl : Gchar*, mode : Gint) : Gchar*
  fun g_mkstemp(tmpl : Gchar*) : Gint
  fun g_mkstemp_full(tmpl : Gchar*, flags : Gint, mode : Gint) : Gint
  fun g_file_open_tmp(tmpl : Gchar*, name_used : Gchar**, error : GError**) : Gint
  fun g_dir_make_tmp(tmpl : Gchar*, error : GError**) : Gchar*
  fun g_build_path(separator : Gchar*, first_element : Gchar*) : Gchar*
  fun g_build_pathv(separator : Gchar*, args : Gchar**) : Gchar*
  fun g_build_filename(first_element : Gchar*) : Gchar*
  fun g_build_filenamev(args : Gchar**) : Gchar*
  fun g_mkdir_with_parents(pathname : Gchar*, mode : Gint) : Gint
  fun g_path_is_absolute(file_name : Gchar*) : Gboolean
  fun g_path_skip_root(file_name : Gchar*) : Gchar*
  fun g_basename(file_name : Gchar*) : Gchar*
  fun g_get_current_dir : Gchar*
  fun g_path_get_basename(file_name : Gchar*) : Gchar*
  fun g_path_get_dirname(file_name : Gchar*) : Gchar*
  fun g_strip_context(msgid : Gchar*, msgval : Gchar*) : Gchar*
  fun g_dgettext(domain : Gchar*, msgid : Gchar*) : Gchar*
  fun g_dcgettext(domain : Gchar*, msgid : Gchar*, category : Gint) : Gchar*
  fun g_dngettext(domain : Gchar*, msgid : Gchar*, msgid_plural : Gchar*, n : Gulong) : Gchar*
  fun g_dpgettext(domain : Gchar*, msgctxtid : Gchar*, msgidoffset : Gsize) : Gchar*
  fun g_dpgettext2(domain : Gchar*, context : Gchar*, msgid : Gchar*) : Gchar*
  fun g_free(mem : Gpointer) : Void
  fun g_clear_pointer(pp : Gpointer*, destroy : GDestroyNotify) : Void
  fun g_malloc(n_bytes : Gsize) : Gpointer
  fun g_malloc0(n_bytes : Gsize) : Gpointer
  fun g_realloc(mem : Gpointer, n_bytes : Gsize) : Gpointer
  fun g_try_malloc(n_bytes : Gsize) : Gpointer
  fun g_try_malloc0(n_bytes : Gsize) : Gpointer
  fun g_try_realloc(mem : Gpointer, n_bytes : Gsize) : Gpointer
  fun g_malloc_n(n_blocks : Gsize, n_block_bytes : Gsize) : Gpointer
  fun g_malloc0_n(n_blocks : Gsize, n_block_bytes : Gsize) : Gpointer
  fun g_realloc_n(mem : Gpointer, n_blocks : Gsize, n_block_bytes : Gsize) : Gpointer
  fun g_try_malloc_n(n_blocks : Gsize, n_block_bytes : Gsize) : Gpointer
  fun g_try_malloc0_n(n_blocks : Gsize, n_block_bytes : Gsize) : Gpointer
  fun g_try_realloc_n(mem : Gpointer, n_blocks : Gsize, n_block_bytes : Gsize) : Gpointer
  fun g_steal_pointer(pp : Gpointer) : Gpointer
  fun g_mem_set_vtable(vtable : GMemVTable*) : Void
  fun g_mem_is_system_malloc : Gboolean
  fun g_mem_profile : Void
  fun g_node_new(data : Gpointer) : GNode*
  fun g_node_destroy(root : GNode*) : Void
  fun g_node_unlink(node : GNode*) : Void
  fun g_node_copy_deep(node : GNode*, copy_func : GCopyFunc, data : Gpointer) : GNode*
  fun g_node_copy(node : GNode*) : GNode*
  fun g_node_insert(parent : GNode*, position : Gint, node : GNode*) : GNode*
  fun g_node_insert_before(parent : GNode*, sibling : GNode*, node : GNode*) : GNode*
  fun g_node_insert_after(parent : GNode*, sibling : GNode*, node : GNode*) : GNode*
  fun g_node_prepend(parent : GNode*, node : GNode*) : GNode*
  fun g_node_n_nodes(root : GNode*, flags : GTraverseFlags) : Guint
  fun g_node_get_root(node : GNode*) : GNode*
  fun g_node_is_ancestor(node : GNode*, descendant : GNode*) : Gboolean
  fun g_node_depth(node : GNode*) : Guint
  fun g_node_find(root : GNode*, order : GTraverseType, flags : GTraverseFlags, data : Gpointer) : GNode*
  fun g_node_traverse(root : GNode*, order : GTraverseType, flags : GTraverseFlags, max_depth : Gint, func : GNodeTraverseFunc, data : Gpointer) : Void
  fun g_node_max_height(root : GNode*) : Guint
  fun g_node_children_foreach(node : GNode*, flags : GTraverseFlags, func : GNodeForeachFunc, data : Gpointer) : Void
  fun g_node_reverse_children(node : GNode*) : Void
  fun g_node_n_children(node : GNode*) : Guint
  fun g_node_nth_child(node : GNode*, n : Guint) : GNode*
  fun g_node_last_child(node : GNode*) : GNode*
  fun g_node_find_child(node : GNode*, flags : GTraverseFlags, data : Gpointer) : GNode*
  fun g_node_child_position(node : GNode*, child : GNode*) : Gint
  fun g_node_child_index(node : GNode*, data : Gpointer) : Gint
  fun g_node_first_sibling(node : GNode*) : GNode*
  fun g_node_last_sibling(node : GNode*) : GNode*
  fun g_list_alloc : GList*
  fun g_list_free(list : GList*) : Void
  fun g_list_free_1(list : GList*) : Void
  fun g_list_free_full(list : GList*, free_func : GDestroyNotify) : Void
  fun g_list_append(list : GList*, data : Gpointer) : GList*
  fun g_list_prepend(list : GList*, data : Gpointer) : GList*
  fun g_list_insert(list : GList*, data : Gpointer, position : Gint) : GList*
  fun g_list_insert_sorted(list : GList*, data : Gpointer, func : GCompareFunc) : GList*
  fun g_list_insert_sorted_with_data(list : GList*, data : Gpointer, func : GCompareDataFunc, user_data : Gpointer) : GList*
  fun g_list_insert_before(list : GList*, sibling : GList*, data : Gpointer) : GList*
  fun g_list_concat(list1 : GList*, list2 : GList*) : GList*
  fun g_list_remove(list : GList*, data : Gconstpointer) : GList*
  fun g_list_remove_all(list : GList*, data : Gconstpointer) : GList*
  fun g_list_remove_link(list : GList*, llink : GList*) : GList*
  fun g_list_delete_link(list : GList*, link_ : GList*) : GList*
  fun g_list_reverse(list : GList*) : GList*
  fun g_list_copy(list : GList*) : GList*
  fun g_list_copy_deep(list : GList*, func : GCopyFunc, user_data : Gpointer) : GList*
  fun g_list_nth(list : GList*, n : Guint) : GList*
  fun g_list_nth_prev(list : GList*, n : Guint) : GList*
  fun g_list_find(list : GList*, data : Gconstpointer) : GList*
  fun g_list_find_custom(list : GList*, data : Gconstpointer, func : GCompareFunc) : GList*
  fun g_list_position(list : GList*, llink : GList*) : Gint
  fun g_list_index(list : GList*, data : Gconstpointer) : Gint
  fun g_list_last(list : GList*) : GList*
  fun g_list_first(list : GList*) : GList*
  fun g_list_length(list : GList*) : Guint
  fun g_list_foreach(list : GList*, func : GFunc, user_data : Gpointer) : Void
  fun g_list_sort(list : GList*, compare_func : GCompareFunc) : GList*
  fun g_list_sort_with_data(list : GList*, compare_func : GCompareDataFunc, user_data : Gpointer) : GList*
  fun g_list_nth_data(list : GList*, n : Guint) : Gpointer
  fun g_hash_table_new(hash_func : GHashFunc, key_equal_func : GEqualFunc) : GHashTable*
  fun g_hash_table_new_full(hash_func : GHashFunc, key_equal_func : GEqualFunc, key_destroy_func : GDestroyNotify, value_destroy_func : GDestroyNotify) : GHashTable*
  fun g_hash_table_destroy(hash_table : GHashTable*) : Void
  fun g_hash_table_insert(hash_table : GHashTable*, key : Gpointer, value : Gpointer) : Gboolean
  fun g_hash_table_replace(hash_table : GHashTable*, key : Gpointer, value : Gpointer) : Gboolean
  fun g_hash_table_add(hash_table : GHashTable*, key : Gpointer) : Gboolean
  fun g_hash_table_remove(hash_table : GHashTable*, key : Gconstpointer) : Gboolean
  fun g_hash_table_remove_all(hash_table : GHashTable*) : Void
  fun g_hash_table_steal(hash_table : GHashTable*, key : Gconstpointer) : Gboolean
  fun g_hash_table_steal_all(hash_table : GHashTable*) : Void
  fun g_hash_table_lookup(hash_table : GHashTable*, key : Gconstpointer) : Gpointer
  fun g_hash_table_contains(hash_table : GHashTable*, key : Gconstpointer) : Gboolean
  fun g_hash_table_lookup_extended(hash_table : GHashTable*, lookup_key : Gconstpointer, orig_key : Gpointer*, value : Gpointer*) : Gboolean
  fun g_hash_table_foreach(hash_table : GHashTable*, func : GHFunc, user_data : Gpointer) : Void
  fun g_hash_table_find(hash_table : GHashTable*, predicate : GHRFunc, user_data : Gpointer) : Gpointer
  fun g_hash_table_foreach_remove(hash_table : GHashTable*, func : GHRFunc, user_data : Gpointer) : Guint
  fun g_hash_table_foreach_steal(hash_table : GHashTable*, func : GHRFunc, user_data : Gpointer) : Guint
  fun g_hash_table_size(hash_table : GHashTable*) : Guint
  fun g_hash_table_get_keys(hash_table : GHashTable*) : GList*
  fun g_hash_table_get_values(hash_table : GHashTable*) : GList*
  fun g_hash_table_get_keys_as_array(hash_table : GHashTable*, length : Guint*) : Gpointer*
  fun g_hash_table_iter_init(iter : GHashTableIter*, hash_table : GHashTable*) : Void
  fun g_hash_table_iter_next(iter : GHashTableIter*, key : Gpointer*, value : Gpointer*) : Gboolean
  fun g_hash_table_iter_get_hash_table(iter : GHashTableIter*) : GHashTable*
  fun g_hash_table_iter_remove(iter : GHashTableIter*) : Void
  fun g_hash_table_iter_replace(iter : GHashTableIter*, value : Gpointer) : Void
  fun g_hash_table_iter_steal(iter : GHashTableIter*) : Void
  fun g_hash_table_ref(hash_table : GHashTable*) : GHashTable*
  fun g_hash_table_unref(hash_table : GHashTable*) : Void
  fun g_str_equal(v1 : Gconstpointer, v2 : Gconstpointer) : Gboolean
  fun g_str_hash(v : Gconstpointer) : Guint
  fun g_int_equal(v1 : Gconstpointer, v2 : Gconstpointer) : Gboolean
  fun g_int_hash(v : Gconstpointer) : Guint
  fun g_int64_equal(v1 : Gconstpointer, v2 : Gconstpointer) : Gboolean
  fun g_int64_hash(v : Gconstpointer) : Guint
  fun g_double_equal(v1 : Gconstpointer, v2 : Gconstpointer) : Gboolean
  fun g_double_hash(v : Gconstpointer) : Guint
  fun g_direct_hash(v : Gconstpointer) : Guint
  fun g_direct_equal(v1 : Gconstpointer, v2 : Gconstpointer) : Gboolean
  fun g_hmac_new(digest_type : GChecksumType, key : Guchar*, key_len : Gsize) : GHmac*
  fun g_hmac_copy(hmac : GHmac*) : GHmac*
  fun g_hmac_ref(hmac : GHmac*) : GHmac*
  fun g_hmac_unref(hmac : GHmac*) : Void
  fun g_hmac_update(hmac : GHmac*, data : Guchar*, length : Gssize) : Void
  fun g_hmac_get_string(hmac : GHmac*) : Gchar*
  fun g_hmac_get_digest(hmac : GHmac*, buffer : Guint8*, digest_len : Gsize*) : Void
  fun g_compute_hmac_for_data(digest_type : GChecksumType, key : Guchar*, key_len : Gsize, data : Guchar*, length : Gsize) : Gchar*
  fun g_compute_hmac_for_string(digest_type : GChecksumType, key : Guchar*, key_len : Gsize, str : Gchar*, length : Gssize) : Gchar*
  fun g_hook_list_init(hook_list : GHookList*, hook_size : Guint) : Void
  fun g_hook_list_clear(hook_list : GHookList*) : Void
  fun g_hook_alloc(hook_list : GHookList*) : GHook*
  fun g_hook_free(hook_list : GHookList*, hook : GHook*) : Void
  fun g_hook_ref(hook_list : GHookList*, hook : GHook*) : GHook*
  fun g_hook_unref(hook_list : GHookList*, hook : GHook*) : Void
  fun g_hook_destroy(hook_list : GHookList*, hook_id : Gulong) : Gboolean
  fun g_hook_destroy_link(hook_list : GHookList*, hook : GHook*) : Void
  fun g_hook_prepend(hook_list : GHookList*, hook : GHook*) : Void
  fun g_hook_insert_before(hook_list : GHookList*, sibling : GHook*, hook : GHook*) : Void
  fun g_hook_insert_sorted(hook_list : GHookList*, hook : GHook*, func : GHookCompareFunc) : Void
  fun g_hook_get(hook_list : GHookList*, hook_id : Gulong) : GHook*
  fun g_hook_find(hook_list : GHookList*, need_valids : Gboolean, func : GHookFindFunc, data : Gpointer) : GHook*
  fun g_hook_find_data(hook_list : GHookList*, need_valids : Gboolean, data : Gpointer) : GHook*
  fun g_hook_find_func(hook_list : GHookList*, need_valids : Gboolean, func : Gpointer) : GHook*
  fun g_hook_find_func_data(hook_list : GHookList*, need_valids : Gboolean, func : Gpointer, data : Gpointer) : GHook*
  fun g_hook_first_valid(hook_list : GHookList*, may_be_in_call : Gboolean) : GHook*
  fun g_hook_next_valid(hook_list : GHookList*, hook : GHook*, may_be_in_call : Gboolean) : GHook*
  fun g_hook_compare_ids(new_hook : GHook*, sibling : GHook*) : Gint
  fun g_hook_list_invoke(hook_list : GHookList*, may_recurse : Gboolean) : Void
  fun g_hook_list_invoke_check(hook_list : GHookList*, may_recurse : Gboolean) : Void
  fun g_hook_list_marshal(hook_list : GHookList*, may_recurse : Gboolean, marshaller : GHookMarshaller, marshal_data : Gpointer) : Void
  fun g_hook_list_marshal_check(hook_list : GHookList*, may_recurse : Gboolean, marshaller : GHookCheckMarshaller, marshal_data : Gpointer) : Void
  fun g_hostname_is_non_ascii(hostname : Gchar*) : Gboolean
  fun g_hostname_is_ascii_encoded(hostname : Gchar*) : Gboolean
  fun g_hostname_is_ip_address(hostname : Gchar*) : Gboolean
  fun g_hostname_to_ascii(hostname : Gchar*) : Gchar*
  fun g_hostname_to_unicode(hostname : Gchar*) : Gchar*
  fun g_poll(fds : GPollFD*, nfds : Guint, timeout : Gint) : Gint
  fun g_slist_alloc : GSList*
  fun g_slist_free(list : GSList*) : Void
  fun g_slist_free_1(list : GSList*) : Void
  fun g_slist_free_full(list : GSList*, free_func : GDestroyNotify) : Void
  fun g_slist_append(list : GSList*, data : Gpointer) : GSList*
  fun g_slist_prepend(list : GSList*, data : Gpointer) : GSList*
  fun g_slist_insert(list : GSList*, data : Gpointer, position : Gint) : GSList*
  fun g_slist_insert_sorted(list : GSList*, data : Gpointer, func : GCompareFunc) : GSList*
  fun g_slist_insert_sorted_with_data(list : GSList*, data : Gpointer, func : GCompareDataFunc, user_data : Gpointer) : GSList*
  fun g_slist_insert_before(slist : GSList*, sibling : GSList*, data : Gpointer) : GSList*
  fun g_slist_concat(list1 : GSList*, list2 : GSList*) : GSList*
  fun g_slist_remove(list : GSList*, data : Gconstpointer) : GSList*
  fun g_slist_remove_all(list : GSList*, data : Gconstpointer) : GSList*
  fun g_slist_remove_link(list : GSList*, link_ : GSList*) : GSList*
  fun g_slist_delete_link(list : GSList*, link_ : GSList*) : GSList*
  fun g_slist_reverse(list : GSList*) : GSList*
  fun g_slist_copy(list : GSList*) : GSList*
  fun g_slist_copy_deep(list : GSList*, func : GCopyFunc, user_data : Gpointer) : GSList*
  fun g_slist_nth(list : GSList*, n : Guint) : GSList*
  fun g_slist_find(list : GSList*, data : Gconstpointer) : GSList*
  fun g_slist_find_custom(list : GSList*, data : Gconstpointer, func : GCompareFunc) : GSList*
  fun g_slist_position(list : GSList*, llink : GSList*) : Gint
  fun g_slist_index(list : GSList*, data : Gconstpointer) : Gint
  fun g_slist_last(list : GSList*) : GSList*
  fun g_slist_length(list : GSList*) : Guint
  fun g_slist_foreach(list : GSList*, func : GFunc, user_data : Gpointer) : Void
  fun g_slist_sort(list : GSList*, compare_func : GCompareFunc) : GSList*
  fun g_slist_sort_with_data(list : GSList*, compare_func : GCompareDataFunc, user_data : Gpointer) : GSList*
  fun g_slist_nth_data(list : GSList*, n : Guint) : Gpointer
  fun g_main_context_new : GMainContext*
  fun g_main_context_ref(context : GMainContext*) : GMainContext*
  fun g_main_context_unref(context : GMainContext*) : Void
  fun g_main_context_default : GMainContext*
  fun g_main_context_iteration(context : GMainContext*, may_block : Gboolean) : Gboolean
  fun g_main_context_pending(context : GMainContext*) : Gboolean
  fun g_main_context_find_source_by_id(context : GMainContext*, source_id : Guint) : GSource*
  fun g_main_context_find_source_by_user_data(context : GMainContext*, user_data : Gpointer) : GSource*
  fun g_main_context_find_source_by_funcs_user_data(context : GMainContext*, funcs : GSourceFuncs*, user_data : Gpointer) : GSource*
  fun g_main_context_wakeup(context : GMainContext*) : Void
  fun g_main_context_acquire(context : GMainContext*) : Gboolean
  fun g_main_context_release(context : GMainContext*) : Void
  fun g_main_context_is_owner(context : GMainContext*) : Gboolean
  fun g_main_context_wait(context : GMainContext*, cond : GCond*, mutex : GMutex*) : Gboolean
  fun g_main_context_prepare(context : GMainContext*, priority : Gint*) : Gboolean
  fun g_main_context_query(context : GMainContext*, max_priority : Gint, timeout_ : Gint*, fds : GPollFD*, n_fds : Gint) : Gint
  fun g_main_context_check(context : GMainContext*, max_priority : Gint, fds : GPollFD*, n_fds : Gint) : Gint
  fun g_main_context_dispatch(context : GMainContext*) : Void
  fun g_main_context_set_poll_func(context : GMainContext*, func : GPollFunc) : Void
  fun g_main_context_get_poll_func(context : GMainContext*) : GPollFunc
  fun g_main_context_add_poll(context : GMainContext*, fd : GPollFD*, priority : Gint) : Void
  fun g_main_context_remove_poll(context : GMainContext*, fd : GPollFD*) : Void
  fun g_main_depth : Gint
  fun g_main_current_source : GSource*
  fun g_main_context_push_thread_default(context : GMainContext*) : Void
  fun g_main_context_pop_thread_default(context : GMainContext*) : Void
  fun g_main_context_get_thread_default : GMainContext*
  fun g_main_context_ref_thread_default : GMainContext*
  fun g_main_loop_new(context : GMainContext*, is_running : Gboolean) : GMainLoop*
  fun g_main_loop_run(loop : GMainLoop*) : Void
  fun g_main_loop_quit(loop : GMainLoop*) : Void
  fun g_main_loop_ref(loop : GMainLoop*) : GMainLoop*
  fun g_main_loop_unref(loop : GMainLoop*) : Void
  fun g_main_loop_is_running(loop : GMainLoop*) : Gboolean
  fun g_main_loop_get_context(loop : GMainLoop*) : GMainContext*
  fun g_source_new(source_funcs : GSourceFuncs*, struct_size : Guint) : GSource*
  fun g_source_ref(source : GSource*) : GSource*
  fun g_source_unref(source : GSource*) : Void
  fun g_source_attach(source : GSource*, context : GMainContext*) : Guint
  fun g_source_destroy(source : GSource*) : Void
  fun g_source_set_priority(source : GSource*, priority : Gint) : Void
  fun g_source_get_priority(source : GSource*) : Gint
  fun g_source_set_can_recurse(source : GSource*, can_recurse : Gboolean) : Void
  fun g_source_get_can_recurse(source : GSource*) : Gboolean
  fun g_source_get_id(source : GSource*) : Guint
  fun g_source_get_context(source : GSource*) : GMainContext*
  fun g_source_set_callback(source : GSource*, func : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Void
  fun g_source_set_funcs(source : GSource*, funcs : GSourceFuncs*) : Void
  fun g_source_is_destroyed(source : GSource*) : Gboolean
  fun g_source_set_name(source : GSource*, name : UInt8*) : Void
  fun g_source_get_name(source : GSource*) : UInt8*
  fun g_source_set_name_by_id(tag : Guint, name : UInt8*) : Void
  fun g_source_set_ready_time(source : GSource*, ready_time : Gint64) : Void
  fun g_source_get_ready_time(source : GSource*) : Gint64
  fun g_source_add_unix_fd(source : GSource*, fd : Gint, events : GIOCondition) : Gpointer
  fun g_source_modify_unix_fd(source : GSource*, tag : Gpointer, new_events : GIOCondition) : Void
  fun g_source_remove_unix_fd(source : GSource*, tag : Gpointer) : Void
  fun g_source_query_unix_fd(source : GSource*, tag : Gpointer) : GIOCondition
  fun g_source_set_callback_indirect(source : GSource*, callback_data : Gpointer, callback_funcs : GSourceCallbackFuncs*) : Void
  fun g_source_add_poll(source : GSource*, fd : GPollFD*) : Void
  fun g_source_remove_poll(source : GSource*, fd : GPollFD*) : Void
  fun g_source_add_child_source(source : GSource*, child_source : GSource*) : Void
  fun g_source_remove_child_source(source : GSource*, child_source : GSource*) : Void
  fun g_source_get_current_time(source : GSource*, timeval : GTimeVal*) : Void
  fun g_source_get_time(source : GSource*) : Gint64
  fun g_idle_source_new : GSource*
  fun g_child_watch_source_new(pid : GPid) : GSource*
  fun g_timeout_source_new(interval : Guint) : GSource*
  fun g_timeout_source_new_seconds(interval : Guint) : GSource*
  fun g_get_current_time(result : GTimeVal*) : Void
  fun g_get_monotonic_time : Gint64
  fun g_get_real_time : Gint64
  fun g_source_remove(tag : Guint) : Gboolean
  fun g_source_remove_by_user_data(user_data : Gpointer) : Gboolean
  fun g_source_remove_by_funcs_user_data(funcs : GSourceFuncs*, user_data : Gpointer) : Gboolean
  fun g_timeout_add_full(priority : Gint, interval : Guint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun g_timeout_add(interval : Guint, function : GSourceFunc, data : Gpointer) : Guint
  fun g_timeout_add_seconds_full(priority : Gint, interval : Guint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun g_timeout_add_seconds(interval : Guint, function : GSourceFunc, data : Gpointer) : Guint
  fun g_child_watch_add_full(priority : Gint, pid : GPid, function : GChildWatchFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun g_child_watch_add(pid : GPid, function : GChildWatchFunc, data : Gpointer) : Guint
  fun g_idle_add(function : GSourceFunc, data : Gpointer) : Guint
  fun g_idle_add_full(priority : Gint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun g_idle_remove_by_data(data : Gpointer) : Gboolean
  fun g_main_context_invoke_full(context : GMainContext*, priority : Gint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Void
  fun g_main_context_invoke(context : GMainContext*, function : GSourceFunc, data : Gpointer) : Void
  fun g_unicode_script_to_iso15924(script : GUnicodeScript) : Guint32
  fun g_unicode_script_from_iso15924(iso15924 : Guint32) : GUnicodeScript
  fun g_unichar_isalnum(c : Gunichar) : Gboolean
  fun g_unichar_isalpha(c : Gunichar) : Gboolean
  fun g_unichar_iscntrl(c : Gunichar) : Gboolean
  fun g_unichar_isdigit(c : Gunichar) : Gboolean
  fun g_unichar_isgraph(c : Gunichar) : Gboolean
  fun g_unichar_islower(c : Gunichar) : Gboolean
  fun g_unichar_isprint(c : Gunichar) : Gboolean
  fun g_unichar_ispunct(c : Gunichar) : Gboolean
  fun g_unichar_isspace(c : Gunichar) : Gboolean
  fun g_unichar_isupper(c : Gunichar) : Gboolean
  fun g_unichar_isxdigit(c : Gunichar) : Gboolean
  fun g_unichar_istitle(c : Gunichar) : Gboolean
  fun g_unichar_isdefined(c : Gunichar) : Gboolean
  fun g_unichar_iswide(c : Gunichar) : Gboolean
  fun g_unichar_iswide_cjk(c : Gunichar) : Gboolean
  fun g_unichar_iszerowidth(c : Gunichar) : Gboolean
  fun g_unichar_ismark(c : Gunichar) : Gboolean
  fun g_unichar_toupper(c : Gunichar) : Gunichar
  fun g_unichar_tolower(c : Gunichar) : Gunichar
  fun g_unichar_totitle(c : Gunichar) : Gunichar
  fun g_unichar_digit_value(c : Gunichar) : Gint
  fun g_unichar_xdigit_value(c : Gunichar) : Gint
  fun g_unichar_type(c : Gunichar) : GUnicodeType
  fun g_unichar_break_type(c : Gunichar) : GUnicodeBreakType
  fun g_unichar_combining_class(uc : Gunichar) : Gint
  fun g_unichar_get_mirror_char(ch : Gunichar, mirrored_ch : Gunichar*) : Gboolean
  fun g_unichar_get_script(ch : Gunichar) : GUnicodeScript
  fun g_unichar_validate(ch : Gunichar) : Gboolean
  fun g_unichar_compose(a : Gunichar, b : Gunichar, ch : Gunichar*) : Gboolean
  fun g_unichar_decompose(ch : Gunichar, a : Gunichar*, b : Gunichar*) : Gboolean
  fun g_unichar_fully_decompose(ch : Gunichar, compat : Gboolean, result : Gunichar*, result_len : Gsize) : Gsize
  fun g_unicode_canonical_ordering(string : Gunichar*, len : Gsize) : Void
  fun g_unicode_canonical_decomposition(ch : Gunichar, result_len : Gsize*) : Gunichar*
  fun g_utf8_get_char(p : Gchar*) : Gunichar
  fun g_utf8_get_char_validated(p : Gchar*, max_len : Gssize) : Gunichar
  fun g_utf8_offset_to_pointer(str : Gchar*, offset : Glong) : Gchar*
  fun g_utf8_pointer_to_offset(str : Gchar*, pos : Gchar*) : Glong
  fun g_utf8_prev_char(p : Gchar*) : Gchar*
  fun g_utf8_find_next_char(p : Gchar*, end : Gchar*) : Gchar*
  fun g_utf8_find_prev_char(str : Gchar*, p : Gchar*) : Gchar*
  fun g_utf8_strlen(p : Gchar*, max : Gssize) : Glong
  fun g_utf8_substring(str : Gchar*, start_pos : Glong, end_pos : Glong) : Gchar*
  fun g_utf8_strncpy(dest : Gchar*, src : Gchar*, n : Gsize) : Gchar*
  fun g_utf8_strchr(p : Gchar*, len : Gssize, c : Gunichar) : Gchar*
  fun g_utf8_strrchr(p : Gchar*, len : Gssize, c : Gunichar) : Gchar*
  fun g_utf8_strreverse(str : Gchar*, len : Gssize) : Gchar*
  fun g_utf8_to_utf16(str : Gchar*, len : Glong, items_read : Glong*, items_written : Glong*, error : GError**) : Gunichar2*
  fun g_utf8_to_ucs4(str : Gchar*, len : Glong, items_read : Glong*, items_written : Glong*, error : GError**) : Gunichar*
  fun g_utf8_to_ucs4_fast(str : Gchar*, len : Glong, items_written : Glong*) : Gunichar*
  fun g_utf16_to_ucs4(str : Gunichar2*, len : Glong, items_read : Glong*, items_written : Glong*, error : GError**) : Gunichar*
  fun g_utf16_to_utf8(str : Gunichar2*, len : Glong, items_read : Glong*, items_written : Glong*, error : GError**) : Gchar*
  fun g_ucs4_to_utf16(str : Gunichar*, len : Glong, items_read : Glong*, items_written : Glong*, error : GError**) : Gunichar2*
  fun g_ucs4_to_utf8(str : Gunichar*, len : Glong, items_read : Glong*, items_written : Glong*, error : GError**) : Gchar*
  fun g_unichar_to_utf8(c : Gunichar, outbuf : Gchar*) : Gint
  fun g_utf8_validate(str : Gchar*, max_len : Gssize, end : Gchar**) : Gboolean
  fun g_utf8_strup(str : Gchar*, len : Gssize) : Gchar*
  fun g_utf8_strdown(str : Gchar*, len : Gssize) : Gchar*
  fun g_utf8_casefold(str : Gchar*, len : Gssize) : Gchar*
  fun g_utf8_normalize(str : Gchar*, len : Gssize, mode : GNormalizeMode) : Gchar*
  fun g_utf8_collate(str1 : Gchar*, str2 : Gchar*) : Gint
  fun g_utf8_collate_key(str : Gchar*, len : Gssize) : Gchar*
  fun g_utf8_collate_key_for_filename(str : Gchar*, len : Gssize) : Gchar*
  fun _g_utf8_make_valid(name : Gchar*) : Gchar*
  fun g_string_new(init : Gchar*) : GString*
  fun g_string_new_len(init : Gchar*, len : Gssize) : GString*
  fun g_string_sized_new(dfl_size : Gsize) : GString*
  fun g_string_free(string : GString*, free_segment : Gboolean) : Gchar*
  fun g_string_free_to_bytes(string : GString*) : GBytes*
  fun g_string_equal(v : GString*, v2 : GString*) : Gboolean
  fun g_string_hash(str : GString*) : Guint
  fun g_string_assign(string : GString*, rval : Gchar*) : GString*
  fun g_string_truncate(string : GString*, len : Gsize) : GString*
  fun g_string_set_size(string : GString*, len : Gsize) : GString*
  fun g_string_insert_len(string : GString*, pos : Gssize, val : Gchar*, len : Gssize) : GString*
  fun g_string_append(string : GString*, val : Gchar*) : GString*
  fun g_string_append_len(string : GString*, val : Gchar*, len : Gssize) : GString*
  fun g_string_append_c(string : GString*, c : Gchar) : GString*
  fun g_string_append_unichar(string : GString*, wc : Gunichar) : GString*
  fun g_string_prepend(string : GString*, val : Gchar*) : GString*
  fun g_string_prepend_c(string : GString*, c : Gchar) : GString*
  fun g_string_prepend_unichar(string : GString*, wc : Gunichar) : GString*
  fun g_string_prepend_len(string : GString*, val : Gchar*, len : Gssize) : GString*
  fun g_string_insert(string : GString*, pos : Gssize, val : Gchar*) : GString*
  fun g_string_insert_c(string : GString*, pos : Gssize, c : Gchar) : GString*
  fun g_string_insert_unichar(string : GString*, pos : Gssize, wc : Gunichar) : GString*
  fun g_string_overwrite(string : GString*, pos : Gsize, val : Gchar*) : GString*
  fun g_string_overwrite_len(string : GString*, pos : Gsize, val : Gchar*, len : Gssize) : GString*
  fun g_string_erase(string : GString*, pos : Gssize, len : Gssize) : GString*
  fun g_string_ascii_down(string : GString*) : GString*
  fun g_string_ascii_up(string : GString*) : GString*
  fun g_string_vprintf(string : GString*, format : Gchar*, args : X__va_list_tag*) : Void
  fun g_string_printf(string : GString*, format : Gchar*) : Void
  fun g_string_append_vprintf(string : GString*, format : Gchar*, args : X__va_list_tag*) : Void
  fun g_string_append_printf(string : GString*, format : Gchar*) : Void
  fun g_string_append_uri_escaped(string : GString*, unescaped : Gchar*, reserved_chars_allowed : Gchar*, allow_utf8 : Gboolean) : GString*
  fun g_string_append_c_inline(gstring : GString*, c : Gchar) : GString*
  fun g_string_down(string : GString*) : GString*
  fun g_string_up(string : GString*) : GString*
  fun g_io_channel_init(channel : GIOChannel*) : Void
  fun g_io_channel_ref(channel : GIOChannel*) : GIOChannel*
  fun g_io_channel_unref(channel : GIOChannel*) : Void
  fun g_io_channel_read(channel : GIOChannel*, buf : Gchar*, count : Gsize, bytes_read : Gsize*) : GIOError
  fun g_io_channel_write(channel : GIOChannel*, buf : Gchar*, count : Gsize, bytes_written : Gsize*) : GIOError
  fun g_io_channel_seek(channel : GIOChannel*, offset : Gint64, type : GSeekType) : GIOError
  fun g_io_channel_close(channel : GIOChannel*) : Void
  fun g_io_channel_shutdown(channel : GIOChannel*, flush : Gboolean, err : GError**) : GIOStatus
  fun g_io_add_watch_full(channel : GIOChannel*, priority : Gint, condition : GIOCondition, func : GIOFunc, user_data : Gpointer, notify : GDestroyNotify) : Guint
  fun g_io_create_watch(channel : GIOChannel*, condition : GIOCondition) : GSource*
  fun g_io_add_watch(channel : GIOChannel*, condition : GIOCondition, func : GIOFunc, user_data : Gpointer) : Guint
  fun g_io_channel_set_buffer_size(channel : GIOChannel*, size : Gsize) : Void
  fun g_io_channel_get_buffer_size(channel : GIOChannel*) : Gsize
  fun g_io_channel_get_buffer_condition(channel : GIOChannel*) : GIOCondition
  fun g_io_channel_set_flags(channel : GIOChannel*, flags : GIOFlags, error : GError**) : GIOStatus
  fun g_io_channel_get_flags(channel : GIOChannel*) : GIOFlags
  fun g_io_channel_set_line_term(channel : GIOChannel*, line_term : Gchar*, length : Gint) : Void
  fun g_io_channel_get_line_term(channel : GIOChannel*, length : Gint*) : Gchar*
  fun g_io_channel_set_buffered(channel : GIOChannel*, buffered : Gboolean) : Void
  fun g_io_channel_get_buffered(channel : GIOChannel*) : Gboolean
  fun g_io_channel_set_encoding(channel : GIOChannel*, encoding : Gchar*, error : GError**) : GIOStatus
  fun g_io_channel_get_encoding(channel : GIOChannel*) : Gchar*
  fun g_io_channel_set_close_on_unref(channel : GIOChannel*, do_close : Gboolean) : Void
  fun g_io_channel_get_close_on_unref(channel : GIOChannel*) : Gboolean
  fun g_io_channel_flush(channel : GIOChannel*, error : GError**) : GIOStatus
  fun g_io_channel_read_line(channel : GIOChannel*, str_return : Gchar**, length : Gsize*, terminator_pos : Gsize*, error : GError**) : GIOStatus
  fun g_io_channel_read_line_string(channel : GIOChannel*, buffer : GString*, terminator_pos : Gsize*, error : GError**) : GIOStatus
  fun g_io_channel_read_to_end(channel : GIOChannel*, str_return : Gchar**, length : Gsize*, error : GError**) : GIOStatus
  fun g_io_channel_read_chars(channel : GIOChannel*, buf : Gchar*, count : Gsize, bytes_read : Gsize*, error : GError**) : GIOStatus
  fun g_io_channel_read_unichar(channel : GIOChannel*, thechar : Gunichar*, error : GError**) : GIOStatus
  fun g_io_channel_write_chars(channel : GIOChannel*, buf : Gchar*, count : Gssize, bytes_written : Gsize*, error : GError**) : GIOStatus
  fun g_io_channel_write_unichar(channel : GIOChannel*, thechar : Gunichar, error : GError**) : GIOStatus
  fun g_io_channel_seek_position(channel : GIOChannel*, offset : Gint64, type : GSeekType, error : GError**) : GIOStatus
  fun g_io_channel_new_file(filename : Gchar*, mode : Gchar*, error : GError**) : GIOChannel*
  fun g_io_channel_error_quark : GQuark
  fun g_io_channel_error_from_errno(en : Gint) : GIOChannelError
  fun g_io_channel_unix_new(fd : Int32) : GIOChannel*
  fun g_io_channel_unix_get_fd(channel : GIOChannel*) : Gint
  fun g_key_file_error_quark : GQuark
  fun g_key_file_new : GKeyFile*
  fun g_key_file_ref(key_file : GKeyFile*) : GKeyFile*
  fun g_key_file_unref(key_file : GKeyFile*) : Void
  fun g_key_file_free(key_file : GKeyFile*) : Void
  fun g_key_file_set_list_separator(key_file : GKeyFile*, separator : Gchar) : Void
  fun g_key_file_load_from_file(key_file : GKeyFile*, file : Gchar*, flags : GKeyFileFlags, error : GError**) : Gboolean
  fun g_key_file_load_from_data(key_file : GKeyFile*, data : Gchar*, length : Gsize, flags : GKeyFileFlags, error : GError**) : Gboolean
  fun g_key_file_load_from_dirs(key_file : GKeyFile*, file : Gchar*, search_dirs : Gchar**, full_path : Gchar**, flags : GKeyFileFlags, error : GError**) : Gboolean
  fun g_key_file_load_from_data_dirs(key_file : GKeyFile*, file : Gchar*, full_path : Gchar**, flags : GKeyFileFlags, error : GError**) : Gboolean
  fun g_key_file_to_data(key_file : GKeyFile*, length : Gsize*, error : GError**) : Gchar*
  fun g_key_file_save_to_file(key_file : GKeyFile*, filename : Gchar*, error : GError**) : Gboolean
  fun g_key_file_get_start_group(key_file : GKeyFile*) : Gchar*
  fun g_key_file_get_groups(key_file : GKeyFile*, length : Gsize*) : Gchar**
  fun g_key_file_get_keys(key_file : GKeyFile*, group_name : Gchar*, length : Gsize*, error : GError**) : Gchar**
  fun g_key_file_has_group(key_file : GKeyFile*, group_name : Gchar*) : Gboolean
  fun g_key_file_has_key(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gboolean
  fun g_key_file_get_value(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gchar*
  fun g_key_file_set_value(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, value : Gchar*) : Void
  fun g_key_file_get_string(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gchar*
  fun g_key_file_set_string(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, string : Gchar*) : Void
  fun g_key_file_get_locale_string(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, locale : Gchar*, error : GError**) : Gchar*
  fun g_key_file_set_locale_string(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, locale : Gchar*, string : Gchar*) : Void
  fun g_key_file_get_boolean(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gboolean
  fun g_key_file_set_boolean(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, value : Gboolean) : Void
  fun g_key_file_get_integer(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gint
  fun g_key_file_set_integer(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, value : Gint) : Void
  fun g_key_file_get_int64(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gint64
  fun g_key_file_set_int64(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, value : Gint64) : Void
  fun g_key_file_get_uint64(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Guint64
  fun g_key_file_set_uint64(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, value : Guint64) : Void
  fun g_key_file_get_double(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gdouble
  fun g_key_file_set_double(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, value : Gdouble) : Void
  fun g_key_file_get_string_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, length : Gsize*, error : GError**) : Gchar**
  fun g_key_file_set_string_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, list : Gchar**, length : Gsize) : Void
  fun g_key_file_get_locale_string_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, locale : Gchar*, length : Gsize*, error : GError**) : Gchar**
  fun g_key_file_set_locale_string_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, locale : Gchar*, list : Gchar**, length : Gsize) : Void
  fun g_key_file_get_boolean_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, length : Gsize*, error : GError**) : Gboolean*
  fun g_key_file_set_boolean_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, list : Gboolean*, length : Gsize) : Void
  fun g_key_file_get_integer_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, length : Gsize*, error : GError**) : Gint*
  fun g_key_file_set_double_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, list : Gdouble*, length : Gsize) : Void
  fun g_key_file_get_double_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, length : Gsize*, error : GError**) : Gdouble*
  fun g_key_file_set_integer_list(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, list : Gint*, length : Gsize) : Void
  fun g_key_file_set_comment(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, comment : Gchar*, error : GError**) : Gboolean
  fun g_key_file_get_comment(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gchar*
  fun g_key_file_remove_comment(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gboolean
  fun g_key_file_remove_key(key_file : GKeyFile*, group_name : Gchar*, key : Gchar*, error : GError**) : Gboolean
  fun g_key_file_remove_group(key_file : GKeyFile*, group_name : Gchar*, error : GError**) : Gboolean
  fun g_mapped_file_new(filename : Gchar*, writable : Gboolean, error : GError**) : GMappedFile*
  fun g_mapped_file_new_from_fd(fd : Gint, writable : Gboolean, error : GError**) : GMappedFile*
  fun g_mapped_file_get_length(file : GMappedFile*) : Gsize
  fun g_mapped_file_get_contents(file : GMappedFile*) : Gchar*
  fun g_mapped_file_get_bytes(file : GMappedFile*) : GBytes*
  fun g_mapped_file_ref(file : GMappedFile*) : GMappedFile*
  fun g_mapped_file_unref(file : GMappedFile*) : Void
  fun g_mapped_file_free(file : GMappedFile*) : Void
  fun g_markup_error_quark : GQuark
  fun g_markup_parse_context_new(parser : GMarkupParser*, flags : GMarkupParseFlags, user_data : Gpointer, user_data_dnotify : GDestroyNotify) : GMarkupParseContext*
  fun g_markup_parse_context_ref(context : GMarkupParseContext*) : GMarkupParseContext*
  fun g_markup_parse_context_unref(context : GMarkupParseContext*) : Void
  fun g_markup_parse_context_free(context : GMarkupParseContext*) : Void
  fun g_markup_parse_context_parse(context : GMarkupParseContext*, text : Gchar*, text_len : Gssize, error : GError**) : Gboolean
  fun g_markup_parse_context_push(context : GMarkupParseContext*, parser : GMarkupParser*, user_data : Gpointer) : Void
  fun g_markup_parse_context_pop(context : GMarkupParseContext*) : Gpointer
  fun g_markup_parse_context_end_parse(context : GMarkupParseContext*, error : GError**) : Gboolean
  fun g_markup_parse_context_get_element(context : GMarkupParseContext*) : Gchar*
  fun g_markup_parse_context_get_element_stack(context : GMarkupParseContext*) : GSList*
  fun g_markup_parse_context_get_position(context : GMarkupParseContext*, line_number : Gint*, char_number : Gint*) : Void
  fun g_markup_parse_context_get_user_data(context : GMarkupParseContext*) : Gpointer
  fun g_markup_escape_text(text : Gchar*, length : Gssize) : Gchar*
  fun g_markup_printf_escaped(format : UInt8*) : Gchar*
  fun g_markup_vprintf_escaped(format : UInt8*, args : X__va_list_tag*) : Gchar*
  fun g_markup_collect_attributes(element_name : Gchar*, attribute_names : Gchar**, attribute_values : Gchar**, error : GError**, first_type : GMarkupCollectType, first_attr : Gchar*) : Gboolean
  fun g_printf_string_upper_bound(format : Gchar*, args : X__va_list_tag*) : Gsize
  fun g_log_set_handler(log_domain : Gchar*, log_levels : GLogLevelFlags, log_func : GLogFunc, user_data : Gpointer) : Guint
  fun g_log_set_handler_full(log_domain : Gchar*, log_levels : GLogLevelFlags, log_func : GLogFunc, user_data : Gpointer, destroy : GDestroyNotify) : Guint
  fun g_log_remove_handler(log_domain : Gchar*, handler_id : Guint) : Void
  fun g_log_default_handler(log_domain : Gchar*, log_level : GLogLevelFlags, message : Gchar*, unused_data : Gpointer) : Void
  fun g_log_set_default_handler(log_func : GLogFunc, user_data : Gpointer) : GLogFunc
  fun g_log(log_domain : Gchar*, log_level : GLogLevelFlags, format : Gchar*) : Void
  fun g_logv(log_domain : Gchar*, log_level : GLogLevelFlags, format : Gchar*, args : X__va_list_tag*) : Void
  fun g_log_set_fatal_mask(log_domain : Gchar*, fatal_mask : GLogLevelFlags) : GLogLevelFlags
  fun g_log_set_always_fatal(fatal_mask : GLogLevelFlags) : GLogLevelFlags
  fun _g_log_fallback_handler(log_domain : Gchar*, log_level : GLogLevelFlags, message : Gchar*, unused_data : Gpointer) : Void
  fun g_return_if_fail_warning(log_domain : UInt8*, pretty_function : UInt8*, expression : UInt8*) : Void
  fun g_warn_message(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, warnexpr : UInt8*) : Void
  fun g_assert_warning(log_domain : UInt8*, file : UInt8*, line : Int32, pretty_function : UInt8*, expression : UInt8*) : Void
  fun g_print(format : Gchar*) : Void
  fun g_set_print_handler(func : GPrintFunc) : GPrintFunc
  fun g_printerr(format : Gchar*) : Void
  fun g_set_printerr_handler(func : GPrintFunc) : GPrintFunc
  fun g_option_error_quark : GQuark
  fun g_option_context_new(parameter_string : Gchar*) : GOptionContext*
  fun g_option_context_set_summary(context : GOptionContext*, summary : Gchar*) : Void
  fun g_option_context_get_summary(context : GOptionContext*) : Gchar*
  fun g_option_context_set_description(context : GOptionContext*, description : Gchar*) : Void
  fun g_option_context_get_description(context : GOptionContext*) : Gchar*
  fun g_option_context_free(context : GOptionContext*) : Void
  fun g_option_context_set_help_enabled(context : GOptionContext*, help_enabled : Gboolean) : Void
  fun g_option_context_get_help_enabled(context : GOptionContext*) : Gboolean
  fun g_option_context_set_ignore_unknown_options(context : GOptionContext*, ignore_unknown : Gboolean) : Void
  fun g_option_context_get_ignore_unknown_options(context : GOptionContext*) : Gboolean
  fun g_option_context_set_strict_posix(context : GOptionContext*, strict_posix : Gboolean) : Void
  fun g_option_context_get_strict_posix(context : GOptionContext*) : Gboolean
  fun g_option_context_add_main_entries(context : GOptionContext*, entries : GOptionEntry*, translation_domain : Gchar*) : Void
  fun g_option_context_parse(context : GOptionContext*, argc : Gint*, argv : Gchar***, error : GError**) : Gboolean
  fun g_option_context_parse_strv(context : GOptionContext*, arguments : Gchar***, error : GError**) : Gboolean
  fun g_option_context_set_translate_func(context : GOptionContext*, func : GTranslateFunc, data : Gpointer, destroy_notify : GDestroyNotify) : Void
  fun g_option_context_set_translation_domain(context : GOptionContext*, domain : Gchar*) : Void
  fun g_option_context_add_group(context : GOptionContext*, group : GOptionGroup*) : Void
  fun g_option_context_set_main_group(context : GOptionContext*, group : GOptionGroup*) : Void
  fun g_option_context_get_main_group(context : GOptionContext*) : GOptionGroup*
  fun g_option_context_get_help(context : GOptionContext*, main_help : Gboolean, group : GOptionGroup*) : Gchar*
  fun g_option_group_new(name : Gchar*, description : Gchar*, help_description : Gchar*, user_data : Gpointer, destroy : GDestroyNotify) : GOptionGroup*
  fun g_option_group_set_parse_hooks(group : GOptionGroup*, pre_parse_func : GOptionParseFunc, post_parse_func : GOptionParseFunc) : Void
  fun g_option_group_set_error_hook(group : GOptionGroup*, error_func : GOptionErrorFunc) : Void
  fun g_option_group_free(group : GOptionGroup*) : Void
  fun g_option_group_ref(group : GOptionGroup*) : GOptionGroup*
  fun g_option_group_unref(group : GOptionGroup*) : Void
  fun g_option_group_add_entries(group : GOptionGroup*, entries : GOptionEntry*) : Void
  fun g_option_group_set_translate_func(group : GOptionGroup*, func : GTranslateFunc, data : Gpointer, destroy_notify : GDestroyNotify) : Void
  fun g_option_group_set_translation_domain(group : GOptionGroup*, domain : Gchar*) : Void
  fun g_pattern_spec_new(pattern : Gchar*) : GPatternSpec*
  fun g_pattern_spec_free(pspec : GPatternSpec*) : Void
  fun g_pattern_spec_equal(pspec1 : GPatternSpec*, pspec2 : GPatternSpec*) : Gboolean
  fun g_pattern_match(pspec : GPatternSpec*, string_length : Guint, string : Gchar*, string_reversed : Gchar*) : Gboolean
  fun g_pattern_match_string(pspec : GPatternSpec*, string : Gchar*) : Gboolean
  fun g_pattern_match_simple(pattern : Gchar*, string : Gchar*) : Gboolean
  fun g_spaced_primes_closest(num : Guint) : Guint
  fun g_qsort_with_data(pbase : Gconstpointer, total_elems : Gint, size : Gsize, compare_func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_queue_new : GQueue*
  fun g_queue_free(queue : GQueue*) : Void
  fun g_queue_free_full(queue : GQueue*, free_func : GDestroyNotify) : Void
  fun g_queue_init(queue : GQueue*) : Void
  fun g_queue_clear(queue : GQueue*) : Void
  fun g_queue_is_empty(queue : GQueue*) : Gboolean
  fun g_queue_get_length(queue : GQueue*) : Guint
  fun g_queue_reverse(queue : GQueue*) : Void
  fun g_queue_copy(queue : GQueue*) : GQueue*
  fun g_queue_foreach(queue : GQueue*, func : GFunc, user_data : Gpointer) : Void
  fun g_queue_find(queue : GQueue*, data : Gconstpointer) : GList*
  fun g_queue_find_custom(queue : GQueue*, data : Gconstpointer, func : GCompareFunc) : GList*
  fun g_queue_sort(queue : GQueue*, compare_func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_queue_push_head(queue : GQueue*, data : Gpointer) : Void
  fun g_queue_push_tail(queue : GQueue*, data : Gpointer) : Void
  fun g_queue_push_nth(queue : GQueue*, data : Gpointer, n : Gint) : Void
  fun g_queue_pop_head(queue : GQueue*) : Gpointer
  fun g_queue_pop_tail(queue : GQueue*) : Gpointer
  fun g_queue_pop_nth(queue : GQueue*, n : Guint) : Gpointer
  fun g_queue_peek_head(queue : GQueue*) : Gpointer
  fun g_queue_peek_tail(queue : GQueue*) : Gpointer
  fun g_queue_peek_nth(queue : GQueue*, n : Guint) : Gpointer
  fun g_queue_index(queue : GQueue*, data : Gconstpointer) : Gint
  fun g_queue_remove(queue : GQueue*, data : Gconstpointer) : Gboolean
  fun g_queue_remove_all(queue : GQueue*, data : Gconstpointer) : Guint
  fun g_queue_insert_before(queue : GQueue*, sibling : GList*, data : Gpointer) : Void
  fun g_queue_insert_after(queue : GQueue*, sibling : GList*, data : Gpointer) : Void
  fun g_queue_insert_sorted(queue : GQueue*, data : Gpointer, func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_queue_push_head_link(queue : GQueue*, link_ : GList*) : Void
  fun g_queue_push_tail_link(queue : GQueue*, link_ : GList*) : Void
  fun g_queue_push_nth_link(queue : GQueue*, n : Gint, link_ : GList*) : Void
  fun g_queue_pop_head_link(queue : GQueue*) : GList*
  fun g_queue_pop_tail_link(queue : GQueue*) : GList*
  fun g_queue_pop_nth_link(queue : GQueue*, n : Guint) : GList*
  fun g_queue_peek_head_link(queue : GQueue*) : GList*
  fun g_queue_peek_tail_link(queue : GQueue*) : GList*
  fun g_queue_peek_nth_link(queue : GQueue*, n : Guint) : GList*
  fun g_queue_link_index(queue : GQueue*, link_ : GList*) : Gint
  fun g_queue_unlink(queue : GQueue*, link_ : GList*) : Void
  fun g_queue_delete_link(queue : GQueue*, link_ : GList*) : Void
  fun g_rand_new_with_seed(seed : Guint32) : GRand*
  fun g_rand_new_with_seed_array(seed : Guint32*, seed_length : Guint) : GRand*
  fun g_rand_new : GRand*
  fun g_rand_free(rand_ : GRand*) : Void
  fun g_rand_copy(rand_ : GRand*) : GRand*
  fun g_rand_set_seed(rand_ : GRand*, seed : Guint32) : Void
  fun g_rand_set_seed_array(rand_ : GRand*, seed : Guint32*, seed_length : Guint) : Void
  fun g_rand_int(rand_ : GRand*) : Guint32
  fun g_rand_int_range(rand_ : GRand*, begin : Gint32, end : Gint32) : Gint32
  fun g_rand_double(rand_ : GRand*) : Gdouble
  fun g_rand_double_range(rand_ : GRand*, begin : Gdouble, end : Gdouble) : Gdouble
  fun g_random_set_seed(seed : Guint32) : Void
  fun g_random_int : Guint32
  fun g_random_int_range(begin : Gint32, end : Gint32) : Gint32
  fun g_random_double : Gdouble
  fun g_random_double_range(begin : Gdouble, end : Gdouble) : Gdouble
  fun g_regex_error_quark : GQuark
  fun g_regex_new(pattern : Gchar*, compile_options : GRegexCompileFlags, match_options : GRegexMatchFlags, error : GError**) : GRegex*
  fun g_regex_ref(regex : GRegex*) : GRegex*
  fun g_regex_unref(regex : GRegex*) : Void
  fun g_regex_get_pattern(regex : GRegex*) : Gchar*
  fun g_regex_get_max_backref(regex : GRegex*) : Gint
  fun g_regex_get_capture_count(regex : GRegex*) : Gint
  fun g_regex_get_has_cr_or_lf(regex : GRegex*) : Gboolean
  fun g_regex_get_max_lookbehind(regex : GRegex*) : Gint
  fun g_regex_get_string_number(regex : GRegex*, name : Gchar*) : Gint
  fun g_regex_escape_string(string : Gchar*, length : Gint) : Gchar*
  fun g_regex_escape_nul(string : Gchar*, length : Gint) : Gchar*
  fun g_regex_get_compile_flags(regex : GRegex*) : GRegexCompileFlags
  fun g_regex_get_match_flags(regex : GRegex*) : GRegexMatchFlags
  fun g_regex_match_simple(pattern : Gchar*, string : Gchar*, compile_options : GRegexCompileFlags, match_options : GRegexMatchFlags) : Gboolean
  fun g_regex_match(regex : GRegex*, string : Gchar*, match_options : GRegexMatchFlags, match_info : GMatchInfo**) : Gboolean
  fun g_regex_match_full(regex : GRegex*, string : Gchar*, string_len : Gssize, start_position : Gint, match_options : GRegexMatchFlags, match_info : GMatchInfo**, error : GError**) : Gboolean
  fun g_regex_match_all(regex : GRegex*, string : Gchar*, match_options : GRegexMatchFlags, match_info : GMatchInfo**) : Gboolean
  fun g_regex_match_all_full(regex : GRegex*, string : Gchar*, string_len : Gssize, start_position : Gint, match_options : GRegexMatchFlags, match_info : GMatchInfo**, error : GError**) : Gboolean
  fun g_regex_split_simple(pattern : Gchar*, string : Gchar*, compile_options : GRegexCompileFlags, match_options : GRegexMatchFlags) : Gchar**
  fun g_regex_split(regex : GRegex*, string : Gchar*, match_options : GRegexMatchFlags) : Gchar**
  fun g_regex_split_full(regex : GRegex*, string : Gchar*, string_len : Gssize, start_position : Gint, match_options : GRegexMatchFlags, max_tokens : Gint, error : GError**) : Gchar**
  fun g_regex_replace(regex : GRegex*, string : Gchar*, string_len : Gssize, start_position : Gint, replacement : Gchar*, match_options : GRegexMatchFlags, error : GError**) : Gchar*
  fun g_regex_replace_literal(regex : GRegex*, string : Gchar*, string_len : Gssize, start_position : Gint, replacement : Gchar*, match_options : GRegexMatchFlags, error : GError**) : Gchar*
  fun g_regex_replace_eval(regex : GRegex*, string : Gchar*, string_len : Gssize, start_position : Gint, match_options : GRegexMatchFlags, eval : GRegexEvalCallback, user_data : Gpointer, error : GError**) : Gchar*
  fun g_regex_check_replacement(replacement : Gchar*, has_references : Gboolean*, error : GError**) : Gboolean
  fun g_match_info_get_regex(match_info : GMatchInfo*) : GRegex*
  fun g_match_info_get_string(match_info : GMatchInfo*) : Gchar*
  fun g_match_info_ref(match_info : GMatchInfo*) : GMatchInfo*
  fun g_match_info_unref(match_info : GMatchInfo*) : Void
  fun g_match_info_free(match_info : GMatchInfo*) : Void
  fun g_match_info_next(match_info : GMatchInfo*, error : GError**) : Gboolean
  fun g_match_info_matches(match_info : GMatchInfo*) : Gboolean
  fun g_match_info_get_match_count(match_info : GMatchInfo*) : Gint
  fun g_match_info_is_partial_match(match_info : GMatchInfo*) : Gboolean
  fun g_match_info_expand_references(match_info : GMatchInfo*, string_to_expand : Gchar*, error : GError**) : Gchar*
  fun g_match_info_fetch(match_info : GMatchInfo*, match_num : Gint) : Gchar*
  fun g_match_info_fetch_pos(match_info : GMatchInfo*, match_num : Gint, start_pos : Gint*, end_pos : Gint*) : Gboolean
  fun g_match_info_fetch_named(match_info : GMatchInfo*, name : Gchar*) : Gchar*
  fun g_match_info_fetch_named_pos(match_info : GMatchInfo*, name : Gchar*, start_pos : Gint*, end_pos : Gint*) : Gboolean
  fun g_match_info_fetch_all(match_info : GMatchInfo*) : Gchar**
  fun g_scanner_new(config_templ : GScannerConfig*) : GScanner*
  fun g_scanner_destroy(scanner : GScanner*) : Void
  fun g_scanner_input_file(scanner : GScanner*, input_fd : Gint) : Void
  fun g_scanner_sync_file_offset(scanner : GScanner*) : Void
  fun g_scanner_input_text(scanner : GScanner*, text : Gchar*, text_len : Guint) : Void
  fun g_scanner_get_next_token(scanner : GScanner*) : GTokenType
  fun g_scanner_peek_next_token(scanner : GScanner*) : GTokenType
  fun g_scanner_cur_token(scanner : GScanner*) : GTokenType
  fun g_scanner_cur_value(scanner : GScanner*) : GTokenValue
  fun g_scanner_cur_line(scanner : GScanner*) : Guint
  fun g_scanner_cur_position(scanner : GScanner*) : Guint
  fun g_scanner_eof(scanner : GScanner*) : Gboolean
  fun g_scanner_set_scope(scanner : GScanner*, scope_id : Guint) : Guint
  fun g_scanner_scope_add_symbol(scanner : GScanner*, scope_id : Guint, symbol : Gchar*, value : Gpointer) : Void
  fun g_scanner_scope_remove_symbol(scanner : GScanner*, scope_id : Guint, symbol : Gchar*) : Void
  fun g_scanner_scope_lookup_symbol(scanner : GScanner*, scope_id : Guint, symbol : Gchar*) : Gpointer
  fun g_scanner_scope_foreach_symbol(scanner : GScanner*, scope_id : Guint, func : GHFunc, user_data : Gpointer) : Void
  fun g_scanner_lookup_symbol(scanner : GScanner*, symbol : Gchar*) : Gpointer
  fun g_scanner_unexp_token(scanner : GScanner*, expected_token : GTokenType, identifier_spec : Gchar*, symbol_spec : Gchar*, symbol_name : Gchar*, message : Gchar*, is_error : Gint) : Void
  fun g_scanner_error(scanner : GScanner*, format : Gchar*) : Void
  fun g_scanner_warn(scanner : GScanner*, format : Gchar*) : Void
  fun g_sequence_new(data_destroy : GDestroyNotify) : GSequence*
  fun g_sequence_free(seq : GSequence*) : Void
  fun g_sequence_get_length(seq : GSequence*) : Gint
  fun g_sequence_foreach(seq : GSequence*, func : GFunc, user_data : Gpointer) : Void
  fun g_sequence_foreach_range(begin : GSequenceIter*, end : GSequenceIter*, func : GFunc, user_data : Gpointer) : Void
  fun g_sequence_sort(seq : GSequence*, cmp_func : GCompareDataFunc, cmp_data : Gpointer) : Void
  fun g_sequence_sort_iter(seq : GSequence*, cmp_func : GSequenceIterCompareFunc, cmp_data : Gpointer) : Void
  fun g_sequence_is_empty(seq : GSequence*) : Gboolean
  fun g_sequence_get_begin_iter(seq : GSequence*) : GSequenceIter*
  fun g_sequence_get_end_iter(seq : GSequence*) : GSequenceIter*
  fun g_sequence_get_iter_at_pos(seq : GSequence*, pos : Gint) : GSequenceIter*
  fun g_sequence_append(seq : GSequence*, data : Gpointer) : GSequenceIter*
  fun g_sequence_prepend(seq : GSequence*, data : Gpointer) : GSequenceIter*
  fun g_sequence_insert_before(iter : GSequenceIter*, data : Gpointer) : GSequenceIter*
  fun g_sequence_move(src : GSequenceIter*, dest : GSequenceIter*) : Void
  fun g_sequence_swap(a : GSequenceIter*, b : GSequenceIter*) : Void
  fun g_sequence_insert_sorted(seq : GSequence*, data : Gpointer, cmp_func : GCompareDataFunc, cmp_data : Gpointer) : GSequenceIter*
  fun g_sequence_insert_sorted_iter(seq : GSequence*, data : Gpointer, iter_cmp : GSequenceIterCompareFunc, cmp_data : Gpointer) : GSequenceIter*
  fun g_sequence_sort_changed(iter : GSequenceIter*, cmp_func : GCompareDataFunc, cmp_data : Gpointer) : Void
  fun g_sequence_sort_changed_iter(iter : GSequenceIter*, iter_cmp : GSequenceIterCompareFunc, cmp_data : Gpointer) : Void
  fun g_sequence_remove(iter : GSequenceIter*) : Void
  fun g_sequence_remove_range(begin : GSequenceIter*, end : GSequenceIter*) : Void
  fun g_sequence_move_range(dest : GSequenceIter*, begin : GSequenceIter*, end : GSequenceIter*) : Void
  fun g_sequence_search(seq : GSequence*, data : Gpointer, cmp_func : GCompareDataFunc, cmp_data : Gpointer) : GSequenceIter*
  fun g_sequence_search_iter(seq : GSequence*, data : Gpointer, iter_cmp : GSequenceIterCompareFunc, cmp_data : Gpointer) : GSequenceIter*
  fun g_sequence_lookup(seq : GSequence*, data : Gpointer, cmp_func : GCompareDataFunc, cmp_data : Gpointer) : GSequenceIter*
  fun g_sequence_lookup_iter(seq : GSequence*, data : Gpointer, iter_cmp : GSequenceIterCompareFunc, cmp_data : Gpointer) : GSequenceIter*
  fun g_sequence_get(iter : GSequenceIter*) : Gpointer
  fun g_sequence_set(iter : GSequenceIter*, data : Gpointer) : Void
  fun g_sequence_iter_is_begin(iter : GSequenceIter*) : Gboolean
  fun g_sequence_iter_is_end(iter : GSequenceIter*) : Gboolean
  fun g_sequence_iter_next(iter : GSequenceIter*) : GSequenceIter*
  fun g_sequence_iter_prev(iter : GSequenceIter*) : GSequenceIter*
  fun g_sequence_iter_get_position(iter : GSequenceIter*) : Gint
  fun g_sequence_iter_move(iter : GSequenceIter*, delta : Gint) : GSequenceIter*
  fun g_sequence_iter_get_sequence(iter : GSequenceIter*) : GSequence*
  fun g_sequence_iter_compare(a : GSequenceIter*, b : GSequenceIter*) : Gint
  fun g_sequence_range_get_midpoint(begin : GSequenceIter*, end : GSequenceIter*) : GSequenceIter*
  fun g_shell_error_quark : GQuark
  fun g_shell_quote(unquoted_string : Gchar*) : Gchar*
  fun g_shell_unquote(quoted_string : Gchar*, error : GError**) : Gchar*
  fun g_shell_parse_argv(command_line : Gchar*, argcp : Gint*, argvp : Gchar***, error : GError**) : Gboolean
  fun g_slice_alloc(block_size : Gsize) : Gpointer
  fun g_slice_alloc0(block_size : Gsize) : Gpointer
  fun g_slice_copy(block_size : Gsize, mem_block : Gconstpointer) : Gpointer
  fun g_slice_free1(block_size : Gsize, mem_block : Gpointer) : Void
  fun g_slice_free_chain_with_offset(block_size : Gsize, mem_chain : Gpointer, next_offset : Gsize) : Void
  fun g_slice_set_config(ckey : GSliceConfig, value : Gint64) : Void
  fun g_slice_get_config(ckey : GSliceConfig) : Gint64
  fun g_slice_get_config_state(ckey : GSliceConfig, address : Gint64, n_values : Guint*) : Gint64*
  fun g_spawn_error_quark : GQuark
  fun g_spawn_exit_error_quark : GQuark
  fun g_spawn_async(working_directory : Gchar*, argv : Gchar**, envp : Gchar**, flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : Gpointer, child_pid : GPid*, error : GError**) : Gboolean
  fun g_spawn_async_with_pipes(working_directory : Gchar*, argv : Gchar**, envp : Gchar**, flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : Gpointer, child_pid : GPid*, standard_input : Gint*, standard_output : Gint*, standard_error : Gint*, error : GError**) : Gboolean
  fun g_spawn_sync(working_directory : Gchar*, argv : Gchar**, envp : Gchar**, flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : Gpointer, standard_output : Gchar**, standard_error : Gchar**, exit_status : Gint*, error : GError**) : Gboolean
  fun g_spawn_command_line_sync(command_line : Gchar*, standard_output : Gchar**, standard_error : Gchar**, exit_status : Gint*, error : GError**) : Gboolean
  fun g_spawn_command_line_async(command_line : Gchar*, error : GError**) : Gboolean
  fun g_spawn_check_exit_status(exit_status : Gint, error : GError**) : Gboolean
  fun g_spawn_close_pid(pid : GPid) : Void
  fun g_ascii_tolower(c : Gchar) : Gchar
  fun g_ascii_toupper(c : Gchar) : Gchar
  fun g_ascii_digit_value(c : Gchar) : Gint
  fun g_ascii_xdigit_value(c : Gchar) : Gint
  fun g_strdelimit(string : Gchar*, delimiters : Gchar*, new_delimiter : Gchar) : Gchar*
  fun g_strcanon(string : Gchar*, valid_chars : Gchar*, substitutor : Gchar) : Gchar*
  fun g_strerror(errnum : Gint) : Gchar*
  fun g_strsignal(signum : Gint) : Gchar*
  fun g_strreverse(string : Gchar*) : Gchar*
  fun g_strlcpy(dest : Gchar*, src : Gchar*, dest_size : Gsize) : Gsize
  fun g_strlcat(dest : Gchar*, src : Gchar*, dest_size : Gsize) : Gsize
  fun g_strstr_len(haystack : Gchar*, haystack_len : Gssize, needle : Gchar*) : Gchar*
  fun g_strrstr(haystack : Gchar*, needle : Gchar*) : Gchar*
  fun g_strrstr_len(haystack : Gchar*, haystack_len : Gssize, needle : Gchar*) : Gchar*
  fun g_str_has_suffix(str : Gchar*, suffix : Gchar*) : Gboolean
  fun g_str_has_prefix(str : Gchar*, prefix : Gchar*) : Gboolean
  fun g_strtod(nptr : Gchar*, endptr : Gchar**) : Gdouble
  fun g_ascii_strtod(nptr : Gchar*, endptr : Gchar**) : Gdouble
  fun g_ascii_strtoull(nptr : Gchar*, endptr : Gchar**, base : Guint) : Guint64
  fun g_ascii_strtoll(nptr : Gchar*, endptr : Gchar**, base : Guint) : Gint64
  fun g_ascii_dtostr(buffer : Gchar*, buf_len : Gint, d : Gdouble) : Gchar*
  fun g_ascii_formatd(buffer : Gchar*, buf_len : Gint, format : Gchar*, d : Gdouble) : Gchar*
  fun g_strchug(string : Gchar*) : Gchar*
  fun g_strchomp(string : Gchar*) : Gchar*
  fun g_ascii_strcasecmp(s1 : Gchar*, s2 : Gchar*) : Gint
  fun g_ascii_strncasecmp(s1 : Gchar*, s2 : Gchar*, n : Gsize) : Gint
  fun g_ascii_strdown(str : Gchar*, len : Gssize) : Gchar*
  fun g_ascii_strup(str : Gchar*, len : Gssize) : Gchar*
  fun g_str_is_ascii(str : Gchar*) : Gboolean
  fun g_strcasecmp(s1 : Gchar*, s2 : Gchar*) : Gint
  fun g_strncasecmp(s1 : Gchar*, s2 : Gchar*, n : Guint) : Gint
  fun g_strdown(string : Gchar*) : Gchar*
  fun g_strup(string : Gchar*) : Gchar*
  fun g_strdup(str : Gchar*) : Gchar*
  fun g_strdup_printf(format : Gchar*) : Gchar*
  fun g_strdup_vprintf(format : Gchar*, args : X__va_list_tag*) : Gchar*
  fun g_strndup(str : Gchar*, n : Gsize) : Gchar*
  fun g_strnfill(length : Gsize, fill_char : Gchar) : Gchar*
  fun g_strconcat(string1 : Gchar*) : Gchar*
  fun g_strjoin(separator : Gchar*) : Gchar*
  fun g_strcompress(source : Gchar*) : Gchar*
  fun g_strescape(source : Gchar*, exceptions : Gchar*) : Gchar*
  fun g_memdup(mem : Gconstpointer, byte_size : Guint) : Gpointer
  fun g_strsplit(string : Gchar*, delimiter : Gchar*, max_tokens : Gint) : Gchar**
  fun g_strsplit_set(string : Gchar*, delimiters : Gchar*, max_tokens : Gint) : Gchar**
  fun g_strjoinv(separator : Gchar*, str_array : Gchar**) : Gchar*
  fun g_strfreev(str_array : Gchar**) : Void
  fun g_strdupv(str_array : Gchar**) : Gchar**
  fun g_strv_length(str_array : Gchar**) : Guint
  fun g_stpcpy(dest : Gchar*, src : UInt8*) : Gchar*
  fun g_str_to_ascii(str : Gchar*, from_locale : Gchar*) : Gchar*
  fun g_str_tokenize_and_fold(string : Gchar*, translit_locale : Gchar*, ascii_alternates : Gchar***) : Gchar**
  fun g_str_match_string(search_term : Gchar*, potential_hit : Gchar*, accept_alternates : Gboolean) : Gboolean
  fun g_strv_contains(strv : Gchar**, str : Gchar*) : Gboolean
  fun g_string_chunk_new(size : Gsize) : GStringChunk*
  fun g_string_chunk_free(chunk : GStringChunk*) : Void
  fun g_string_chunk_clear(chunk : GStringChunk*) : Void
  fun g_string_chunk_insert(chunk : GStringChunk*, string : Gchar*) : Gchar*
  fun g_string_chunk_insert_len(chunk : GStringChunk*, string : Gchar*, len : Gssize) : Gchar*
  fun g_string_chunk_insert_const(chunk : GStringChunk*, string : Gchar*) : Gchar*
  fun g_strcmp0(str1 : UInt8*, str2 : UInt8*) : Int32
  fun g_test_minimized_result(minimized_quantity : Float64, format : UInt8*) : Void
  fun g_test_maximized_result(maximized_quantity : Float64, format : UInt8*) : Void
  fun g_test_init(argc : Int32*, argv : UInt8***) : Void
  fun g_test_subprocess : Gboolean
  fun g_test_run : Int32
  fun g_test_add_func(testpath : UInt8*, test_func : GTestFunc) : Void
  fun g_test_add_data_func(testpath : UInt8*, test_data : Gconstpointer, test_func : GTestDataFunc) : Void
  fun g_test_add_data_func_full(testpath : UInt8*, test_data : Gpointer, test_func : GTestDataFunc, data_free_func : GDestroyNotify) : Void
  fun g_test_fail : Void
  fun g_test_incomplete(msg : Gchar*) : Void
  fun g_test_skip(msg : Gchar*) : Void
  fun g_test_failed : Gboolean
  fun g_test_set_nonfatal_assertions : Void
  fun g_test_message(format : UInt8*) : Void
  fun g_test_bug_base(uri_pattern : UInt8*) : Void
  fun g_test_bug(bug_uri_snippet : UInt8*) : Void
  fun g_test_timer_start : Void
  fun g_test_timer_elapsed : Float64
  fun g_test_timer_last : Float64
  fun g_test_queue_free(gfree_pointer : Gpointer) : Void
  fun g_test_queue_destroy(destroy_func : GDestroyNotify, destroy_data : Gpointer) : Void
  fun g_test_trap_fork(usec_timeout : Guint64, test_trap_flags : GTestTrapFlags) : Gboolean
  fun g_test_trap_subprocess(test_path : UInt8*, usec_timeout : Guint64, test_flags : GTestSubprocessFlags) : Void
  fun g_test_trap_has_passed : Gboolean
  fun g_test_trap_reached_timeout : Gboolean
  fun g_test_rand_int : Gint32
  fun g_test_rand_int_range(begin : Gint32, end : Gint32) : Gint32
  fun g_test_rand_double : Float64
  fun g_test_rand_double_range(range_start : Float64, range_end : Float64) : Float64
  fun g_test_create_case(test_name : UInt8*, data_size : Gsize, test_data : Gconstpointer, data_setup : GTestFixtureFunc, data_test : GTestFixtureFunc, data_teardown : GTestFixtureFunc) : GTestCase*
  fun g_test_create_suite(suite_name : UInt8*) : GTestSuite*
  fun g_test_get_root : GTestSuite*
  fun g_test_suite_add(suite : GTestSuite*, test_case : GTestCase*) : Void
  fun g_test_suite_add_suite(suite : GTestSuite*, nestedsuite : GTestSuite*) : Void
  fun g_test_run_suite(suite : GTestSuite*) : Int32
  fun g_test_trap_assertions(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, assertion_flags : Guint64, pattern : UInt8*) : Void
  fun g_assertion_message(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, message : UInt8*) : Void
  fun g_assertion_message_expr(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, expr : UInt8*) : Void
  fun g_assertion_message_cmpstr(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, expr : UInt8*, arg1 : UInt8*, cmp : UInt8*, arg2 : UInt8*) : Void
  fun g_assertion_message_cmpnum(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, expr : UInt8*, arg1 : Float64, cmp : UInt8*, arg2 : Float64, numtype : Int8) : Void
  fun g_assertion_message_error(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*, expr : UInt8*, error : GError*, error_domain : GQuark, error_code : Int32) : Void
  fun g_test_add_vtable(testpath : UInt8*, data_size : Gsize, test_data : Gconstpointer, data_setup : GTestFixtureFunc, data_test : GTestFixtureFunc, data_teardown : GTestFixtureFunc) : Void
  fun g_test_log_type_name(log_type : GTestLogType) : UInt8*
  fun g_test_log_buffer_new : GTestLogBuffer*
  fun g_test_log_buffer_free(tbuffer : GTestLogBuffer*) : Void
  fun g_test_log_buffer_push(tbuffer : GTestLogBuffer*, n_bytes : Guint, bytes : Guint8*) : Void
  fun g_test_log_buffer_pop(tbuffer : GTestLogBuffer*) : GTestLogMsg*
  fun g_test_log_msg_free(tmsg : GTestLogMsg*) : Void
  fun g_test_log_set_fatal_handler(log_func : GTestLogFatalFunc, user_data : Gpointer) : Void
  fun g_test_expect_message(log_domain : Gchar*, log_level : GLogLevelFlags, pattern : Gchar*) : Void
  fun g_test_assert_expected_messages_internal(domain : UInt8*, file : UInt8*, line : Int32, func : UInt8*) : Void
  fun g_test_build_filename(file_type : GTestFileType, first_path : Gchar*) : Gchar*
  fun g_test_get_dir(file_type : GTestFileType) : Gchar*
  fun g_test_get_filename(file_type : GTestFileType, first_path : Gchar*) : Gchar*
  fun g_thread_pool_new(func : GFunc, user_data : Gpointer, max_threads : Gint, exclusive : Gboolean, error : GError**) : GThreadPool*
  fun g_thread_pool_free(pool : GThreadPool*, immediate : Gboolean, wait_ : Gboolean) : Void
  fun g_thread_pool_push(pool : GThreadPool*, data : Gpointer, error : GError**) : Gboolean
  fun g_thread_pool_unprocessed(pool : GThreadPool*) : Guint
  fun g_thread_pool_set_sort_function(pool : GThreadPool*, func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_thread_pool_move_to_front(pool : GThreadPool*, data : Gpointer) : Gboolean
  fun g_thread_pool_set_max_threads(pool : GThreadPool*, max_threads : Gint, error : GError**) : Gboolean
  fun g_thread_pool_get_max_threads(pool : GThreadPool*) : Gint
  fun g_thread_pool_get_num_threads(pool : GThreadPool*) : Guint
  fun g_thread_pool_set_max_unused_threads(max_threads : Gint) : Void
  fun g_thread_pool_get_max_unused_threads : Gint
  fun g_thread_pool_get_num_unused_threads : Guint
  fun g_thread_pool_stop_unused_threads : Void
  fun g_thread_pool_set_max_idle_time(interval : Guint) : Void
  fun g_thread_pool_get_max_idle_time : Guint
  fun g_timer_new : GTimer*
  fun g_timer_destroy(timer : GTimer*) : Void
  fun g_timer_start(timer : GTimer*) : Void
  fun g_timer_stop(timer : GTimer*) : Void
  fun g_timer_reset(timer : GTimer*) : Void
  fun g_timer_continue(timer : GTimer*) : Void
  fun g_timer_elapsed(timer : GTimer*, microseconds : Gulong*) : Gdouble
  fun g_usleep(microseconds : Gulong) : Void
  fun g_time_val_add(time_ : GTimeVal*, microseconds : Glong) : Void
  fun g_time_val_from_iso8601(iso_date : Gchar*, time_ : GTimeVal*) : Gboolean
  fun g_time_val_to_iso8601(time_ : GTimeVal*) : Gchar*
  fun g_trash_stack_push(stack_p : GTrashStack**, data_p : Gpointer) : Void
  fun g_trash_stack_pop(stack_p : GTrashStack**) : Gpointer
  fun g_trash_stack_peek(stack_p : GTrashStack**) : Gpointer
  fun g_trash_stack_height(stack_p : GTrashStack**) : Guint
  fun g_tree_new(key_compare_func : GCompareFunc) : GTree*
  fun g_tree_new_with_data(key_compare_func : GCompareDataFunc, key_compare_data : Gpointer) : GTree*
  fun g_tree_new_full(key_compare_func : GCompareDataFunc, key_compare_data : Gpointer, key_destroy_func : GDestroyNotify, value_destroy_func : GDestroyNotify) : GTree*
  fun g_tree_ref(tree : GTree*) : GTree*
  fun g_tree_unref(tree : GTree*) : Void
  fun g_tree_destroy(tree : GTree*) : Void
  fun g_tree_insert(tree : GTree*, key : Gpointer, value : Gpointer) : Void
  fun g_tree_replace(tree : GTree*, key : Gpointer, value : Gpointer) : Void
  fun g_tree_remove(tree : GTree*, key : Gconstpointer) : Gboolean
  fun g_tree_steal(tree : GTree*, key : Gconstpointer) : Gboolean
  fun g_tree_lookup(tree : GTree*, key : Gconstpointer) : Gpointer
  fun g_tree_lookup_extended(tree : GTree*, lookup_key : Gconstpointer, orig_key : Gpointer*, value : Gpointer*) : Gboolean
  fun g_tree_foreach(tree : GTree*, func : GTraverseFunc, user_data : Gpointer) : Void
  fun g_tree_traverse(tree : GTree*, traverse_func : GTraverseFunc, traverse_type : GTraverseType, user_data : Gpointer) : Void
  fun g_tree_search(tree : GTree*, search_func : GCompareFunc, user_data : Gconstpointer) : Gpointer
  fun g_tree_height(tree : GTree*) : Gint
  fun g_tree_nnodes(tree : GTree*) : Gint
  fun g_uri_unescape_string(escaped_string : UInt8*, illegal_characters : UInt8*) : UInt8*
  fun g_uri_unescape_segment(escaped_string : UInt8*, escaped_string_end : UInt8*, illegal_characters : UInt8*) : UInt8*
  fun g_uri_parse_scheme(uri : UInt8*) : UInt8*
  fun g_uri_escape_string(unescaped : UInt8*, reserved_chars_allowed : UInt8*, allow_utf8 : Gboolean) : UInt8*
  fun g_variant_type_string_is_valid(type_string : Gchar*) : Gboolean
  fun g_variant_type_string_scan(string : Gchar*, limit : Gchar*, endptr : Gchar**) : Gboolean
  fun g_variant_type_free(type : GVariantType*) : Void
  fun g_variant_type_copy(type : GVariantType*) : GVariantType*
  fun g_variant_type_new(type_string : Gchar*) : GVariantType*
  fun g_variant_type_get_string_length(type : GVariantType*) : Gsize
  fun g_variant_type_peek_string(type : GVariantType*) : Gchar*
  fun g_variant_type_dup_string(type : GVariantType*) : Gchar*
  fun g_variant_type_is_definite(type : GVariantType*) : Gboolean
  fun g_variant_type_is_container(type : GVariantType*) : Gboolean
  fun g_variant_type_is_basic(type : GVariantType*) : Gboolean
  fun g_variant_type_is_maybe(type : GVariantType*) : Gboolean
  fun g_variant_type_is_array(type : GVariantType*) : Gboolean
  fun g_variant_type_is_tuple(type : GVariantType*) : Gboolean
  fun g_variant_type_is_dict_entry(type : GVariantType*) : Gboolean
  fun g_variant_type_is_variant(type : GVariantType*) : Gboolean
  fun g_variant_type_hash(type : Gconstpointer) : Guint
  fun g_variant_type_equal(type1 : Gconstpointer, type2 : Gconstpointer) : Gboolean
  fun g_variant_type_is_subtype_of(type : GVariantType*, supertype : GVariantType*) : Gboolean
  fun g_variant_type_element(type : GVariantType*) : GVariantType*
  fun g_variant_type_first(type : GVariantType*) : GVariantType*
  fun g_variant_type_next(type : GVariantType*) : GVariantType*
  fun g_variant_type_n_items(type : GVariantType*) : Gsize
  fun g_variant_type_key(type : GVariantType*) : GVariantType*
  fun g_variant_type_value(type : GVariantType*) : GVariantType*
  fun g_variant_type_new_array(element : GVariantType*) : GVariantType*
  fun g_variant_type_new_maybe(element : GVariantType*) : GVariantType*
  fun g_variant_type_new_tuple(items : GVariantType**, length : Gint) : GVariantType*
  fun g_variant_type_new_dict_entry(key : GVariantType*, value : GVariantType*) : GVariantType*
  fun g_variant_type_checked_(arg1 : Gchar*) : GVariantType*
  fun g_variant_unref(value : GVariant*) : Void
  fun g_variant_ref(value : GVariant*) : GVariant*
  fun g_variant_ref_sink(value : GVariant*) : GVariant*
  fun g_variant_is_floating(value : GVariant*) : Gboolean
  fun g_variant_take_ref(value : GVariant*) : GVariant*
  fun g_variant_get_type(value : GVariant*) : GVariantType*
  fun g_variant_get_type_string(value : GVariant*) : Gchar*
  fun g_variant_is_of_type(value : GVariant*, type : GVariantType*) : Gboolean
  fun g_variant_is_container(value : GVariant*) : Gboolean
  fun g_variant_classify(value : GVariant*) : GVariantClass
  fun g_variant_new_boolean(value : Gboolean) : GVariant*
  fun g_variant_new_byte(value : Guchar) : GVariant*
  fun g_variant_new_int16(value : Gint16) : GVariant*
  fun g_variant_new_uint16(value : Guint16) : GVariant*
  fun g_variant_new_int32(value : Gint32) : GVariant*
  fun g_variant_new_uint32(value : Guint32) : GVariant*
  fun g_variant_new_int64(value : Gint64) : GVariant*
  fun g_variant_new_uint64(value : Guint64) : GVariant*
  fun g_variant_new_handle(value : Gint32) : GVariant*
  fun g_variant_new_double(value : Gdouble) : GVariant*
  fun g_variant_new_string(string : Gchar*) : GVariant*
  fun g_variant_new_take_string(string : Gchar*) : GVariant*
  fun g_variant_new_printf(format_string : Gchar*) : GVariant*
  fun g_variant_new_object_path(object_path : Gchar*) : GVariant*
  fun g_variant_is_object_path(string : Gchar*) : Gboolean
  fun g_variant_new_signature(signature : Gchar*) : GVariant*
  fun g_variant_is_signature(string : Gchar*) : Gboolean
  fun g_variant_new_variant(value : GVariant*) : GVariant*
  fun g_variant_new_strv(strv : Gchar**, length : Gssize) : GVariant*
  fun g_variant_new_objv(strv : Gchar**, length : Gssize) : GVariant*
  fun g_variant_new_bytestring(string : Gchar*) : GVariant*
  fun g_variant_new_bytestring_array(strv : Gchar**, length : Gssize) : GVariant*
  fun g_variant_new_fixed_array(element_type : GVariantType*, elements : Gconstpointer, n_elements : Gsize, element_size : Gsize) : GVariant*
  fun g_variant_get_boolean(value : GVariant*) : Gboolean
  fun g_variant_get_byte(value : GVariant*) : Guchar
  fun g_variant_get_int16(value : GVariant*) : Gint16
  fun g_variant_get_uint16(value : GVariant*) : Guint16
  fun g_variant_get_int32(value : GVariant*) : Gint32
  fun g_variant_get_uint32(value : GVariant*) : Guint32
  fun g_variant_get_int64(value : GVariant*) : Gint64
  fun g_variant_get_uint64(value : GVariant*) : Guint64
  fun g_variant_get_handle(value : GVariant*) : Gint32
  fun g_variant_get_double(value : GVariant*) : Gdouble
  fun g_variant_get_variant(value : GVariant*) : GVariant*
  fun g_variant_get_string(value : GVariant*, length : Gsize*) : Gchar*
  fun g_variant_dup_string(value : GVariant*, length : Gsize*) : Gchar*
  fun g_variant_get_strv(value : GVariant*, length : Gsize*) : Gchar**
  fun g_variant_dup_strv(value : GVariant*, length : Gsize*) : Gchar**
  fun g_variant_get_objv(value : GVariant*, length : Gsize*) : Gchar**
  fun g_variant_dup_objv(value : GVariant*, length : Gsize*) : Gchar**
  fun g_variant_get_bytestring(value : GVariant*) : Gchar*
  fun g_variant_dup_bytestring(value : GVariant*, length : Gsize*) : Gchar*
  fun g_variant_get_bytestring_array(value : GVariant*, length : Gsize*) : Gchar**
  fun g_variant_dup_bytestring_array(value : GVariant*, length : Gsize*) : Gchar**
  fun g_variant_new_maybe(child_type : GVariantType*, child : GVariant*) : GVariant*
  fun g_variant_new_array(child_type : GVariantType*, children : GVariant**, n_children : Gsize) : GVariant*
  fun g_variant_new_tuple(children : GVariant**, n_children : Gsize) : GVariant*
  fun g_variant_new_dict_entry(key : GVariant*, value : GVariant*) : GVariant*
  fun g_variant_get_maybe(value : GVariant*) : GVariant*
  fun g_variant_n_children(value : GVariant*) : Gsize
  fun g_variant_get_child(value : GVariant*, index_ : Gsize, format_string : Gchar*) : Void
  fun g_variant_get_child_value(value : GVariant*, index_ : Gsize) : GVariant*
  fun g_variant_lookup(dictionary : GVariant*, key : Gchar*, format_string : Gchar*) : Gboolean
  fun g_variant_lookup_value(dictionary : GVariant*, key : Gchar*, expected_type : GVariantType*) : GVariant*
  fun g_variant_get_fixed_array(value : GVariant*, n_elements : Gsize*, element_size : Gsize) : Gconstpointer
  fun g_variant_get_size(value : GVariant*) : Gsize
  fun g_variant_get_data(value : GVariant*) : Gconstpointer
  fun g_variant_get_data_as_bytes(value : GVariant*) : GBytes*
  fun g_variant_store(value : GVariant*, data : Gpointer) : Void
  fun g_variant_print(value : GVariant*, type_annotate : Gboolean) : Gchar*
  fun g_variant_print_string(value : GVariant*, string : GString*, type_annotate : Gboolean) : GString*
  fun g_variant_hash(value : Gconstpointer) : Guint
  fun g_variant_equal(one : Gconstpointer, two : Gconstpointer) : Gboolean
  fun g_variant_get_normal_form(value : GVariant*) : GVariant*
  fun g_variant_is_normal_form(value : GVariant*) : Gboolean
  fun g_variant_byteswap(value : GVariant*) : GVariant*
  fun g_variant_new_from_bytes(type : GVariantType*, bytes : GBytes*, trusted : Gboolean) : GVariant*
  fun g_variant_new_from_data(type : GVariantType*, data : Gconstpointer, size : Gsize, trusted : Gboolean, notify : GDestroyNotify, user_data : Gpointer) : GVariant*
  fun g_variant_iter_new(value : GVariant*) : GVariantIter*
  fun g_variant_iter_init(iter : GVariantIter*, value : GVariant*) : Gsize
  fun g_variant_iter_copy(iter : GVariantIter*) : GVariantIter*
  fun g_variant_iter_n_children(iter : GVariantIter*) : Gsize
  fun g_variant_iter_free(iter : GVariantIter*) : Void
  fun g_variant_iter_next_value(iter : GVariantIter*) : GVariant*
  fun g_variant_iter_next(iter : GVariantIter*, format_string : Gchar*) : Gboolean
  fun g_variant_iter_loop(iter : GVariantIter*, format_string : Gchar*) : Gboolean
  fun g_variant_parser_get_error_quark : GQuark
  fun g_variant_parse_error_quark : GQuark
  fun g_variant_builder_new(type : GVariantType*) : GVariantBuilder*
  fun g_variant_builder_unref(builder : GVariantBuilder*) : Void
  fun g_variant_builder_ref(builder : GVariantBuilder*) : GVariantBuilder*
  fun g_variant_builder_init(builder : GVariantBuilder*, type : GVariantType*) : Void
  fun g_variant_builder_end(builder : GVariantBuilder*) : GVariant*
  fun g_variant_builder_clear(builder : GVariantBuilder*) : Void
  fun g_variant_builder_open(builder : GVariantBuilder*, type : GVariantType*) : Void
  fun g_variant_builder_close(builder : GVariantBuilder*) : Void
  fun g_variant_builder_add_value(builder : GVariantBuilder*, value : GVariant*) : Void
  fun g_variant_builder_add(builder : GVariantBuilder*, format_string : Gchar*) : Void
  fun g_variant_builder_add_parsed(builder : GVariantBuilder*, format : Gchar*) : Void
  fun g_variant_new(format_string : Gchar*) : GVariant*
  fun g_variant_get(value : GVariant*, format_string : Gchar*) : Void
  fun g_variant_new_va(format_string : Gchar*, endptr : Gchar**, app : VaList*) : GVariant*
  fun g_variant_get_va(value : GVariant*, format_string : Gchar*, endptr : Gchar**, app : VaList*) : Void
  fun g_variant_check_format_string(value : GVariant*, format_string : Gchar*, copy_only : Gboolean) : Gboolean
  fun g_variant_parse(type : GVariantType*, text : Gchar*, limit : Gchar*, endptr : Gchar**, error : GError**) : GVariant*
  fun g_variant_new_parsed(format : Gchar*) : GVariant*
  fun g_variant_new_parsed_va(format : Gchar*, app : VaList*) : GVariant*
  fun g_variant_parse_error_print_context(error : GError*, source_str : Gchar*) : Gchar*
  fun g_variant_compare(one : Gconstpointer, two : Gconstpointer) : Gint
  fun g_variant_dict_new(from_asv : GVariant*) : GVariantDict*
  fun g_variant_dict_init(dict : GVariantDict*, from_asv : GVariant*) : Void
  fun g_variant_dict_lookup(dict : GVariantDict*, key : Gchar*, format_string : Gchar*) : Gboolean
  fun g_variant_dict_lookup_value(dict : GVariantDict*, key : Gchar*, expected_type : GVariantType*) : GVariant*
  fun g_variant_dict_contains(dict : GVariantDict*, key : Gchar*) : Gboolean
  fun g_variant_dict_insert(dict : GVariantDict*, key : Gchar*, format_string : Gchar*) : Void
  fun g_variant_dict_insert_value(dict : GVariantDict*, key : Gchar*, value : GVariant*) : Void
  fun g_variant_dict_remove(dict : GVariantDict*, key : Gchar*) : Gboolean
  fun g_variant_dict_clear(dict : GVariantDict*) : Void
  fun g_variant_dict_end(dict : GVariantDict*) : GVariant*
  fun g_variant_dict_ref(dict : GVariantDict*) : GVariantDict*
  fun g_variant_dict_unref(dict : GVariantDict*) : Void
  fun glib_check_version(required_major : Guint, required_minor : Guint, required_micro : Guint) : Gchar*
  fun g_mem_chunk_new(name : Gchar*, atom_size : Gint, area_size : Gsize, type : Gint) : GMemChunk*
  fun g_mem_chunk_destroy(mem_chunk : GMemChunk*) : Void
  fun g_mem_chunk_alloc(mem_chunk : GMemChunk*) : Gpointer
  fun g_mem_chunk_alloc0(mem_chunk : GMemChunk*) : Gpointer
  fun g_mem_chunk_free(mem_chunk : GMemChunk*, mem : Gpointer) : Void
  fun g_mem_chunk_clean(mem_chunk : GMemChunk*) : Void
  fun g_mem_chunk_reset(mem_chunk : GMemChunk*) : Void
  fun g_mem_chunk_print(mem_chunk : GMemChunk*) : Void
  fun g_mem_chunk_info : Void
  fun g_blow_chunks : Void
  fun g_allocator_new(name : Gchar*, n_preallocs : Guint) : GAllocator*
  fun g_allocator_free(allocator : GAllocator*) : Void
  fun g_list_push_allocator(allocator : GAllocator*) : Void
  fun g_list_pop_allocator : Void
  fun g_slist_push_allocator(allocator : GAllocator*) : Void
  fun g_slist_pop_allocator : Void
  fun g_node_push_allocator(allocator : GAllocator*) : Void
  fun g_node_pop_allocator : Void
  fun g_cache_new(value_new_func : GCacheNewFunc, value_destroy_func : GCacheDestroyFunc, key_dup_func : GCacheDupFunc, key_destroy_func : GCacheDestroyFunc, hash_key_func : GHashFunc, hash_value_func : GHashFunc, key_equal_func : GEqualFunc) : GCache*
  fun g_cache_destroy(cache : GCache*) : Void
  fun g_cache_insert(cache : GCache*, key : Gpointer) : Gpointer
  fun g_cache_remove(cache : GCache*, value : Gconstpointer) : Void
  fun g_cache_key_foreach(cache : GCache*, func : GHFunc, user_data : Gpointer) : Void
  fun g_cache_value_foreach(cache : GCache*, func : GHFunc, user_data : Gpointer) : Void
  fun g_completion_new(func : GCompletionFunc) : GCompletion*
  fun g_completion_add_items(cmp : GCompletion*, items : GList*) : Void
  fun g_completion_remove_items(cmp : GCompletion*, items : GList*) : Void
  fun g_completion_clear_items(cmp : GCompletion*) : Void
  fun g_completion_complete(cmp : GCompletion*, prefix : Gchar*, new_prefix : Gchar**) : GList*
  fun g_completion_complete_utf8(cmp : GCompletion*, prefix : Gchar*, new_prefix : Gchar**) : GList*
  fun g_completion_set_compare(cmp : GCompletion*, strncmp_func : GCompletionStrncmpFunc) : Void
  fun g_completion_free(cmp : GCompletion*) : Void
  fun g_relation_new(fields : Gint) : GRelation*
  fun g_relation_destroy(relation : GRelation*) : Void
  fun g_relation_index(relation : GRelation*, field : Gint, hash_func : GHashFunc, key_equal_func : GEqualFunc) : Void
  fun g_relation_insert(relation : GRelation*) : Void
  fun g_relation_delete(relation : GRelation*, key : Gconstpointer, field : Gint) : Gint
  fun g_relation_select(relation : GRelation*, key : Gconstpointer, field : Gint) : GTuples*
  fun g_relation_count(relation : GRelation*, key : Gconstpointer, field : Gint) : Gint
  fun g_relation_exists(relation : GRelation*) : Gboolean
  fun g_relation_print(relation : GRelation*) : Void
  fun g_tuples_destroy(tuples : GTuples*) : Void
  fun g_tuples_index(tuples : GTuples*, index_ : Gint, field : Gint) : Gpointer
  fun g_thread_create(func : GThreadFunc, data : Gpointer, joinable : Gboolean, error : GError**) : GThread*
  fun g_thread_create_full(func : GThreadFunc, data : Gpointer, stack_size : Gulong, joinable : Gboolean, bound : Gboolean, priority : GThreadPriority, error : GError**) : GThread*
  fun g_thread_set_priority(thread : GThread*, priority : GThreadPriority) : Void
  fun g_thread_foreach(thread_func : GFunc, user_data : Gpointer) : Void
  fun g_static_mutex_init(mutex : GStaticMutex*) : Void
  fun g_static_mutex_free(mutex : GStaticMutex*) : Void
  fun g_static_mutex_get_mutex_impl(mutex : GStaticMutex*) : GMutex*
  fun g_static_rec_mutex_init(mutex : GStaticRecMutex*) : Void
  fun g_static_rec_mutex_lock(mutex : GStaticRecMutex*) : Void
  fun g_static_rec_mutex_trylock(mutex : GStaticRecMutex*) : Gboolean
  fun g_static_rec_mutex_unlock(mutex : GStaticRecMutex*) : Void
  fun g_static_rec_mutex_lock_full(mutex : GStaticRecMutex*, depth : Guint) : Void
  fun g_static_rec_mutex_unlock_full(mutex : GStaticRecMutex*) : Guint
  fun g_static_rec_mutex_free(mutex : GStaticRecMutex*) : Void
  fun g_static_rw_lock_init(lock : GStaticRWLock*) : Void
  fun g_static_rw_lock_reader_lock(lock : GStaticRWLock*) : Void
  fun g_static_rw_lock_reader_trylock(lock : GStaticRWLock*) : Gboolean
  fun g_static_rw_lock_reader_unlock(lock : GStaticRWLock*) : Void
  fun g_static_rw_lock_writer_lock(lock : GStaticRWLock*) : Void
  fun g_static_rw_lock_writer_trylock(lock : GStaticRWLock*) : Gboolean
  fun g_static_rw_lock_writer_unlock(lock : GStaticRWLock*) : Void
  fun g_static_rw_lock_free(lock : GStaticRWLock*) : Void
  fun g_private_new(notify : GDestroyNotify) : GPrivate*
  fun g_static_private_init(private_key : GStaticPrivate*) : Void
  fun g_static_private_get(private_key : GStaticPrivate*) : Gpointer
  fun g_static_private_set(private_key : GStaticPrivate*, data : Gpointer, notify : GDestroyNotify) : Void
  fun g_static_private_free(private_key : GStaticPrivate*) : Void
  fun g_once_init_enter_impl(location : Gsize*) : Gboolean
  fun g_thread_init(vtable : Gpointer) : Void
  fun g_thread_init_with_errorcheck_mutexes(vtable : Gpointer) : Void
  fun g_thread_get_initialized : Gboolean
  fun g_mutex_new : GMutex*
  fun g_mutex_free(mutex : GMutex*) : Void
  fun g_cond_new : GCond*
  fun g_cond_free(cond : GCond*) : Void
  fun g_cond_timed_wait(cond : GCond*, mutex : GMutex*, timeval : GTimeVal*) : Gboolean
  fun g_autoptr_cleanup_generic_gfree(p : Void*) : Void
  fun g_autoptr_cleanup_gstring_free(string : GString*) : Void
  fun glib_autoptr_cleanup_g_async_queue(_ptr : GAsyncQueue**) : Void
  fun glib_autoptr_cleanup_g_bookmark_file(_ptr : GBookmarkFile**) : Void
  fun glib_autoptr_cleanup_g_bytes(_ptr : GBytes**) : Void
  fun glib_autoptr_cleanup_g_checksum(_ptr : GChecksum**) : Void
  fun glib_autoptr_cleanup_g_date_time(_ptr : GDateTime**) : Void
  fun glib_autoptr_cleanup_g_dir(_ptr : GDir**) : Void
  fun glib_autoptr_cleanup_g_error(_ptr : GError**) : Void
  fun glib_autoptr_cleanup_g_hash_table(_ptr : GHashTable**) : Void
  fun glib_autoptr_cleanup_g_hmac(_ptr : GHmac**) : Void
  fun glib_autoptr_cleanup_gio_channel(_ptr : GIOChannel**) : Void
  fun glib_autoptr_cleanup_g_key_file(_ptr : GKeyFile**) : Void
  fun glib_autoptr_cleanup_g_list(_ptr : GList**) : Void
  fun glib_autoptr_cleanup_g_array(_ptr : GArray**) : Void
  fun glib_autoptr_cleanup_g_ptr_array(_ptr : GPtrArray**) : Void
  fun glib_autoptr_cleanup_g_byte_array(_ptr : GByteArray**) : Void
  fun glib_autoptr_cleanup_g_main_context(_ptr : GMainContext**) : Void
  fun glib_autoptr_cleanup_g_main_loop(_ptr : GMainLoop**) : Void
  fun glib_autoptr_cleanup_g_source(_ptr : GSource**) : Void
  fun glib_autoptr_cleanup_g_mapped_file(_ptr : GMappedFile**) : Void
  fun glib_autoptr_cleanup_g_markup_parse_context(_ptr : GMarkupParseContext**) : Void
  fun glib_autoptr_cleanup_g_node(_ptr : GNode**) : Void
  fun glib_autoptr_cleanup_g_option_context(_ptr : GOptionContext**) : Void
  fun glib_autoptr_cleanup_g_option_group(_ptr : GOptionGroup**) : Void
  fun glib_autoptr_cleanup_g_pattern_spec(_ptr : GPatternSpec**) : Void
  fun glib_autoptr_cleanup_g_queue(_ptr : GQueue**) : Void
  fun glib_auto_cleanup_g_queue(_ptr : GQueue*) : Void
  fun glib_autoptr_cleanup_g_rand(_ptr : GRand**) : Void
  fun glib_autoptr_cleanup_g_regex(_ptr : GRegex**) : Void
  fun glib_autoptr_cleanup_g_match_info(_ptr : GMatchInfo**) : Void
  fun glib_autoptr_cleanup_g_scanner(_ptr : GScanner**) : Void
  fun glib_autoptr_cleanup_g_sequence(_ptr : GSequence**) : Void
  fun glib_autoptr_cleanup_gs_list(_ptr : GSList**) : Void
  fun glib_autoptr_cleanup_g_string(_ptr : GString**) : Void
  fun glib_autoptr_cleanup_g_string_chunk(_ptr : GStringChunk**) : Void
  fun glib_autoptr_cleanup_g_thread(_ptr : GThread**) : Void
  fun glib_auto_cleanup_g_mutex(_ptr : GMutex*) : Void
  fun glib_autoptr_cleanup_g_mutex_locker(_ptr : GMutexLocker**) : Void
  fun glib_auto_cleanup_g_cond(_ptr : GCond*) : Void
  fun glib_autoptr_cleanup_g_timer(_ptr : GTimer**) : Void
  fun glib_autoptr_cleanup_g_time_zone(_ptr : GTimeZone**) : Void
  fun glib_autoptr_cleanup_g_tree(_ptr : GTree**) : Void
  fun glib_autoptr_cleanup_g_variant(_ptr : GVariant**) : Void
  fun glib_autoptr_cleanup_g_variant_builder(_ptr : GVariantBuilder**) : Void
  fun glib_auto_cleanup_g_variant_builder(_ptr : GVariantBuilder*) : Void
  fun glib_autoptr_cleanup_g_variant_iter(_ptr : GVariantIter**) : Void
  fun glib_autoptr_cleanup_g_variant_dict(_ptr : GVariantDict**) : Void
  fun glib_auto_cleanup_g_variant_dict(_ptr : GVariantDict*) : Void
  fun glib_autoptr_cleanup_g_variant_type(_ptr : GVariantType**) : Void
  fun glib_auto_cleanup_g_strv(_ptr : GStrv*) : Void
  fun g_type_init : Void
  fun g_type_init_with_debug_flags(debug_flags : GTypeDebugFlags) : Void
  fun g_type_name(type : GType) : Gchar*
  fun g_type_qname(type : GType) : GQuark
  fun g_type_from_name(name : Gchar*) : GType
  fun g_type_parent(type : GType) : GType
  fun g_type_depth(type : GType) : Guint
  fun g_type_next_base(leaf_type : GType, root_type : GType) : GType
  fun g_type_is_a(type : GType, is_a_type : GType) : Gboolean
  fun g_type_class_ref(type : GType) : Gpointer
  fun g_type_class_peek(type : GType) : Gpointer
  fun g_type_class_peek_static(type : GType) : Gpointer
  fun g_type_class_unref(g_class : Gpointer) : Void
  fun g_type_class_peek_parent(g_class : Gpointer) : Gpointer
  fun g_type_interface_peek(instance_class : Gpointer, iface_type : GType) : Gpointer
  fun g_type_interface_peek_parent(g_iface : Gpointer) : Gpointer
  fun g_type_default_interface_ref(g_type : GType) : Gpointer
  fun g_type_default_interface_peek(g_type : GType) : Gpointer
  fun g_type_default_interface_unref(g_iface : Gpointer) : Void
  fun g_type_children(type : GType, n_children : Guint*) : GType*
  fun g_type_interfaces(type : GType, n_interfaces : Guint*) : GType*
  fun g_type_set_qdata(type : GType, quark : GQuark, data : Gpointer) : Void
  fun g_type_get_qdata(type : GType, quark : GQuark) : Gpointer
  fun g_type_query(type : GType, query : GTypeQuery*) : Void
  fun g_type_get_instance_count(type : GType) : Int32
  fun g_type_register_static(parent_type : GType, type_name : Gchar*, info : GTypeInfo*, flags : GTypeFlags) : GType
  fun g_type_register_static_simple(parent_type : GType, type_name : Gchar*, class_size : Guint, class_init : GClassInitFunc, instance_size : Guint, instance_init : GInstanceInitFunc, flags : GTypeFlags) : GType
  fun g_type_register_dynamic(parent_type : GType, type_name : Gchar*, plugin : GTypePlugin*, flags : GTypeFlags) : GType
  fun g_type_register_fundamental(type_id : GType, type_name : Gchar*, info : GTypeInfo*, finfo : GTypeFundamentalInfo*, flags : GTypeFlags) : GType
  fun g_type_add_interface_static(instance_type : GType, interface_type : GType, info : GInterfaceInfo*) : Void
  fun g_type_add_interface_dynamic(instance_type : GType, interface_type : GType, plugin : GTypePlugin*) : Void
  fun g_type_interface_add_prerequisite(interface_type : GType, prerequisite_type : GType) : Void
  fun g_type_interface_prerequisites(interface_type : GType, n_prerequisites : Guint*) : GType*
  fun g_type_class_add_private(g_class : Gpointer, private_size : Gsize) : Void
  fun g_type_add_instance_private(class_type : GType, private_size : Gsize) : Gint
  fun g_type_instance_get_private(instance : GTypeInstance*, private_type : GType) : Gpointer
  fun g_type_class_adjust_private_offset(g_class : Gpointer, private_size_or_offset : Gint*) : Void
  fun g_type_add_class_private(class_type : GType, private_size : Gsize) : Void
  fun g_type_class_get_private(klass : GTypeClass*, private_type : GType) : Gpointer
  fun g_type_class_get_instance_private_offset(g_class : Gpointer) : Gint
  fun g_type_ensure(type : GType) : Void
  fun g_type_get_type_registration_serial : Guint
  fun g_type_get_plugin(type : GType) : GTypePlugin*
  fun g_type_interface_get_plugin(instance_type : GType, interface_type : GType) : GTypePlugin*
  fun g_type_fundamental_next : GType
  fun g_type_fundamental(type_id : GType) : GType
  fun g_type_create_instance(type : GType) : GTypeInstance*
  fun g_type_free_instance(instance : GTypeInstance*) : Void
  fun g_type_add_class_cache_func(cache_data : Gpointer, cache_func : GTypeClassCacheFunc) : Void
  fun g_type_remove_class_cache_func(cache_data : Gpointer, cache_func : GTypeClassCacheFunc) : Void
  fun g_type_class_unref_uncached(g_class : Gpointer) : Void
  fun g_type_add_interface_check(check_data : Gpointer, check_func : GTypeInterfaceCheckFunc) : Void
  fun g_type_remove_interface_check(check_data : Gpointer, check_func : GTypeInterfaceCheckFunc) : Void
  fun g_type_value_table_peek(type : GType) : GTypeValueTable*
  fun g_type_check_instance(instance : GTypeInstance*) : Gboolean
  fun g_type_check_instance_cast(instance : GTypeInstance*, iface_type : GType) : GTypeInstance*
  fun g_type_check_instance_is_a(instance : GTypeInstance*, iface_type : GType) : Gboolean
  fun g_type_check_instance_is_fundamentally_a(instance : GTypeInstance*, fundamental_type : GType) : Gboolean
  fun g_type_check_class_cast(g_class : GTypeClass*, is_a_type : GType) : GTypeClass*
  fun g_type_check_class_is_a(g_class : GTypeClass*, is_a_type : GType) : Gboolean
  fun g_type_check_is_value_type(type : GType) : Gboolean
  fun g_type_check_value(value : GValue*) : Gboolean
  fun g_type_check_value_holds(value : GValue*, type : GType) : Gboolean
  fun g_type_test_flags(type : GType, flags : Guint) : Gboolean
  fun g_type_name_from_instance(instance : GTypeInstance*) : Gchar*
  fun g_type_name_from_class(g_class : GTypeClass*) : Gchar*
  fun g_value_init(value : GValue*, g_type : GType) : GValue*
  fun g_value_copy(src_value : GValue*, dest_value : GValue*) : Void
  fun g_value_reset(value : GValue*) : GValue*
  fun g_value_unset(value : GValue*) : Void
  fun g_value_set_instance(value : GValue*, instance : Gpointer) : Void
  fun g_value_init_from_instance(value : GValue*, instance : Gpointer) : Void
  fun g_value_fits_pointer(value : GValue*) : Gboolean
  fun g_value_peek_pointer(value : GValue*) : Gpointer
  fun g_value_type_compatible(src_type : GType, dest_type : GType) : Gboolean
  fun g_value_type_transformable(src_type : GType, dest_type : GType) : Gboolean
  fun g_value_transform(src_value : GValue*, dest_value : GValue*) : Gboolean
  fun g_value_register_transform_func(src_type : GType, dest_type : GType, transform_func : GValueTransform) : Void
  fun g_param_spec_ref(pspec : GParamSpec*) : GParamSpec*
  fun g_param_spec_unref(pspec : GParamSpec*) : Void
  fun g_param_spec_sink(pspec : GParamSpec*) : Void
  fun g_param_spec_ref_sink(pspec : GParamSpec*) : GParamSpec*
  fun g_param_spec_get_qdata(pspec : GParamSpec*, quark : GQuark) : Gpointer
  fun g_param_spec_set_qdata(pspec : GParamSpec*, quark : GQuark, data : Gpointer) : Void
  fun g_param_spec_set_qdata_full(pspec : GParamSpec*, quark : GQuark, data : Gpointer, destroy : GDestroyNotify) : Void
  fun g_param_spec_steal_qdata(pspec : GParamSpec*, quark : GQuark) : Gpointer
  fun g_param_spec_get_redirect_target(pspec : GParamSpec*) : GParamSpec*
  fun g_param_value_set_default(pspec : GParamSpec*, value : GValue*) : Void
  fun g_param_value_defaults(pspec : GParamSpec*, value : GValue*) : Gboolean
  fun g_param_value_validate(pspec : GParamSpec*, value : GValue*) : Gboolean
  fun g_param_value_convert(pspec : GParamSpec*, src_value : GValue*, dest_value : GValue*, strict_validation : Gboolean) : Gboolean
  fun g_param_values_cmp(pspec : GParamSpec*, value1 : GValue*, value2 : GValue*) : Gint
  fun g_param_spec_get_name(pspec : GParamSpec*) : Gchar*
  fun g_param_spec_get_nick(pspec : GParamSpec*) : Gchar*
  fun g_param_spec_get_blurb(pspec : GParamSpec*) : Gchar*
  fun g_value_set_param(value : GValue*, param : GParamSpec*) : Void
  fun g_value_get_param(value : GValue*) : GParamSpec*
  fun g_value_dup_param(value : GValue*) : GParamSpec*
  fun g_value_take_param(value : GValue*, param : GParamSpec*) : Void
  fun g_value_set_param_take_ownership(value : GValue*, param : GParamSpec*) : Void
  fun g_param_spec_get_default_value(pspec : GParamSpec*) : GValue*
  fun g_param_spec_get_name_quark(pspec : GParamSpec*) : GQuark
  fun g_param_type_register_static(name : Gchar*, pspec_info : GParamSpecTypeInfo*) : GType
  fun _g_param_type_register_static_constant(name : Gchar*, pspec_info : GParamSpecTypeInfo*, opt_type : GType) : GType
  fun g_param_spec_internal(param_type : GType, name : Gchar*, nick : Gchar*, blurb : Gchar*, flags : GParamFlags) : Gpointer
  fun g_param_spec_pool_new(type_prefixing : Gboolean) : GParamSpecPool*
  fun g_param_spec_pool_insert(pool : GParamSpecPool*, pspec : GParamSpec*, owner_type : GType) : Void
  fun g_param_spec_pool_remove(pool : GParamSpecPool*, pspec : GParamSpec*) : Void
  fun g_param_spec_pool_lookup(pool : GParamSpecPool*, param_name : Gchar*, owner_type : GType, walk_ancestors : Gboolean) : GParamSpec*
  fun g_param_spec_pool_list_owned(pool : GParamSpecPool*, owner_type : GType) : GList*
  fun g_param_spec_pool_list(pool : GParamSpecPool*, owner_type : GType, n_pspecs_p : Guint*) : GParamSpec**
  fun g_cclosure_new(callback_func : GCallback, user_data : Gpointer, destroy_data : GClosureNotify) : GClosure*
  fun g_cclosure_new_swap(callback_func : GCallback, user_data : Gpointer, destroy_data : GClosureNotify) : GClosure*
  fun g_signal_type_cclosure_new(itype : GType, struct_offset : Guint) : GClosure*
  fun g_closure_ref(closure : GClosure*) : GClosure*
  fun g_closure_sink(closure : GClosure*) : Void
  fun g_closure_unref(closure : GClosure*) : Void
  fun g_closure_new_simple(sizeof_closure : Guint, data : Gpointer) : GClosure*
  fun g_closure_add_finalize_notifier(closure : GClosure*, notify_data : Gpointer, notify_func : GClosureNotify) : Void
  fun g_closure_remove_finalize_notifier(closure : GClosure*, notify_data : Gpointer, notify_func : GClosureNotify) : Void
  fun g_closure_add_invalidate_notifier(closure : GClosure*, notify_data : Gpointer, notify_func : GClosureNotify) : Void
  fun g_closure_remove_invalidate_notifier(closure : GClosure*, notify_data : Gpointer, notify_func : GClosureNotify) : Void
  fun g_closure_add_marshal_guards(closure : GClosure*, pre_marshal_data : Gpointer, pre_marshal_notify : GClosureNotify, post_marshal_data : Gpointer, post_marshal_notify : GClosureNotify) : Void
  fun g_closure_set_marshal(closure : GClosure*, marshal : GClosureMarshal) : Void
  fun g_closure_set_meta_marshal(closure : GClosure*, marshal_data : Gpointer, meta_marshal : GClosureMarshal) : Void
  fun g_closure_invalidate(closure : GClosure*) : Void
  fun g_closure_invoke(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer) : Void
  fun g_cclosure_marshal_generic(closure : GClosure*, return_gvalue : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_generic_va(closure : GClosure*, return_value : GValue*, instance : Gpointer, args_list : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__void(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__voi_dv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__boolean(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__boolea_nv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__char(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__cha_rv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__uchar(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__ucha_rv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__int(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__in_tv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__uint(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__uin_tv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__long(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__lon_gv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__ulong(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__ulon_gv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__enum(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__enu_mv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__flags(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__flag_sv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__float(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__floa_tv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__double(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__doubl_ev(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__string(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__strin_gv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__param(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__para_mv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__boxed(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__boxe_dv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__pointer(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__pointe_rv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__object(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__objec_tv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__variant(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__varian_tv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_void__uint_pointer(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_void__uint_pointe_rv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_boolean__flags(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_boolean__flag_sv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_string__object_pointer(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_string__object_pointe_rv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_cclosure_marshal_boolean__boxed_boxed(closure : GClosure*, return_value : GValue*, n_param_values : Guint, param_values : GValue*, invocation_hint : Gpointer, marshal_data : Gpointer) : Void
  fun g_cclosure_marshal_boolean__boxed_boxe_dv(closure : GClosure*, return_value : GValue*, instance : Gpointer, args : X__va_list_tag*, marshal_data : Gpointer, n_params : Int32, param_types : GType*) : Void
  fun g_signal_newv(signal_name : Gchar*, itype : GType, signal_flags : GSignalFlags, class_closure : GClosure*, accumulator : GSignalAccumulator, accu_data : Gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : Guint, param_types : GType*) : Guint
  fun g_signal_new_valist(signal_name : Gchar*, itype : GType, signal_flags : GSignalFlags, class_closure : GClosure*, accumulator : GSignalAccumulator, accu_data : Gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : Guint, args : X__va_list_tag*) : Guint
  fun g_signal_new(signal_name : Gchar*, itype : GType, signal_flags : GSignalFlags, class_offset : Guint, accumulator : GSignalAccumulator, accu_data : Gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : Guint) : Guint
  fun g_signal_new_class_handler(signal_name : Gchar*, itype : GType, signal_flags : GSignalFlags, class_handler : GCallback, accumulator : GSignalAccumulator, accu_data : Gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : Guint) : Guint
  fun g_signal_set_va_marshaller(signal_id : Guint, instance_type : GType, va_marshaller : GSignalCVaMarshaller) : Void
  fun g_signal_emitv(instance_and_params : GValue*, signal_id : Guint, detail : GQuark, return_value : GValue*) : Void
  fun g_signal_emit_valist(instance : Gpointer, signal_id : Guint, detail : GQuark, var_args : X__va_list_tag*) : Void
  fun g_signal_emit(instance : Gpointer, signal_id : Guint, detail : GQuark) : Void
  fun g_signal_emit_by_name(instance : Gpointer, detailed_signal : Gchar*) : Void
  fun g_signal_lookup(name : Gchar*, itype : GType) : Guint
  fun g_signal_name(signal_id : Guint) : Gchar*
  fun g_signal_query(signal_id : Guint, query : GSignalQuery*) : Void
  fun g_signal_list_ids(itype : GType, n_ids : Guint*) : Guint*
  fun g_signal_parse_name(detailed_signal : Gchar*, itype : GType, signal_id_p : Guint*, detail_p : GQuark*, force_detail_quark : Gboolean) : Gboolean
  fun g_signal_get_invocation_hint(instance : Gpointer) : GSignalInvocationHint*
  fun g_signal_stop_emission(instance : Gpointer, signal_id : Guint, detail : GQuark) : Void
  fun g_signal_stop_emission_by_name(instance : Gpointer, detailed_signal : Gchar*) : Void
  fun g_signal_add_emission_hook(signal_id : Guint, detail : GQuark, hook_func : GSignalEmissionHook, hook_data : Gpointer, data_destroy : GDestroyNotify) : Gulong
  fun g_signal_remove_emission_hook(signal_id : Guint, hook_id : Gulong) : Void
  fun g_signal_has_handler_pending(instance : Gpointer, signal_id : Guint, detail : GQuark, may_be_blocked : Gboolean) : Gboolean
  fun g_signal_connect_closure_by_id(instance : Gpointer, signal_id : Guint, detail : GQuark, closure : GClosure*, after : Gboolean) : Gulong
  fun g_signal_connect_closure(instance : Gpointer, detailed_signal : Gchar*, closure : GClosure*, after : Gboolean) : Gulong
  fun g_signal_connect_data(instance : Gpointer, detailed_signal : Gchar*, c_handler : GCallback, data : Gpointer, destroy_data : GClosureNotify, connect_flags : GConnectFlags) : Gulong
  fun g_signal_handler_block(instance : Gpointer, handler_id : Gulong) : Void
  fun g_signal_handler_unblock(instance : Gpointer, handler_id : Gulong) : Void
  fun g_signal_handler_disconnect(instance : Gpointer, handler_id : Gulong) : Void
  fun g_signal_handler_is_connected(instance : Gpointer, handler_id : Gulong) : Gboolean
  fun g_signal_handler_find(instance : Gpointer, mask : GSignalMatchType, signal_id : Guint, detail : GQuark, closure : GClosure*, func : Gpointer, data : Gpointer) : Gulong
  fun g_signal_handlers_block_matched(instance : Gpointer, mask : GSignalMatchType, signal_id : Guint, detail : GQuark, closure : GClosure*, func : Gpointer, data : Gpointer) : Guint
  fun g_signal_handlers_unblock_matched(instance : Gpointer, mask : GSignalMatchType, signal_id : Guint, detail : GQuark, closure : GClosure*, func : Gpointer, data : Gpointer) : Guint
  fun g_signal_handlers_disconnect_matched(instance : Gpointer, mask : GSignalMatchType, signal_id : Guint, detail : GQuark, closure : GClosure*, func : Gpointer, data : Gpointer) : Guint
  fun g_signal_override_class_closure(signal_id : Guint, instance_type : GType, class_closure : GClosure*) : Void
  fun g_signal_override_class_handler(signal_name : Gchar*, instance_type : GType, class_handler : GCallback) : Void
  fun g_signal_chain_from_overridden(instance_and_params : GValue*, return_value : GValue*) : Void
  fun g_signal_chain_from_overridden_handler(instance : Gpointer) : Void
  fun g_signal_accumulator_true_handled(ihint : GSignalInvocationHint*, return_accu : GValue*, handler_return : GValue*, dummy : Gpointer) : Gboolean
  fun g_signal_accumulator_first_wins(ihint : GSignalInvocationHint*, return_accu : GValue*, handler_return : GValue*, dummy : Gpointer) : Gboolean
  fun g_signal_handlers_destroy(instance : Gpointer) : Void
  fun _g_signals_destroy(itype : GType) : Void
  fun g_date_get_type : GType
  fun g_strv_get_type : GType
  fun g_gstring_get_type : GType
  fun g_hash_table_get_type : GType
  fun g_array_get_type : GType
  fun g_byte_array_get_type : GType
  fun g_ptr_array_get_type : GType
  fun g_bytes_get_type : GType
  fun g_variant_type_get_gtype : GType
  fun g_regex_get_type : GType
  fun g_match_info_get_type : GType
  fun g_error_get_type : GType
  fun g_date_time_get_type : GType
  fun g_time_zone_get_type : GType
  fun g_io_channel_get_type : GType
  fun g_io_condition_get_type : GType
  fun g_variant_builder_get_type : GType
  fun g_variant_dict_get_type : GType
  fun g_key_file_get_type : GType
  fun g_main_loop_get_type : GType
  fun g_main_context_get_type : GType
  fun g_source_get_type : GType
  fun g_pollfd_get_type : GType
  fun g_thread_get_type : GType
  fun g_checksum_get_type : GType
  fun g_markup_parse_context_get_type : GType
  fun g_mapped_file_get_type : GType
  fun g_option_group_get_type : GType
  fun g_variant_get_gtype : GType
  fun g_boxed_copy(boxed_type : GType, src_boxed : Gconstpointer) : Gpointer
  fun g_boxed_free(boxed_type : GType, boxed : Gpointer) : Void
  fun g_value_set_boxed(value : GValue*, v_boxed : Gconstpointer) : Void
  fun g_value_set_static_boxed(value : GValue*, v_boxed : Gconstpointer) : Void
  fun g_value_take_boxed(value : GValue*, v_boxed : Gconstpointer) : Void
  fun g_value_set_boxed_take_ownership(value : GValue*, v_boxed : Gconstpointer) : Void
  fun g_value_get_boxed(value : GValue*) : Gpointer
  fun g_value_dup_boxed(value : GValue*) : Gpointer
  fun g_boxed_type_register_static(name : Gchar*, boxed_copy : GBoxedCopyFunc, boxed_free : GBoxedFreeFunc) : GType
  fun g_closure_get_type : GType
  fun g_value_get_type : GType
  fun g_initially_unowned_get_type : GType
  fun g_object_class_install_property(oclass : GObjectClass*, property_id : Guint, pspec : GParamSpec*) : Void
  fun g_object_class_find_property(oclass : GObjectClass*, property_name : Gchar*) : GParamSpec*
  fun g_object_class_list_properties(oclass : GObjectClass*, n_properties : Guint*) : GParamSpec**
  fun g_object_class_override_property(oclass : GObjectClass*, property_id : Guint, name : Gchar*) : Void
  fun g_object_class_install_properties(oclass : GObjectClass*, n_pspecs : Guint, pspecs : GParamSpec**) : Void
  fun g_object_interface_install_property(g_iface : Gpointer, pspec : GParamSpec*) : Void
  fun g_object_interface_find_property(g_iface : Gpointer, property_name : Gchar*) : GParamSpec*
  fun g_object_interface_list_properties(g_iface : Gpointer, n_properties_p : Guint*) : GParamSpec**
  fun g_object_get_type : GType
  fun g_object_new(object_type : GType, first_property_name : Gchar*) : Gpointer
  fun g_object_newv(object_type : GType, n_parameters : Guint, parameters : GParameter*) : Gpointer
  fun g_object_new_valist(object_type : GType, first_property_name : Gchar*, var_args : X__va_list_tag*) : GObject*
  fun g_object_set(object : Gpointer, first_property_name : Gchar*) : Void
  fun g_object_get(object : Gpointer, first_property_name : Gchar*) : Void
  fun g_object_connect(object : Gpointer, signal_spec : Gchar*) : Gpointer
  fun g_object_disconnect(object : Gpointer, signal_spec : Gchar*) : Void
  fun g_object_set_valist(object : GObject*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun g_object_get_valist(object : GObject*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun g_object_set_property(object : GObject*, property_name : Gchar*, value : GValue*) : Void
  fun g_object_get_property(object : GObject*, property_name : Gchar*, value : GValue*) : Void
  fun g_object_freeze_notify(object : GObject*) : Void
  fun g_object_notify(object : GObject*, property_name : Gchar*) : Void
  fun g_object_notify_by_pspec(object : GObject*, pspec : GParamSpec*) : Void
  fun g_object_thaw_notify(object : GObject*) : Void
  fun g_object_is_floating(object : Gpointer) : Gboolean
  fun g_object_ref_sink(object : Gpointer) : Gpointer
  fun g_object_ref(object : Gpointer) : Gpointer
  fun g_object_unref(object : Gpointer) : Void
  fun g_object_weak_ref(object : GObject*, notify : GWeakNotify, data : Gpointer) : Void
  fun g_object_weak_unref(object : GObject*, notify : GWeakNotify, data : Gpointer) : Void
  fun g_object_add_weak_pointer(object : GObject*, weak_pointer_location : Gpointer*) : Void
  fun g_object_remove_weak_pointer(object : GObject*, weak_pointer_location : Gpointer*) : Void
  fun g_object_add_toggle_ref(object : GObject*, notify : GToggleNotify, data : Gpointer) : Void
  fun g_object_remove_toggle_ref(object : GObject*, notify : GToggleNotify, data : Gpointer) : Void
  fun g_object_get_qdata(object : GObject*, quark : GQuark) : Gpointer
  fun g_object_set_qdata(object : GObject*, quark : GQuark, data : Gpointer) : Void
  fun g_object_set_qdata_full(object : GObject*, quark : GQuark, data : Gpointer, destroy : GDestroyNotify) : Void
  fun g_object_steal_qdata(object : GObject*, quark : GQuark) : Gpointer
  fun g_object_dup_qdata(object : GObject*, quark : GQuark, dup_func : GDuplicateFunc, user_data : Gpointer) : Gpointer
  fun g_object_replace_qdata(object : GObject*, quark : GQuark, oldval : Gpointer, newval : Gpointer, destroy : GDestroyNotify, old_destroy : GDestroyNotify*) : Gboolean
  fun g_object_get_data(object : GObject*, key : Gchar*) : Gpointer
  fun g_object_set_data(object : GObject*, key : Gchar*, data : Gpointer) : Void
  fun g_object_set_data_full(object : GObject*, key : Gchar*, data : Gpointer, destroy : GDestroyNotify) : Void
  fun g_object_steal_data(object : GObject*, key : Gchar*) : Gpointer
  fun g_object_dup_data(object : GObject*, key : Gchar*, dup_func : GDuplicateFunc, user_data : Gpointer) : Gpointer
  fun g_object_replace_data(object : GObject*, key : Gchar*, oldval : Gpointer, newval : Gpointer, destroy : GDestroyNotify, old_destroy : GDestroyNotify*) : Gboolean
  fun g_object_watch_closure(object : GObject*, closure : GClosure*) : Void
  fun g_cclosure_new_object(callback_func : GCallback, object : GObject*) : GClosure*
  fun g_cclosure_new_object_swap(callback_func : GCallback, object : GObject*) : GClosure*
  fun g_closure_new_object(sizeof_closure : Guint, object : GObject*) : GClosure*
  fun g_value_set_object(value : GValue*, v_object : Gpointer) : Void
  fun g_value_get_object(value : GValue*) : Gpointer
  fun g_value_dup_object(value : GValue*) : Gpointer
  fun g_signal_connect_object(instance : Gpointer, detailed_signal : Gchar*, c_handler : GCallback, gobject : Gpointer, connect_flags : GConnectFlags) : Gulong
  fun g_object_force_floating(object : GObject*) : Void
  fun g_object_run_dispose(object : GObject*) : Void
  fun g_value_take_object(value : GValue*, v_object : Gpointer) : Void
  fun g_value_set_object_take_ownership(value : GValue*, v_object : Gpointer) : Void
  fun g_object_compat_control(what : Gsize, data : Gpointer) : Gsize
  fun g_clear_object(object_ptr : GObject**) : Void
  fun g_set_object(object_ptr : GObject**, new_object : GObject*) : Gboolean
  fun g_weak_ref_init(weak_ref : GWeakRef*, object : Gpointer) : Void
  fun g_weak_ref_clear(weak_ref : GWeakRef*) : Void
  fun g_weak_ref_get(weak_ref : GWeakRef*) : Gpointer
  fun g_weak_ref_set(weak_ref : GWeakRef*, object : Gpointer) : Void
  fun g_binding_flags_get_type : GType
  fun g_binding_get_type : GType
  fun g_binding_get_flags(binding : GBinding*) : GBindingFlags
  fun g_binding_get_source(binding : GBinding*) : GObject*
  fun g_binding_get_target(binding : GBinding*) : GObject*
  fun g_binding_get_source_property(binding : GBinding*) : Gchar*
  fun g_binding_get_target_property(binding : GBinding*) : Gchar*
  fun g_binding_unbind(binding : GBinding*) : Void
  fun g_object_bind_property(source : Gpointer, source_property : Gchar*, target : Gpointer, target_property : Gchar*, flags : GBindingFlags) : GBinding*
  fun g_object_bind_property_full(source : Gpointer, source_property : Gchar*, target : Gpointer, target_property : Gchar*, flags : GBindingFlags, transform_to : GBindingTransformFunc, transform_from : GBindingTransformFunc, user_data : Gpointer, notify : GDestroyNotify) : GBinding*
  fun g_object_bind_property_with_closures(source : Gpointer, source_property : Gchar*, target : Gpointer, target_property : Gchar*, flags : GBindingFlags, transform_to : GClosure*, transform_from : GClosure*) : GBinding*
  fun g_enum_get_value(enum_class : GEnumClass*, value : Gint) : GEnumValue*
  fun g_enum_get_value_by_name(enum_class : GEnumClass*, name : Gchar*) : GEnumValue*
  fun g_enum_get_value_by_nick(enum_class : GEnumClass*, nick : Gchar*) : GEnumValue*
  fun g_flags_get_first_value(flags_class : GFlagsClass*, value : Guint) : GFlagsValue*
  fun g_flags_get_value_by_name(flags_class : GFlagsClass*, name : Gchar*) : GFlagsValue*
  fun g_flags_get_value_by_nick(flags_class : GFlagsClass*, nick : Gchar*) : GFlagsValue*
  fun g_value_set_enum(value : GValue*, v_enum : Gint) : Void
  fun g_value_get_enum(value : GValue*) : Gint
  fun g_value_set_flags(value : GValue*, v_flags : Guint) : Void
  fun g_value_get_flags(value : GValue*) : Guint
  fun g_enum_register_static(name : Gchar*, const_static_values : GEnumValue*) : GType
  fun g_flags_register_static(name : Gchar*, const_static_values : GFlagsValue*) : GType
  fun g_enum_complete_type_info(g_enum_type : GType, info : GTypeInfo*, const_values : GEnumValue*) : Void
  fun g_flags_complete_type_info(g_flags_type : GType, info : GTypeInfo*, const_values : GFlagsValue*) : Void
  fun g_param_spec_char(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Gint8, maximum : Gint8, default_value : Gint8, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_uchar(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Guint8, maximum : Guint8, default_value : Guint8, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_boolean(name : Gchar*, nick : Gchar*, blurb : Gchar*, default_value : Gboolean, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_int(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Gint, maximum : Gint, default_value : Gint, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_uint(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Guint, maximum : Guint, default_value : Guint, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_long(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Glong, maximum : Glong, default_value : Glong, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_ulong(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Gulong, maximum : Gulong, default_value : Gulong, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_int64(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Gint64, maximum : Gint64, default_value : Gint64, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_uint64(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Guint64, maximum : Guint64, default_value : Guint64, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_unichar(name : Gchar*, nick : Gchar*, blurb : Gchar*, default_value : Gunichar, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_enum(name : Gchar*, nick : Gchar*, blurb : Gchar*, enum_type : GType, default_value : Gint, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_flags(name : Gchar*, nick : Gchar*, blurb : Gchar*, flags_type : GType, default_value : Guint, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_float(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Gfloat, maximum : Gfloat, default_value : Gfloat, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_double(name : Gchar*, nick : Gchar*, blurb : Gchar*, minimum : Gdouble, maximum : Gdouble, default_value : Gdouble, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_string(name : Gchar*, nick : Gchar*, blurb : Gchar*, default_value : Gchar*, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_param(name : Gchar*, nick : Gchar*, blurb : Gchar*, param_type : GType, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_boxed(name : Gchar*, nick : Gchar*, blurb : Gchar*, boxed_type : GType, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_pointer(name : Gchar*, nick : Gchar*, blurb : Gchar*, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_value_array(name : Gchar*, nick : Gchar*, blurb : Gchar*, element_spec : GParamSpec*, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_object(name : Gchar*, nick : Gchar*, blurb : Gchar*, object_type : GType, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_override(name : Gchar*, overridden : GParamSpec*) : GParamSpec*
  fun g_param_spec_gtype(name : Gchar*, nick : Gchar*, blurb : Gchar*, is_a_type : GType, flags : GParamFlags) : GParamSpec*
  fun g_param_spec_variant(name : Gchar*, nick : Gchar*, blurb : Gchar*, type : GVariantType*, default_value : GVariant*, flags : GParamFlags) : GParamSpec*
  fun g_source_set_closure(source : GSource*, closure : GClosure*) : Void
  fun g_source_set_dummy_callback(source : GSource*) : Void
  fun g_type_module_get_type : GType
  fun g_type_module_use(module : GTypeModule*) : Gboolean
  fun g_type_module_unuse(module : GTypeModule*) : Void
  fun g_type_module_set_name(module : GTypeModule*, name : Gchar*) : Void
  fun g_type_module_register_type(module : GTypeModule*, parent_type : GType, type_name : Gchar*, type_info : GTypeInfo*, flags : GTypeFlags) : GType
  fun g_type_module_add_interface(module : GTypeModule*, instance_type : GType, interface_type : GType, interface_info : GInterfaceInfo*) : Void
  fun g_type_module_register_enum(module : GTypeModule*, name : Gchar*, const_static_values : GEnumValue*) : GType
  fun g_type_module_register_flags(module : GTypeModule*, name : Gchar*, const_static_values : GFlagsValue*) : GType
  fun g_type_plugin_get_type : GType
  fun g_type_plugin_use(plugin : GTypePlugin*) : Void
  fun g_type_plugin_unuse(plugin : GTypePlugin*) : Void
  fun g_type_plugin_complete_type_info(plugin : GTypePlugin*, g_type : GType, info : GTypeInfo*, value_table : GTypeValueTable*) : Void
  fun g_type_plugin_complete_interface_info(plugin : GTypePlugin*, instance_type : GType, interface_type : GType, info : GInterfaceInfo*) : Void
  fun g_value_array_get_type : GType
  fun g_value_array_get_nth(value_array : GValueArray*, index_ : Guint) : GValue*
  fun g_value_array_new(n_prealloced : Guint) : GValueArray*
  fun g_value_array_free(value_array : GValueArray*) : Void
  fun g_value_array_copy(value_array : GValueArray*) : GValueArray*
  fun g_value_array_prepend(value_array : GValueArray*, value : GValue*) : GValueArray*
  fun g_value_array_append(value_array : GValueArray*, value : GValue*) : GValueArray*
  fun g_value_array_insert(value_array : GValueArray*, index_ : Guint, value : GValue*) : GValueArray*
  fun g_value_array_remove(value_array : GValueArray*, index_ : Guint) : GValueArray*
  fun g_value_array_sort(value_array : GValueArray*, compare_func : GCompareFunc) : GValueArray*
  fun g_value_array_sort_with_data(value_array : GValueArray*, compare_func : GCompareDataFunc, user_data : Gpointer) : GValueArray*
  fun g_value_set_char(value : GValue*, v_char : Gchar) : Void
  fun g_value_get_char(value : GValue*) : Gchar
  fun g_value_set_schar(value : GValue*, v_char : Gint8) : Void
  fun g_value_get_schar(value : GValue*) : Gint8
  fun g_value_set_uchar(value : GValue*, v_uchar : Guchar) : Void
  fun g_value_get_uchar(value : GValue*) : Guchar
  fun g_value_set_boolean(value : GValue*, v_boolean : Gboolean) : Void
  fun g_value_get_boolean(value : GValue*) : Gboolean
  fun g_value_set_int(value : GValue*, v_int : Gint) : Void
  fun g_value_get_int(value : GValue*) : Gint
  fun g_value_set_uint(value : GValue*, v_uint : Guint) : Void
  fun g_value_get_uint(value : GValue*) : Guint
  fun g_value_set_long(value : GValue*, v_long : Glong) : Void
  fun g_value_get_long(value : GValue*) : Glong
  fun g_value_set_ulong(value : GValue*, v_ulong : Gulong) : Void
  fun g_value_get_ulong(value : GValue*) : Gulong
  fun g_value_set_int64(value : GValue*, v_int64 : Gint64) : Void
  fun g_value_get_int64(value : GValue*) : Gint64
  fun g_value_set_uint64(value : GValue*, v_uint64 : Guint64) : Void
  fun g_value_get_uint64(value : GValue*) : Guint64
  fun g_value_set_float(value : GValue*, v_float : Gfloat) : Void
  fun g_value_get_float(value : GValue*) : Gfloat
  fun g_value_set_double(value : GValue*, v_double : Gdouble) : Void
  fun g_value_get_double(value : GValue*) : Gdouble
  fun g_value_set_string(value : GValue*, v_string : Gchar*) : Void
  fun g_value_set_static_string(value : GValue*, v_string : Gchar*) : Void
  fun g_value_get_string(value : GValue*) : Gchar*
  fun g_value_dup_string(value : GValue*) : Gchar*
  fun g_value_set_pointer(value : GValue*, v_pointer : Gpointer) : Void
  fun g_value_get_pointer(value : GValue*) : Gpointer
  fun g_gtype_get_type : GType
  fun g_value_set_gtype(value : GValue*, v_gtype : GType) : Void
  fun g_value_get_gtype(value : GValue*) : GType
  fun g_value_set_variant(value : GValue*, variant : GVariant*) : Void
  fun g_value_take_variant(value : GValue*, variant : GVariant*) : Void
  fun g_value_get_variant(value : GValue*) : GVariant*
  fun g_value_dup_variant(value : GValue*) : GVariant*
  fun g_pointer_type_register_static(name : Gchar*) : GType
  fun g_strdup_value_contents(value : GValue*) : Gchar*
  fun g_value_take_string(value : GValue*, v_string : Gchar*) : Void
  fun g_value_set_string_take_ownership(value : GValue*, v_string : Gchar*) : Void
  fun glib_autoptr_cleanup_g_object(_ptr : GObject**) : Void
  fun glib_autoptr_cleanup_g_initially_unowned(_ptr : GInitiallyUnowned**) : Void
  fun glib_auto_cleanup_g_value(_ptr : GValue*) : Void
  fun g_action_get_type : GType
  fun g_action_get_name(action : GAction*) : Gchar*
  fun g_action_get_parameter_type(action : GAction*) : GVariantType*
  fun g_action_get_state_type(action : GAction*) : GVariantType*
  fun g_action_get_state_hint(action : GAction*) : GVariant*
  fun g_action_get_enabled(action : GAction*) : Gboolean
  fun g_action_get_state(action : GAction*) : GVariant*
  fun g_action_change_state(action : GAction*, value : GVariant*) : Void
  fun g_action_activate(action : GAction*, parameter : GVariant*) : Void
  fun g_action_name_is_valid(action_name : Gchar*) : Gboolean
  fun g_action_parse_detailed_name(detailed_name : Gchar*, action_name : Gchar**, target_value : GVariant**, error : GError**) : Gboolean
  fun g_action_print_detailed_name(action_name : Gchar*, target_value : GVariant*) : Gchar*
  fun g_action_group_get_type : GType
  fun g_action_group_has_action(action_group : GActionGroup*, action_name : Gchar*) : Gboolean
  fun g_action_group_list_actions(action_group : GActionGroup*) : Gchar**
  fun g_action_group_get_action_parameter_type(action_group : GActionGroup*, action_name : Gchar*) : GVariantType*
  fun g_action_group_get_action_state_type(action_group : GActionGroup*, action_name : Gchar*) : GVariantType*
  fun g_action_group_get_action_state_hint(action_group : GActionGroup*, action_name : Gchar*) : GVariant*
  fun g_action_group_get_action_enabled(action_group : GActionGroup*, action_name : Gchar*) : Gboolean
  fun g_action_group_get_action_state(action_group : GActionGroup*, action_name : Gchar*) : GVariant*
  fun g_action_group_change_action_state(action_group : GActionGroup*, action_name : Gchar*, value : GVariant*) : Void
  fun g_action_group_activate_action(action_group : GActionGroup*, action_name : Gchar*, parameter : GVariant*) : Void
  fun g_action_group_action_added(action_group : GActionGroup*, action_name : Gchar*) : Void
  fun g_action_group_action_removed(action_group : GActionGroup*, action_name : Gchar*) : Void
  fun g_action_group_action_enabled_changed(action_group : GActionGroup*, action_name : Gchar*, enabled : Gboolean) : Void
  fun g_action_group_action_state_changed(action_group : GActionGroup*, action_name : Gchar*, state : GVariant*) : Void
  fun g_action_group_query_action(action_group : GActionGroup*, action_name : Gchar*, enabled : Gboolean*, parameter_type : GVariantType**, state_type : GVariantType**, state_hint : GVariant**, state : GVariant**) : Gboolean
  fun g_dbus_connection_export_action_group(connection : GDBusConnection*, object_path : Gchar*, action_group : GActionGroup*, error : GError**) : Guint
  fun g_dbus_connection_unexport_action_group(connection : GDBusConnection*, export_id : Guint) : Void
  fun g_action_map_get_type : GType
  fun g_action_map_lookup_action(action_map : GActionMap*, action_name : Gchar*) : GAction*
  fun g_action_map_add_action(action_map : GActionMap*, action : GAction*) : Void
  fun g_action_map_remove_action(action_map : GActionMap*, action_name : Gchar*) : Void
  fun g_action_map_add_action_entries(action_map : GActionMap*, entries : GActionEntry*, n_entries : Gint, user_data : Gpointer) : Void
  fun g_app_info_get_type : GType
  fun g_app_info_create_from_commandline(commandline : UInt8*, application_name : UInt8*, flags : GAppInfoCreateFlags, error : GError**) : GAppInfo*
  fun g_app_info_dup(appinfo : GAppInfo*) : GAppInfo*
  fun g_app_info_equal(appinfo1 : GAppInfo*, appinfo2 : GAppInfo*) : Gboolean
  fun g_app_info_get_id(appinfo : GAppInfo*) : UInt8*
  fun g_app_info_get_name(appinfo : GAppInfo*) : UInt8*
  fun g_app_info_get_display_name(appinfo : GAppInfo*) : UInt8*
  fun g_app_info_get_description(appinfo : GAppInfo*) : UInt8*
  fun g_app_info_get_executable(appinfo : GAppInfo*) : UInt8*
  fun g_app_info_get_commandline(appinfo : GAppInfo*) : UInt8*
  fun g_app_info_get_icon(appinfo : GAppInfo*) : GIcon*
  fun g_app_info_launch(appinfo : GAppInfo*, files : GList*, launch_context : GAppLaunchContext*, error : GError**) : Gboolean
  fun g_app_info_supports_uris(appinfo : GAppInfo*) : Gboolean
  fun g_app_info_supports_files(appinfo : GAppInfo*) : Gboolean
  fun g_app_info_launch_uris(appinfo : GAppInfo*, uris : GList*, launch_context : GAppLaunchContext*, error : GError**) : Gboolean
  fun g_app_info_should_show(appinfo : GAppInfo*) : Gboolean
  fun g_app_info_set_as_default_for_type(appinfo : GAppInfo*, content_type : UInt8*, error : GError**) : Gboolean
  fun g_app_info_set_as_default_for_extension(appinfo : GAppInfo*, extension : UInt8*, error : GError**) : Gboolean
  fun g_app_info_add_supports_type(appinfo : GAppInfo*, content_type : UInt8*, error : GError**) : Gboolean
  fun g_app_info_can_remove_supports_type(appinfo : GAppInfo*) : Gboolean
  fun g_app_info_remove_supports_type(appinfo : GAppInfo*, content_type : UInt8*, error : GError**) : Gboolean
  fun g_app_info_get_supported_types(appinfo : GAppInfo*) : UInt8**
  fun g_app_info_can_delete(appinfo : GAppInfo*) : Gboolean
  fun g_app_info_delete(appinfo : GAppInfo*) : Gboolean
  fun g_app_info_set_as_last_used_for_type(appinfo : GAppInfo*, content_type : UInt8*, error : GError**) : Gboolean
  fun g_app_info_get_all : GList*
  fun g_app_info_get_all_for_type(content_type : UInt8*) : GList*
  fun g_app_info_get_recommended_for_type(content_type : Gchar*) : GList*
  fun g_app_info_get_fallback_for_type(content_type : Gchar*) : GList*
  fun g_app_info_reset_type_associations(content_type : UInt8*) : Void
  fun g_app_info_get_default_for_type(content_type : UInt8*, must_support_uris : Gboolean) : GAppInfo*
  fun g_app_info_get_default_for_uri_scheme(uri_scheme : UInt8*) : GAppInfo*
  fun g_app_info_launch_default_for_uri(uri : UInt8*, launch_context : GAppLaunchContext*, error : GError**) : Gboolean
  fun g_app_launch_context_get_type : GType
  fun g_app_launch_context_new : GAppLaunchContext*
  fun g_app_launch_context_setenv(context : GAppLaunchContext*, variable : UInt8*, value : UInt8*) : Void
  fun g_app_launch_context_unsetenv(context : GAppLaunchContext*, variable : UInt8*) : Void
  fun g_app_launch_context_get_environment(context : GAppLaunchContext*) : UInt8**
  fun g_app_launch_context_get_display(context : GAppLaunchContext*, info : GAppInfo*, files : GList*) : UInt8*
  fun g_app_launch_context_get_startup_notify_id(context : GAppLaunchContext*, info : GAppInfo*, files : GList*) : UInt8*
  fun g_app_launch_context_launch_failed(context : GAppLaunchContext*, startup_notify_id : UInt8*) : Void
  fun g_app_info_monitor_get_type : GType
  fun g_app_info_monitor_get : GAppInfoMonitor*
  fun g_application_get_type : GType
  fun g_application_id_is_valid(application_id : Gchar*) : Gboolean
  fun g_application_new(application_id : Gchar*, flags : GApplicationFlags) : GApplication*
  fun g_application_get_application_id(application : GApplication*) : Gchar*
  fun g_application_set_application_id(application : GApplication*, application_id : Gchar*) : Void
  fun g_application_get_dbus_connection(application : GApplication*) : GDBusConnection*
  fun g_application_get_dbus_object_path(application : GApplication*) : Gchar*
  fun g_application_get_inactivity_timeout(application : GApplication*) : Guint
  fun g_application_set_inactivity_timeout(application : GApplication*, inactivity_timeout : Guint) : Void
  fun g_application_get_flags(application : GApplication*) : GApplicationFlags
  fun g_application_set_flags(application : GApplication*, flags : GApplicationFlags) : Void
  fun g_application_get_resource_base_path(application : GApplication*) : Gchar*
  fun g_application_set_resource_base_path(application : GApplication*, resource_path : Gchar*) : Void
  fun g_application_set_action_group(application : GApplication*, action_group : GActionGroup*) : Void
  fun g_application_add_main_option_entries(application : GApplication*, entries : GOptionEntry*) : Void
  fun g_application_add_main_option(application : GApplication*, long_name : UInt8*, short_name : Int8, flags : GOptionFlags, arg : GOptionArg, description : UInt8*, arg_description : UInt8*) : Void
  fun g_application_add_option_group(application : GApplication*, group : GOptionGroup*) : Void
  fun g_application_get_is_registered(application : GApplication*) : Gboolean
  fun g_application_get_is_remote(application : GApplication*) : Gboolean
  fun g_application_register(application : GApplication*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_application_hold(application : GApplication*) : Void
  fun g_application_release(application : GApplication*) : Void
  fun g_application_activate(application : GApplication*) : Void
  fun g_application_open(application : GApplication*, files : GFile**, n_files : Gint, hint : Gchar*) : Void
  fun g_application_run(application : GApplication*, argc : Int32, argv : UInt8**) : Int32
  fun g_application_quit(application : GApplication*) : Void
  fun g_application_get_default : GApplication*
  fun g_application_set_default(application : GApplication*) : Void
  fun g_application_mark_busy(application : GApplication*) : Void
  fun g_application_unmark_busy(application : GApplication*) : Void
  fun g_application_get_is_busy(application : GApplication*) : Gboolean
  fun g_application_send_notification(application : GApplication*, id : Gchar*, notification : GNotification*) : Void
  fun g_application_withdraw_notification(application : GApplication*, id : Gchar*) : Void
  fun g_application_bind_busy_property(application : GApplication*, object : Gpointer, property : Gchar*) : Void
  fun g_application_unbind_busy_property(application : GApplication*, object : Gpointer, property : Gchar*) : Void
  fun g_application_command_line_get_type : GType
  fun g_application_command_line_get_arguments(cmdline : GApplicationCommandLine*, argc : Int32*) : Gchar**
  fun g_application_command_line_get_options_dict(cmdline : GApplicationCommandLine*) : GVariantDict*
  fun g_application_command_line_get_stdin(cmdline : GApplicationCommandLine*) : GInputStream*
  fun g_application_command_line_get_environ(cmdline : GApplicationCommandLine*) : Gchar**
  fun g_application_command_line_getenv(cmdline : GApplicationCommandLine*, name : Gchar*) : Gchar*
  fun g_application_command_line_get_cwd(cmdline : GApplicationCommandLine*) : Gchar*
  fun g_application_command_line_get_is_remote(cmdline : GApplicationCommandLine*) : Gboolean
  fun g_application_command_line_print(cmdline : GApplicationCommandLine*, format : Gchar*) : Void
  fun g_application_command_line_printerr(cmdline : GApplicationCommandLine*, format : Gchar*) : Void
  fun g_application_command_line_get_exit_status(cmdline : GApplicationCommandLine*) : Int32
  fun g_application_command_line_set_exit_status(cmdline : GApplicationCommandLine*, exit_status : Int32) : Void
  fun g_application_command_line_get_platform_data(cmdline : GApplicationCommandLine*) : GVariant*
  fun g_application_command_line_create_file_for_arg(cmdline : GApplicationCommandLine*, arg : Gchar*) : GFile*
  fun g_initable_get_type : GType
  fun g_initable_init(initable : GInitable*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_initable_new(object_type : GType, cancellable : GCancellable*, error : GError**, first_property_name : Gchar*) : Gpointer
  fun g_initable_newv(object_type : GType, n_parameters : Guint, parameters : GParameter*, cancellable : GCancellable*, error : GError**) : Gpointer
  fun g_initable_new_valist(object_type : GType, first_property_name : Gchar*, var_args : X__va_list_tag*, cancellable : GCancellable*, error : GError**) : GObject*
  fun g_async_initable_get_type : GType
  fun g_async_initable_init_async(initable : GAsyncInitable*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_async_initable_init_finish(initable : GAsyncInitable*, res : GAsyncResult*, error : GError**) : Gboolean
  fun g_async_initable_new_async(object_type : GType, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer, first_property_name : Gchar*) : Void
  fun g_async_initable_newv_async(object_type : GType, n_parameters : Guint, parameters : GParameter*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_async_initable_new_valist_async(object_type : GType, first_property_name : Gchar*, var_args : X__va_list_tag*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_async_initable_new_finish(initable : GAsyncInitable*, res : GAsyncResult*, error : GError**) : GObject*
  fun g_async_result_get_type : GType
  fun g_async_result_get_user_data(res : GAsyncResult*) : Gpointer
  fun g_async_result_get_source_object(res : GAsyncResult*) : GObject*
  fun g_async_result_legacy_propagate_error(res : GAsyncResult*, error : GError**) : Gboolean
  fun g_async_result_is_tagged(res : GAsyncResult*, source_tag : Gpointer) : Gboolean
  fun g_input_stream_get_type : GType
  fun g_input_stream_read(stream : GInputStream*, buffer : Void*, count : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_input_stream_read_all(stream : GInputStream*, buffer : Void*, count : Gsize, bytes_read : Gsize*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_input_stream_read_bytes(stream : GInputStream*, count : Gsize, cancellable : GCancellable*, error : GError**) : GBytes*
  fun g_input_stream_skip(stream : GInputStream*, count : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_input_stream_close(stream : GInputStream*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_input_stream_read_async(stream : GInputStream*, buffer : Void*, count : Gsize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_input_stream_read_finish(stream : GInputStream*, result : GAsyncResult*, error : GError**) : Gssize
  fun g_input_stream_read_all_async(stream : GInputStream*, buffer : Void*, count : Gsize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_input_stream_read_all_finish(stream : GInputStream*, result : GAsyncResult*, bytes_read : Gsize*, error : GError**) : Gboolean
  fun g_input_stream_read_bytes_async(stream : GInputStream*, count : Gsize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_input_stream_read_bytes_finish(stream : GInputStream*, result : GAsyncResult*, error : GError**) : GBytes*
  fun g_input_stream_skip_async(stream : GInputStream*, count : Gsize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_input_stream_skip_finish(stream : GInputStream*, result : GAsyncResult*, error : GError**) : Gssize
  fun g_input_stream_close_async(stream : GInputStream*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_input_stream_close_finish(stream : GInputStream*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_input_stream_is_closed(stream : GInputStream*) : Gboolean
  fun g_input_stream_has_pending(stream : GInputStream*) : Gboolean
  fun g_input_stream_set_pending(stream : GInputStream*, error : GError**) : Gboolean
  fun g_input_stream_clear_pending(stream : GInputStream*) : Void
  fun g_filter_input_stream_get_type : GType
  fun g_filter_input_stream_get_base_stream(stream : GFilterInputStream*) : GInputStream*
  fun g_filter_input_stream_get_close_base_stream(stream : GFilterInputStream*) : Gboolean
  fun g_filter_input_stream_set_close_base_stream(stream : GFilterInputStream*, close_base : Gboolean) : Void
  fun g_buffered_input_stream_get_type : GType
  fun g_buffered_input_stream_new(base_stream : GInputStream*) : GInputStream*
  fun g_buffered_input_stream_new_sized(base_stream : GInputStream*, size : Gsize) : GInputStream*
  fun g_buffered_input_stream_get_buffer_size(stream : GBufferedInputStream*) : Gsize
  fun g_buffered_input_stream_set_buffer_size(stream : GBufferedInputStream*, size : Gsize) : Void
  fun g_buffered_input_stream_get_available(stream : GBufferedInputStream*) : Gsize
  fun g_buffered_input_stream_peek(stream : GBufferedInputStream*, buffer : Void*, offset : Gsize, count : Gsize) : Gsize
  fun g_buffered_input_stream_peek_buffer(stream : GBufferedInputStream*, count : Gsize*) : Void*
  fun g_buffered_input_stream_fill(stream : GBufferedInputStream*, count : Gssize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_buffered_input_stream_fill_async(stream : GBufferedInputStream*, count : Gssize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_buffered_input_stream_fill_finish(stream : GBufferedInputStream*, result : GAsyncResult*, error : GError**) : Gssize
  fun g_buffered_input_stream_read_byte(stream : GBufferedInputStream*, cancellable : GCancellable*, error : GError**) : Int32
  fun g_output_stream_get_type : GType
  fun g_output_stream_write(stream : GOutputStream*, buffer : Void*, count : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_output_stream_write_all(stream : GOutputStream*, buffer : Void*, count : Gsize, bytes_written : Gsize*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_output_stream_printf(stream : GOutputStream*, bytes_written : Gsize*, cancellable : GCancellable*, error : GError**, format : Gchar*) : Gboolean
  fun g_output_stream_vprintf(stream : GOutputStream*, bytes_written : Gsize*, cancellable : GCancellable*, error : GError**, format : Gchar*, args : X__va_list_tag*) : Gboolean
  fun g_output_stream_write_bytes(stream : GOutputStream*, bytes : GBytes*, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_output_stream_splice(stream : GOutputStream*, source : GInputStream*, flags : GOutputStreamSpliceFlags, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_output_stream_flush(stream : GOutputStream*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_output_stream_close(stream : GOutputStream*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_output_stream_write_async(stream : GOutputStream*, buffer : Void*, count : Gsize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_output_stream_write_finish(stream : GOutputStream*, result : GAsyncResult*, error : GError**) : Gssize
  fun g_output_stream_write_all_async(stream : GOutputStream*, buffer : Void*, count : Gsize, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_output_stream_write_all_finish(stream : GOutputStream*, result : GAsyncResult*, bytes_written : Gsize*, error : GError**) : Gboolean
  fun g_output_stream_write_bytes_async(stream : GOutputStream*, bytes : GBytes*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_output_stream_write_bytes_finish(stream : GOutputStream*, result : GAsyncResult*, error : GError**) : Gssize
  fun g_output_stream_splice_async(stream : GOutputStream*, source : GInputStream*, flags : GOutputStreamSpliceFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_output_stream_splice_finish(stream : GOutputStream*, result : GAsyncResult*, error : GError**) : Gssize
  fun g_output_stream_flush_async(stream : GOutputStream*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_output_stream_flush_finish(stream : GOutputStream*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_output_stream_close_async(stream : GOutputStream*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_output_stream_close_finish(stream : GOutputStream*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_output_stream_is_closed(stream : GOutputStream*) : Gboolean
  fun g_output_stream_is_closing(stream : GOutputStream*) : Gboolean
  fun g_output_stream_has_pending(stream : GOutputStream*) : Gboolean
  fun g_output_stream_set_pending(stream : GOutputStream*, error : GError**) : Gboolean
  fun g_output_stream_clear_pending(stream : GOutputStream*) : Void
  fun g_filter_output_stream_get_type : GType
  fun g_filter_output_stream_get_base_stream(stream : GFilterOutputStream*) : GOutputStream*
  fun g_filter_output_stream_get_close_base_stream(stream : GFilterOutputStream*) : Gboolean
  fun g_filter_output_stream_set_close_base_stream(stream : GFilterOutputStream*, close_base : Gboolean) : Void
  fun g_buffered_output_stream_get_type : GType
  fun g_buffered_output_stream_new(base_stream : GOutputStream*) : GOutputStream*
  fun g_buffered_output_stream_new_sized(base_stream : GOutputStream*, size : Gsize) : GOutputStream*
  fun g_buffered_output_stream_get_buffer_size(stream : GBufferedOutputStream*) : Gsize
  fun g_buffered_output_stream_set_buffer_size(stream : GBufferedOutputStream*, size : Gsize) : Void
  fun g_buffered_output_stream_get_auto_grow(stream : GBufferedOutputStream*) : Gboolean
  fun g_buffered_output_stream_set_auto_grow(stream : GBufferedOutputStream*, auto_grow : Gboolean) : Void
  fun g_bytes_icon_get_type : GType
  fun g_bytes_icon_new(bytes : GBytes*) : GIcon*
  fun g_bytes_icon_get_bytes(icon : GBytesIcon*) : GBytes*
  fun g_cancellable_get_type : GType
  fun g_cancellable_new : GCancellable*
  fun g_cancellable_is_cancelled(cancellable : GCancellable*) : Gboolean
  fun g_cancellable_set_error_if_cancelled(cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_cancellable_get_fd(cancellable : GCancellable*) : Int32
  fun g_cancellable_make_pollfd(cancellable : GCancellable*, pollfd : GPollFD*) : Gboolean
  fun g_cancellable_release_fd(cancellable : GCancellable*) : Void
  fun g_cancellable_source_new(cancellable : GCancellable*) : GSource*
  fun g_cancellable_get_current : GCancellable*
  fun g_cancellable_push_current(cancellable : GCancellable*) : Void
  fun g_cancellable_pop_current(cancellable : GCancellable*) : Void
  fun g_cancellable_reset(cancellable : GCancellable*) : Void
  fun g_cancellable_connect(cancellable : GCancellable*, callback : GCallback, data : Gpointer, data_destroy_func : GDestroyNotify) : Gulong
  fun g_cancellable_disconnect(cancellable : GCancellable*, handler_id : Gulong) : Void
  fun g_cancellable_cancel(cancellable : GCancellable*) : Void
  fun g_converter_get_type : GType
  fun g_converter_convert(converter : GConverter*, inbuf : Void*, inbuf_size : Gsize, outbuf : Void*, outbuf_size : Gsize, flags : GConverterFlags, bytes_read : Gsize*, bytes_written : Gsize*, error : GError**) : GConverterResult
  fun g_converter_reset(converter : GConverter*) : Void
  fun g_charset_converter_get_type : GType
  fun g_charset_converter_new(to_charset : Gchar*, from_charset : Gchar*, error : GError**) : GCharsetConverter*
  fun g_charset_converter_set_use_fallback(converter : GCharsetConverter*, use_fallback : Gboolean) : Void
  fun g_charset_converter_get_use_fallback(converter : GCharsetConverter*) : Gboolean
  fun g_charset_converter_get_num_fallbacks(converter : GCharsetConverter*) : Guint
  fun g_content_type_equals(type1 : Gchar*, type2 : Gchar*) : Gboolean
  fun g_content_type_is_a(type : Gchar*, supertype : Gchar*) : Gboolean
  fun g_content_type_is_unknown(type : Gchar*) : Gboolean
  fun g_content_type_get_description(type : Gchar*) : Gchar*
  fun g_content_type_get_mime_type(type : Gchar*) : Gchar*
  fun g_content_type_get_icon(type : Gchar*) : GIcon*
  fun g_content_type_get_symbolic_icon(type : Gchar*) : GIcon*
  fun g_content_type_get_generic_icon_name(type : Gchar*) : Gchar*
  fun g_content_type_can_be_executable(type : Gchar*) : Gboolean
  fun g_content_type_from_mime_type(mime_type : Gchar*) : Gchar*
  fun g_content_type_guess(filename : Gchar*, data : Guchar*, data_size : Gsize, result_uncertain : Gboolean*) : Gchar*
  fun g_content_type_guess_for_tree(root : GFile*) : Gchar**
  fun g_content_types_get_registered : GList*
  fun g_converter_input_stream_get_type : GType
  fun g_converter_input_stream_new(base_stream : GInputStream*, converter : GConverter*) : GInputStream*
  fun g_converter_input_stream_get_converter(converter_stream : GConverterInputStream*) : GConverter*
  fun g_converter_output_stream_get_type : GType
  fun g_converter_output_stream_new(base_stream : GOutputStream*, converter : GConverter*) : GOutputStream*
  fun g_converter_output_stream_get_converter(converter_stream : GConverterOutputStream*) : GConverter*
  fun access(__name : UInt8*, __type : Int32) : Int32
  fun faccessat(__fd : Int32, __file : UInt8*, __type : Int32, __flag : Int32) : Int32
  fun lseek(__fd : Int32, __offset : X__off_t, __whence : Int32) : X__off_t
  fun close(__fd : Int32) : Int32
  fun read(__fd : Int32, __buf : Void*, __nbytes : SizeT) : SsizeT
  fun write(__fd : Int32, __buf : Void*, __n : SizeT) : SsizeT
  fun pread(__fd : Int32, __buf : Void*, __nbytes : SizeT, __offset : X__off_t) : SsizeT
  fun pwrite(__fd : Int32, __buf : Void*, __n : SizeT, __offset : X__off_t) : SsizeT
  fun pipe(__pipedes : Int32*) : Int32
  fun alarm(__seconds : UInt32) : UInt32
  fun sleep(__seconds : UInt32) : UInt32
  fun ualarm(__value : X__useconds_t, __interval : X__useconds_t) : X__useconds_t
  fun usleep(__useconds : X__useconds_t) : Int32
  fun pause : Int32
  fun chown(__file : UInt8*, __owner : X__uid_t, __group : X__gid_t) : Int32
  fun fchown(__fd : Int32, __owner : X__uid_t, __group : X__gid_t) : Int32
  fun lchown(__file : UInt8*, __owner : X__uid_t, __group : X__gid_t) : Int32
  fun fchownat(__fd : Int32, __file : UInt8*, __owner : X__uid_t, __group : X__gid_t, __flag : Int32) : Int32
  fun chdir(__path : UInt8*) : Int32
  fun fchdir(__fd : Int32) : Int32
  fun getcwd(__buf : UInt8*, __size : SizeT) : UInt8*
  fun getwd(__buf : UInt8*) : UInt8*
  fun dup(__fd : Int32) : Int32
  fun dup2(__fd : Int32, __fd2 : Int32) : Int32
  fun execve(__path : UInt8*, __argv : UInt8**, __envp : UInt8**) : Int32
  fun fexecve(__fd : Int32, __argv : UInt8**, __envp : UInt8**) : Int32
  fun execv(__path : UInt8*, __argv : UInt8**) : Int32
  fun execle(__path : UInt8*, __arg : UInt8*) : Int32
  fun execl(__path : UInt8*, __arg : UInt8*) : Int32
  fun execvp(__file : UInt8*, __argv : UInt8**) : Int32
  fun execlp(__file : UInt8*, __arg : UInt8*) : Int32
  fun nice(__inc : Int32) : Int32
  fun _exit(arg1 : Int32) : Void
  fun pathconf(__path : UInt8*, __name : Int32) : Int64
  fun fpathconf(__fd : Int32, __name : Int32) : Int64
  fun sysconf(__name : Int32) : Int64
  fun confstr(__name : Int32, __buf : UInt8*, __len : SizeT) : SizeT
  fun getpid : X__pid_t
  fun getppid : X__pid_t
  fun getpgrp : X__pid_t
  fun __getpgid(__pid : X__pid_t) : X__pid_t
  fun getpgid(__pid : X__pid_t) : X__pid_t
  fun setpgid(__pid : X__pid_t, __pgid : X__pid_t) : Int32
  fun setpgrp : Int32
  fun setsid : X__pid_t
  fun getsid(__pid : X__pid_t) : X__pid_t
  fun getuid : X__uid_t
  fun geteuid : X__uid_t
  fun getgid : X__gid_t
  fun getegid : X__gid_t
  fun getgroups(__size : Int32, __list : X__gid_t*) : Int32
  fun setuid(__uid : X__uid_t) : Int32
  fun setreuid(__ruid : X__uid_t, __euid : X__uid_t) : Int32
  fun seteuid(__uid : X__uid_t) : Int32
  fun setgid(__gid : X__gid_t) : Int32
  fun setregid(__rgid : X__gid_t, __egid : X__gid_t) : Int32
  fun setegid(__gid : X__gid_t) : Int32
  fun fork : X__pid_t
  fun vfork : Int32
  fun ttyname(__fd : Int32) : UInt8*
  fun ttyname_r(__fd : Int32, __buf : UInt8*, __buflen : SizeT) : Int32
  fun isatty(__fd : Int32) : Int32
  fun ttyslot : Int32
  fun link(__from : UInt8*, __to : UInt8*) : Int32
  fun linkat(__fromfd : Int32, __from : UInt8*, __tofd : Int32, __to : UInt8*, __flags : Int32) : Int32
  fun symlink(__from : UInt8*, __to : UInt8*) : Int32
  fun readlink(__path : UInt8*, __buf : UInt8*, __len : SizeT) : SsizeT
  fun symlinkat(__from : UInt8*, __tofd : Int32, __to : UInt8*) : Int32
  fun readlinkat(__fd : Int32, __path : UInt8*, __buf : UInt8*, __len : SizeT) : SsizeT
  fun unlink(__name : UInt8*) : Int32
  fun unlinkat(__fd : Int32, __name : UInt8*, __flag : Int32) : Int32
  fun rmdir(__path : UInt8*) : Int32
  fun tcgetpgrp(__fd : Int32) : X__pid_t
  fun tcsetpgrp(__fd : Int32, __pgrp_id : X__pid_t) : Int32
  fun getlogin : UInt8*
  fun getlogin_r(__name : UInt8*, __name_len : SizeT) : Int32
  fun setlogin(__name : UInt8*) : Int32
  fun getopt(___argc : Int32, ___argv : UInt8**, __shortopts : UInt8*) : Int32
  fun gethostname(__name : UInt8*, __len : SizeT) : Int32
  fun sethostname(__name : UInt8*, __len : SizeT) : Int32
  fun sethostid(__id : Int64) : Int32
  fun getdomainname(__name : UInt8*, __len : SizeT) : Int32
  fun setdomainname(__name : UInt8*, __len : SizeT) : Int32
  fun vhangup : Int32
  fun revoke(__file : UInt8*) : Int32
  fun profil(__sample_buffer : UInt16*, __size : SizeT, __offset : SizeT, __scale : UInt32) : Int32
  fun acct(__name : UInt8*) : Int32
  fun getusershell : UInt8*
  fun endusershell : Void
  fun setusershell : Void
  fun daemon(__nochdir : Int32, __noclose : Int32) : Int32
  fun chroot(__path : UInt8*) : Int32
  fun getpass(__prompt : UInt8*) : UInt8*
  fun fsync(__fd : Int32) : Int32
  fun gethostid : Int64
  fun sync : Void
  fun getpagesize : Int32
  fun getdtablesize : Int32
  fun truncate(__file : UInt8*, __length : X__off_t) : Int32
  fun ftruncate(__fd : Int32, __length : X__off_t) : Int32
  fun brk(__addr : Void*) : Int32
  fun sbrk(__delta : IntptrT) : Void*
  fun syscall(__sysno : Int64) : Int64
  fun lockf(__fd : Int32, __cmd : Int32, __len : X__off_t) : Int32
  fun fdatasync(__fildes : Int32) : Int32
  fun g_credentials_get_type : GType
  fun g_credentials_new : GCredentials*
  fun g_credentials_to_string(credentials : GCredentials*) : Gchar*
  fun g_credentials_get_native(credentials : GCredentials*, native_type : GCredentialsType) : Gpointer
  fun g_credentials_set_native(credentials : GCredentials*, native_type : GCredentialsType, native : Gpointer) : Void
  fun g_credentials_is_same_user(credentials : GCredentials*, other_credentials : GCredentials*, error : GError**) : Gboolean
  fun g_credentials_get_unix_pid(credentials : GCredentials*, error : GError**) : PidT
  fun g_credentials_get_unix_user(credentials : GCredentials*, error : GError**) : UidT
  fun g_credentials_set_unix_user(credentials : GCredentials*, uid : UidT, error : GError**) : Gboolean
  fun g_datagram_based_get_type : GType
  fun g_datagram_based_receive_messages(datagram_based : GDatagramBased*, messages : GInputMessage*, num_messages : Guint, flags : Gint, timeout : Gint64, cancellable : GCancellable*, error : GError**) : Gint
  fun g_datagram_based_send_messages(datagram_based : GDatagramBased*, messages : GOutputMessage*, num_messages : Guint, flags : Gint, timeout : Gint64, cancellable : GCancellable*, error : GError**) : Gint
  fun g_datagram_based_create_source(datagram_based : GDatagramBased*, condition : GIOCondition, cancellable : GCancellable*) : GSource*
  fun g_datagram_based_condition_check(datagram_based : GDatagramBased*, condition : GIOCondition) : GIOCondition
  fun g_datagram_based_condition_wait(datagram_based : GDatagramBased*, condition : GIOCondition, timeout : Gint64, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_input_stream_get_type : GType
  fun g_data_input_stream_new(base_stream : GInputStream*) : GDataInputStream*
  fun g_data_input_stream_set_byte_order(stream : GDataInputStream*, order : GDataStreamByteOrder) : Void
  fun g_data_input_stream_get_byte_order(stream : GDataInputStream*) : GDataStreamByteOrder
  fun g_data_input_stream_set_newline_type(stream : GDataInputStream*, type : GDataStreamNewlineType) : Void
  fun g_data_input_stream_get_newline_type(stream : GDataInputStream*) : GDataStreamNewlineType
  fun g_data_input_stream_read_byte(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Guchar
  fun g_data_input_stream_read_int16(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Gint16
  fun g_data_input_stream_read_uint16(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Guint16
  fun g_data_input_stream_read_int32(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Gint32
  fun g_data_input_stream_read_uint32(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Guint32
  fun g_data_input_stream_read_int64(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Gint64
  fun g_data_input_stream_read_uint64(stream : GDataInputStream*, cancellable : GCancellable*, error : GError**) : Guint64
  fun g_data_input_stream_read_line(stream : GDataInputStream*, length : Gsize*, cancellable : GCancellable*, error : GError**) : UInt8*
  fun g_data_input_stream_read_line_utf8(stream : GDataInputStream*, length : Gsize*, cancellable : GCancellable*, error : GError**) : UInt8*
  fun g_data_input_stream_read_line_async(stream : GDataInputStream*, io_priority : Gint, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_data_input_stream_read_line_finish(stream : GDataInputStream*, result : GAsyncResult*, length : Gsize*, error : GError**) : UInt8*
  fun g_data_input_stream_read_line_finish_utf8(stream : GDataInputStream*, result : GAsyncResult*, length : Gsize*, error : GError**) : UInt8*
  fun g_data_input_stream_read_until(stream : GDataInputStream*, stop_chars : Gchar*, length : Gsize*, cancellable : GCancellable*, error : GError**) : UInt8*
  fun g_data_input_stream_read_until_async(stream : GDataInputStream*, stop_chars : Gchar*, io_priority : Gint, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_data_input_stream_read_until_finish(stream : GDataInputStream*, result : GAsyncResult*, length : Gsize*, error : GError**) : UInt8*
  fun g_data_input_stream_read_upto(stream : GDataInputStream*, stop_chars : Gchar*, stop_chars_len : Gssize, length : Gsize*, cancellable : GCancellable*, error : GError**) : UInt8*
  fun g_data_input_stream_read_upto_async(stream : GDataInputStream*, stop_chars : Gchar*, stop_chars_len : Gssize, io_priority : Gint, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_data_input_stream_read_upto_finish(stream : GDataInputStream*, result : GAsyncResult*, length : Gsize*, error : GError**) : UInt8*
  fun g_data_output_stream_get_type : GType
  fun g_data_output_stream_new(base_stream : GOutputStream*) : GDataOutputStream*
  fun g_data_output_stream_set_byte_order(stream : GDataOutputStream*, order : GDataStreamByteOrder) : Void
  fun g_data_output_stream_get_byte_order(stream : GDataOutputStream*) : GDataStreamByteOrder
  fun g_data_output_stream_put_byte(stream : GDataOutputStream*, data : Guchar, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_int16(stream : GDataOutputStream*, data : Gint16, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_uint16(stream : GDataOutputStream*, data : Guint16, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_int32(stream : GDataOutputStream*, data : Gint32, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_uint32(stream : GDataOutputStream*, data : Guint32, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_int64(stream : GDataOutputStream*, data : Gint64, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_uint64(stream : GDataOutputStream*, data : Guint64, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_data_output_stream_put_string(stream : GDataOutputStream*, str : UInt8*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_dbus_address_escape_value(string : Gchar*) : Gchar*
  fun g_dbus_is_address(string : Gchar*) : Gboolean
  fun g_dbus_is_supported_address(string : Gchar*, error : GError**) : Gboolean
  fun g_dbus_address_get_stream(address : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_address_get_stream_finish(res : GAsyncResult*, out_guid : Gchar**, error : GError**) : GIOStream*
  fun g_dbus_address_get_stream_sync(address : Gchar*, out_guid : Gchar**, cancellable : GCancellable*, error : GError**) : GIOStream*
  fun g_dbus_address_get_for_bus_sync(bus_type : GBusType, cancellable : GCancellable*, error : GError**) : Gchar*
  fun g_dbus_auth_observer_get_type : GType
  fun g_dbus_auth_observer_new : GDBusAuthObserver*
  fun g_dbus_auth_observer_authorize_authenticated_peer(observer : GDBusAuthObserver*, stream : GIOStream*, credentials : GCredentials*) : Gboolean
  fun g_dbus_auth_observer_allow_mechanism(observer : GDBusAuthObserver*, mechanism : Gchar*) : Gboolean
  fun g_dbus_connection_get_type : GType
  fun g_bus_get(bus_type : GBusType, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_bus_get_finish(res : GAsyncResult*, error : GError**) : GDBusConnection*
  fun g_bus_get_sync(bus_type : GBusType, cancellable : GCancellable*, error : GError**) : GDBusConnection*
  fun g_dbus_connection_new(stream : GIOStream*, guid : Gchar*, flags : GDBusConnectionFlags, observer : GDBusAuthObserver*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_new_finish(res : GAsyncResult*, error : GError**) : GDBusConnection*
  fun g_dbus_connection_new_sync(stream : GIOStream*, guid : Gchar*, flags : GDBusConnectionFlags, observer : GDBusAuthObserver*, cancellable : GCancellable*, error : GError**) : GDBusConnection*
  fun g_dbus_connection_new_for_address(address : Gchar*, flags : GDBusConnectionFlags, observer : GDBusAuthObserver*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_new_for_address_finish(res : GAsyncResult*, error : GError**) : GDBusConnection*
  fun g_dbus_connection_new_for_address_sync(address : Gchar*, flags : GDBusConnectionFlags, observer : GDBusAuthObserver*, cancellable : GCancellable*, error : GError**) : GDBusConnection*
  fun g_dbus_connection_start_message_processing(connection : GDBusConnection*) : Void
  fun g_dbus_connection_is_closed(connection : GDBusConnection*) : Gboolean
  fun g_dbus_connection_get_stream(connection : GDBusConnection*) : GIOStream*
  fun g_dbus_connection_get_guid(connection : GDBusConnection*) : Gchar*
  fun g_dbus_connection_get_unique_name(connection : GDBusConnection*) : Gchar*
  fun g_dbus_connection_get_peer_credentials(connection : GDBusConnection*) : GCredentials*
  fun g_dbus_connection_get_last_serial(connection : GDBusConnection*) : Guint32
  fun g_dbus_connection_get_exit_on_close(connection : GDBusConnection*) : Gboolean
  fun g_dbus_connection_set_exit_on_close(connection : GDBusConnection*, exit_on_close : Gboolean) : Void
  fun g_dbus_connection_get_capabilities(connection : GDBusConnection*) : GDBusCapabilityFlags
  fun g_dbus_connection_close(connection : GDBusConnection*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_close_finish(connection : GDBusConnection*, res : GAsyncResult*, error : GError**) : Gboolean
  fun g_dbus_connection_close_sync(connection : GDBusConnection*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_dbus_connection_flush(connection : GDBusConnection*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_flush_finish(connection : GDBusConnection*, res : GAsyncResult*, error : GError**) : Gboolean
  fun g_dbus_connection_flush_sync(connection : GDBusConnection*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_dbus_connection_send_message(connection : GDBusConnection*, message : GDBusMessage*, flags : GDBusSendMessageFlags, out_serial : Guint32*, error : GError**) : Gboolean
  fun g_dbus_connection_send_message_with_reply(connection : GDBusConnection*, message : GDBusMessage*, flags : GDBusSendMessageFlags, timeout_msec : Gint, out_serial : Guint32*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_send_message_with_reply_finish(connection : GDBusConnection*, res : GAsyncResult*, error : GError**) : GDBusMessage*
  fun g_dbus_connection_send_message_with_reply_sync(connection : GDBusConnection*, message : GDBusMessage*, flags : GDBusSendMessageFlags, timeout_msec : Gint, out_serial : Guint32*, cancellable : GCancellable*, error : GError**) : GDBusMessage*
  fun g_dbus_connection_emit_signal(connection : GDBusConnection*, destination_bus_name : Gchar*, object_path : Gchar*, interface_name : Gchar*, signal_name : Gchar*, parameters : GVariant*, error : GError**) : Gboolean
  fun g_dbus_connection_call(connection : GDBusConnection*, bus_name : Gchar*, object_path : Gchar*, interface_name : Gchar*, method_name : Gchar*, parameters : GVariant*, reply_type : GVariantType*, flags : GDBusCallFlags, timeout_msec : Gint, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_call_finish(connection : GDBusConnection*, res : GAsyncResult*, error : GError**) : GVariant*
  fun g_dbus_connection_call_sync(connection : GDBusConnection*, bus_name : Gchar*, object_path : Gchar*, interface_name : Gchar*, method_name : Gchar*, parameters : GVariant*, reply_type : GVariantType*, flags : GDBusCallFlags, timeout_msec : Gint, cancellable : GCancellable*, error : GError**) : GVariant*
  fun g_dbus_connection_call_with_unix_fd_list(connection : GDBusConnection*, bus_name : Gchar*, object_path : Gchar*, interface_name : Gchar*, method_name : Gchar*, parameters : GVariant*, reply_type : GVariantType*, flags : GDBusCallFlags, timeout_msec : Gint, fd_list : GUnixFDList*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_connection_call_with_unix_fd_list_finish(connection : GDBusConnection*, out_fd_list : GUnixFDList**, res : GAsyncResult*, error : GError**) : GVariant*
  fun g_dbus_connection_call_with_unix_fd_list_sync(connection : GDBusConnection*, bus_name : Gchar*, object_path : Gchar*, interface_name : Gchar*, method_name : Gchar*, parameters : GVariant*, reply_type : GVariantType*, flags : GDBusCallFlags, timeout_msec : Gint, fd_list : GUnixFDList*, out_fd_list : GUnixFDList**, cancellable : GCancellable*, error : GError**) : GVariant*
  fun g_dbus_connection_register_object(connection : GDBusConnection*, object_path : Gchar*, interface_info : GDBusInterfaceInfo*, vtable : GDBusInterfaceVTable*, user_data : Gpointer, user_data_free_func : GDestroyNotify, error : GError**) : Guint
  fun g_dbus_connection_register_object_with_closures(connection : GDBusConnection*, object_path : Gchar*, interface_info : GDBusInterfaceInfo*, method_call_closure : GClosure*, get_property_closure : GClosure*, set_property_closure : GClosure*, error : GError**) : Guint
  fun g_dbus_connection_unregister_object(connection : GDBusConnection*, registration_id : Guint) : Gboolean
  fun g_dbus_connection_register_subtree(connection : GDBusConnection*, object_path : Gchar*, vtable : GDBusSubtreeVTable*, flags : GDBusSubtreeFlags, user_data : Gpointer, user_data_free_func : GDestroyNotify, error : GError**) : Guint
  fun g_dbus_connection_unregister_subtree(connection : GDBusConnection*, registration_id : Guint) : Gboolean
  fun g_dbus_connection_signal_subscribe(connection : GDBusConnection*, sender : Gchar*, interface_name : Gchar*, member : Gchar*, object_path : Gchar*, arg0 : Gchar*, flags : GDBusSignalFlags, callback : GDBusSignalCallback, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Guint
  fun g_dbus_connection_signal_unsubscribe(connection : GDBusConnection*, subscription_id : Guint) : Void
  fun g_dbus_connection_add_filter(connection : GDBusConnection*, filter_function : GDBusMessageFilterFunction, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Guint
  fun g_dbus_connection_remove_filter(connection : GDBusConnection*, filter_id : Guint) : Void
  fun g_dbus_error_quark : GQuark
  fun g_dbus_error_is_remote_error(error : GError*) : Gboolean
  fun g_dbus_error_get_remote_error(error : GError*) : Gchar*
  fun g_dbus_error_strip_remote_error(error : GError*) : Gboolean
  fun g_dbus_error_register_error(error_domain : GQuark, error_code : Gint, dbus_error_name : Gchar*) : Gboolean
  fun g_dbus_error_unregister_error(error_domain : GQuark, error_code : Gint, dbus_error_name : Gchar*) : Gboolean
  fun g_dbus_error_register_error_domain(error_domain_quark_name : Gchar*, quark_volatile : Gsize*, entries : GDBusErrorEntry*, num_entries : Guint) : Void
  fun g_dbus_error_new_for_dbus_error(dbus_error_name : Gchar*, dbus_error_message : Gchar*) : GError*
  fun g_dbus_error_set_dbus_error(error : GError**, dbus_error_name : Gchar*, dbus_error_message : Gchar*, format : Gchar*) : Void
  fun g_dbus_error_set_dbus_error_valist(error : GError**, dbus_error_name : Gchar*, dbus_error_message : Gchar*, format : Gchar*, var_args : X__va_list_tag*) : Void
  fun g_dbus_error_encode_gerror(error : GError*) : Gchar*
  fun g_dbus_annotation_info_lookup(annotations : GDBusAnnotationInfo**, name : Gchar*) : Gchar*
  fun g_dbus_interface_info_lookup_method(info : GDBusInterfaceInfo*, name : Gchar*) : GDBusMethodInfo*
  fun g_dbus_interface_info_lookup_signal(info : GDBusInterfaceInfo*, name : Gchar*) : GDBusSignalInfo*
  fun g_dbus_interface_info_lookup_property(info : GDBusInterfaceInfo*, name : Gchar*) : GDBusPropertyInfo*
  fun g_dbus_interface_info_cache_build(info : GDBusInterfaceInfo*) : Void
  fun g_dbus_interface_info_cache_release(info : GDBusInterfaceInfo*) : Void
  fun g_dbus_interface_info_generate_xml(info : GDBusInterfaceInfo*, indent : Guint, string_builder : GString*) : Void
  fun g_dbus_node_info_new_for_xml(xml_data : Gchar*, error : GError**) : GDBusNodeInfo*
  fun g_dbus_node_info_lookup_interface(info : GDBusNodeInfo*, name : Gchar*) : GDBusInterfaceInfo*
  fun g_dbus_node_info_generate_xml(info : GDBusNodeInfo*, indent : Guint, string_builder : GString*) : Void
  fun g_dbus_node_info_ref(info : GDBusNodeInfo*) : GDBusNodeInfo*
  fun g_dbus_interface_info_ref(info : GDBusInterfaceInfo*) : GDBusInterfaceInfo*
  fun g_dbus_method_info_ref(info : GDBusMethodInfo*) : GDBusMethodInfo*
  fun g_dbus_signal_info_ref(info : GDBusSignalInfo*) : GDBusSignalInfo*
  fun g_dbus_property_info_ref(info : GDBusPropertyInfo*) : GDBusPropertyInfo*
  fun g_dbus_arg_info_ref(info : GDBusArgInfo*) : GDBusArgInfo*
  fun g_dbus_annotation_info_ref(info : GDBusAnnotationInfo*) : GDBusAnnotationInfo*
  fun g_dbus_node_info_unref(info : GDBusNodeInfo*) : Void
  fun g_dbus_interface_info_unref(info : GDBusInterfaceInfo*) : Void
  fun g_dbus_method_info_unref(info : GDBusMethodInfo*) : Void
  fun g_dbus_signal_info_unref(info : GDBusSignalInfo*) : Void
  fun g_dbus_property_info_unref(info : GDBusPropertyInfo*) : Void
  fun g_dbus_arg_info_unref(info : GDBusArgInfo*) : Void
  fun g_dbus_annotation_info_unref(info : GDBusAnnotationInfo*) : Void
  fun g_dbus_node_info_get_type : GType
  fun g_dbus_interface_info_get_type : GType
  fun g_dbus_method_info_get_type : GType
  fun g_dbus_signal_info_get_type : GType
  fun g_dbus_property_info_get_type : GType
  fun g_dbus_arg_info_get_type : GType
  fun g_dbus_annotation_info_get_type : GType
  fun g_dbus_message_get_type : GType
  fun g_dbus_message_new : GDBusMessage*
  fun g_dbus_message_new_signal(path : Gchar*, interface_ : Gchar*, signal : Gchar*) : GDBusMessage*
  fun g_dbus_message_new_method_call(name : Gchar*, path : Gchar*, interface_ : Gchar*, method : Gchar*) : GDBusMessage*
  fun g_dbus_message_new_method_reply(method_call_message : GDBusMessage*) : GDBusMessage*
  fun g_dbus_message_new_method_error(method_call_message : GDBusMessage*, error_name : Gchar*, error_message_format : Gchar*) : GDBusMessage*
  fun g_dbus_message_new_method_error_valist(method_call_message : GDBusMessage*, error_name : Gchar*, error_message_format : Gchar*, var_args : X__va_list_tag*) : GDBusMessage*
  fun g_dbus_message_new_method_error_literal(method_call_message : GDBusMessage*, error_name : Gchar*, error_message : Gchar*) : GDBusMessage*
  fun g_dbus_message_print(message : GDBusMessage*, indent : Guint) : Gchar*
  fun g_dbus_message_get_locked(message : GDBusMessage*) : Gboolean
  fun g_dbus_message_lock(message : GDBusMessage*) : Void
  fun g_dbus_message_copy(message : GDBusMessage*, error : GError**) : GDBusMessage*
  fun g_dbus_message_get_byte_order(message : GDBusMessage*) : GDBusMessageByteOrder
  fun g_dbus_message_set_byte_order(message : GDBusMessage*, byte_order : GDBusMessageByteOrder) : Void
  fun g_dbus_message_get_message_type(message : GDBusMessage*) : GDBusMessageType
  fun g_dbus_message_set_message_type(message : GDBusMessage*, type : GDBusMessageType) : Void
  fun g_dbus_message_get_flags(message : GDBusMessage*) : GDBusMessageFlags
  fun g_dbus_message_set_flags(message : GDBusMessage*, flags : GDBusMessageFlags) : Void
  fun g_dbus_message_get_serial(message : GDBusMessage*) : Guint32
  fun g_dbus_message_set_serial(message : GDBusMessage*, serial : Guint32) : Void
  fun g_dbus_message_get_header(message : GDBusMessage*, header_field : GDBusMessageHeaderField) : GVariant*
  fun g_dbus_message_set_header(message : GDBusMessage*, header_field : GDBusMessageHeaderField, value : GVariant*) : Void
  fun g_dbus_message_get_header_fields(message : GDBusMessage*) : Guchar*
  fun g_dbus_message_get_body(message : GDBusMessage*) : GVariant*
  fun g_dbus_message_set_body(message : GDBusMessage*, body : GVariant*) : Void
  fun g_dbus_message_get_unix_fd_list(message : GDBusMessage*) : GUnixFDList*
  fun g_dbus_message_set_unix_fd_list(message : GDBusMessage*, fd_list : GUnixFDList*) : Void
  fun g_dbus_message_get_reply_serial(message : GDBusMessage*) : Guint32
  fun g_dbus_message_set_reply_serial(message : GDBusMessage*, value : Guint32) : Void
  fun g_dbus_message_get_interface(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_interface(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_member(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_member(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_path(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_path(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_sender(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_sender(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_destination(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_destination(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_error_name(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_error_name(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_signature(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_set_signature(message : GDBusMessage*, value : Gchar*) : Void
  fun g_dbus_message_get_num_unix_fds(message : GDBusMessage*) : Guint32
  fun g_dbus_message_set_num_unix_fds(message : GDBusMessage*, value : Guint32) : Void
  fun g_dbus_message_get_arg0(message : GDBusMessage*) : Gchar*
  fun g_dbus_message_new_from_blob(blob : Guchar*, blob_len : Gsize, capabilities : GDBusCapabilityFlags, error : GError**) : GDBusMessage*
  fun g_dbus_message_bytes_needed(blob : Guchar*, blob_len : Gsize, error : GError**) : Gssize
  fun g_dbus_message_to_blob(message : GDBusMessage*, out_size : Gsize*, capabilities : GDBusCapabilityFlags, error : GError**) : Guchar*
  fun g_dbus_message_to_gerror(message : GDBusMessage*, error : GError**) : Gboolean
  fun g_dbus_method_invocation_get_type : GType
  fun g_dbus_method_invocation_get_sender(invocation : GDBusMethodInvocation*) : Gchar*
  fun g_dbus_method_invocation_get_object_path(invocation : GDBusMethodInvocation*) : Gchar*
  fun g_dbus_method_invocation_get_interface_name(invocation : GDBusMethodInvocation*) : Gchar*
  fun g_dbus_method_invocation_get_method_name(invocation : GDBusMethodInvocation*) : Gchar*
  fun g_dbus_method_invocation_get_method_info(invocation : GDBusMethodInvocation*) : GDBusMethodInfo*
  fun g_dbus_method_invocation_get_property_info(invocation : GDBusMethodInvocation*) : GDBusPropertyInfo*
  fun g_dbus_method_invocation_get_connection(invocation : GDBusMethodInvocation*) : GDBusConnection*
  fun g_dbus_method_invocation_get_message(invocation : GDBusMethodInvocation*) : GDBusMessage*
  fun g_dbus_method_invocation_get_parameters(invocation : GDBusMethodInvocation*) : GVariant*
  fun g_dbus_method_invocation_get_user_data(invocation : GDBusMethodInvocation*) : Gpointer
  fun g_dbus_method_invocation_return_value(invocation : GDBusMethodInvocation*, parameters : GVariant*) : Void
  fun g_dbus_method_invocation_return_value_with_unix_fd_list(invocation : GDBusMethodInvocation*, parameters : GVariant*, fd_list : GUnixFDList*) : Void
  fun g_dbus_method_invocation_return_error(invocation : GDBusMethodInvocation*, domain : GQuark, code : Gint, format : Gchar*) : Void
  fun g_dbus_method_invocation_return_error_valist(invocation : GDBusMethodInvocation*, domain : GQuark, code : Gint, format : Gchar*, var_args : X__va_list_tag*) : Void
  fun g_dbus_method_invocation_return_error_literal(invocation : GDBusMethodInvocation*, domain : GQuark, code : Gint, message : Gchar*) : Void
  fun g_dbus_method_invocation_return_gerror(invocation : GDBusMethodInvocation*, error : GError*) : Void
  fun g_dbus_method_invocation_take_error(invocation : GDBusMethodInvocation*, error : GError*) : Void
  fun g_dbus_method_invocation_return_dbus_error(invocation : GDBusMethodInvocation*, error_name : Gchar*, error_message : Gchar*) : Void
  fun g_bus_own_name(bus_type : GBusType, name : Gchar*, flags : GBusNameOwnerFlags, bus_acquired_handler : GBusAcquiredCallback, name_acquired_handler : GBusNameAcquiredCallback, name_lost_handler : GBusNameLostCallback, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Guint
  fun g_bus_own_name_on_connection(connection : GDBusConnection*, name : Gchar*, flags : GBusNameOwnerFlags, name_acquired_handler : GBusNameAcquiredCallback, name_lost_handler : GBusNameLostCallback, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Guint
  fun g_bus_own_name_with_closures(bus_type : GBusType, name : Gchar*, flags : GBusNameOwnerFlags, bus_acquired_closure : GClosure*, name_acquired_closure : GClosure*, name_lost_closure : GClosure*) : Guint
  fun g_bus_own_name_on_connection_with_closures(connection : GDBusConnection*, name : Gchar*, flags : GBusNameOwnerFlags, name_acquired_closure : GClosure*, name_lost_closure : GClosure*) : Guint
  fun g_bus_unown_name(owner_id : Guint) : Void
  fun g_bus_watch_name(bus_type : GBusType, name : Gchar*, flags : GBusNameWatcherFlags, name_appeared_handler : GBusNameAppearedCallback, name_vanished_handler : GBusNameVanishedCallback, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Guint
  fun g_bus_watch_name_on_connection(connection : GDBusConnection*, name : Gchar*, flags : GBusNameWatcherFlags, name_appeared_handler : GBusNameAppearedCallback, name_vanished_handler : GBusNameVanishedCallback, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Guint
  fun g_bus_watch_name_with_closures(bus_type : GBusType, name : Gchar*, flags : GBusNameWatcherFlags, name_appeared_closure : GClosure*, name_vanished_closure : GClosure*) : Guint
  fun g_bus_watch_name_on_connection_with_closures(connection : GDBusConnection*, name : Gchar*, flags : GBusNameWatcherFlags, name_appeared_closure : GClosure*, name_vanished_closure : GClosure*) : Guint
  fun g_bus_unwatch_name(watcher_id : Guint) : Void
  fun g_dbus_proxy_get_type : GType
  fun g_dbus_proxy_new(connection : GDBusConnection*, flags : GDBusProxyFlags, info : GDBusInterfaceInfo*, name : Gchar*, object_path : Gchar*, interface_name : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_proxy_new_finish(res : GAsyncResult*, error : GError**) : GDBusProxy*
  fun g_dbus_proxy_new_sync(connection : GDBusConnection*, flags : GDBusProxyFlags, info : GDBusInterfaceInfo*, name : Gchar*, object_path : Gchar*, interface_name : Gchar*, cancellable : GCancellable*, error : GError**) : GDBusProxy*
  fun g_dbus_proxy_new_for_bus(bus_type : GBusType, flags : GDBusProxyFlags, info : GDBusInterfaceInfo*, name : Gchar*, object_path : Gchar*, interface_name : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_proxy_new_for_bus_finish(res : GAsyncResult*, error : GError**) : GDBusProxy*
  fun g_dbus_proxy_new_for_bus_sync(bus_type : GBusType, flags : GDBusProxyFlags, info : GDBusInterfaceInfo*, name : Gchar*, object_path : Gchar*, interface_name : Gchar*, cancellable : GCancellable*, error : GError**) : GDBusProxy*
  fun g_dbus_proxy_get_connection(proxy : GDBusProxy*) : GDBusConnection*
  fun g_dbus_proxy_get_flags(proxy : GDBusProxy*) : GDBusProxyFlags
  fun g_dbus_proxy_get_name(proxy : GDBusProxy*) : Gchar*
  fun g_dbus_proxy_get_name_owner(proxy : GDBusProxy*) : Gchar*
  fun g_dbus_proxy_get_object_path(proxy : GDBusProxy*) : Gchar*
  fun g_dbus_proxy_get_interface_name(proxy : GDBusProxy*) : Gchar*
  fun g_dbus_proxy_get_default_timeout(proxy : GDBusProxy*) : Gint
  fun g_dbus_proxy_set_default_timeout(proxy : GDBusProxy*, timeout_msec : Gint) : Void
  fun g_dbus_proxy_get_interface_info(proxy : GDBusProxy*) : GDBusInterfaceInfo*
  fun g_dbus_proxy_set_interface_info(proxy : GDBusProxy*, info : GDBusInterfaceInfo*) : Void
  fun g_dbus_proxy_get_cached_property(proxy : GDBusProxy*, property_name : Gchar*) : GVariant*
  fun g_dbus_proxy_set_cached_property(proxy : GDBusProxy*, property_name : Gchar*, value : GVariant*) : Void
  fun g_dbus_proxy_get_cached_property_names(proxy : GDBusProxy*) : Gchar**
  fun g_dbus_proxy_call(proxy : GDBusProxy*, method_name : Gchar*, parameters : GVariant*, flags : GDBusCallFlags, timeout_msec : Gint, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_proxy_call_finish(proxy : GDBusProxy*, res : GAsyncResult*, error : GError**) : GVariant*
  fun g_dbus_proxy_call_sync(proxy : GDBusProxy*, method_name : Gchar*, parameters : GVariant*, flags : GDBusCallFlags, timeout_msec : Gint, cancellable : GCancellable*, error : GError**) : GVariant*
  fun g_dbus_proxy_call_with_unix_fd_list(proxy : GDBusProxy*, method_name : Gchar*, parameters : GVariant*, flags : GDBusCallFlags, timeout_msec : Gint, fd_list : GUnixFDList*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_proxy_call_with_unix_fd_list_finish(proxy : GDBusProxy*, out_fd_list : GUnixFDList**, res : GAsyncResult*, error : GError**) : GVariant*
  fun g_dbus_proxy_call_with_unix_fd_list_sync(proxy : GDBusProxy*, method_name : Gchar*, parameters : GVariant*, flags : GDBusCallFlags, timeout_msec : Gint, fd_list : GUnixFDList*, out_fd_list : GUnixFDList**, cancellable : GCancellable*, error : GError**) : GVariant*
  fun g_dbus_server_get_type : GType
  fun g_dbus_server_new_sync(address : Gchar*, flags : GDBusServerFlags, guid : Gchar*, observer : GDBusAuthObserver*, cancellable : GCancellable*, error : GError**) : GDBusServer*
  fun g_dbus_server_get_client_address(server : GDBusServer*) : Gchar*
  fun g_dbus_server_get_guid(server : GDBusServer*) : Gchar*
  fun g_dbus_server_get_flags(server : GDBusServer*) : GDBusServerFlags
  fun g_dbus_server_start(server : GDBusServer*) : Void
  fun g_dbus_server_stop(server : GDBusServer*) : Void
  fun g_dbus_server_is_active(server : GDBusServer*) : Gboolean
  fun g_dbus_is_guid(string : Gchar*) : Gboolean
  fun g_dbus_generate_guid : Gchar*
  fun g_dbus_is_name(string : Gchar*) : Gboolean
  fun g_dbus_is_unique_name(string : Gchar*) : Gboolean
  fun g_dbus_is_member_name(string : Gchar*) : Gboolean
  fun g_dbus_is_interface_name(string : Gchar*) : Gboolean
  fun g_dbus_gvariant_to_gvalue(value : GVariant*, out_gvalue : GValue*) : Void
  fun g_dbus_gvalue_to_gvariant(gvalue : GValue*, type : GVariantType*) : GVariant*
  fun g_drive_get_type : GType
  fun g_drive_get_name(drive : GDrive*) : UInt8*
  fun g_drive_get_icon(drive : GDrive*) : GIcon*
  fun g_drive_get_symbolic_icon(drive : GDrive*) : GIcon*
  fun g_drive_has_volumes(drive : GDrive*) : Gboolean
  fun g_drive_get_volumes(drive : GDrive*) : GList*
  fun g_drive_is_media_removable(drive : GDrive*) : Gboolean
  fun g_drive_has_media(drive : GDrive*) : Gboolean
  fun g_drive_is_media_check_automatic(drive : GDrive*) : Gboolean
  fun g_drive_can_poll_for_media(drive : GDrive*) : Gboolean
  fun g_drive_can_eject(drive : GDrive*) : Gboolean
  fun g_drive_eject(drive : GDrive*, flags : GMountUnmountFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_drive_eject_finish(drive : GDrive*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_drive_poll_for_media(drive : GDrive*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_drive_poll_for_media_finish(drive : GDrive*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_drive_get_identifier(drive : GDrive*, kind : UInt8*) : UInt8*
  fun g_drive_enumerate_identifiers(drive : GDrive*) : UInt8**
  fun g_drive_get_start_stop_type(drive : GDrive*) : GDriveStartStopType
  fun g_drive_can_start(drive : GDrive*) : Gboolean
  fun g_drive_can_start_degraded(drive : GDrive*) : Gboolean
  fun g_drive_start(drive : GDrive*, flags : GDriveStartFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_drive_start_finish(drive : GDrive*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_drive_can_stop(drive : GDrive*) : Gboolean
  fun g_drive_stop(drive : GDrive*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_drive_stop_finish(drive : GDrive*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_drive_eject_with_operation(drive : GDrive*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_drive_eject_with_operation_finish(drive : GDrive*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_drive_get_sort_key(drive : GDrive*) : Gchar*
  fun g_dtls_connection_get_type : GType
  fun g_dtls_connection_set_database(conn : GDtlsConnection*, database : GTlsDatabase*) : Void
  fun g_dtls_connection_get_database(conn : GDtlsConnection*) : GTlsDatabase*
  fun g_dtls_connection_set_certificate(conn : GDtlsConnection*, certificate : GTlsCertificate*) : Void
  fun g_dtls_connection_get_certificate(conn : GDtlsConnection*) : GTlsCertificate*
  fun g_dtls_connection_set_interaction(conn : GDtlsConnection*, interaction : GTlsInteraction*) : Void
  fun g_dtls_connection_get_interaction(conn : GDtlsConnection*) : GTlsInteraction*
  fun g_dtls_connection_get_peer_certificate(conn : GDtlsConnection*) : GTlsCertificate*
  fun g_dtls_connection_get_peer_certificate_errors(conn : GDtlsConnection*) : GTlsCertificateFlags
  fun g_dtls_connection_set_require_close_notify(conn : GDtlsConnection*, require_close_notify : Gboolean) : Void
  fun g_dtls_connection_get_require_close_notify(conn : GDtlsConnection*) : Gboolean
  fun g_dtls_connection_set_rehandshake_mode(conn : GDtlsConnection*, mode : GTlsRehandshakeMode) : Void
  fun g_dtls_connection_get_rehandshake_mode(conn : GDtlsConnection*) : GTlsRehandshakeMode
  fun g_dtls_connection_handshake(conn : GDtlsConnection*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_dtls_connection_handshake_async(conn : GDtlsConnection*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dtls_connection_handshake_finish(conn : GDtlsConnection*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_dtls_connection_shutdown(conn : GDtlsConnection*, shutdown_read : Gboolean, shutdown_write : Gboolean, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_dtls_connection_shutdown_async(conn : GDtlsConnection*, shutdown_read : Gboolean, shutdown_write : Gboolean, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dtls_connection_shutdown_finish(conn : GDtlsConnection*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_dtls_connection_close(conn : GDtlsConnection*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_dtls_connection_close_async(conn : GDtlsConnection*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dtls_connection_close_finish(conn : GDtlsConnection*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_dtls_connection_emit_accept_certificate(conn : GDtlsConnection*, peer_cert : GTlsCertificate*, errors : GTlsCertificateFlags) : Gboolean
  fun g_dtls_client_connection_get_type : GType
  fun g_dtls_client_connection_new(base_socket : GDatagramBased*, server_identity : GSocketConnectable*, error : GError**) : GDatagramBased*
  fun g_dtls_client_connection_get_validation_flags(conn : GDtlsClientConnection*) : GTlsCertificateFlags
  fun g_dtls_client_connection_set_validation_flags(conn : GDtlsClientConnection*, flags : GTlsCertificateFlags) : Void
  fun g_dtls_client_connection_get_server_identity(conn : GDtlsClientConnection*) : GSocketConnectable*
  fun g_dtls_client_connection_set_server_identity(conn : GDtlsClientConnection*, identity : GSocketConnectable*) : Void
  fun g_dtls_client_connection_get_accepted_cas(conn : GDtlsClientConnection*) : GList*
  fun g_dtls_server_connection_get_type : GType
  fun g_dtls_server_connection_new(base_socket : GDatagramBased*, certificate : GTlsCertificate*, error : GError**) : GDatagramBased*
  fun g_icon_get_type : GType
  fun g_icon_hash(icon : Gconstpointer) : Guint
  fun g_icon_equal(icon1 : GIcon*, icon2 : GIcon*) : Gboolean
  fun g_icon_to_string(icon : GIcon*) : Gchar*
  fun g_icon_new_for_string(str : Gchar*, error : GError**) : GIcon*
  fun g_icon_serialize(icon : GIcon*) : GVariant*
  fun g_icon_deserialize(value : GVariant*) : GIcon*
  fun g_emblem_get_type : GType
  fun g_emblem_new(icon : GIcon*) : GEmblem*
  fun g_emblem_new_with_origin(icon : GIcon*, origin : GEmblemOrigin) : GEmblem*
  fun g_emblem_get_icon(emblem : GEmblem*) : GIcon*
  fun g_emblem_get_origin(emblem : GEmblem*) : GEmblemOrigin
  fun g_emblemed_icon_get_type : GType
  fun g_emblemed_icon_new(icon : GIcon*, emblem : GEmblem*) : GIcon*
  fun g_emblemed_icon_get_icon(emblemed : GEmblemedIcon*) : GIcon*
  fun g_emblemed_icon_get_emblems(emblemed : GEmblemedIcon*) : GList*
  fun g_emblemed_icon_add_emblem(emblemed : GEmblemedIcon*, emblem : GEmblem*) : Void
  fun g_emblemed_icon_clear_emblems(emblemed : GEmblemedIcon*) : Void
  fun g_file_attribute_info_list_get_type : GType
  fun g_file_attribute_info_list_new : GFileAttributeInfoList*
  fun g_file_attribute_info_list_ref(list : GFileAttributeInfoList*) : GFileAttributeInfoList*
  fun g_file_attribute_info_list_unref(list : GFileAttributeInfoList*) : Void
  fun g_file_attribute_info_list_dup(list : GFileAttributeInfoList*) : GFileAttributeInfoList*
  fun g_file_attribute_info_list_lookup(list : GFileAttributeInfoList*, name : UInt8*) : GFileAttributeInfo*
  fun g_file_attribute_info_list_add(list : GFileAttributeInfoList*, name : UInt8*, type : GFileAttributeType, flags : GFileAttributeInfoFlags) : Void
  fun g_file_enumerator_get_type : GType
  fun g_file_enumerator_next_file(enumerator : GFileEnumerator*, cancellable : GCancellable*, error : GError**) : GFileInfo*
  fun g_file_enumerator_close(enumerator : GFileEnumerator*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_enumerator_next_files_async(enumerator : GFileEnumerator*, num_files : Int32, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_enumerator_next_files_finish(enumerator : GFileEnumerator*, result : GAsyncResult*, error : GError**) : GList*
  fun g_file_enumerator_close_async(enumerator : GFileEnumerator*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_enumerator_close_finish(enumerator : GFileEnumerator*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_enumerator_is_closed(enumerator : GFileEnumerator*) : Gboolean
  fun g_file_enumerator_has_pending(enumerator : GFileEnumerator*) : Gboolean
  fun g_file_enumerator_set_pending(enumerator : GFileEnumerator*, pending : Gboolean) : Void
  fun g_file_enumerator_get_container(enumerator : GFileEnumerator*) : GFile*
  fun g_file_enumerator_get_child(enumerator : GFileEnumerator*, info : GFileInfo*) : GFile*
  fun g_file_enumerator_iterate(direnum : GFileEnumerator*, out_info : GFileInfo**, out_child : GFile**, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_get_type : GType
  fun g_file_new_for_path(path : UInt8*) : GFile*
  fun g_file_new_for_uri(uri : UInt8*) : GFile*
  fun g_file_new_for_commandline_arg(arg : UInt8*) : GFile*
  fun g_file_new_for_commandline_arg_and_cwd(arg : Gchar*, cwd : Gchar*) : GFile*
  fun g_file_new_tmp(tmpl : UInt8*, iostream : GFileIOStream**, error : GError**) : GFile*
  fun g_file_parse_name(parse_name : UInt8*) : GFile*
  fun g_file_dup(file : GFile*) : GFile*
  fun g_file_hash(file : Gconstpointer) : Guint
  fun g_file_equal(file1 : GFile*, file2 : GFile*) : Gboolean
  fun g_file_get_basename(file : GFile*) : UInt8*
  fun g_file_get_path(file : GFile*) : UInt8*
  fun g_file_get_uri(file : GFile*) : UInt8*
  fun g_file_get_parse_name(file : GFile*) : UInt8*
  fun g_file_get_parent(file : GFile*) : GFile*
  fun g_file_has_parent(file : GFile*, parent : GFile*) : Gboolean
  fun g_file_get_child(file : GFile*, name : UInt8*) : GFile*
  fun g_file_get_child_for_display_name(file : GFile*, display_name : UInt8*, error : GError**) : GFile*
  fun g_file_has_prefix(file : GFile*, prefix : GFile*) : Gboolean
  fun g_file_get_relative_path(parent : GFile*, descendant : GFile*) : UInt8*
  fun g_file_resolve_relative_path(file : GFile*, relative_path : UInt8*) : GFile*
  fun g_file_is_native(file : GFile*) : Gboolean
  fun g_file_has_uri_scheme(file : GFile*, uri_scheme : UInt8*) : Gboolean
  fun g_file_get_uri_scheme(file : GFile*) : UInt8*
  fun g_file_read(file : GFile*, cancellable : GCancellable*, error : GError**) : GFileInputStream*
  fun g_file_read_async(file : GFile*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_read_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileInputStream*
  fun g_file_append_to(file : GFile*, flags : GFileCreateFlags, cancellable : GCancellable*, error : GError**) : GFileOutputStream*
  fun g_file_create(file : GFile*, flags : GFileCreateFlags, cancellable : GCancellable*, error : GError**) : GFileOutputStream*
  fun g_file_replace(file : GFile*, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, cancellable : GCancellable*, error : GError**) : GFileOutputStream*
  fun g_file_append_to_async(file : GFile*, flags : GFileCreateFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_append_to_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileOutputStream*
  fun g_file_create_async(file : GFile*, flags : GFileCreateFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_create_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileOutputStream*
  fun g_file_replace_async(file : GFile*, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_replace_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileOutputStream*
  fun g_file_open_readwrite(file : GFile*, cancellable : GCancellable*, error : GError**) : GFileIOStream*
  fun g_file_open_readwrite_async(file : GFile*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_open_readwrite_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileIOStream*
  fun g_file_create_readwrite(file : GFile*, flags : GFileCreateFlags, cancellable : GCancellable*, error : GError**) : GFileIOStream*
  fun g_file_create_readwrite_async(file : GFile*, flags : GFileCreateFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_create_readwrite_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileIOStream*
  fun g_file_replace_readwrite(file : GFile*, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, cancellable : GCancellable*, error : GError**) : GFileIOStream*
  fun g_file_replace_readwrite_async(file : GFile*, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_replace_readwrite_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileIOStream*
  fun g_file_query_exists(file : GFile*, cancellable : GCancellable*) : Gboolean
  fun g_file_query_file_type(file : GFile*, flags : GFileQueryInfoFlags, cancellable : GCancellable*) : GFileType
  fun g_file_query_info(file : GFile*, attributes : UInt8*, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : GFileInfo*
  fun g_file_query_info_async(file : GFile*, attributes : UInt8*, flags : GFileQueryInfoFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_query_info_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileInfo*
  fun g_file_query_filesystem_info(file : GFile*, attributes : UInt8*, cancellable : GCancellable*, error : GError**) : GFileInfo*
  fun g_file_query_filesystem_info_async(file : GFile*, attributes : UInt8*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_query_filesystem_info_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileInfo*
  fun g_file_find_enclosing_mount(file : GFile*, cancellable : GCancellable*, error : GError**) : GMount*
  fun g_file_find_enclosing_mount_async(file : GFile*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_find_enclosing_mount_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GMount*
  fun g_file_enumerate_children(file : GFile*, attributes : UInt8*, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : GFileEnumerator*
  fun g_file_enumerate_children_async(file : GFile*, attributes : UInt8*, flags : GFileQueryInfoFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_enumerate_children_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFileEnumerator*
  fun g_file_set_display_name(file : GFile*, display_name : UInt8*, cancellable : GCancellable*, error : GError**) : GFile*
  fun g_file_set_display_name_async(file : GFile*, display_name : UInt8*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_set_display_name_finish(file : GFile*, res : GAsyncResult*, error : GError**) : GFile*
  fun g_file_delete(file : GFile*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_delete_async(file : GFile*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_delete_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_trash(file : GFile*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_trash_async(file : GFile*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_trash_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_copy(source : GFile*, destination : GFile*, flags : GFileCopyFlags, cancellable : GCancellable*, progress_callback : GFileProgressCallback, progress_callback_data : Gpointer, error : GError**) : Gboolean
  fun g_file_copy_async(source : GFile*, destination : GFile*, flags : GFileCopyFlags, io_priority : Int32, cancellable : GCancellable*, progress_callback : GFileProgressCallback, progress_callback_data : Gpointer, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_copy_finish(file : GFile*, res : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_move(source : GFile*, destination : GFile*, flags : GFileCopyFlags, cancellable : GCancellable*, progress_callback : GFileProgressCallback, progress_callback_data : Gpointer, error : GError**) : Gboolean
  fun g_file_make_directory(file : GFile*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_make_directory_async(file : GFile*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_make_directory_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_make_directory_with_parents(file : GFile*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_make_symbolic_link(file : GFile*, symlink_value : UInt8*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_query_settable_attributes(file : GFile*, cancellable : GCancellable*, error : GError**) : GFileAttributeInfoList*
  fun g_file_query_writable_namespaces(file : GFile*, cancellable : GCancellable*, error : GError**) : GFileAttributeInfoList*
  fun g_file_set_attribute(file : GFile*, attribute : UInt8*, type : GFileAttributeType, value_p : Gpointer, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attributes_from_info(file : GFile*, info : GFileInfo*, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attributes_async(file : GFile*, info : GFileInfo*, flags : GFileQueryInfoFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_set_attributes_finish(file : GFile*, result : GAsyncResult*, info : GFileInfo**, error : GError**) : Gboolean
  fun g_file_set_attribute_string(file : GFile*, attribute : UInt8*, value : UInt8*, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attribute_byte_string(file : GFile*, attribute : UInt8*, value : UInt8*, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attribute_uint32(file : GFile*, attribute : UInt8*, value : Guint32, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attribute_int32(file : GFile*, attribute : UInt8*, value : Gint32, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attribute_uint64(file : GFile*, attribute : UInt8*, value : Guint64, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_set_attribute_int64(file : GFile*, attribute : UInt8*, value : Gint64, flags : GFileQueryInfoFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_mount_enclosing_volume(location : GFile*, flags : GMountMountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_mount_enclosing_volume_finish(location : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_mount_mountable(file : GFile*, flags : GMountMountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_mount_mountable_finish(file : GFile*, result : GAsyncResult*, error : GError**) : GFile*
  fun g_file_unmount_mountable(file : GFile*, flags : GMountUnmountFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_unmount_mountable_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_unmount_mountable_with_operation(file : GFile*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_unmount_mountable_with_operation_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_eject_mountable(file : GFile*, flags : GMountUnmountFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_eject_mountable_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_eject_mountable_with_operation(file : GFile*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_eject_mountable_with_operation_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_copy_attributes(source : GFile*, destination : GFile*, flags : GFileCopyFlags, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_monitor_directory(file : GFile*, flags : GFileMonitorFlags, cancellable : GCancellable*, error : GError**) : GFileMonitor*
  fun g_file_monitor_file(file : GFile*, flags : GFileMonitorFlags, cancellable : GCancellable*, error : GError**) : GFileMonitor*
  fun g_file_monitor(file : GFile*, flags : GFileMonitorFlags, cancellable : GCancellable*, error : GError**) : GFileMonitor*
  fun g_file_measure_disk_usage(file : GFile*, flags : GFileMeasureFlags, cancellable : GCancellable*, progress_callback : GFileMeasureProgressCallback, progress_data : Gpointer, disk_usage : Guint64*, num_dirs : Guint64*, num_files : Guint64*, error : GError**) : Gboolean
  fun g_file_measure_disk_usage_async(file : GFile*, flags : GFileMeasureFlags, io_priority : Gint, cancellable : GCancellable*, progress_callback : GFileMeasureProgressCallback, progress_data : Gpointer, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_measure_disk_usage_finish(file : GFile*, result : GAsyncResult*, disk_usage : Guint64*, num_dirs : Guint64*, num_files : Guint64*, error : GError**) : Gboolean
  fun g_file_start_mountable(file : GFile*, flags : GDriveStartFlags, start_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_start_mountable_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_stop_mountable(file : GFile*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_stop_mountable_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_poll_mountable(file : GFile*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_poll_mountable_finish(file : GFile*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_file_query_default_handler(file : GFile*, cancellable : GCancellable*, error : GError**) : GAppInfo*
  fun g_file_load_contents(file : GFile*, cancellable : GCancellable*, contents : UInt8**, length : Gsize*, etag_out : UInt8**, error : GError**) : Gboolean
  fun g_file_load_contents_async(file : GFile*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_load_contents_finish(file : GFile*, res : GAsyncResult*, contents : UInt8**, length : Gsize*, etag_out : UInt8**, error : GError**) : Gboolean
  fun g_file_load_partial_contents_async(file : GFile*, cancellable : GCancellable*, read_more_callback : GFileReadMoreCallback, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_load_partial_contents_finish(file : GFile*, res : GAsyncResult*, contents : UInt8**, length : Gsize*, etag_out : UInt8**, error : GError**) : Gboolean
  fun g_file_replace_contents(file : GFile*, contents : UInt8*, length : Gsize, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, new_etag : UInt8**, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_file_replace_contents_async(file : GFile*, contents : UInt8*, length : Gsize, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_replace_contents_bytes_async(file : GFile*, contents : GBytes*, etag : UInt8*, make_backup : Gboolean, flags : GFileCreateFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_replace_contents_finish(file : GFile*, res : GAsyncResult*, new_etag : UInt8**, error : GError**) : Gboolean
  fun g_file_supports_thread_contexts(file : GFile*) : Gboolean
  fun g_file_icon_get_type : GType
  fun g_file_icon_new(file : GFile*) : GIcon*
  fun g_file_icon_get_file(icon : GFileIcon*) : GFile*
  fun g_file_info_get_type : GType
  fun g_file_info_new : GFileInfo*
  fun g_file_info_dup(other : GFileInfo*) : GFileInfo*
  fun g_file_info_copy_into(src_info : GFileInfo*, dest_info : GFileInfo*) : Void
  fun g_file_info_has_attribute(info : GFileInfo*, attribute : UInt8*) : Gboolean
  fun g_file_info_has_namespace(info : GFileInfo*, name_space : UInt8*) : Gboolean
  fun g_file_info_list_attributes(info : GFileInfo*, name_space : UInt8*) : UInt8**
  fun g_file_info_get_attribute_data(info : GFileInfo*, attribute : UInt8*, type : GFileAttributeType*, value_pp : Gpointer*, status : GFileAttributeStatus*) : Gboolean
  fun g_file_info_get_attribute_type(info : GFileInfo*, attribute : UInt8*) : GFileAttributeType
  fun g_file_info_remove_attribute(info : GFileInfo*, attribute : UInt8*) : Void
  fun g_file_info_get_attribute_status(info : GFileInfo*, attribute : UInt8*) : GFileAttributeStatus
  fun g_file_info_set_attribute_status(info : GFileInfo*, attribute : UInt8*, status : GFileAttributeStatus) : Gboolean
  fun g_file_info_get_attribute_as_string(info : GFileInfo*, attribute : UInt8*) : UInt8*
  fun g_file_info_get_attribute_string(info : GFileInfo*, attribute : UInt8*) : UInt8*
  fun g_file_info_get_attribute_byte_string(info : GFileInfo*, attribute : UInt8*) : UInt8*
  fun g_file_info_get_attribute_boolean(info : GFileInfo*, attribute : UInt8*) : Gboolean
  fun g_file_info_get_attribute_uint32(info : GFileInfo*, attribute : UInt8*) : Guint32
  fun g_file_info_get_attribute_int32(info : GFileInfo*, attribute : UInt8*) : Gint32
  fun g_file_info_get_attribute_uint64(info : GFileInfo*, attribute : UInt8*) : Guint64
  fun g_file_info_get_attribute_int64(info : GFileInfo*, attribute : UInt8*) : Gint64
  fun g_file_info_get_attribute_object(info : GFileInfo*, attribute : UInt8*) : GObject*
  fun g_file_info_get_attribute_stringv(info : GFileInfo*, attribute : UInt8*) : UInt8**
  fun g_file_info_set_attribute(info : GFileInfo*, attribute : UInt8*, type : GFileAttributeType, value_p : Gpointer) : Void
  fun g_file_info_set_attribute_string(info : GFileInfo*, attribute : UInt8*, attr_value : UInt8*) : Void
  fun g_file_info_set_attribute_byte_string(info : GFileInfo*, attribute : UInt8*, attr_value : UInt8*) : Void
  fun g_file_info_set_attribute_boolean(info : GFileInfo*, attribute : UInt8*, attr_value : Gboolean) : Void
  fun g_file_info_set_attribute_uint32(info : GFileInfo*, attribute : UInt8*, attr_value : Guint32) : Void
  fun g_file_info_set_attribute_int32(info : GFileInfo*, attribute : UInt8*, attr_value : Gint32) : Void
  fun g_file_info_set_attribute_uint64(info : GFileInfo*, attribute : UInt8*, attr_value : Guint64) : Void
  fun g_file_info_set_attribute_int64(info : GFileInfo*, attribute : UInt8*, attr_value : Gint64) : Void
  fun g_file_info_set_attribute_object(info : GFileInfo*, attribute : UInt8*, attr_value : GObject*) : Void
  fun g_file_info_set_attribute_stringv(info : GFileInfo*, attribute : UInt8*, attr_value : UInt8**) : Void
  fun g_file_info_clear_status(info : GFileInfo*) : Void
  fun g_file_info_get_deletion_date(info : GFileInfo*) : GDateTime*
  fun g_file_info_get_file_type(info : GFileInfo*) : GFileType
  fun g_file_info_get_is_hidden(info : GFileInfo*) : Gboolean
  fun g_file_info_get_is_backup(info : GFileInfo*) : Gboolean
  fun g_file_info_get_is_symlink(info : GFileInfo*) : Gboolean
  fun g_file_info_get_name(info : GFileInfo*) : UInt8*
  fun g_file_info_get_display_name(info : GFileInfo*) : UInt8*
  fun g_file_info_get_edit_name(info : GFileInfo*) : UInt8*
  fun g_file_info_get_icon(info : GFileInfo*) : GIcon*
  fun g_file_info_get_symbolic_icon(info : GFileInfo*) : GIcon*
  fun g_file_info_get_content_type(info : GFileInfo*) : UInt8*
  fun g_file_info_get_size(info : GFileInfo*) : Goffset
  fun g_file_info_get_modification_time(info : GFileInfo*, result : GTimeVal*) : Void
  fun g_file_info_get_symlink_target(info : GFileInfo*) : UInt8*
  fun g_file_info_get_etag(info : GFileInfo*) : UInt8*
  fun g_file_info_get_sort_order(info : GFileInfo*) : Gint32
  fun g_file_info_set_attribute_mask(info : GFileInfo*, mask : GFileAttributeMatcher*) : Void
  fun g_file_info_unset_attribute_mask(info : GFileInfo*) : Void
  fun g_file_info_set_file_type(info : GFileInfo*, type : GFileType) : Void
  fun g_file_info_set_is_hidden(info : GFileInfo*, is_hidden : Gboolean) : Void
  fun g_file_info_set_is_symlink(info : GFileInfo*, is_symlink : Gboolean) : Void
  fun g_file_info_set_name(info : GFileInfo*, name : UInt8*) : Void
  fun g_file_info_set_display_name(info : GFileInfo*, display_name : UInt8*) : Void
  fun g_file_info_set_edit_name(info : GFileInfo*, edit_name : UInt8*) : Void
  fun g_file_info_set_icon(info : GFileInfo*, icon : GIcon*) : Void
  fun g_file_info_set_symbolic_icon(info : GFileInfo*, icon : GIcon*) : Void
  fun g_file_info_set_content_type(info : GFileInfo*, content_type : UInt8*) : Void
  fun g_file_info_set_size(info : GFileInfo*, size : Goffset) : Void
  fun g_file_info_set_modification_time(info : GFileInfo*, mtime : GTimeVal*) : Void
  fun g_file_info_set_symlink_target(info : GFileInfo*, symlink_target : UInt8*) : Void
  fun g_file_info_set_sort_order(info : GFileInfo*, sort_order : Gint32) : Void
  fun g_file_attribute_matcher_get_type : GType
  fun g_file_attribute_matcher_new(attributes : UInt8*) : GFileAttributeMatcher*
  fun g_file_attribute_matcher_ref(matcher : GFileAttributeMatcher*) : GFileAttributeMatcher*
  fun g_file_attribute_matcher_unref(matcher : GFileAttributeMatcher*) : Void
  fun g_file_attribute_matcher_subtract(matcher : GFileAttributeMatcher*, subtract : GFileAttributeMatcher*) : GFileAttributeMatcher*
  fun g_file_attribute_matcher_matches(matcher : GFileAttributeMatcher*, attribute : UInt8*) : Gboolean
  fun g_file_attribute_matcher_matches_only(matcher : GFileAttributeMatcher*, attribute : UInt8*) : Gboolean
  fun g_file_attribute_matcher_enumerate_namespace(matcher : GFileAttributeMatcher*, ns : UInt8*) : Gboolean
  fun g_file_attribute_matcher_enumerate_next(matcher : GFileAttributeMatcher*) : UInt8*
  fun g_file_attribute_matcher_to_string(matcher : GFileAttributeMatcher*) : UInt8*
  fun g_file_input_stream_get_type : GType
  fun g_file_input_stream_query_info(stream : GFileInputStream*, attributes : UInt8*, cancellable : GCancellable*, error : GError**) : GFileInfo*
  fun g_file_input_stream_query_info_async(stream : GFileInputStream*, attributes : UInt8*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_input_stream_query_info_finish(stream : GFileInputStream*, result : GAsyncResult*, error : GError**) : GFileInfo*
  fun g_io_error_quark : GQuark
  fun g_io_error_from_errno(err_no : Gint) : GIOErrorEnum
  fun g_io_stream_get_type : GType
  fun g_io_stream_get_input_stream(stream : GIOStream*) : GInputStream*
  fun g_io_stream_get_output_stream(stream : GIOStream*) : GOutputStream*
  fun g_io_stream_splice_async(stream1 : GIOStream*, stream2 : GIOStream*, flags : GIOStreamSpliceFlags, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_io_stream_splice_finish(result : GAsyncResult*, error : GError**) : Gboolean
  fun g_io_stream_close(stream : GIOStream*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_io_stream_close_async(stream : GIOStream*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_io_stream_close_finish(stream : GIOStream*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_io_stream_is_closed(stream : GIOStream*) : Gboolean
  fun g_io_stream_has_pending(stream : GIOStream*) : Gboolean
  fun g_io_stream_set_pending(stream : GIOStream*, error : GError**) : Gboolean
  fun g_io_stream_clear_pending(stream : GIOStream*) : Void
  fun g_file_io_stream_get_type : GType
  fun g_file_io_stream_query_info(stream : GFileIOStream*, attributes : UInt8*, cancellable : GCancellable*, error : GError**) : GFileInfo*
  fun g_file_io_stream_query_info_async(stream : GFileIOStream*, attributes : UInt8*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_io_stream_query_info_finish(stream : GFileIOStream*, result : GAsyncResult*, error : GError**) : GFileInfo*
  fun g_file_io_stream_get_etag(stream : GFileIOStream*) : UInt8*
  fun g_file_monitor_get_type : GType
  fun g_file_monitor_cancel(monitor : GFileMonitor*) : Gboolean
  fun g_file_monitor_is_cancelled(monitor : GFileMonitor*) : Gboolean
  fun g_file_monitor_set_rate_limit(monitor : GFileMonitor*, limit_msecs : Gint) : Void
  fun g_file_monitor_emit_event(monitor : GFileMonitor*, child : GFile*, other_file : GFile*, event_type : GFileMonitorEvent) : Void
  fun g_filename_completer_get_type : GType
  fun g_filename_completer_new : GFilenameCompleter*
  fun g_filename_completer_get_completion_suffix(completer : GFilenameCompleter*, initial_text : UInt8*) : UInt8*
  fun g_filename_completer_get_completions(completer : GFilenameCompleter*, initial_text : UInt8*) : UInt8**
  fun g_filename_completer_set_dirs_only(completer : GFilenameCompleter*, dirs_only : Gboolean) : Void
  fun g_file_output_stream_get_type : GType
  fun g_file_output_stream_query_info(stream : GFileOutputStream*, attributes : UInt8*, cancellable : GCancellable*, error : GError**) : GFileInfo*
  fun g_file_output_stream_query_info_async(stream : GFileOutputStream*, attributes : UInt8*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_file_output_stream_query_info_finish(stream : GFileOutputStream*, result : GAsyncResult*, error : GError**) : GFileInfo*
  fun g_file_output_stream_get_etag(stream : GFileOutputStream*) : UInt8*
  fun g_inet_address_get_type : GType
  fun g_inet_address_new_from_string(string : Gchar*) : GInetAddress*
  fun g_inet_address_new_from_bytes(bytes : Guint8*, family : GSocketFamily) : GInetAddress*
  fun g_inet_address_new_loopback(family : GSocketFamily) : GInetAddress*
  fun g_inet_address_new_any(family : GSocketFamily) : GInetAddress*
  fun g_inet_address_equal(address : GInetAddress*, other_address : GInetAddress*) : Gboolean
  fun g_inet_address_to_string(address : GInetAddress*) : Gchar*
  fun g_inet_address_to_bytes(address : GInetAddress*) : Guint8*
  fun g_inet_address_get_native_size(address : GInetAddress*) : Gsize
  fun g_inet_address_get_family(address : GInetAddress*) : GSocketFamily
  fun g_inet_address_get_is_any(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_loopback(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_link_local(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_site_local(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_multicast(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_mc_global(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_mc_link_local(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_mc_node_local(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_mc_org_local(address : GInetAddress*) : Gboolean
  fun g_inet_address_get_is_mc_site_local(address : GInetAddress*) : Gboolean
  fun g_inet_address_mask_get_type : GType
  fun g_inet_address_mask_new(addr : GInetAddress*, length : Guint, error : GError**) : GInetAddressMask*
  fun g_inet_address_mask_new_from_string(mask_string : Gchar*, error : GError**) : GInetAddressMask*
  fun g_inet_address_mask_to_string(mask : GInetAddressMask*) : Gchar*
  fun g_inet_address_mask_get_family(mask : GInetAddressMask*) : GSocketFamily
  fun g_inet_address_mask_get_address(mask : GInetAddressMask*) : GInetAddress*
  fun g_inet_address_mask_get_length(mask : GInetAddressMask*) : Guint
  fun g_inet_address_mask_matches(mask : GInetAddressMask*, address : GInetAddress*) : Gboolean
  fun g_inet_address_mask_equal(mask : GInetAddressMask*, mask2 : GInetAddressMask*) : Gboolean
  fun g_socket_address_get_type : GType
  fun g_socket_address_get_family(address : GSocketAddress*) : GSocketFamily
  fun g_socket_address_new_from_native(native : Gpointer, len : Gsize) : GSocketAddress*
  fun g_socket_address_to_native(address : GSocketAddress*, dest : Gpointer, destlen : Gsize, error : GError**) : Gboolean
  fun g_socket_address_get_native_size(address : GSocketAddress*) : Gssize
  fun g_inet_socket_address_get_type : GType
  fun g_inet_socket_address_new(address : GInetAddress*, port : Guint16) : GSocketAddress*
  fun g_inet_socket_address_new_from_string(address : UInt8*, port : Guint) : GSocketAddress*
  fun g_inet_socket_address_get_address(address : GInetSocketAddress*) : GInetAddress*
  fun g_inet_socket_address_get_port(address : GInetSocketAddress*) : Guint16
  fun g_inet_socket_address_get_flowinfo(address : GInetSocketAddress*) : Guint32
  fun g_inet_socket_address_get_scope_id(address : GInetSocketAddress*) : Guint32
  fun g_app_info_create_flags_get_type : GType
  fun g_converter_flags_get_type : GType
  fun g_converter_result_get_type : GType
  fun g_data_stream_byte_order_get_type : GType
  fun g_data_stream_newline_type_get_type : GType
  fun g_file_attribute_type_get_type : GType
  fun g_file_attribute_info_flags_get_type : GType
  fun g_file_attribute_status_get_type : GType
  fun g_file_query_info_flags_get_type : GType
  fun g_file_create_flags_get_type : GType
  fun g_file_measure_flags_get_type : GType
  fun g_mount_mount_flags_get_type : GType
  fun g_mount_unmount_flags_get_type : GType
  fun g_drive_start_flags_get_type : GType
  fun g_drive_start_stop_type_get_type : GType
  fun g_file_copy_flags_get_type : GType
  fun g_file_monitor_flags_get_type : GType
  fun g_file_type_get_type : GType
  fun g_filesystem_preview_type_get_type : GType
  fun g_file_monitor_event_get_type : GType
  fun g_io_error_enum_get_type : GType
  fun g_ask_password_flags_get_type : GType
  fun g_password_save_get_type : GType
  fun g_mount_operation_result_get_type : GType
  fun g_output_stream_splice_flags_get_type : GType
  fun g_io_stream_splice_flags_get_type : GType
  fun g_emblem_origin_get_type : GType
  fun g_resolver_error_get_type : GType
  fun g_resolver_record_type_get_type : GType
  fun g_resource_error_get_type : GType
  fun g_resource_flags_get_type : GType
  fun g_resource_lookup_flags_get_type : GType
  fun g_socket_family_get_type : GType
  fun g_socket_type_get_type : GType
  fun g_socket_msg_flags_get_type : GType
  fun g_socket_protocol_get_type : GType
  fun g_zlib_compressor_format_get_type : GType
  fun g_unix_socket_address_type_get_type : GType
  fun g_bus_type_get_type : GType
  fun g_bus_name_owner_flags_get_type : GType
  fun g_bus_name_watcher_flags_get_type : GType
  fun g_dbus_proxy_flags_get_type : GType
  fun g_dbus_error_get_type : GType
  fun g_dbus_connection_flags_get_type : GType
  fun g_dbus_capability_flags_get_type : GType
  fun g_dbus_call_flags_get_type : GType
  fun g_dbus_message_type_get_type : GType
  fun g_dbus_message_flags_get_type : GType
  fun g_dbus_message_header_field_get_type : GType
  fun g_dbus_property_info_flags_get_type : GType
  fun g_dbus_subtree_flags_get_type : GType
  fun g_dbus_server_flags_get_type : GType
  fun g_dbus_signal_flags_get_type : GType
  fun g_dbus_send_message_flags_get_type : GType
  fun g_credentials_type_get_type : GType
  fun g_dbus_message_byte_order_get_type : GType
  fun g_application_flags_get_type : GType
  fun g_tls_error_get_type : GType
  fun g_tls_certificate_flags_get_type : GType
  fun g_tls_authentication_mode_get_type : GType
  fun g_tls_rehandshake_mode_get_type : GType
  fun g_tls_password_flags_get_type : GType
  fun g_tls_interaction_result_get_type : GType
  fun g_dbus_interface_skeleton_flags_get_type : GType
  fun g_dbus_object_manager_client_flags_get_type : GType
  fun g_tls_database_verify_flags_get_type : GType
  fun g_tls_database_lookup_flags_get_type : GType
  fun g_tls_certificate_request_flags_get_type : GType
  fun g_io_module_scope_flags_get_type : GType
  fun g_socket_client_event_get_type : GType
  fun g_socket_listener_event_get_type : GType
  fun g_test_dbus_flags_get_type : GType
  fun g_subprocess_flags_get_type : GType
  fun g_notification_priority_get_type : GType
  fun g_network_connectivity_get_type : GType
  fun g_settings_bind_flags_get_type : GType
  fun g_module_supported : Gboolean
  fun g_module_open(file_name : Gchar*, flags : GModuleFlags) : GModule*
  fun g_module_close(module : GModule*) : Gboolean
  fun g_module_make_resident(module : GModule*) : Void
  fun g_module_error : Gchar*
  fun g_module_symbol(module : GModule*, symbol_name : Gchar*, symbol : Gpointer*) : Gboolean
  fun g_module_name(module : GModule*) : Gchar*
  fun g_module_build_path(directory : Gchar*, module_name : Gchar*) : Gchar*
  fun g_io_module_scope_new(flags : GIOModuleScopeFlags) : GIOModuleScope*
  fun g_io_module_scope_free(scope : GIOModuleScope*) : Void
  fun g_io_module_scope_block(scope : GIOModuleScope*, basename : Gchar*) : Void
  fun g_io_module_get_type : GType
  fun g_io_module_new(filename : Gchar*) : GIOModule*
  fun g_io_modules_scan_all_in_directory(dirname : UInt8*) : Void
  fun g_io_modules_load_all_in_directory(dirname : Gchar*) : GList*
  fun g_io_modules_scan_all_in_directory_with_scope(dirname : Gchar*, scope : GIOModuleScope*) : Void
  fun g_io_modules_load_all_in_directory_with_scope(dirname : Gchar*, scope : GIOModuleScope*) : GList*
  fun g_io_extension_point_register(name : UInt8*) : GIOExtensionPoint*
  fun g_io_extension_point_lookup(name : UInt8*) : GIOExtensionPoint*
  fun g_io_extension_point_set_required_type(extension_point : GIOExtensionPoint*, type : GType) : Void
  fun g_io_extension_point_get_required_type(extension_point : GIOExtensionPoint*) : GType
  fun g_io_extension_point_get_extensions(extension_point : GIOExtensionPoint*) : GList*
  fun g_io_extension_point_get_extension_by_name(extension_point : GIOExtensionPoint*, name : UInt8*) : GIOExtension*
  fun g_io_extension_point_implement(extension_point_name : UInt8*, type : GType, extension_name : UInt8*, priority : Gint) : GIOExtension*
  fun g_io_extension_get_type(extension : GIOExtension*) : GType
  fun g_io_extension_get_name(extension : GIOExtension*) : UInt8*
  fun g_io_extension_get_priority(extension : GIOExtension*) : Gint
  fun g_io_extension_ref_class(extension : GIOExtension*) : GTypeClass*
  fun g_io_module_load(module : GIOModule*) : Void
  fun g_io_module_unload(module : GIOModule*) : Void
  fun g_io_module_query : UInt8**
  fun g_io_scheduler_push_job(job_func : GIOSchedulerJobFunc, user_data : Gpointer, notify : GDestroyNotify, io_priority : Gint, cancellable : GCancellable*) : Void
  fun g_io_scheduler_cancel_all_jobs : Void
  fun g_io_scheduler_job_send_to_mainloop(job : GIOSchedulerJob*, func : GSourceFunc, user_data : Gpointer, notify : GDestroyNotify) : Gboolean
  fun g_io_scheduler_job_send_to_mainloop_async(job : GIOSchedulerJob*, func : GSourceFunc, user_data : Gpointer, notify : GDestroyNotify) : Void
  fun g_loadable_icon_get_type : GType
  fun g_loadable_icon_load(icon : GLoadableIcon*, size : Int32, type : UInt8**, cancellable : GCancellable*, error : GError**) : GInputStream*
  fun g_loadable_icon_load_async(icon : GLoadableIcon*, size : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_loadable_icon_load_finish(icon : GLoadableIcon*, res : GAsyncResult*, type : UInt8**, error : GError**) : GInputStream*
  fun g_memory_input_stream_get_type : GType
  fun g_memory_input_stream_new : GInputStream*
  fun g_memory_input_stream_new_from_data(data : Void*, len : Gssize, destroy : GDestroyNotify) : GInputStream*
  fun g_memory_input_stream_new_from_bytes(bytes : GBytes*) : GInputStream*
  fun g_memory_input_stream_add_data(stream : GMemoryInputStream*, data : Void*, len : Gssize, destroy : GDestroyNotify) : Void
  fun g_memory_input_stream_add_bytes(stream : GMemoryInputStream*, bytes : GBytes*) : Void
  fun g_memory_output_stream_get_type : GType
  fun g_memory_output_stream_new(data : Gpointer, size : Gsize, realloc_function : GReallocFunc, destroy_function : GDestroyNotify) : GOutputStream*
  fun g_memory_output_stream_new_resizable : GOutputStream*
  fun g_memory_output_stream_get_data(ostream : GMemoryOutputStream*) : Gpointer
  fun g_memory_output_stream_get_size(ostream : GMemoryOutputStream*) : Gsize
  fun g_memory_output_stream_get_data_size(ostream : GMemoryOutputStream*) : Gsize
  fun g_memory_output_stream_steal_data(ostream : GMemoryOutputStream*) : Gpointer
  fun g_memory_output_stream_steal_as_bytes(ostream : GMemoryOutputStream*) : GBytes*
  fun g_mount_get_type : GType
  fun g_mount_get_root(mount : GMount*) : GFile*
  fun g_mount_get_default_location(mount : GMount*) : GFile*
  fun g_mount_get_name(mount : GMount*) : UInt8*
  fun g_mount_get_icon(mount : GMount*) : GIcon*
  fun g_mount_get_symbolic_icon(mount : GMount*) : GIcon*
  fun g_mount_get_uuid(mount : GMount*) : UInt8*
  fun g_mount_get_volume(mount : GMount*) : GVolume*
  fun g_mount_get_drive(mount : GMount*) : GDrive*
  fun g_mount_can_unmount(mount : GMount*) : Gboolean
  fun g_mount_can_eject(mount : GMount*) : Gboolean
  fun g_mount_unmount(mount : GMount*, flags : GMountUnmountFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_mount_unmount_finish(mount : GMount*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_mount_eject(mount : GMount*, flags : GMountUnmountFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_mount_eject_finish(mount : GMount*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_mount_remount(mount : GMount*, flags : GMountMountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_mount_remount_finish(mount : GMount*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_mount_guess_content_type(mount : GMount*, force_rescan : Gboolean, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_mount_guess_content_type_finish(mount : GMount*, result : GAsyncResult*, error : GError**) : Gchar**
  fun g_mount_guess_content_type_sync(mount : GMount*, force_rescan : Gboolean, cancellable : GCancellable*, error : GError**) : Gchar**
  fun g_mount_is_shadowed(mount : GMount*) : Gboolean
  fun g_mount_shadow(mount : GMount*) : Void
  fun g_mount_unshadow(mount : GMount*) : Void
  fun g_mount_unmount_with_operation(mount : GMount*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_mount_unmount_with_operation_finish(mount : GMount*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_mount_eject_with_operation(mount : GMount*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_mount_eject_with_operation_finish(mount : GMount*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_mount_get_sort_key(mount : GMount*) : Gchar*
  fun g_mount_operation_get_type : GType
  fun g_mount_operation_new : GMountOperation*
  fun g_mount_operation_get_username(op : GMountOperation*) : UInt8*
  fun g_mount_operation_set_username(op : GMountOperation*, username : UInt8*) : Void
  fun g_mount_operation_get_password(op : GMountOperation*) : UInt8*
  fun g_mount_operation_set_password(op : GMountOperation*, password : UInt8*) : Void
  fun g_mount_operation_get_anonymous(op : GMountOperation*) : Gboolean
  fun g_mount_operation_set_anonymous(op : GMountOperation*, anonymous : Gboolean) : Void
  fun g_mount_operation_get_domain(op : GMountOperation*) : UInt8*
  fun g_mount_operation_set_domain(op : GMountOperation*, domain : UInt8*) : Void
  fun g_mount_operation_get_password_save(op : GMountOperation*) : GPasswordSave
  fun g_mount_operation_set_password_save(op : GMountOperation*, save : GPasswordSave) : Void
  fun g_mount_operation_get_choice(op : GMountOperation*) : Int32
  fun g_mount_operation_set_choice(op : GMountOperation*, choice : Int32) : Void
  fun g_mount_operation_reply(op : GMountOperation*, result : GMountOperationResult) : Void
  fun g_volume_monitor_get_type : GType
  fun g_volume_monitor_get : GVolumeMonitor*
  fun g_volume_monitor_get_connected_drives(volume_monitor : GVolumeMonitor*) : GList*
  fun g_volume_monitor_get_volumes(volume_monitor : GVolumeMonitor*) : GList*
  fun g_volume_monitor_get_mounts(volume_monitor : GVolumeMonitor*) : GList*
  fun g_volume_monitor_get_volume_for_uuid(volume_monitor : GVolumeMonitor*, uuid : UInt8*) : GVolume*
  fun g_volume_monitor_get_mount_for_uuid(volume_monitor : GVolumeMonitor*, uuid : UInt8*) : GMount*
  fun g_volume_monitor_adopt_orphan_mount(mount : GMount*) : GVolume*
  fun g_native_volume_monitor_get_type : GType
  fun g_network_address_get_type : GType
  fun g_network_address_new(hostname : Gchar*, port : Guint16) : GSocketConnectable*
  fun g_network_address_new_loopback(port : Guint16) : GSocketConnectable*
  fun g_network_address_parse(host_and_port : Gchar*, default_port : Guint16, error : GError**) : GSocketConnectable*
  fun g_network_address_parse_uri(uri : Gchar*, default_port : Guint16, error : GError**) : GSocketConnectable*
  fun g_network_address_get_hostname(addr : GNetworkAddress*) : Gchar*
  fun g_network_address_get_port(addr : GNetworkAddress*) : Guint16
  fun g_network_address_get_scheme(addr : GNetworkAddress*) : Gchar*
  fun g_network_monitor_get_type : GType
  fun g_network_monitor_get_default : GNetworkMonitor*
  fun g_network_monitor_get_network_available(monitor : GNetworkMonitor*) : Gboolean
  fun g_network_monitor_get_network_metered(monitor : GNetworkMonitor*) : Gboolean
  fun g_network_monitor_get_connectivity(monitor : GNetworkMonitor*) : GNetworkConnectivity
  fun g_network_monitor_can_reach(monitor : GNetworkMonitor*, connectable : GSocketConnectable*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_network_monitor_can_reach_async(monitor : GNetworkMonitor*, connectable : GSocketConnectable*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_network_monitor_can_reach_finish(monitor : GNetworkMonitor*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_network_service_get_type : GType
  fun g_network_service_new(service : Gchar*, protocol : Gchar*, domain : Gchar*) : GSocketConnectable*
  fun g_network_service_get_service(srv : GNetworkService*) : Gchar*
  fun g_network_service_get_protocol(srv : GNetworkService*) : Gchar*
  fun g_network_service_get_domain(srv : GNetworkService*) : Gchar*
  fun g_network_service_get_scheme(srv : GNetworkService*) : Gchar*
  fun g_network_service_set_scheme(srv : GNetworkService*, scheme : Gchar*) : Void
  fun g_permission_get_type : GType
  fun g_permission_acquire(permission : GPermission*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_permission_acquire_async(permission : GPermission*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_permission_acquire_finish(permission : GPermission*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_permission_release(permission : GPermission*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_permission_release_async(permission : GPermission*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_permission_release_finish(permission : GPermission*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_permission_get_allowed(permission : GPermission*) : Gboolean
  fun g_permission_get_can_acquire(permission : GPermission*) : Gboolean
  fun g_permission_get_can_release(permission : GPermission*) : Gboolean
  fun g_permission_impl_update(permission : GPermission*, allowed : Gboolean, can_acquire : Gboolean, can_release : Gboolean) : Void
  fun g_pollable_input_stream_get_type : GType
  fun g_pollable_input_stream_can_poll(stream : GPollableInputStream*) : Gboolean
  fun g_pollable_input_stream_is_readable(stream : GPollableInputStream*) : Gboolean
  fun g_pollable_input_stream_create_source(stream : GPollableInputStream*, cancellable : GCancellable*) : GSource*
  fun g_pollable_input_stream_read_nonblocking(stream : GPollableInputStream*, buffer : Void*, count : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_pollable_output_stream_get_type : GType
  fun g_pollable_output_stream_can_poll(stream : GPollableOutputStream*) : Gboolean
  fun g_pollable_output_stream_is_writable(stream : GPollableOutputStream*) : Gboolean
  fun g_pollable_output_stream_create_source(stream : GPollableOutputStream*, cancellable : GCancellable*) : GSource*
  fun g_pollable_output_stream_write_nonblocking(stream : GPollableOutputStream*, buffer : Void*, count : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_pollable_source_new(pollable_stream : GObject*) : GSource*
  fun g_pollable_source_new_full(pollable_stream : Gpointer, child_source : GSource*, cancellable : GCancellable*) : GSource*
  fun g_pollable_stream_read(stream : GInputStream*, buffer : Void*, count : Gsize, blocking : Gboolean, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_pollable_stream_write(stream : GOutputStream*, buffer : Void*, count : Gsize, blocking : Gboolean, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_pollable_stream_write_all(stream : GOutputStream*, buffer : Void*, count : Gsize, blocking : Gboolean, bytes_written : Gsize*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_property_action_get_type : GType
  fun g_property_action_new(name : Gchar*, object : Gpointer, property_name : Gchar*) : GPropertyAction*
  fun g_proxy_get_type : GType
  fun g_proxy_get_default_for_protocol(protocol : Gchar*) : GProxy*
  fun g_proxy_connect(proxy : GProxy*, connection : GIOStream*, proxy_address : GProxyAddress*, cancellable : GCancellable*, error : GError**) : GIOStream*
  fun g_proxy_connect_async(proxy : GProxy*, connection : GIOStream*, proxy_address : GProxyAddress*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_proxy_connect_finish(proxy : GProxy*, result : GAsyncResult*, error : GError**) : GIOStream*
  fun g_proxy_supports_hostname(proxy : GProxy*) : Gboolean
  fun g_proxy_address_get_type : GType
  fun g_proxy_address_new(inetaddr : GInetAddress*, port : Guint16, protocol : Gchar*, dest_hostname : Gchar*, dest_port : Guint16, username : Gchar*, password : Gchar*) : GSocketAddress*
  fun g_proxy_address_get_protocol(proxy : GProxyAddress*) : Gchar*
  fun g_proxy_address_get_destination_protocol(proxy : GProxyAddress*) : Gchar*
  fun g_proxy_address_get_destination_hostname(proxy : GProxyAddress*) : Gchar*
  fun g_proxy_address_get_destination_port(proxy : GProxyAddress*) : Guint16
  fun g_proxy_address_get_username(proxy : GProxyAddress*) : Gchar*
  fun g_proxy_address_get_password(proxy : GProxyAddress*) : Gchar*
  fun g_proxy_address_get_uri(proxy : GProxyAddress*) : Gchar*
  fun g_socket_address_enumerator_get_type : GType
  fun g_socket_address_enumerator_next(enumerator : GSocketAddressEnumerator*, cancellable : GCancellable*, error : GError**) : GSocketAddress*
  fun g_socket_address_enumerator_next_async(enumerator : GSocketAddressEnumerator*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_address_enumerator_next_finish(enumerator : GSocketAddressEnumerator*, result : GAsyncResult*, error : GError**) : GSocketAddress*
  fun g_proxy_address_enumerator_get_type : GType
  fun g_proxy_resolver_get_type : GType
  fun g_proxy_resolver_get_default : GProxyResolver*
  fun g_proxy_resolver_is_supported(resolver : GProxyResolver*) : Gboolean
  fun g_proxy_resolver_lookup(resolver : GProxyResolver*, uri : Gchar*, cancellable : GCancellable*, error : GError**) : Gchar**
  fun g_proxy_resolver_lookup_async(resolver : GProxyResolver*, uri : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_proxy_resolver_lookup_finish(resolver : GProxyResolver*, result : GAsyncResult*, error : GError**) : Gchar**
  fun g_resolver_get_type : GType
  fun g_resolver_get_default : GResolver*
  fun g_resolver_set_default(resolver : GResolver*) : Void
  fun g_resolver_lookup_by_name(resolver : GResolver*, hostname : Gchar*, cancellable : GCancellable*, error : GError**) : GList*
  fun g_resolver_lookup_by_name_async(resolver : GResolver*, hostname : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_resolver_lookup_by_name_finish(resolver : GResolver*, result : GAsyncResult*, error : GError**) : GList*
  fun g_resolver_free_addresses(addresses : GList*) : Void
  fun g_resolver_lookup_by_address(resolver : GResolver*, address : GInetAddress*, cancellable : GCancellable*, error : GError**) : Gchar*
  fun g_resolver_lookup_by_address_async(resolver : GResolver*, address : GInetAddress*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_resolver_lookup_by_address_finish(resolver : GResolver*, result : GAsyncResult*, error : GError**) : Gchar*
  fun g_resolver_lookup_service(resolver : GResolver*, service : Gchar*, protocol : Gchar*, domain : Gchar*, cancellable : GCancellable*, error : GError**) : GList*
  fun g_resolver_lookup_service_async(resolver : GResolver*, service : Gchar*, protocol : Gchar*, domain : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_resolver_lookup_service_finish(resolver : GResolver*, result : GAsyncResult*, error : GError**) : GList*
  fun g_resolver_lookup_records(resolver : GResolver*, rrname : Gchar*, record_type : GResolverRecordType, cancellable : GCancellable*, error : GError**) : GList*
  fun g_resolver_lookup_records_async(resolver : GResolver*, rrname : Gchar*, record_type : GResolverRecordType, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_resolver_lookup_records_finish(resolver : GResolver*, result : GAsyncResult*, error : GError**) : GList*
  fun g_resolver_free_targets(targets : GList*) : Void
  fun g_resolver_error_quark : GQuark
  fun g_resource_error_quark : GQuark
  fun g_resource_get_type : GType
  fun g_resource_new_from_data(data : GBytes*, error : GError**) : GResource*
  fun g_resource_ref(resource : GResource*) : GResource*
  fun g_resource_unref(resource : GResource*) : Void
  fun g_resource_load(filename : Gchar*, error : GError**) : GResource*
  fun g_resource_open_stream(resource : GResource*, path : UInt8*, lookup_flags : GResourceLookupFlags, error : GError**) : GInputStream*
  fun g_resource_lookup_data(resource : GResource*, path : UInt8*, lookup_flags : GResourceLookupFlags, error : GError**) : GBytes*
  fun g_resource_enumerate_children(resource : GResource*, path : UInt8*, lookup_flags : GResourceLookupFlags, error : GError**) : UInt8**
  fun g_resource_get_info(resource : GResource*, path : UInt8*, lookup_flags : GResourceLookupFlags, size : Gsize*, flags : Guint32*, error : GError**) : Gboolean
  fun g_resources_register(resource : GResource*) : Void
  fun g_resources_unregister(resource : GResource*) : Void
  fun g_resources_open_stream(path : UInt8*, lookup_flags : GResourceLookupFlags, error : GError**) : GInputStream*
  fun g_resources_lookup_data(path : UInt8*, lookup_flags : GResourceLookupFlags, error : GError**) : GBytes*
  fun g_resources_enumerate_children(path : UInt8*, lookup_flags : GResourceLookupFlags, error : GError**) : UInt8**
  fun g_resources_get_info(path : UInt8*, lookup_flags : GResourceLookupFlags, size : Gsize*, flags : Guint32*, error : GError**) : Gboolean
  fun g_static_resource_init(static_resource : GStaticResource*) : Void
  fun g_static_resource_fini(static_resource : GStaticResource*) : Void
  fun g_static_resource_get_resource(static_resource : GStaticResource*) : GResource*
  fun g_seekable_get_type : GType
  fun g_seekable_tell(seekable : GSeekable*) : Goffset
  fun g_seekable_can_seek(seekable : GSeekable*) : Gboolean
  fun g_seekable_seek(seekable : GSeekable*, offset : Goffset, type : GSeekType, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_seekable_can_truncate(seekable : GSeekable*) : Gboolean
  fun g_seekable_truncate(seekable : GSeekable*, offset : Goffset, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_settings_schema_source_get_type : GType
  fun g_settings_schema_source_get_default : GSettingsSchemaSource*
  fun g_settings_schema_source_ref(source : GSettingsSchemaSource*) : GSettingsSchemaSource*
  fun g_settings_schema_source_unref(source : GSettingsSchemaSource*) : Void
  fun g_settings_schema_source_new_from_directory(directory : Gchar*, parent : GSettingsSchemaSource*, trusted : Gboolean, error : GError**) : GSettingsSchemaSource*
  fun g_settings_schema_source_lookup(source : GSettingsSchemaSource*, schema_id : Gchar*, recursive : Gboolean) : GSettingsSchema*
  fun g_settings_schema_source_list_schemas(source : GSettingsSchemaSource*, recursive : Gboolean, non_relocatable : Gchar***, relocatable : Gchar***) : Void
  fun g_settings_schema_get_type : GType
  fun g_settings_schema_ref(schema : GSettingsSchema*) : GSettingsSchema*
  fun g_settings_schema_unref(schema : GSettingsSchema*) : Void
  fun g_settings_schema_get_id(schema : GSettingsSchema*) : Gchar*
  fun g_settings_schema_get_path(schema : GSettingsSchema*) : Gchar*
  fun g_settings_schema_get_key(schema : GSettingsSchema*, name : Gchar*) : GSettingsSchemaKey*
  fun g_settings_schema_has_key(schema : GSettingsSchema*, name : Gchar*) : Gboolean
  fun g_settings_schema_list_keys(schema : GSettingsSchema*) : Gchar**
  fun g_settings_schema_list_children(schema : GSettingsSchema*) : Gchar**
  fun g_settings_schema_key_get_type : GType
  fun g_settings_schema_key_ref(key : GSettingsSchemaKey*) : GSettingsSchemaKey*
  fun g_settings_schema_key_unref(key : GSettingsSchemaKey*) : Void
  fun g_settings_schema_key_get_value_type(key : GSettingsSchemaKey*) : GVariantType*
  fun g_settings_schema_key_get_default_value(key : GSettingsSchemaKey*) : GVariant*
  fun g_settings_schema_key_get_range(key : GSettingsSchemaKey*) : GVariant*
  fun g_settings_schema_key_range_check(key : GSettingsSchemaKey*, value : GVariant*) : Gboolean
  fun g_settings_schema_key_get_name(key : GSettingsSchemaKey*) : Gchar*
  fun g_settings_schema_key_get_summary(key : GSettingsSchemaKey*) : Gchar*
  fun g_settings_schema_key_get_description(key : GSettingsSchemaKey*) : Gchar*
  fun g_settings_get_type : GType
  fun g_settings_list_schemas : Gchar**
  fun g_settings_list_relocatable_schemas : Gchar**
  fun g_settings_new(schema_id : Gchar*) : GSettings*
  fun g_settings_new_with_path(schema_id : Gchar*, path : Gchar*) : GSettings*
  fun g_settings_new_with_backend(schema_id : Gchar*, backend : GSettingsBackend*) : GSettings*
  fun g_settings_new_with_backend_and_path(schema_id : Gchar*, backend : GSettingsBackend*, path : Gchar*) : GSettings*
  fun g_settings_new_full(schema : GSettingsSchema*, backend : GSettingsBackend*, path : Gchar*) : GSettings*
  fun g_settings_list_children(settings : GSettings*) : Gchar**
  fun g_settings_list_keys(settings : GSettings*) : Gchar**
  fun g_settings_get_range(settings : GSettings*, key : Gchar*) : GVariant*
  fun g_settings_range_check(settings : GSettings*, key : Gchar*, value : GVariant*) : Gboolean
  fun g_settings_set_value(settings : GSettings*, key : Gchar*, value : GVariant*) : Gboolean
  fun g_settings_get_value(settings : GSettings*, key : Gchar*) : GVariant*
  fun g_settings_get_user_value(settings : GSettings*, key : Gchar*) : GVariant*
  fun g_settings_get_default_value(settings : GSettings*, key : Gchar*) : GVariant*
  fun g_settings_set(settings : GSettings*, key : Gchar*, format : Gchar*) : Gboolean
  fun g_settings_get(settings : GSettings*, key : Gchar*, format : Gchar*) : Void
  fun g_settings_reset(settings : GSettings*, key : Gchar*) : Void
  fun g_settings_get_int(settings : GSettings*, key : Gchar*) : Gint
  fun g_settings_set_int(settings : GSettings*, key : Gchar*, value : Gint) : Gboolean
  fun g_settings_get_uint(settings : GSettings*, key : Gchar*) : Guint
  fun g_settings_set_uint(settings : GSettings*, key : Gchar*, value : Guint) : Gboolean
  fun g_settings_get_string(settings : GSettings*, key : Gchar*) : Gchar*
  fun g_settings_set_string(settings : GSettings*, key : Gchar*, value : Gchar*) : Gboolean
  fun g_settings_get_boolean(settings : GSettings*, key : Gchar*) : Gboolean
  fun g_settings_set_boolean(settings : GSettings*, key : Gchar*, value : Gboolean) : Gboolean
  fun g_settings_get_double(settings : GSettings*, key : Gchar*) : Gdouble
  fun g_settings_set_double(settings : GSettings*, key : Gchar*, value : Gdouble) : Gboolean
  fun g_settings_get_strv(settings : GSettings*, key : Gchar*) : Gchar**
  fun g_settings_set_strv(settings : GSettings*, key : Gchar*, value : Gchar**) : Gboolean
  fun g_settings_get_enum(settings : GSettings*, key : Gchar*) : Gint
  fun g_settings_set_enum(settings : GSettings*, key : Gchar*, value : Gint) : Gboolean
  fun g_settings_get_flags(settings : GSettings*, key : Gchar*) : Guint
  fun g_settings_set_flags(settings : GSettings*, key : Gchar*, value : Guint) : Gboolean
  fun g_settings_get_child(settings : GSettings*, name : Gchar*) : GSettings*
  fun g_settings_is_writable(settings : GSettings*, name : Gchar*) : Gboolean
  fun g_settings_delay(settings : GSettings*) : Void
  fun g_settings_apply(settings : GSettings*) : Void
  fun g_settings_revert(settings : GSettings*) : Void
  fun g_settings_get_has_unapplied(settings : GSettings*) : Gboolean
  fun g_settings_sync : Void
  fun g_settings_bind(settings : GSettings*, key : Gchar*, object : Gpointer, property : Gchar*, flags : GSettingsBindFlags) : Void
  fun g_settings_bind_with_mapping(settings : GSettings*, key : Gchar*, object : Gpointer, property : Gchar*, flags : GSettingsBindFlags, get_mapping : GSettingsBindGetMapping, set_mapping : GSettingsBindSetMapping, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun g_settings_bind_writable(settings : GSettings*, key : Gchar*, object : Gpointer, property : Gchar*, inverted : Gboolean) : Void
  fun g_settings_unbind(object : Gpointer, property : Gchar*) : Void
  fun g_settings_create_action(settings : GSettings*, key : Gchar*) : GAction*
  fun g_settings_get_mapped(settings : GSettings*, key : Gchar*, mapping : GSettingsGetMapping, user_data : Gpointer) : Gpointer
  fun g_simple_action_get_type : GType
  fun g_simple_action_new(name : Gchar*, parameter_type : GVariantType*) : GSimpleAction*
  fun g_simple_action_new_stateful(name : Gchar*, parameter_type : GVariantType*, state : GVariant*) : GSimpleAction*
  fun g_simple_action_set_enabled(simple : GSimpleAction*, enabled : Gboolean) : Void
  fun g_simple_action_set_state(simple : GSimpleAction*, value : GVariant*) : Void
  fun g_simple_action_set_state_hint(simple : GSimpleAction*, state_hint : GVariant*) : Void
  fun g_simple_action_group_get_type : GType
  fun g_simple_action_group_new : GSimpleActionGroup*
  fun g_simple_action_group_lookup(simple : GSimpleActionGroup*, action_name : Gchar*) : GAction*
  fun g_simple_action_group_insert(simple : GSimpleActionGroup*, action : GAction*) : Void
  fun g_simple_action_group_remove(simple : GSimpleActionGroup*, action_name : Gchar*) : Void
  fun g_simple_action_group_add_entries(simple : GSimpleActionGroup*, entries : GActionEntry*, n_entries : Gint, user_data : Gpointer) : Void
  fun g_simple_async_result_get_type : GType
  fun g_simple_async_result_new(source_object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, source_tag : Gpointer) : GSimpleAsyncResult*
  fun g_simple_async_result_new_error(source_object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, domain : GQuark, code : Gint, format : UInt8*) : GSimpleAsyncResult*
  fun g_simple_async_result_new_from_error(source_object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, error : GError*) : GSimpleAsyncResult*
  fun g_simple_async_result_new_take_error(source_object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, error : GError*) : GSimpleAsyncResult*
  fun g_simple_async_result_set_op_res_gpointer(simple : GSimpleAsyncResult*, op_res : Gpointer, destroy_op_res : GDestroyNotify) : Void
  fun g_simple_async_result_get_op_res_gpointer(simple : GSimpleAsyncResult*) : Gpointer
  fun g_simple_async_result_set_op_res_gssize(simple : GSimpleAsyncResult*, op_res : Gssize) : Void
  fun g_simple_async_result_get_op_res_gssize(simple : GSimpleAsyncResult*) : Gssize
  fun g_simple_async_result_set_op_res_gboolean(simple : GSimpleAsyncResult*, op_res : Gboolean) : Void
  fun g_simple_async_result_get_op_res_gboolean(simple : GSimpleAsyncResult*) : Gboolean
  fun g_simple_async_result_set_check_cancellable(simple : GSimpleAsyncResult*, check_cancellable : GCancellable*) : Void
  fun g_simple_async_result_get_source_tag(simple : GSimpleAsyncResult*) : Gpointer
  fun g_simple_async_result_set_handle_cancellation(simple : GSimpleAsyncResult*, handle_cancellation : Gboolean) : Void
  fun g_simple_async_result_complete(simple : GSimpleAsyncResult*) : Void
  fun g_simple_async_result_complete_in_idle(simple : GSimpleAsyncResult*) : Void
  fun g_simple_async_result_run_in_thread(simple : GSimpleAsyncResult*, func : GSimpleAsyncThreadFunc, io_priority : Int32, cancellable : GCancellable*) : Void
  fun g_simple_async_result_set_from_error(simple : GSimpleAsyncResult*, error : GError*) : Void
  fun g_simple_async_result_take_error(simple : GSimpleAsyncResult*, error : GError*) : Void
  fun g_simple_async_result_propagate_error(simple : GSimpleAsyncResult*, dest : GError**) : Gboolean
  fun g_simple_async_result_set_error(simple : GSimpleAsyncResult*, domain : GQuark, code : Gint, format : UInt8*) : Void
  fun g_simple_async_result_set_error_va(simple : GSimpleAsyncResult*, domain : GQuark, code : Gint, format : UInt8*, args : X__va_list_tag*) : Void
  fun g_simple_async_result_is_valid(result : GAsyncResult*, source : GObject*, source_tag : Gpointer) : Gboolean
  fun g_simple_async_report_error_in_idle(object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, domain : GQuark, code : Gint, format : UInt8*) : Void
  fun g_simple_async_report_gerror_in_idle(object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, error : GError*) : Void
  fun g_simple_async_report_take_gerror_in_idle(object : GObject*, callback : GAsyncReadyCallback, user_data : Gpointer, error : GError*) : Void
  fun g_simple_io_stream_get_type : GType
  fun g_simple_io_stream_new(input_stream : GInputStream*, output_stream : GOutputStream*) : GIOStream*
  fun g_simple_permission_get_type : GType
  fun g_simple_permission_new(allowed : Gboolean) : GPermission*
  fun g_socket_client_get_type : GType
  fun g_socket_client_new : GSocketClient*
  fun g_socket_client_get_family(client : GSocketClient*) : GSocketFamily
  fun g_socket_client_set_family(client : GSocketClient*, family : GSocketFamily) : Void
  fun g_socket_client_get_socket_type(client : GSocketClient*) : GSocketType
  fun g_socket_client_set_socket_type(client : GSocketClient*, type : GSocketType) : Void
  fun g_socket_client_get_protocol(client : GSocketClient*) : GSocketProtocol
  fun g_socket_client_set_protocol(client : GSocketClient*, protocol : GSocketProtocol) : Void
  fun g_socket_client_get_local_address(client : GSocketClient*) : GSocketAddress*
  fun g_socket_client_set_local_address(client : GSocketClient*, address : GSocketAddress*) : Void
  fun g_socket_client_get_timeout(client : GSocketClient*) : Guint
  fun g_socket_client_set_timeout(client : GSocketClient*, timeout : Guint) : Void
  fun g_socket_client_get_enable_proxy(client : GSocketClient*) : Gboolean
  fun g_socket_client_set_enable_proxy(client : GSocketClient*, enable : Gboolean) : Void
  fun g_socket_client_get_tls(client : GSocketClient*) : Gboolean
  fun g_socket_client_set_tls(client : GSocketClient*, tls : Gboolean) : Void
  fun g_socket_client_get_tls_validation_flags(client : GSocketClient*) : GTlsCertificateFlags
  fun g_socket_client_set_tls_validation_flags(client : GSocketClient*, flags : GTlsCertificateFlags) : Void
  fun g_socket_client_get_proxy_resolver(client : GSocketClient*) : GProxyResolver*
  fun g_socket_client_set_proxy_resolver(client : GSocketClient*, proxy_resolver : GProxyResolver*) : Void
  fun g_socket_client_connect(client : GSocketClient*, connectable : GSocketConnectable*, cancellable : GCancellable*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_to_host(client : GSocketClient*, host_and_port : Gchar*, default_port : Guint16, cancellable : GCancellable*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_to_service(client : GSocketClient*, domain : Gchar*, service : Gchar*, cancellable : GCancellable*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_to_uri(client : GSocketClient*, uri : Gchar*, default_port : Guint16, cancellable : GCancellable*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_async(client : GSocketClient*, connectable : GSocketConnectable*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_client_connect_finish(client : GSocketClient*, result : GAsyncResult*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_to_host_async(client : GSocketClient*, host_and_port : Gchar*, default_port : Guint16, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_client_connect_to_host_finish(client : GSocketClient*, result : GAsyncResult*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_to_service_async(client : GSocketClient*, domain : Gchar*, service : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_client_connect_to_service_finish(client : GSocketClient*, result : GAsyncResult*, error : GError**) : GSocketConnection*
  fun g_socket_client_connect_to_uri_async(client : GSocketClient*, uri : Gchar*, default_port : Guint16, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_client_connect_to_uri_finish(client : GSocketClient*, result : GAsyncResult*, error : GError**) : GSocketConnection*
  fun g_socket_client_add_application_proxy(client : GSocketClient*, protocol : Gchar*) : Void
  fun g_socket_connectable_get_type : GType
  fun g_socket_connectable_enumerate(connectable : GSocketConnectable*) : GSocketAddressEnumerator*
  fun g_socket_connectable_proxy_enumerate(connectable : GSocketConnectable*) : GSocketAddressEnumerator*
  fun g_socket_connectable_to_string(connectable : GSocketConnectable*) : Gchar*
  fun g_socket_get_type : GType
  fun g_socket_new(family : GSocketFamily, type : GSocketType, protocol : GSocketProtocol, error : GError**) : GSocket*
  fun g_socket_new_from_fd(fd : Gint, error : GError**) : GSocket*
  fun g_socket_get_fd(socket : GSocket*) : Int32
  fun g_socket_get_family(socket : GSocket*) : GSocketFamily
  fun g_socket_get_socket_type(socket : GSocket*) : GSocketType
  fun g_socket_get_protocol(socket : GSocket*) : GSocketProtocol
  fun g_socket_get_local_address(socket : GSocket*, error : GError**) : GSocketAddress*
  fun g_socket_get_remote_address(socket : GSocket*, error : GError**) : GSocketAddress*
  fun g_socket_set_blocking(socket : GSocket*, blocking : Gboolean) : Void
  fun g_socket_get_blocking(socket : GSocket*) : Gboolean
  fun g_socket_set_keepalive(socket : GSocket*, keepalive : Gboolean) : Void
  fun g_socket_get_keepalive(socket : GSocket*) : Gboolean
  fun g_socket_get_listen_backlog(socket : GSocket*) : Gint
  fun g_socket_set_listen_backlog(socket : GSocket*, backlog : Gint) : Void
  fun g_socket_get_timeout(socket : GSocket*) : Guint
  fun g_socket_set_timeout(socket : GSocket*, timeout : Guint) : Void
  fun g_socket_get_ttl(socket : GSocket*) : Guint
  fun g_socket_set_ttl(socket : GSocket*, ttl : Guint) : Void
  fun g_socket_get_broadcast(socket : GSocket*) : Gboolean
  fun g_socket_set_broadcast(socket : GSocket*, broadcast : Gboolean) : Void
  fun g_socket_get_multicast_loopback(socket : GSocket*) : Gboolean
  fun g_socket_set_multicast_loopback(socket : GSocket*, loopback : Gboolean) : Void
  fun g_socket_get_multicast_ttl(socket : GSocket*) : Guint
  fun g_socket_set_multicast_ttl(socket : GSocket*, ttl : Guint) : Void
  fun g_socket_is_connected(socket : GSocket*) : Gboolean
  fun g_socket_bind(socket : GSocket*, address : GSocketAddress*, allow_reuse : Gboolean, error : GError**) : Gboolean
  fun g_socket_join_multicast_group(socket : GSocket*, group : GInetAddress*, source_specific : Gboolean, iface : Gchar*, error : GError**) : Gboolean
  fun g_socket_leave_multicast_group(socket : GSocket*, group : GInetAddress*, source_specific : Gboolean, iface : Gchar*, error : GError**) : Gboolean
  fun g_socket_connect(socket : GSocket*, address : GSocketAddress*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_socket_check_connect_result(socket : GSocket*, error : GError**) : Gboolean
  fun g_socket_get_available_bytes(socket : GSocket*) : Gssize
  fun g_socket_condition_check(socket : GSocket*, condition : GIOCondition) : GIOCondition
  fun g_socket_condition_wait(socket : GSocket*, condition : GIOCondition, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_socket_condition_timed_wait(socket : GSocket*, condition : GIOCondition, timeout : Gint64, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_socket_accept(socket : GSocket*, cancellable : GCancellable*, error : GError**) : GSocket*
  fun g_socket_listen(socket : GSocket*, error : GError**) : Gboolean
  fun g_socket_receive(socket : GSocket*, buffer : Gchar*, size : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_receive_from(socket : GSocket*, address : GSocketAddress**, buffer : Gchar*, size : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_send(socket : GSocket*, buffer : Gchar*, size : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_send_to(socket : GSocket*, address : GSocketAddress*, buffer : Gchar*, size : Gsize, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_receive_message(socket : GSocket*, address : GSocketAddress**, vectors : GInputVector*, num_vectors : Gint, messages : GSocketControlMessage***, num_messages : Gint*, flags : Gint*, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_send_message(socket : GSocket*, address : GSocketAddress*, vectors : GOutputVector*, num_vectors : Gint, messages : GSocketControlMessage**, num_messages : Gint, flags : Gint, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_receive_messages(socket : GSocket*, messages : GInputMessage*, num_messages : Guint, flags : Gint, cancellable : GCancellable*, error : GError**) : Gint
  fun g_socket_send_messages(socket : GSocket*, messages : GOutputMessage*, num_messages : Guint, flags : Gint, cancellable : GCancellable*, error : GError**) : Gint
  fun g_socket_close(socket : GSocket*, error : GError**) : Gboolean
  fun g_socket_shutdown(socket : GSocket*, shutdown_read : Gboolean, shutdown_write : Gboolean, error : GError**) : Gboolean
  fun g_socket_is_closed(socket : GSocket*) : Gboolean
  fun g_socket_create_source(socket : GSocket*, condition : GIOCondition, cancellable : GCancellable*) : GSource*
  fun g_socket_speaks_ipv4(socket : GSocket*) : Gboolean
  fun g_socket_get_credentials(socket : GSocket*, error : GError**) : GCredentials*
  fun g_socket_receive_with_blocking(socket : GSocket*, buffer : Gchar*, size : Gsize, blocking : Gboolean, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_send_with_blocking(socket : GSocket*, buffer : Gchar*, size : Gsize, blocking : Gboolean, cancellable : GCancellable*, error : GError**) : Gssize
  fun g_socket_get_option(socket : GSocket*, level : Gint, optname : Gint, value : Gint*, error : GError**) : Gboolean
  fun g_socket_set_option(socket : GSocket*, level : Gint, optname : Gint, value : Gint, error : GError**) : Gboolean
  fun g_socket_connection_get_type : GType
  fun g_socket_connection_is_connected(connection : GSocketConnection*) : Gboolean
  fun g_socket_connection_connect(connection : GSocketConnection*, address : GSocketAddress*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_socket_connection_connect_async(connection : GSocketConnection*, address : GSocketAddress*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_connection_connect_finish(connection : GSocketConnection*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_socket_connection_get_socket(connection : GSocketConnection*) : GSocket*
  fun g_socket_connection_get_local_address(connection : GSocketConnection*, error : GError**) : GSocketAddress*
  fun g_socket_connection_get_remote_address(connection : GSocketConnection*, error : GError**) : GSocketAddress*
  fun g_socket_connection_factory_register_type(g_type : GType, family : GSocketFamily, type : GSocketType, protocol : Gint) : Void
  fun g_socket_connection_factory_lookup_type(family : GSocketFamily, type : GSocketType, protocol_id : Gint) : GType
  fun g_socket_connection_factory_create_connection(socket : GSocket*) : GSocketConnection*
  fun g_socket_control_message_get_type : GType
  fun g_socket_control_message_get_size(message : GSocketControlMessage*) : Gsize
  fun g_socket_control_message_get_level(message : GSocketControlMessage*) : Int32
  fun g_socket_control_message_get_msg_type(message : GSocketControlMessage*) : Int32
  fun g_socket_control_message_serialize(message : GSocketControlMessage*, data : Gpointer) : Void
  fun g_socket_control_message_deserialize(level : Int32, type : Int32, size : Gsize, data : Gpointer) : GSocketControlMessage*
  fun g_socket_listener_get_type : GType
  fun g_socket_listener_new : GSocketListener*
  fun g_socket_listener_set_backlog(listener : GSocketListener*, listen_backlog : Int32) : Void
  fun g_socket_listener_add_socket(listener : GSocketListener*, socket : GSocket*, source_object : GObject*, error : GError**) : Gboolean
  fun g_socket_listener_add_address(listener : GSocketListener*, address : GSocketAddress*, type : GSocketType, protocol : GSocketProtocol, source_object : GObject*, effective_address : GSocketAddress**, error : GError**) : Gboolean
  fun g_socket_listener_add_inet_port(listener : GSocketListener*, port : Guint16, source_object : GObject*, error : GError**) : Gboolean
  fun g_socket_listener_add_any_inet_port(listener : GSocketListener*, source_object : GObject*, error : GError**) : Guint16
  fun g_socket_listener_accept_socket(listener : GSocketListener*, source_object : GObject**, cancellable : GCancellable*, error : GError**) : GSocket*
  fun g_socket_listener_accept_socket_async(listener : GSocketListener*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_listener_accept_socket_finish(listener : GSocketListener*, result : GAsyncResult*, source_object : GObject**, error : GError**) : GSocket*
  fun g_socket_listener_accept(listener : GSocketListener*, source_object : GObject**, cancellable : GCancellable*, error : GError**) : GSocketConnection*
  fun g_socket_listener_accept_async(listener : GSocketListener*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_socket_listener_accept_finish(listener : GSocketListener*, result : GAsyncResult*, source_object : GObject**, error : GError**) : GSocketConnection*
  fun g_socket_listener_close(listener : GSocketListener*) : Void
  fun g_socket_service_get_type : GType
  fun g_socket_service_new : GSocketService*
  fun g_socket_service_start(service : GSocketService*) : Void
  fun g_socket_service_stop(service : GSocketService*) : Void
  fun g_socket_service_is_active(service : GSocketService*) : Gboolean
  fun g_srv_target_get_type : GType
  fun g_srv_target_new(hostname : Gchar*, port : Guint16, priority : Guint16, weight : Guint16) : GSrvTarget*
  fun g_srv_target_copy(target : GSrvTarget*) : GSrvTarget*
  fun g_srv_target_free(target : GSrvTarget*) : Void
  fun g_srv_target_get_hostname(target : GSrvTarget*) : Gchar*
  fun g_srv_target_get_port(target : GSrvTarget*) : Guint16
  fun g_srv_target_get_priority(target : GSrvTarget*) : Guint16
  fun g_srv_target_get_weight(target : GSrvTarget*) : Guint16
  fun g_srv_target_list_sort(targets : GList*) : GList*
  fun g_simple_proxy_resolver_get_type : GType
  fun g_simple_proxy_resolver_new(default_proxy : Gchar*, ignore_hosts : Gchar**) : GProxyResolver*
  fun g_simple_proxy_resolver_set_default_proxy(resolver : GSimpleProxyResolver*, default_proxy : Gchar*) : Void
  fun g_simple_proxy_resolver_set_ignore_hosts(resolver : GSimpleProxyResolver*, ignore_hosts : Gchar**) : Void
  fun g_simple_proxy_resolver_set_uri_proxy(resolver : GSimpleProxyResolver*, uri_scheme : Gchar*, proxy : Gchar*) : Void
  fun g_task_get_type : GType
  fun g_task_new(source_object : Gpointer, cancellable : GCancellable*, callback : GAsyncReadyCallback, callback_data : Gpointer) : GTask*
  fun g_task_report_error(source_object : Gpointer, callback : GAsyncReadyCallback, callback_data : Gpointer, source_tag : Gpointer, error : GError*) : Void
  fun g_task_report_new_error(source_object : Gpointer, callback : GAsyncReadyCallback, callback_data : Gpointer, source_tag : Gpointer, domain : GQuark, code : Gint, format : UInt8*) : Void
  fun g_task_set_task_data(task : GTask*, task_data : Gpointer, task_data_destroy : GDestroyNotify) : Void
  fun g_task_set_priority(task : GTask*, priority : Gint) : Void
  fun g_task_set_check_cancellable(task : GTask*, check_cancellable : Gboolean) : Void
  fun g_task_set_source_tag(task : GTask*, source_tag : Gpointer) : Void
  fun g_task_get_source_object(task : GTask*) : Gpointer
  fun g_task_get_task_data(task : GTask*) : Gpointer
  fun g_task_get_priority(task : GTask*) : Gint
  fun g_task_get_context(task : GTask*) : GMainContext*
  fun g_task_get_cancellable(task : GTask*) : GCancellable*
  fun g_task_get_check_cancellable(task : GTask*) : Gboolean
  fun g_task_get_source_tag(task : GTask*) : Gpointer
  fun g_task_is_valid(result : Gpointer, source_object : Gpointer) : Gboolean
  fun g_task_run_in_thread(task : GTask*, task_func : GTaskThreadFunc) : Void
  fun g_task_run_in_thread_sync(task : GTask*, task_func : GTaskThreadFunc) : Void
  fun g_task_set_return_on_cancel(task : GTask*, return_on_cancel : Gboolean) : Gboolean
  fun g_task_get_return_on_cancel(task : GTask*) : Gboolean
  fun g_task_attach_source(task : GTask*, source : GSource*, callback : GSourceFunc) : Void
  fun g_task_return_pointer(task : GTask*, result : Gpointer, result_destroy : GDestroyNotify) : Void
  fun g_task_return_boolean(task : GTask*, result : Gboolean) : Void
  fun g_task_return_int(task : GTask*, result : Gssize) : Void
  fun g_task_return_error(task : GTask*, error : GError*) : Void
  fun g_task_return_new_error(task : GTask*, domain : GQuark, code : Gint, format : UInt8*) : Void
  fun g_task_return_error_if_cancelled(task : GTask*) : Gboolean
  fun g_task_propagate_pointer(task : GTask*, error : GError**) : Gpointer
  fun g_task_propagate_boolean(task : GTask*, error : GError**) : Gboolean
  fun g_task_propagate_int(task : GTask*, error : GError**) : Gssize
  fun g_task_had_error(task : GTask*) : Gboolean
  fun g_task_get_completed(task : GTask*) : Gboolean
  fun g_subprocess_get_type : GType
  fun g_subprocess_new(flags : GSubprocessFlags, error : GError**, argv0 : Gchar*) : GSubprocess*
  fun g_subprocess_newv(argv : Gchar**, flags : GSubprocessFlags, error : GError**) : GSubprocess*
  fun g_subprocess_get_stdin_pipe(subprocess : GSubprocess*) : GOutputStream*
  fun g_subprocess_get_stdout_pipe(subprocess : GSubprocess*) : GInputStream*
  fun g_subprocess_get_stderr_pipe(subprocess : GSubprocess*) : GInputStream*
  fun g_subprocess_get_identifier(subprocess : GSubprocess*) : Gchar*
  fun g_subprocess_send_signal(subprocess : GSubprocess*, signal_num : Gint) : Void
  fun g_subprocess_force_exit(subprocess : GSubprocess*) : Void
  fun g_subprocess_wait(subprocess : GSubprocess*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_subprocess_wait_async(subprocess : GSubprocess*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_subprocess_wait_finish(subprocess : GSubprocess*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_subprocess_wait_check(subprocess : GSubprocess*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_subprocess_wait_check_async(subprocess : GSubprocess*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_subprocess_wait_check_finish(subprocess : GSubprocess*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_subprocess_get_status(subprocess : GSubprocess*) : Gint
  fun g_subprocess_get_successful(subprocess : GSubprocess*) : Gboolean
  fun g_subprocess_get_if_exited(subprocess : GSubprocess*) : Gboolean
  fun g_subprocess_get_exit_status(subprocess : GSubprocess*) : Gint
  fun g_subprocess_get_if_signaled(subprocess : GSubprocess*) : Gboolean
  fun g_subprocess_get_term_sig(subprocess : GSubprocess*) : Gint
  fun g_subprocess_communicate(subprocess : GSubprocess*, stdin_buf : GBytes*, cancellable : GCancellable*, stdout_buf : GBytes**, stderr_buf : GBytes**, error : GError**) : Gboolean
  fun g_subprocess_communicate_async(subprocess : GSubprocess*, stdin_buf : GBytes*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_subprocess_communicate_finish(subprocess : GSubprocess*, result : GAsyncResult*, stdout_buf : GBytes**, stderr_buf : GBytes**, error : GError**) : Gboolean
  fun g_subprocess_communicate_utf8(subprocess : GSubprocess*, stdin_buf : UInt8*, cancellable : GCancellable*, stdout_buf : UInt8**, stderr_buf : UInt8**, error : GError**) : Gboolean
  fun g_subprocess_communicate_utf8_async(subprocess : GSubprocess*, stdin_buf : UInt8*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_subprocess_communicate_utf8_finish(subprocess : GSubprocess*, result : GAsyncResult*, stdout_buf : UInt8**, stderr_buf : UInt8**, error : GError**) : Gboolean
  fun g_subprocess_launcher_get_type : GType
  fun g_subprocess_launcher_new(flags : GSubprocessFlags) : GSubprocessLauncher*
  fun g_subprocess_launcher_spawn(self : GSubprocessLauncher*, error : GError**, argv0 : Gchar*) : GSubprocess*
  fun g_subprocess_launcher_spawnv(self : GSubprocessLauncher*, argv : Gchar**, error : GError**) : GSubprocess*
  fun g_subprocess_launcher_set_environ(self : GSubprocessLauncher*, env : Gchar**) : Void
  fun g_subprocess_launcher_setenv(self : GSubprocessLauncher*, variable : Gchar*, value : Gchar*, overwrite : Gboolean) : Void
  fun g_subprocess_launcher_unsetenv(self : GSubprocessLauncher*, variable : Gchar*) : Void
  fun g_subprocess_launcher_getenv(self : GSubprocessLauncher*, variable : Gchar*) : Gchar*
  fun g_subprocess_launcher_set_cwd(self : GSubprocessLauncher*, cwd : Gchar*) : Void
  fun g_subprocess_launcher_set_flags(self : GSubprocessLauncher*, flags : GSubprocessFlags) : Void
  fun g_subprocess_launcher_set_stdin_file_path(self : GSubprocessLauncher*, path : Gchar*) : Void
  fun g_subprocess_launcher_take_stdin_fd(self : GSubprocessLauncher*, fd : Gint) : Void
  fun g_subprocess_launcher_set_stdout_file_path(self : GSubprocessLauncher*, path : Gchar*) : Void
  fun g_subprocess_launcher_take_stdout_fd(self : GSubprocessLauncher*, fd : Gint) : Void
  fun g_subprocess_launcher_set_stderr_file_path(self : GSubprocessLauncher*, path : Gchar*) : Void
  fun g_subprocess_launcher_take_stderr_fd(self : GSubprocessLauncher*, fd : Gint) : Void
  fun g_subprocess_launcher_take_fd(self : GSubprocessLauncher*, source_fd : Gint, target_fd : Gint) : Void
  fun g_subprocess_launcher_set_child_setup(self : GSubprocessLauncher*, child_setup : GSpawnChildSetupFunc, user_data : Gpointer, destroy_notify : GDestroyNotify) : Void
  fun g_tcp_connection_get_type : GType
  fun g_tcp_connection_set_graceful_disconnect(connection : GTcpConnection*, graceful_disconnect : Gboolean) : Void
  fun g_tcp_connection_get_graceful_disconnect(connection : GTcpConnection*) : Gboolean
  fun g_tcp_wrapper_connection_get_type : GType
  fun g_tcp_wrapper_connection_new(base_io_stream : GIOStream*, socket : GSocket*) : GSocketConnection*
  fun g_tcp_wrapper_connection_get_base_io_stream(conn : GTcpWrapperConnection*) : GIOStream*
  fun g_test_dbus_get_type : GType
  fun g_test_dbus_new(flags : GTestDBusFlags) : GTestDBus*
  fun g_test_dbus_get_flags(self : GTestDBus*) : GTestDBusFlags
  fun g_test_dbus_get_bus_address(self : GTestDBus*) : Gchar*
  fun g_test_dbus_add_service_dir(self : GTestDBus*, path : Gchar*) : Void
  fun g_test_dbus_up(self : GTestDBus*) : Void
  fun g_test_dbus_stop(self : GTestDBus*) : Void
  fun g_test_dbus_down(self : GTestDBus*) : Void
  fun g_test_dbus_unset : Void
  fun g_themed_icon_get_type : GType
  fun g_themed_icon_new(iconname : UInt8*) : GIcon*
  fun g_themed_icon_new_with_default_fallbacks(iconname : UInt8*) : GIcon*
  fun g_themed_icon_new_from_names(iconnames : UInt8**, len : Int32) : GIcon*
  fun g_themed_icon_prepend_name(icon : GThemedIcon*, iconname : UInt8*) : Void
  fun g_themed_icon_append_name(icon : GThemedIcon*, iconname : UInt8*) : Void
  fun g_themed_icon_get_names(icon : GThemedIcon*) : Gchar**
  fun g_threaded_socket_service_get_type : GType
  fun g_threaded_socket_service_new(max_threads : Int32) : GSocketService*
  fun g_tls_backend_get_type : GType
  fun g_tls_backend_get_default : GTlsBackend*
  fun g_tls_backend_get_default_database(backend : GTlsBackend*) : GTlsDatabase*
  fun g_tls_backend_supports_tls(backend : GTlsBackend*) : Gboolean
  fun g_tls_backend_supports_dtls(backend : GTlsBackend*) : Gboolean
  fun g_tls_backend_get_certificate_type(backend : GTlsBackend*) : GType
  fun g_tls_backend_get_client_connection_type(backend : GTlsBackend*) : GType
  fun g_tls_backend_get_server_connection_type(backend : GTlsBackend*) : GType
  fun g_tls_backend_get_file_database_type(backend : GTlsBackend*) : GType
  fun g_tls_backend_get_dtls_client_connection_type(backend : GTlsBackend*) : GType
  fun g_tls_backend_get_dtls_server_connection_type(backend : GTlsBackend*) : GType
  fun g_tls_certificate_get_type : GType
  fun g_tls_certificate_new_from_pem(data : Gchar*, length : Gssize, error : GError**) : GTlsCertificate*
  fun g_tls_certificate_new_from_file(file : Gchar*, error : GError**) : GTlsCertificate*
  fun g_tls_certificate_new_from_files(cert_file : Gchar*, key_file : Gchar*, error : GError**) : GTlsCertificate*
  fun g_tls_certificate_list_new_from_file(file : Gchar*, error : GError**) : GList*
  fun g_tls_certificate_get_issuer(cert : GTlsCertificate*) : GTlsCertificate*
  fun g_tls_certificate_verify(cert : GTlsCertificate*, identity : GSocketConnectable*, trusted_ca : GTlsCertificate*) : GTlsCertificateFlags
  fun g_tls_certificate_is_same(cert_one : GTlsCertificate*, cert_two : GTlsCertificate*) : Gboolean
  fun g_tls_connection_get_type : GType
  fun g_tls_connection_set_use_system_certdb(conn : GTlsConnection*, use_system_certdb : Gboolean) : Void
  fun g_tls_connection_get_use_system_certdb(conn : GTlsConnection*) : Gboolean
  fun g_tls_connection_set_database(conn : GTlsConnection*, database : GTlsDatabase*) : Void
  fun g_tls_connection_get_database(conn : GTlsConnection*) : GTlsDatabase*
  fun g_tls_connection_set_certificate(conn : GTlsConnection*, certificate : GTlsCertificate*) : Void
  fun g_tls_connection_get_certificate(conn : GTlsConnection*) : GTlsCertificate*
  fun g_tls_connection_set_interaction(conn : GTlsConnection*, interaction : GTlsInteraction*) : Void
  fun g_tls_connection_get_interaction(conn : GTlsConnection*) : GTlsInteraction*
  fun g_tls_connection_get_peer_certificate(conn : GTlsConnection*) : GTlsCertificate*
  fun g_tls_connection_get_peer_certificate_errors(conn : GTlsConnection*) : GTlsCertificateFlags
  fun g_tls_connection_set_require_close_notify(conn : GTlsConnection*, require_close_notify : Gboolean) : Void
  fun g_tls_connection_get_require_close_notify(conn : GTlsConnection*) : Gboolean
  fun g_tls_connection_set_rehandshake_mode(conn : GTlsConnection*, mode : GTlsRehandshakeMode) : Void
  fun g_tls_connection_get_rehandshake_mode(conn : GTlsConnection*) : GTlsRehandshakeMode
  fun g_tls_connection_handshake(conn : GTlsConnection*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun g_tls_connection_handshake_async(conn : GTlsConnection*, io_priority : Int32, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_connection_handshake_finish(conn : GTlsConnection*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_tls_error_quark : GQuark
  fun g_tls_connection_emit_accept_certificate(conn : GTlsConnection*, peer_cert : GTlsCertificate*, errors : GTlsCertificateFlags) : Gboolean
  fun g_tls_client_connection_get_type : GType
  fun g_tls_client_connection_new(base_io_stream : GIOStream*, server_identity : GSocketConnectable*, error : GError**) : GIOStream*
  fun g_tls_client_connection_get_validation_flags(conn : GTlsClientConnection*) : GTlsCertificateFlags
  fun g_tls_client_connection_set_validation_flags(conn : GTlsClientConnection*, flags : GTlsCertificateFlags) : Void
  fun g_tls_client_connection_get_server_identity(conn : GTlsClientConnection*) : GSocketConnectable*
  fun g_tls_client_connection_set_server_identity(conn : GTlsClientConnection*, identity : GSocketConnectable*) : Void
  fun g_tls_client_connection_get_use_ssl3(conn : GTlsClientConnection*) : Gboolean
  fun g_tls_client_connection_set_use_ssl3(conn : GTlsClientConnection*, use_ssl3 : Gboolean) : Void
  fun g_tls_client_connection_get_accepted_cas(conn : GTlsClientConnection*) : GList*
  fun g_tls_client_connection_copy_session_state(conn : GTlsClientConnection*, source : GTlsClientConnection*) : Void
  fun g_tls_database_get_type : GType
  fun g_tls_database_verify_chain(self : GTlsDatabase*, chain : GTlsCertificate*, purpose : Gchar*, identity : GSocketConnectable*, interaction : GTlsInteraction*, flags : GTlsDatabaseVerifyFlags, cancellable : GCancellable*, error : GError**) : GTlsCertificateFlags
  fun g_tls_database_verify_chain_async(self : GTlsDatabase*, chain : GTlsCertificate*, purpose : Gchar*, identity : GSocketConnectable*, interaction : GTlsInteraction*, flags : GTlsDatabaseVerifyFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_database_verify_chain_finish(self : GTlsDatabase*, result : GAsyncResult*, error : GError**) : GTlsCertificateFlags
  fun g_tls_database_create_certificate_handle(self : GTlsDatabase*, certificate : GTlsCertificate*) : Gchar*
  fun g_tls_database_lookup_certificate_for_handle(self : GTlsDatabase*, handle : Gchar*, interaction : GTlsInteraction*, flags : GTlsDatabaseLookupFlags, cancellable : GCancellable*, error : GError**) : GTlsCertificate*
  fun g_tls_database_lookup_certificate_for_handle_async(self : GTlsDatabase*, handle : Gchar*, interaction : GTlsInteraction*, flags : GTlsDatabaseLookupFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_database_lookup_certificate_for_handle_finish(self : GTlsDatabase*, result : GAsyncResult*, error : GError**) : GTlsCertificate*
  fun g_tls_database_lookup_certificate_issuer(self : GTlsDatabase*, certificate : GTlsCertificate*, interaction : GTlsInteraction*, flags : GTlsDatabaseLookupFlags, cancellable : GCancellable*, error : GError**) : GTlsCertificate*
  fun g_tls_database_lookup_certificate_issuer_async(self : GTlsDatabase*, certificate : GTlsCertificate*, interaction : GTlsInteraction*, flags : GTlsDatabaseLookupFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_database_lookup_certificate_issuer_finish(self : GTlsDatabase*, result : GAsyncResult*, error : GError**) : GTlsCertificate*
  fun g_tls_database_lookup_certificates_issued_by(self : GTlsDatabase*, issuer_raw_dn : GByteArray*, interaction : GTlsInteraction*, flags : GTlsDatabaseLookupFlags, cancellable : GCancellable*, error : GError**) : GList*
  fun g_tls_database_lookup_certificates_issued_by_async(self : GTlsDatabase*, issuer_raw_dn : GByteArray*, interaction : GTlsInteraction*, flags : GTlsDatabaseLookupFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_database_lookup_certificates_issued_by_finish(self : GTlsDatabase*, result : GAsyncResult*, error : GError**) : GList*
  fun g_tls_file_database_get_type : GType
  fun g_tls_file_database_new(anchors : Gchar*, error : GError**) : GTlsDatabase*
  fun g_tls_interaction_get_type : GType
  fun g_tls_interaction_invoke_ask_password(interaction : GTlsInteraction*, password : GTlsPassword*, cancellable : GCancellable*, error : GError**) : GTlsInteractionResult
  fun g_tls_interaction_ask_password(interaction : GTlsInteraction*, password : GTlsPassword*, cancellable : GCancellable*, error : GError**) : GTlsInteractionResult
  fun g_tls_interaction_ask_password_async(interaction : GTlsInteraction*, password : GTlsPassword*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_interaction_ask_password_finish(interaction : GTlsInteraction*, result : GAsyncResult*, error : GError**) : GTlsInteractionResult
  fun g_tls_interaction_invoke_request_certificate(interaction : GTlsInteraction*, connection : GTlsConnection*, flags : GTlsCertificateRequestFlags, cancellable : GCancellable*, error : GError**) : GTlsInteractionResult
  fun g_tls_interaction_request_certificate(interaction : GTlsInteraction*, connection : GTlsConnection*, flags : GTlsCertificateRequestFlags, cancellable : GCancellable*, error : GError**) : GTlsInteractionResult
  fun g_tls_interaction_request_certificate_async(interaction : GTlsInteraction*, connection : GTlsConnection*, flags : GTlsCertificateRequestFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_tls_interaction_request_certificate_finish(interaction : GTlsInteraction*, result : GAsyncResult*, error : GError**) : GTlsInteractionResult
  fun g_tls_server_connection_get_type : GType
  fun g_tls_server_connection_new(base_io_stream : GIOStream*, certificate : GTlsCertificate*, error : GError**) : GIOStream*
  fun g_tls_password_get_type : GType
  fun g_tls_password_new(flags : GTlsPasswordFlags, description : Gchar*) : GTlsPassword*
  fun g_tls_password_get_value(password : GTlsPassword*, length : Gsize*) : Guchar*
  fun g_tls_password_set_value(password : GTlsPassword*, value : Guchar*, length : Gssize) : Void
  fun g_tls_password_set_value_full(password : GTlsPassword*, value : Guchar*, length : Gssize, destroy : GDestroyNotify) : Void
  fun g_tls_password_get_flags(password : GTlsPassword*) : GTlsPasswordFlags
  fun g_tls_password_set_flags(password : GTlsPassword*, flags : GTlsPasswordFlags) : Void
  fun g_tls_password_get_description(password : GTlsPassword*) : Gchar*
  fun g_tls_password_set_description(password : GTlsPassword*, description : Gchar*) : Void
  fun g_tls_password_get_warning(password : GTlsPassword*) : Gchar*
  fun g_tls_password_set_warning(password : GTlsPassword*, warning : Gchar*) : Void
  fun g_vfs_get_type : GType
  fun g_vfs_is_active(vfs : GVfs*) : Gboolean
  fun g_vfs_get_file_for_path(vfs : GVfs*, path : UInt8*) : GFile*
  fun g_vfs_get_file_for_uri(vfs : GVfs*, uri : UInt8*) : GFile*
  fun g_vfs_get_supported_uri_schemes(vfs : GVfs*) : Gchar**
  fun g_vfs_parse_name(vfs : GVfs*, parse_name : UInt8*) : GFile*
  fun g_vfs_get_default : GVfs*
  fun g_vfs_get_local : GVfs*
  fun g_volume_get_type : GType
  fun g_volume_get_name(volume : GVolume*) : UInt8*
  fun g_volume_get_icon(volume : GVolume*) : GIcon*
  fun g_volume_get_symbolic_icon(volume : GVolume*) : GIcon*
  fun g_volume_get_uuid(volume : GVolume*) : UInt8*
  fun g_volume_get_drive(volume : GVolume*) : GDrive*
  fun g_volume_get_mount(volume : GVolume*) : GMount*
  fun g_volume_can_mount(volume : GVolume*) : Gboolean
  fun g_volume_can_eject(volume : GVolume*) : Gboolean
  fun g_volume_should_automount(volume : GVolume*) : Gboolean
  fun g_volume_mount(volume : GVolume*, flags : GMountMountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_volume_mount_finish(volume : GVolume*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_volume_eject(volume : GVolume*, flags : GMountUnmountFlags, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_volume_eject_finish(volume : GVolume*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_volume_get_identifier(volume : GVolume*, kind : UInt8*) : UInt8*
  fun g_volume_enumerate_identifiers(volume : GVolume*) : UInt8**
  fun g_volume_get_activation_root(volume : GVolume*) : GFile*
  fun g_volume_eject_with_operation(volume : GVolume*, flags : GMountUnmountFlags, mount_operation : GMountOperation*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_volume_eject_with_operation_finish(volume : GVolume*, result : GAsyncResult*, error : GError**) : Gboolean
  fun g_volume_get_sort_key(volume : GVolume*) : Gchar*
  fun g_zlib_compressor_get_type : GType
  fun g_zlib_compressor_new(format : GZlibCompressorFormat, level : Int32) : GZlibCompressor*
  fun g_zlib_compressor_get_file_info(compressor : GZlibCompressor*) : GFileInfo*
  fun g_zlib_compressor_set_file_info(compressor : GZlibCompressor*, file_info : GFileInfo*) : Void
  fun g_zlib_decompressor_get_type : GType
  fun g_zlib_decompressor_new(format : GZlibCompressorFormat) : GZlibDecompressor*
  fun g_zlib_decompressor_get_file_info(decompressor : GZlibDecompressor*) : GFileInfo*
  fun g_dbus_interface_get_type : GType
  fun g_dbus_interface_get_info(interface_ : GDBusInterface*) : GDBusInterfaceInfo*
  fun g_dbus_interface_get_object(interface_ : GDBusInterface*) : GDBusObject*
  fun g_dbus_interface_set_object(interface_ : GDBusInterface*, object : GDBusObject*) : Void
  fun g_dbus_interface_dup_object(interface_ : GDBusInterface*) : GDBusObject*
  fun g_dbus_interface_skeleton_get_type : GType
  fun g_dbus_interface_skeleton_get_flags(interface_ : GDBusInterfaceSkeleton*) : GDBusInterfaceSkeletonFlags
  fun g_dbus_interface_skeleton_set_flags(interface_ : GDBusInterfaceSkeleton*, flags : GDBusInterfaceSkeletonFlags) : Void
  fun g_dbus_interface_skeleton_get_info(interface_ : GDBusInterfaceSkeleton*) : GDBusInterfaceInfo*
  fun g_dbus_interface_skeleton_get_vtable(interface_ : GDBusInterfaceSkeleton*) : GDBusInterfaceVTable*
  fun g_dbus_interface_skeleton_get_properties(interface_ : GDBusInterfaceSkeleton*) : GVariant*
  fun g_dbus_interface_skeleton_flush(interface_ : GDBusInterfaceSkeleton*) : Void
  fun g_dbus_interface_skeleton_export(interface_ : GDBusInterfaceSkeleton*, connection : GDBusConnection*, object_path : Gchar*, error : GError**) : Gboolean
  fun g_dbus_interface_skeleton_unexport(interface_ : GDBusInterfaceSkeleton*) : Void
  fun g_dbus_interface_skeleton_unexport_from_connection(interface_ : GDBusInterfaceSkeleton*, connection : GDBusConnection*) : Void
  fun g_dbus_interface_skeleton_get_connection(interface_ : GDBusInterfaceSkeleton*) : GDBusConnection*
  fun g_dbus_interface_skeleton_get_connections(interface_ : GDBusInterfaceSkeleton*) : GList*
  fun g_dbus_interface_skeleton_has_connection(interface_ : GDBusInterfaceSkeleton*, connection : GDBusConnection*) : Gboolean
  fun g_dbus_interface_skeleton_get_object_path(interface_ : GDBusInterfaceSkeleton*) : Gchar*
  fun g_dbus_object_get_type : GType
  fun g_dbus_object_get_object_path(object : GDBusObject*) : Gchar*
  fun g_dbus_object_get_interfaces(object : GDBusObject*) : GList*
  fun g_dbus_object_get_interface(object : GDBusObject*, interface_name : Gchar*) : GDBusInterface*
  fun g_dbus_object_skeleton_get_type : GType
  fun g_dbus_object_skeleton_new(object_path : Gchar*) : GDBusObjectSkeleton*
  fun g_dbus_object_skeleton_flush(object : GDBusObjectSkeleton*) : Void
  fun g_dbus_object_skeleton_add_interface(object : GDBusObjectSkeleton*, interface_ : GDBusInterfaceSkeleton*) : Void
  fun g_dbus_object_skeleton_remove_interface(object : GDBusObjectSkeleton*, interface_ : GDBusInterfaceSkeleton*) : Void
  fun g_dbus_object_skeleton_remove_interface_by_name(object : GDBusObjectSkeleton*, interface_name : Gchar*) : Void
  fun g_dbus_object_skeleton_set_object_path(object : GDBusObjectSkeleton*, object_path : Gchar*) : Void
  fun g_dbus_object_proxy_get_type : GType
  fun g_dbus_object_proxy_new(connection : GDBusConnection*, object_path : Gchar*) : GDBusObjectProxy*
  fun g_dbus_object_proxy_get_connection(proxy : GDBusObjectProxy*) : GDBusConnection*
  fun g_dbus_object_manager_get_type : GType
  fun g_dbus_object_manager_get_object_path(manager : GDBusObjectManager*) : Gchar*
  fun g_dbus_object_manager_get_objects(manager : GDBusObjectManager*) : GList*
  fun g_dbus_object_manager_get_object(manager : GDBusObjectManager*, object_path : Gchar*) : GDBusObject*
  fun g_dbus_object_manager_get_interface(manager : GDBusObjectManager*, object_path : Gchar*, interface_name : Gchar*) : GDBusInterface*
  fun g_dbus_object_manager_client_get_type : GType
  fun g_dbus_object_manager_client_new(connection : GDBusConnection*, flags : GDBusObjectManagerClientFlags, name : Gchar*, object_path : Gchar*, get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : Gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_object_manager_client_new_finish(res : GAsyncResult*, error : GError**) : GDBusObjectManager*
  fun g_dbus_object_manager_client_new_sync(connection : GDBusConnection*, flags : GDBusObjectManagerClientFlags, name : Gchar*, object_path : Gchar*, get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : Gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : GCancellable*, error : GError**) : GDBusObjectManager*
  fun g_dbus_object_manager_client_new_for_bus(bus_type : GBusType, flags : GDBusObjectManagerClientFlags, name : Gchar*, object_path : Gchar*, get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : Gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun g_dbus_object_manager_client_new_for_bus_finish(res : GAsyncResult*, error : GError**) : GDBusObjectManager*
  fun g_dbus_object_manager_client_new_for_bus_sync(bus_type : GBusType, flags : GDBusObjectManagerClientFlags, name : Gchar*, object_path : Gchar*, get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : Gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : GCancellable*, error : GError**) : GDBusObjectManager*
  fun g_dbus_object_manager_client_get_connection(manager : GDBusObjectManagerClient*) : GDBusConnection*
  fun g_dbus_object_manager_client_get_flags(manager : GDBusObjectManagerClient*) : GDBusObjectManagerClientFlags
  fun g_dbus_object_manager_client_get_name(manager : GDBusObjectManagerClient*) : Gchar*
  fun g_dbus_object_manager_client_get_name_owner(manager : GDBusObjectManagerClient*) : Gchar*
  fun g_dbus_object_manager_server_get_type : GType
  fun g_dbus_object_manager_server_new(object_path : Gchar*) : GDBusObjectManagerServer*
  fun g_dbus_object_manager_server_get_connection(manager : GDBusObjectManagerServer*) : GDBusConnection*
  fun g_dbus_object_manager_server_set_connection(manager : GDBusObjectManagerServer*, connection : GDBusConnection*) : Void
  fun g_dbus_object_manager_server_export(manager : GDBusObjectManagerServer*, object : GDBusObjectSkeleton*) : Void
  fun g_dbus_object_manager_server_export_uniquely(manager : GDBusObjectManagerServer*, object : GDBusObjectSkeleton*) : Void
  fun g_dbus_object_manager_server_is_exported(manager : GDBusObjectManagerServer*, object : GDBusObjectSkeleton*) : Gboolean
  fun g_dbus_object_manager_server_unexport(manager : GDBusObjectManagerServer*, object_path : Gchar*) : Gboolean
  fun g_dbus_action_group_get_type : GType
  fun g_dbus_action_group_get(connection : GDBusConnection*, bus_name : Gchar*, object_path : Gchar*) : GDBusActionGroup*
  fun g_remote_action_group_get_type : GType
  fun g_remote_action_group_activate_action_full(remote : GRemoteActionGroup*, action_name : Gchar*, parameter : GVariant*, platform_data : GVariant*) : Void
  fun g_remote_action_group_change_action_state_full(remote : GRemoteActionGroup*, action_name : Gchar*, value : GVariant*, platform_data : GVariant*) : Void
  fun g_menu_model_get_type : GType
  fun g_menu_model_is_mutable(model : GMenuModel*) : Gboolean
  fun g_menu_model_get_n_items(model : GMenuModel*) : Gint
  fun g_menu_model_iterate_item_attributes(model : GMenuModel*, item_index : Gint) : GMenuAttributeIter*
  fun g_menu_model_get_item_attribute_value(model : GMenuModel*, item_index : Gint, attribute : Gchar*, expected_type : GVariantType*) : GVariant*
  fun g_menu_model_get_item_attribute(model : GMenuModel*, item_index : Gint, attribute : Gchar*, format_string : Gchar*) : Gboolean
  fun g_menu_model_iterate_item_links(model : GMenuModel*, item_index : Gint) : GMenuLinkIter*
  fun g_menu_model_get_item_link(model : GMenuModel*, item_index : Gint, link : Gchar*) : GMenuModel*
  fun g_menu_model_items_changed(model : GMenuModel*, position : Gint, removed : Gint, added : Gint) : Void
  fun g_menu_attribute_iter_get_type : GType
  fun g_menu_attribute_iter_get_next(iter : GMenuAttributeIter*, out_name : Gchar**, value : GVariant**) : Gboolean
  fun g_menu_attribute_iter_next(iter : GMenuAttributeIter*) : Gboolean
  fun g_menu_attribute_iter_get_name(iter : GMenuAttributeIter*) : Gchar*
  fun g_menu_attribute_iter_get_value(iter : GMenuAttributeIter*) : GVariant*
  fun g_menu_link_iter_get_type : GType
  fun g_menu_link_iter_get_next(iter : GMenuLinkIter*, out_link : Gchar**, value : GMenuModel**) : Gboolean
  fun g_menu_link_iter_next(iter : GMenuLinkIter*) : Gboolean
  fun g_menu_link_iter_get_name(iter : GMenuLinkIter*) : Gchar*
  fun g_menu_link_iter_get_value(iter : GMenuLinkIter*) : GMenuModel*
  fun g_menu_get_type : GType
  fun g_menu_new : GMenu*
  fun g_menu_freeze(menu : GMenu*) : Void
  fun g_menu_insert_item(menu : GMenu*, position : Gint, item : GMenuItem*) : Void
  fun g_menu_prepend_item(menu : GMenu*, item : GMenuItem*) : Void
  fun g_menu_append_item(menu : GMenu*, item : GMenuItem*) : Void
  fun g_menu_remove(menu : GMenu*, position : Gint) : Void
  fun g_menu_remove_all(menu : GMenu*) : Void
  fun g_menu_insert(menu : GMenu*, position : Gint, label : Gchar*, detailed_action : Gchar*) : Void
  fun g_menu_prepend(menu : GMenu*, label : Gchar*, detailed_action : Gchar*) : Void
  fun g_menu_append(menu : GMenu*, label : Gchar*, detailed_action : Gchar*) : Void
  fun g_menu_insert_section(menu : GMenu*, position : Gint, label : Gchar*, section : GMenuModel*) : Void
  fun g_menu_prepend_section(menu : GMenu*, label : Gchar*, section : GMenuModel*) : Void
  fun g_menu_append_section(menu : GMenu*, label : Gchar*, section : GMenuModel*) : Void
  fun g_menu_insert_submenu(menu : GMenu*, position : Gint, label : Gchar*, submenu : GMenuModel*) : Void
  fun g_menu_prepend_submenu(menu : GMenu*, label : Gchar*, submenu : GMenuModel*) : Void
  fun g_menu_append_submenu(menu : GMenu*, label : Gchar*, submenu : GMenuModel*) : Void
  fun g_menu_item_get_type : GType
  fun g_menu_item_new(label : Gchar*, detailed_action : Gchar*) : GMenuItem*
  fun g_menu_item_new_from_model(model : GMenuModel*, item_index : Gint) : GMenuItem*
  fun g_menu_item_new_submenu(label : Gchar*, submenu : GMenuModel*) : GMenuItem*
  fun g_menu_item_new_section(label : Gchar*, section : GMenuModel*) : GMenuItem*
  fun g_menu_item_get_attribute_value(menu_item : GMenuItem*, attribute : Gchar*, expected_type : GVariantType*) : GVariant*
  fun g_menu_item_get_attribute(menu_item : GMenuItem*, attribute : Gchar*, format_string : Gchar*) : Gboolean
  fun g_menu_item_get_link(menu_item : GMenuItem*, link : Gchar*) : GMenuModel*
  fun g_menu_item_set_attribute_value(menu_item : GMenuItem*, attribute : Gchar*, value : GVariant*) : Void
  fun g_menu_item_set_attribute(menu_item : GMenuItem*, attribute : Gchar*, format_string : Gchar*) : Void
  fun g_menu_item_set_link(menu_item : GMenuItem*, link : Gchar*, model : GMenuModel*) : Void
  fun g_menu_item_set_label(menu_item : GMenuItem*, label : Gchar*) : Void
  fun g_menu_item_set_submenu(menu_item : GMenuItem*, submenu : GMenuModel*) : Void
  fun g_menu_item_set_section(menu_item : GMenuItem*, section : GMenuModel*) : Void
  fun g_menu_item_set_action_and_target_value(menu_item : GMenuItem*, action : Gchar*, target_value : GVariant*) : Void
  fun g_menu_item_set_action_and_target(menu_item : GMenuItem*, action : Gchar*, format_string : Gchar*) : Void
  fun g_menu_item_set_detailed_action(menu_item : GMenuItem*, detailed_action : Gchar*) : Void
  fun g_menu_item_set_icon(menu_item : GMenuItem*, icon : GIcon*) : Void
  fun g_dbus_connection_export_menu_model(connection : GDBusConnection*, object_path : Gchar*, menu : GMenuModel*, error : GError**) : Guint
  fun g_dbus_connection_unexport_menu_model(connection : GDBusConnection*, export_id : Guint) : Void
  fun g_dbus_menu_model_get_type : GType
  fun g_dbus_menu_model_get(connection : GDBusConnection*, bus_name : Gchar*, object_path : Gchar*) : GDBusMenuModel*
  fun g_notification_get_type : GType
  fun g_notification_new(title : Gchar*) : GNotification*
  fun g_notification_set_title(notification : GNotification*, title : Gchar*) : Void
  fun g_notification_set_body(notification : GNotification*, body : Gchar*) : Void
  fun g_notification_set_icon(notification : GNotification*, icon : GIcon*) : Void
  fun g_notification_set_urgent(notification : GNotification*, urgent : Gboolean) : Void
  fun g_notification_set_priority(notification : GNotification*, priority : GNotificationPriority) : Void
  fun g_notification_add_button(notification : GNotification*, label : Gchar*, detailed_action : Gchar*) : Void
  fun g_notification_add_button_with_target(notification : GNotification*, label : Gchar*, action : Gchar*, target_format : Gchar*) : Void
  fun g_notification_add_button_with_target_value(notification : GNotification*, label : Gchar*, action : Gchar*, target : GVariant*) : Void
  fun g_notification_set_default_action(notification : GNotification*, detailed_action : Gchar*) : Void
  fun g_notification_set_default_action_and_target(notification : GNotification*, action : Gchar*, target_format : Gchar*) : Void
  fun g_notification_set_default_action_and_target_value(notification : GNotification*, action : Gchar*, target : GVariant*) : Void
  fun g_list_model_get_type : GType
  fun glib_autoptr_cleanup_g_list_model(_ptr : GListModel**) : Void
  fun g_list_model(ptr : Gpointer) : GListModel*
  fun g_is_list_model(ptr : Gpointer) : Gboolean
  fun g_list_model_get_iface(ptr : Gpointer) : GListModelInterface*
  fun g_list_model_get_item_type(list : GListModel*) : GType
  fun g_list_model_get_n_items(list : GListModel*) : Guint
  fun g_list_model_get_item(list : GListModel*, position : Guint) : Gpointer
  fun g_list_model_get_object(list : GListModel*, position : Guint) : GObject*
  fun g_list_model_items_changed(list : GListModel*, position : Guint, removed : Guint, added : Guint) : Void
  fun g_list_store_get_type : GType
  fun glib_autoptr_cleanup_g_list_store(_ptr : GListStore**) : Void
  fun g_list_store(ptr : Gpointer) : GListStore*
  fun g_is_list_store(ptr : Gpointer) : Gboolean
  fun g_list_store_new(item_type : GType) : GListStore*
  fun g_list_store_insert(store : GListStore*, position : Guint, item : Gpointer) : Void
  fun g_list_store_insert_sorted(store : GListStore*, item : Gpointer, compare_func : GCompareDataFunc, user_data : Gpointer) : Guint
  fun g_list_store_sort(store : GListStore*, compare_func : GCompareDataFunc, user_data : Gpointer) : Void
  fun g_list_store_append(store : GListStore*, item : Gpointer) : Void
  fun g_list_store_remove(store : GListStore*, position : Guint) : Void
  fun g_list_store_remove_all(store : GListStore*) : Void
  fun g_list_store_splice(store : GListStore*, position : Guint, n_removals : Guint, additions : Gpointer*, n_additions : Guint) : Void
  fun glib_autoptr_cleanup_g_action(_ptr : GAction**) : Void
  fun glib_autoptr_cleanup_g_action_map(_ptr : GActionMap**) : Void
  fun glib_autoptr_cleanup_g_app_info(_ptr : GAppInfo**) : Void
  fun glib_autoptr_cleanup_g_app_launch_context(_ptr : GAppLaunchContext**) : Void
  fun glib_autoptr_cleanup_g_app_info_monitor(_ptr : GAppInfoMonitor**) : Void
  fun glib_autoptr_cleanup_g_application_command_line(_ptr : GApplicationCommandLine**) : Void
  fun glib_autoptr_cleanup_g_application(_ptr : GApplication**) : Void
  fun glib_autoptr_cleanup_g_async_initable(_ptr : GAsyncInitable**) : Void
  fun glib_autoptr_cleanup_g_async_result(_ptr : GAsyncResult**) : Void
  fun glib_autoptr_cleanup_g_buffered_input_stream(_ptr : GBufferedInputStream**) : Void
  fun glib_autoptr_cleanup_g_buffered_output_stream(_ptr : GBufferedOutputStream**) : Void
  fun glib_autoptr_cleanup_g_bytes_icon(_ptr : GBytesIcon**) : Void
  fun glib_autoptr_cleanup_g_cancellable(_ptr : GCancellable**) : Void
  fun glib_autoptr_cleanup_g_charset_converter(_ptr : GCharsetConverter**) : Void
  fun glib_autoptr_cleanup_g_converter(_ptr : GConverter**) : Void
  fun glib_autoptr_cleanup_g_converter_input_stream(_ptr : GConverterInputStream**) : Void
  fun glib_autoptr_cleanup_g_converter_output_stream(_ptr : GConverterOutputStream**) : Void
  fun glib_autoptr_cleanup_g_credentials(_ptr : GCredentials**) : Void
  fun glib_autoptr_cleanup_g_datagram_based(_ptr : GDatagramBased**) : Void
  fun glib_autoptr_cleanup_g_data_input_stream(_ptr : GDataInputStream**) : Void
  fun glib_autoptr_cleanup_g_data_output_stream(_ptr : GDataOutputStream**) : Void
  fun glib_autoptr_cleanup_gd_bus_action_group(_ptr : GDBusActionGroup**) : Void
  fun glib_autoptr_cleanup_gd_bus_auth_observer(_ptr : GDBusAuthObserver**) : Void
  fun glib_autoptr_cleanup_gd_bus_connection(_ptr : GDBusConnection**) : Void
  fun glib_autoptr_cleanup_gd_bus_interface(_ptr : GDBusInterface**) : Void
  fun glib_autoptr_cleanup_gd_bus_interface_skeleton(_ptr : GDBusInterfaceSkeleton**) : Void
  fun glib_autoptr_cleanup_gd_bus_menu_model(_ptr : GDBusMenuModel**) : Void
  fun glib_autoptr_cleanup_gd_bus_message(_ptr : GDBusMessage**) : Void
  fun glib_autoptr_cleanup_gd_bus_method_invocation(_ptr : GDBusMethodInvocation**) : Void
  fun glib_autoptr_cleanup_gd_bus_node_info(_ptr : GDBusNodeInfo**) : Void
  fun glib_autoptr_cleanup_gd_bus_object(_ptr : GDBusObject**) : Void
  fun glib_autoptr_cleanup_gd_bus_object_manager_client(_ptr : GDBusObjectManagerClient**) : Void
  fun glib_autoptr_cleanup_gd_bus_object_manager(_ptr : GDBusObjectManager**) : Void
  fun glib_autoptr_cleanup_gd_bus_object_manager_server(_ptr : GDBusObjectManagerServer**) : Void
  fun glib_autoptr_cleanup_gd_bus_object_proxy(_ptr : GDBusObjectProxy**) : Void
  fun glib_autoptr_cleanup_gd_bus_object_skeleton(_ptr : GDBusObjectSkeleton**) : Void
  fun glib_autoptr_cleanup_gd_bus_proxy(_ptr : GDBusProxy**) : Void
  fun glib_autoptr_cleanup_gd_bus_server(_ptr : GDBusServer**) : Void
  fun glib_autoptr_cleanup_g_drive(_ptr : GDrive**) : Void
  fun glib_autoptr_cleanup_g_emblemed_icon(_ptr : GEmblemedIcon**) : Void
  fun glib_autoptr_cleanup_g_emblem(_ptr : GEmblem**) : Void
  fun glib_autoptr_cleanup_g_file_enumerator(_ptr : GFileEnumerator**) : Void
  fun glib_autoptr_cleanup_g_file(_ptr : GFile**) : Void
  fun glib_autoptr_cleanup_g_file_icon(_ptr : GFileIcon**) : Void
  fun glib_autoptr_cleanup_g_file_info(_ptr : GFileInfo**) : Void
  fun glib_autoptr_cleanup_g_file_input_stream(_ptr : GFileInputStream**) : Void
  fun glib_autoptr_cleanup_g_file_io_stream(_ptr : GFileIOStream**) : Void
  fun glib_autoptr_cleanup_g_file_monitor(_ptr : GFileMonitor**) : Void
  fun glib_autoptr_cleanup_g_filename_completer(_ptr : GFilenameCompleter**) : Void
  fun glib_autoptr_cleanup_g_file_output_stream(_ptr : GFileOutputStream**) : Void
  fun glib_autoptr_cleanup_g_filter_input_stream(_ptr : GFilterInputStream**) : Void
  fun glib_autoptr_cleanup_g_filter_output_stream(_ptr : GFilterOutputStream**) : Void
  fun glib_autoptr_cleanup_g_icon(_ptr : GIcon**) : Void
  fun glib_autoptr_cleanup_g_inet_address(_ptr : GInetAddress**) : Void
  fun glib_autoptr_cleanup_g_inet_address_mask(_ptr : GInetAddressMask**) : Void
  fun glib_autoptr_cleanup_g_inet_socket_address(_ptr : GInetSocketAddress**) : Void
  fun glib_autoptr_cleanup_g_initable(_ptr : GInitable**) : Void
  fun glib_autoptr_cleanup_g_input_stream(_ptr : GInputStream**) : Void
  fun glib_autoptr_cleanup_gio_module(_ptr : GIOModule**) : Void
  fun glib_autoptr_cleanup_gio_stream(_ptr : GIOStream**) : Void
  fun glib_autoptr_cleanup_g_loadable_icon(_ptr : GLoadableIcon**) : Void
  fun glib_autoptr_cleanup_g_memory_input_stream(_ptr : GMemoryInputStream**) : Void
  fun glib_autoptr_cleanup_g_memory_output_stream(_ptr : GMemoryOutputStream**) : Void
  fun glib_autoptr_cleanup_g_menu(_ptr : GMenu**) : Void
  fun glib_autoptr_cleanup_g_menu_item(_ptr : GMenuItem**) : Void
  fun glib_autoptr_cleanup_g_menu_model(_ptr : GMenuModel**) : Void
  fun glib_autoptr_cleanup_g_menu_attribute_iter(_ptr : GMenuAttributeIter**) : Void
  fun glib_autoptr_cleanup_g_menu_link_iter(_ptr : GMenuLinkIter**) : Void
  fun glib_autoptr_cleanup_g_mount(_ptr : GMount**) : Void
  fun glib_autoptr_cleanup_g_mount_operation(_ptr : GMountOperation**) : Void
  fun glib_autoptr_cleanup_g_native_volume_monitor(_ptr : GNativeVolumeMonitor**) : Void
  fun glib_autoptr_cleanup_g_network_address(_ptr : GNetworkAddress**) : Void
  fun glib_autoptr_cleanup_g_network_monitor(_ptr : GNetworkMonitor**) : Void
  fun glib_autoptr_cleanup_g_network_service(_ptr : GNetworkService**) : Void
  fun glib_autoptr_cleanup_g_notification(_ptr : GNotification**) : Void
  fun glib_autoptr_cleanup_g_output_stream(_ptr : GOutputStream**) : Void
  fun glib_autoptr_cleanup_g_permission(_ptr : GPermission**) : Void
  fun glib_autoptr_cleanup_g_pollable_input_stream(_ptr : GPollableInputStream**) : Void
  fun glib_autoptr_cleanup_g_pollable_output_stream(_ptr : GPollableOutputStream**) : Void
  fun glib_autoptr_cleanup_g_property_action(_ptr : GPropertyAction**) : Void
  fun glib_autoptr_cleanup_g_proxy_address_enumerator(_ptr : GProxyAddressEnumerator**) : Void
  fun glib_autoptr_cleanup_g_proxy_address(_ptr : GProxyAddress**) : Void
  fun glib_autoptr_cleanup_g_proxy(_ptr : GProxy**) : Void
  fun glib_autoptr_cleanup_g_proxy_resolver(_ptr : GProxyResolver**) : Void
  fun glib_autoptr_cleanup_g_remote_action_group(_ptr : GRemoteActionGroup**) : Void
  fun glib_autoptr_cleanup_g_resolver(_ptr : GResolver**) : Void
  fun glib_autoptr_cleanup_g_seekable(_ptr : GSeekable**) : Void
  fun glib_autoptr_cleanup_g_settings_backend(_ptr : GSettingsBackend**) : Void
  fun glib_autoptr_cleanup_g_settings_schema(_ptr : GSettingsSchema**) : Void
  fun glib_autoptr_cleanup_g_settings(_ptr : GSettings**) : Void
  fun glib_autoptr_cleanup_g_simple_action_group(_ptr : GSimpleActionGroup**) : Void
  fun glib_autoptr_cleanup_g_simple_action(_ptr : GSimpleAction**) : Void
  fun glib_autoptr_cleanup_g_simple_async_result(_ptr : GSimpleAsyncResult**) : Void
  fun glib_autoptr_cleanup_g_simple_permission(_ptr : GSimplePermission**) : Void
  fun glib_autoptr_cleanup_g_simple_proxy_resolver(_ptr : GSimpleProxyResolver**) : Void
  fun glib_autoptr_cleanup_g_socket_address_enumerator(_ptr : GSocketAddressEnumerator**) : Void
  fun glib_autoptr_cleanup_g_socket_address(_ptr : GSocketAddress**) : Void
  fun glib_autoptr_cleanup_g_socket_client(_ptr : GSocketClient**) : Void
  fun glib_autoptr_cleanup_g_socket_connectable(_ptr : GSocketConnectable**) : Void
  fun glib_autoptr_cleanup_g_socket_connection(_ptr : GSocketConnection**) : Void
  fun glib_autoptr_cleanup_g_socket_control_message(_ptr : GSocketControlMessage**) : Void
  fun glib_autoptr_cleanup_g_socket(_ptr : GSocket**) : Void
  fun glib_autoptr_cleanup_g_socket_listener(_ptr : GSocketListener**) : Void
  fun glib_autoptr_cleanup_g_socket_service(_ptr : GSocketService**) : Void
  fun glib_autoptr_cleanup_g_subprocess(_ptr : GSubprocess**) : Void
  fun glib_autoptr_cleanup_g_subprocess_launcher(_ptr : GSubprocessLauncher**) : Void
  fun glib_autoptr_cleanup_g_task(_ptr : GTask**) : Void
  fun glib_autoptr_cleanup_g_tcp_connection(_ptr : GTcpConnection**) : Void
  fun glib_autoptr_cleanup_g_tcp_wrapper_connection(_ptr : GTcpWrapperConnection**) : Void
  fun glib_autoptr_cleanup_g_test_d_bus(_ptr : GTestDBus**) : Void
  fun glib_autoptr_cleanup_g_themed_icon(_ptr : GThemedIcon**) : Void
  fun glib_autoptr_cleanup_g_threaded_socket_service(_ptr : GThreadedSocketService**) : Void
  fun glib_autoptr_cleanup_g_tls_backend(_ptr : GTlsBackend**) : Void
  fun glib_autoptr_cleanup_g_tls_certificate(_ptr : GTlsCertificate**) : Void
  fun glib_autoptr_cleanup_g_tls_client_connection(_ptr : GTlsClientConnection**) : Void
  fun glib_autoptr_cleanup_g_tls_connection(_ptr : GTlsConnection**) : Void
  fun glib_autoptr_cleanup_g_tls_database(_ptr : GTlsDatabase**) : Void
  fun glib_autoptr_cleanup_g_tls_file_database(_ptr : GTlsFileDatabase**) : Void
  fun glib_autoptr_cleanup_g_tls_interaction(_ptr : GTlsInteraction**) : Void
  fun glib_autoptr_cleanup_g_tls_password(_ptr : GTlsPassword**) : Void
  fun glib_autoptr_cleanup_g_tls_server_connection(_ptr : GTlsServerConnection**) : Void
  fun glib_autoptr_cleanup_g_vfs(_ptr : GVfs**) : Void
  fun glib_autoptr_cleanup_g_volume(_ptr : GVolume**) : Void
  fun glib_autoptr_cleanup_g_volume_monitor(_ptr : GVolumeMonitor**) : Void
  fun glib_autoptr_cleanup_g_zlib_compressor(_ptr : GZlibCompressor**) : Void
  fun glib_autoptr_cleanup_g_zlib_decompressor(_ptr : GZlibDecompressor**) : Void
  fun pango_coverage_new : PangoCoverage*
  fun pango_coverage_ref(coverage : PangoCoverage*) : PangoCoverage*
  fun pango_coverage_unref(coverage : PangoCoverage*) : Void
  fun pango_coverage_copy(coverage : PangoCoverage*) : PangoCoverage*
  fun pango_coverage_get(coverage : PangoCoverage*, index_ : Int32) : PangoCoverageLevel
  fun pango_coverage_set(coverage : PangoCoverage*, index_ : Int32, level : PangoCoverageLevel) : Void
  fun pango_coverage_max(coverage : PangoCoverage*, other : PangoCoverage*) : Void
  fun pango_coverage_to_bytes(coverage : PangoCoverage*, bytes : Guchar**, n_bytes : Int32*) : Void
  fun pango_coverage_from_bytes(bytes : Guchar*, n_bytes : Int32) : PangoCoverage*
  fun pango_units_from_double(d : Float64) : Int32
  fun pango_units_to_double(i : Int32) : Float64
  fun pango_extents_to_pixels(inclusive : PangoRectangle*, nearest : PangoRectangle*) : Void
  fun pango_matrix_get_type : GType
  fun pango_matrix_copy(matrix : PangoMatrix*) : PangoMatrix*
  fun pango_matrix_free(matrix : PangoMatrix*) : Void
  fun pango_matrix_translate(matrix : PangoMatrix*, tx : Float64, ty : Float64) : Void
  fun pango_matrix_scale(matrix : PangoMatrix*, scale_x : Float64, scale_y : Float64) : Void
  fun pango_matrix_rotate(matrix : PangoMatrix*, degrees : Float64) : Void
  fun pango_matrix_concat(matrix : PangoMatrix*, new_matrix : PangoMatrix*) : Void
  fun pango_matrix_transform_point(matrix : PangoMatrix*, x : Float64*, y : Float64*) : Void
  fun pango_matrix_transform_distance(matrix : PangoMatrix*, dx : Float64*, dy : Float64*) : Void
  fun pango_matrix_transform_rectangle(matrix : PangoMatrix*, rect : PangoRectangle*) : Void
  fun pango_matrix_transform_pixel_rectangle(matrix : PangoMatrix*, rect : PangoRectangle*) : Void
  fun pango_matrix_get_font_scale_factor(matrix : PangoMatrix*) : Float64
  fun pango_matrix_get_font_scale_factors(matrix : PangoMatrix*, xscale : Float64*, yscale : Float64*) : Void
  fun pango_script_for_unichar(ch : Gunichar) : PangoScript
  fun pango_script_iter_new(text : UInt8*, length : Int32) : PangoScriptIter*
  fun pango_script_iter_get_range(iter : PangoScriptIter*, start : UInt8**, end : UInt8**, script : PangoScript*) : Void
  fun pango_script_iter_next(iter : PangoScriptIter*) : Gboolean
  fun pango_script_iter_free(iter : PangoScriptIter*) : Void
  fun pango_language_get_type : GType
  fun pango_language_from_string(language : UInt8*) : PangoLanguage*
  fun pango_language_to_string(language : PangoLanguage*) : UInt8*
  fun pango_language_get_sample_string(language : PangoLanguage*) : UInt8*
  fun pango_language_get_default : PangoLanguage*
  fun pango_language_matches(language : PangoLanguage*, range_list : UInt8*) : Gboolean
  fun pango_language_includes_script(language : PangoLanguage*, script : PangoScript) : Gboolean
  fun pango_language_get_scripts(language : PangoLanguage*, num_scripts : Int32*) : PangoScript*
  fun pango_script_get_sample_language(script : PangoScript) : PangoLanguage*
  fun pango_gravity_to_rotation(gravity : PangoGravity) : Float64
  fun pango_gravity_get_for_matrix(matrix : PangoMatrix*) : PangoGravity
  fun pango_gravity_get_for_script(script : PangoScript, base_gravity : PangoGravity, hint : PangoGravityHint) : PangoGravity
  fun pango_gravity_get_for_script_and_width(script : PangoScript, wide : Gboolean, base_gravity : PangoGravity, hint : PangoGravityHint) : PangoGravity
  fun pango_bidi_type_for_unichar(ch : Gunichar) : PangoBidiType
  fun pango_unichar_direction(ch : Gunichar) : PangoDirection
  fun pango_find_base_dir(text : Gchar*, length : Gint) : PangoDirection
  fun pango_get_mirror_char(ch : Gunichar, mirrored_ch : Gunichar*) : Gboolean
  fun pango_font_description_get_type : GType
  fun pango_font_description_new : PangoFontDescription*
  fun pango_font_description_copy(desc : PangoFontDescription*) : PangoFontDescription*
  fun pango_font_description_copy_static(desc : PangoFontDescription*) : PangoFontDescription*
  fun pango_font_description_hash(desc : PangoFontDescription*) : Guint
  fun pango_font_description_equal(desc1 : PangoFontDescription*, desc2 : PangoFontDescription*) : Gboolean
  fun pango_font_description_free(desc : PangoFontDescription*) : Void
  fun pango_font_descriptions_free(descs : PangoFontDescription**, n_descs : Int32) : Void
  fun pango_font_description_set_family(desc : PangoFontDescription*, family : UInt8*) : Void
  fun pango_font_description_set_family_static(desc : PangoFontDescription*, family : UInt8*) : Void
  fun pango_font_description_get_family(desc : PangoFontDescription*) : UInt8*
  fun pango_font_description_set_style(desc : PangoFontDescription*, style : PangoStyle) : Void
  fun pango_font_description_get_style(desc : PangoFontDescription*) : PangoStyle
  fun pango_font_description_set_variant(desc : PangoFontDescription*, variant : PangoVariant) : Void
  fun pango_font_description_get_variant(desc : PangoFontDescription*) : PangoVariant
  fun pango_font_description_set_weight(desc : PangoFontDescription*, weight : PangoWeight) : Void
  fun pango_font_description_get_weight(desc : PangoFontDescription*) : PangoWeight
  fun pango_font_description_set_stretch(desc : PangoFontDescription*, stretch : PangoStretch) : Void
  fun pango_font_description_get_stretch(desc : PangoFontDescription*) : PangoStretch
  fun pango_font_description_set_size(desc : PangoFontDescription*, size : Gint) : Void
  fun pango_font_description_get_size(desc : PangoFontDescription*) : Gint
  fun pango_font_description_set_absolute_size(desc : PangoFontDescription*, size : Float64) : Void
  fun pango_font_description_get_size_is_absolute(desc : PangoFontDescription*) : Gboolean
  fun pango_font_description_set_gravity(desc : PangoFontDescription*, gravity : PangoGravity) : Void
  fun pango_font_description_get_gravity(desc : PangoFontDescription*) : PangoGravity
  fun pango_font_description_get_set_fields(desc : PangoFontDescription*) : PangoFontMask
  fun pango_font_description_unset_fields(desc : PangoFontDescription*, to_unset : PangoFontMask) : Void
  fun pango_font_description_merge(desc : PangoFontDescription*, desc_to_merge : PangoFontDescription*, replace_existing : Gboolean) : Void
  fun pango_font_description_merge_static(desc : PangoFontDescription*, desc_to_merge : PangoFontDescription*, replace_existing : Gboolean) : Void
  fun pango_font_description_better_match(desc : PangoFontDescription*, old_match : PangoFontDescription*, new_match : PangoFontDescription*) : Gboolean
  fun pango_font_description_from_string(str : UInt8*) : PangoFontDescription*
  fun pango_font_description_to_string(desc : PangoFontDescription*) : UInt8*
  fun pango_font_description_to_filename(desc : PangoFontDescription*) : UInt8*
  fun pango_font_metrics_get_type : GType
  fun pango_font_metrics_ref(metrics : PangoFontMetrics*) : PangoFontMetrics*
  fun pango_font_metrics_unref(metrics : PangoFontMetrics*) : Void
  fun pango_font_metrics_get_ascent(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_descent(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_approximate_char_width(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_approximate_digit_width(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_underline_position(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_underline_thickness(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_strikethrough_position(metrics : PangoFontMetrics*) : Int32
  fun pango_font_metrics_get_strikethrough_thickness(metrics : PangoFontMetrics*) : Int32
  fun pango_font_family_get_type : GType
  fun pango_font_family_list_faces(family : PangoFontFamily*, faces : PangoFontFace***, n_faces : Int32*) : Void
  fun pango_font_family_get_name(family : PangoFontFamily*) : UInt8*
  fun pango_font_family_is_monospace(family : PangoFontFamily*) : Gboolean
  fun pango_font_face_get_type : GType
  fun pango_font_face_describe(face : PangoFontFace*) : PangoFontDescription*
  fun pango_font_face_get_face_name(face : PangoFontFace*) : UInt8*
  fun pango_font_face_list_sizes(face : PangoFontFace*, sizes : Int32**, n_sizes : Int32*) : Void
  fun pango_font_face_is_synthesized(face : PangoFontFace*) : Gboolean
  fun pango_font_get_type : GType
  fun pango_font_describe(font : PangoFont*) : PangoFontDescription*
  fun pango_font_describe_with_absolute_size(font : PangoFont*) : PangoFontDescription*
  fun pango_font_get_coverage(font : PangoFont*, language : PangoLanguage*) : PangoCoverage*
  fun pango_font_find_shaper(font : PangoFont*, language : PangoLanguage*, ch : Guint32) : PangoEngineShape*
  fun pango_font_get_metrics(font : PangoFont*, language : PangoLanguage*) : PangoFontMetrics*
  fun pango_font_get_glyph_extents(font : PangoFont*, glyph : PangoGlyph, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_font_get_font_map(font : PangoFont*) : PangoFontMap*
  fun pango_color_get_type : GType
  fun pango_color_copy(src : PangoColor*) : PangoColor*
  fun pango_color_free(color : PangoColor*) : Void
  fun pango_color_parse(color : PangoColor*, spec : UInt8*) : Gboolean
  fun pango_color_to_string(color : PangoColor*) : Gchar*
  fun pango_attr_type_register(name : Gchar*) : PangoAttrType
  fun pango_attr_type_get_name(type : PangoAttrType) : UInt8*
  fun pango_attribute_init(attr : PangoAttribute*, klass : PangoAttrClass*) : Void
  fun pango_attribute_copy(attr : PangoAttribute*) : PangoAttribute*
  fun pango_attribute_destroy(attr : PangoAttribute*) : Void
  fun pango_attribute_equal(attr1 : PangoAttribute*, attr2 : PangoAttribute*) : Gboolean
  fun pango_attr_language_new(language : PangoLanguage*) : PangoAttribute*
  fun pango_attr_family_new(family : UInt8*) : PangoAttribute*
  fun pango_attr_foreground_new(red : Guint16, green : Guint16, blue : Guint16) : PangoAttribute*
  fun pango_attr_background_new(red : Guint16, green : Guint16, blue : Guint16) : PangoAttribute*
  fun pango_attr_size_new(size : Int32) : PangoAttribute*
  fun pango_attr_size_new_absolute(size : Int32) : PangoAttribute*
  fun pango_attr_style_new(style : PangoStyle) : PangoAttribute*
  fun pango_attr_weight_new(weight : PangoWeight) : PangoAttribute*
  fun pango_attr_variant_new(variant : PangoVariant) : PangoAttribute*
  fun pango_attr_stretch_new(stretch : PangoStretch) : PangoAttribute*
  fun pango_attr_font_desc_new(desc : PangoFontDescription*) : PangoAttribute*
  fun pango_attr_underline_new(underline : PangoUnderline) : PangoAttribute*
  fun pango_attr_underline_color_new(red : Guint16, green : Guint16, blue : Guint16) : PangoAttribute*
  fun pango_attr_strikethrough_new(strikethrough : Gboolean) : PangoAttribute*
  fun pango_attr_strikethrough_color_new(red : Guint16, green : Guint16, blue : Guint16) : PangoAttribute*
  fun pango_attr_rise_new(rise : Int32) : PangoAttribute*
  fun pango_attr_scale_new(scale_factor : Float64) : PangoAttribute*
  fun pango_attr_fallback_new(enable_fallback : Gboolean) : PangoAttribute*
  fun pango_attr_letter_spacing_new(letter_spacing : Int32) : PangoAttribute*
  fun pango_attr_shape_new(ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : PangoAttribute*
  fun pango_attr_shape_new_with_data(ink_rect : PangoRectangle*, logical_rect : PangoRectangle*, data : Gpointer, copy_func : PangoAttrDataCopyFunc, destroy_func : GDestroyNotify) : PangoAttribute*
  fun pango_attr_gravity_new(gravity : PangoGravity) : PangoAttribute*
  fun pango_attr_gravity_hint_new(hint : PangoGravityHint) : PangoAttribute*
  fun pango_attr_font_features_new(features : Gchar*) : PangoAttribute*
  fun pango_attr_foreground_alpha_new(alpha : Guint16) : PangoAttribute*
  fun pango_attr_background_alpha_new(alpha : Guint16) : PangoAttribute*
  fun pango_attr_list_get_type : GType
  fun pango_attr_list_new : PangoAttrList*
  fun pango_attr_list_ref(list : PangoAttrList*) : PangoAttrList*
  fun pango_attr_list_unref(list : PangoAttrList*) : Void
  fun pango_attr_list_copy(list : PangoAttrList*) : PangoAttrList*
  fun pango_attr_list_insert(list : PangoAttrList*, attr : PangoAttribute*) : Void
  fun pango_attr_list_insert_before(list : PangoAttrList*, attr : PangoAttribute*) : Void
  fun pango_attr_list_change(list : PangoAttrList*, attr : PangoAttribute*) : Void
  fun pango_attr_list_splice(list : PangoAttrList*, other : PangoAttrList*, pos : Gint, len : Gint) : Void
  fun pango_attr_list_filter(list : PangoAttrList*, func : PangoAttrFilterFunc, data : Gpointer) : PangoAttrList*
  fun pango_attr_list_get_iterator(list : PangoAttrList*) : PangoAttrIterator*
  fun pango_attr_iterator_range(iterator : PangoAttrIterator*, start : Gint*, end : Gint*) : Void
  fun pango_attr_iterator_next(iterator : PangoAttrIterator*) : Gboolean
  fun pango_attr_iterator_copy(iterator : PangoAttrIterator*) : PangoAttrIterator*
  fun pango_attr_iterator_destroy(iterator : PangoAttrIterator*) : Void
  fun pango_attr_iterator_get(iterator : PangoAttrIterator*, type : PangoAttrType) : PangoAttribute*
  fun pango_attr_iterator_get_font(iterator : PangoAttrIterator*, desc : PangoFontDescription*, language : PangoLanguage**, extra_attrs : GSList**) : Void
  fun pango_attr_iterator_get_attrs(iterator : PangoAttrIterator*) : GSList*
  fun pango_parse_markup(markup_text : UInt8*, length : Int32, accel_marker : Gunichar, attr_list : PangoAttrList**, text : UInt8**, accel_char : Gunichar*, error : GError**) : Gboolean
  fun pango_markup_parser_new(accel_marker : Gunichar) : GMarkupParseContext*
  fun pango_markup_parser_finish(context : GMarkupParseContext*, attr_list : PangoAttrList**, text : UInt8**, accel_char : Gunichar*, error : GError**) : Gboolean
  fun pango_item_get_type : GType
  fun pango_item_new : PangoItem*
  fun pango_item_copy(item : PangoItem*) : PangoItem*
  fun pango_item_free(item : PangoItem*) : Void
  fun pango_item_split(orig : PangoItem*, split_index : Int32, split_offset : Int32) : PangoItem*
  fun pango_break(text : Gchar*, length : Int32, analysis : PangoAnalysis*, attrs : PangoLogAttr*, attrs_len : Int32) : Void
  fun pango_find_paragraph_boundary(text : Gchar*, length : Gint, paragraph_delimiter_index : Gint*, next_paragraph_start : Gint*) : Void
  fun pango_get_log_attrs(text : UInt8*, length : Int32, level : Int32, language : PangoLanguage*, log_attrs : PangoLogAttr*, attrs_len : Int32) : Void
  fun pango_fontset_get_type : GType
  fun pango_fontset_get_font(fontset : PangoFontset*, wc : Guint) : PangoFont*
  fun pango_fontset_get_metrics(fontset : PangoFontset*) : PangoFontMetrics*
  fun pango_fontset_foreach(fontset : PangoFontset*, func : PangoFontsetForeachFunc, data : Gpointer) : Void
  fun pango_font_map_get_type : GType
  fun pango_font_map_create_context(fontmap : PangoFontMap*) : PangoContext*
  fun pango_font_map_load_font(fontmap : PangoFontMap*, context : PangoContext*, desc : PangoFontDescription*) : PangoFont*
  fun pango_font_map_load_fontset(fontmap : PangoFontMap*, context : PangoContext*, desc : PangoFontDescription*, language : PangoLanguage*) : PangoFontset*
  fun pango_font_map_list_families(fontmap : PangoFontMap*, families : PangoFontFamily***, n_families : Int32*) : Void
  fun pango_font_map_get_serial(fontmap : PangoFontMap*) : Guint
  fun pango_font_map_changed(fontmap : PangoFontMap*) : Void
  fun pango_context_get_type : GType
  fun pango_context_new : PangoContext*
  fun pango_context_changed(context : PangoContext*) : Void
  fun pango_context_set_font_map(context : PangoContext*, font_map : PangoFontMap*) : Void
  fun pango_context_get_font_map(context : PangoContext*) : PangoFontMap*
  fun pango_context_get_serial(context : PangoContext*) : Guint
  fun pango_context_list_families(context : PangoContext*, families : PangoFontFamily***, n_families : Int32*) : Void
  fun pango_context_load_font(context : PangoContext*, desc : PangoFontDescription*) : PangoFont*
  fun pango_context_load_fontset(context : PangoContext*, desc : PangoFontDescription*, language : PangoLanguage*) : PangoFontset*
  fun pango_context_get_metrics(context : PangoContext*, desc : PangoFontDescription*, language : PangoLanguage*) : PangoFontMetrics*
  fun pango_context_set_font_description(context : PangoContext*, desc : PangoFontDescription*) : Void
  fun pango_context_get_font_description(context : PangoContext*) : PangoFontDescription*
  fun pango_context_get_language(context : PangoContext*) : PangoLanguage*
  fun pango_context_set_language(context : PangoContext*, language : PangoLanguage*) : Void
  fun pango_context_set_base_dir(context : PangoContext*, direction : PangoDirection) : Void
  fun pango_context_get_base_dir(context : PangoContext*) : PangoDirection
  fun pango_context_set_base_gravity(context : PangoContext*, gravity : PangoGravity) : Void
  fun pango_context_get_base_gravity(context : PangoContext*) : PangoGravity
  fun pango_context_get_gravity(context : PangoContext*) : PangoGravity
  fun pango_context_set_gravity_hint(context : PangoContext*, hint : PangoGravityHint) : Void
  fun pango_context_get_gravity_hint(context : PangoContext*) : PangoGravityHint
  fun pango_context_set_matrix(context : PangoContext*, matrix : PangoMatrix*) : Void
  fun pango_context_get_matrix(context : PangoContext*) : PangoMatrix*
  fun pango_itemize(context : PangoContext*, text : UInt8*, start_index : Int32, length : Int32, attrs : PangoAttrList*, cached_iter : PangoAttrIterator*) : GList*
  fun pango_itemize_with_base_dir(context : PangoContext*, base_dir : PangoDirection, text : UInt8*, start_index : Int32, length : Int32, attrs : PangoAttrList*, cached_iter : PangoAttrIterator*) : GList*
  fun pango_glyph_string_new : PangoGlyphString*
  fun pango_glyph_string_set_size(string : PangoGlyphString*, new_len : Gint) : Void
  fun pango_glyph_string_get_type : GType
  fun pango_glyph_string_copy(string : PangoGlyphString*) : PangoGlyphString*
  fun pango_glyph_string_free(string : PangoGlyphString*) : Void
  fun pango_glyph_string_extents(glyphs : PangoGlyphString*, font : PangoFont*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_glyph_string_get_width(glyphs : PangoGlyphString*) : Int32
  fun pango_glyph_string_extents_range(glyphs : PangoGlyphString*, start : Int32, end : Int32, font : PangoFont*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_glyph_string_get_logical_widths(glyphs : PangoGlyphString*, text : UInt8*, length : Int32, embedding_level : Int32, logical_widths : Int32*) : Void
  fun pango_glyph_string_index_to_x(glyphs : PangoGlyphString*, text : UInt8*, length : Int32, analysis : PangoAnalysis*, index_ : Int32, trailing : Gboolean, x_pos : Int32*) : Void
  fun pango_glyph_string_x_to_index(glyphs : PangoGlyphString*, text : UInt8*, length : Int32, analysis : PangoAnalysis*, x_pos : Int32, index_ : Int32*, trailing : Int32*) : Void
  fun pango_shape(text : Gchar*, length : Gint, analysis : PangoAnalysis*, glyphs : PangoGlyphString*) : Void
  fun pango_shape_full(item_text : Gchar*, item_length : Gint, paragraph_text : Gchar*, paragraph_length : Gint, analysis : PangoAnalysis*, glyphs : PangoGlyphString*) : Void
  fun pango_reorder_items(logical_items : GList*) : GList*
  fun pango_attr_type_get_type : GType
  fun pango_underline_get_type : GType
  fun pango_bidi_type_get_type : GType
  fun pango_direction_get_type : GType
  fun pango_coverage_level_get_type : GType
  fun pango_style_get_type : GType
  fun pango_variant_get_type : GType
  fun pango_weight_get_type : GType
  fun pango_stretch_get_type : GType
  fun pango_font_mask_get_type : GType
  fun pango_gravity_get_type : GType
  fun pango_gravity_hint_get_type : GType
  fun pango_alignment_get_type : GType
  fun pango_wrap_mode_get_type : GType
  fun pango_ellipsize_mode_get_type : GType
  fun pango_render_part_get_type : GType
  fun pango_script_get_type : GType
  fun pango_tab_align_get_type : GType
  fun pango_glyph_item_get_type : GType
  fun pango_glyph_item_split(orig : PangoGlyphItem*, text : UInt8*, split_index : Int32) : PangoGlyphItem*
  fun pango_glyph_item_copy(orig : PangoGlyphItem*) : PangoGlyphItem*
  fun pango_glyph_item_free(glyph_item : PangoGlyphItem*) : Void
  fun pango_glyph_item_apply_attrs(glyph_item : PangoGlyphItem*, text : UInt8*, list : PangoAttrList*) : GSList*
  fun pango_glyph_item_letter_space(glyph_item : PangoGlyphItem*, text : UInt8*, log_attrs : PangoLogAttr*, letter_spacing : Int32) : Void
  fun pango_glyph_item_get_logical_widths(glyph_item : PangoGlyphItem*, text : UInt8*, logical_widths : Int32*) : Void
  fun pango_glyph_item_iter_get_type : GType
  fun pango_glyph_item_iter_copy(orig : PangoGlyphItemIter*) : PangoGlyphItemIter*
  fun pango_glyph_item_iter_free(iter : PangoGlyphItemIter*) : Void
  fun pango_glyph_item_iter_init_start(iter : PangoGlyphItemIter*, glyph_item : PangoGlyphItem*, text : UInt8*) : Gboolean
  fun pango_glyph_item_iter_init_end(iter : PangoGlyphItemIter*, glyph_item : PangoGlyphItem*, text : UInt8*) : Gboolean
  fun pango_glyph_item_iter_next_cluster(iter : PangoGlyphItemIter*) : Gboolean
  fun pango_glyph_item_iter_prev_cluster(iter : PangoGlyphItemIter*) : Gboolean
  fun pango_tab_array_new(initial_size : Gint, positions_in_pixels : Gboolean) : PangoTabArray*
  fun pango_tab_array_new_with_positions(size : Gint, positions_in_pixels : Gboolean, first_alignment : PangoTabAlign, first_position : Gint) : PangoTabArray*
  fun pango_tab_array_get_type : GType
  fun pango_tab_array_copy(src : PangoTabArray*) : PangoTabArray*
  fun pango_tab_array_free(tab_array : PangoTabArray*) : Void
  fun pango_tab_array_get_size(tab_array : PangoTabArray*) : Gint
  fun pango_tab_array_resize(tab_array : PangoTabArray*, new_size : Gint) : Void
  fun pango_tab_array_set_tab(tab_array : PangoTabArray*, tab_index : Gint, alignment : PangoTabAlign, location : Gint) : Void
  fun pango_tab_array_get_tab(tab_array : PangoTabArray*, tab_index : Gint, alignment : PangoTabAlign*, location : Gint*) : Void
  fun pango_tab_array_get_tabs(tab_array : PangoTabArray*, alignments : PangoTabAlign**, locations : Gint**) : Void
  fun pango_tab_array_get_positions_in_pixels(tab_array : PangoTabArray*) : Gboolean
  fun pango_layout_get_type : GType
  fun pango_layout_new(context : PangoContext*) : PangoLayout*
  fun pango_layout_copy(src : PangoLayout*) : PangoLayout*
  fun pango_layout_get_context(layout : PangoLayout*) : PangoContext*
  fun pango_layout_set_attributes(layout : PangoLayout*, attrs : PangoAttrList*) : Void
  fun pango_layout_get_attributes(layout : PangoLayout*) : PangoAttrList*
  fun pango_layout_set_text(layout : PangoLayout*, text : UInt8*, length : Int32) : Void
  fun pango_layout_get_text(layout : PangoLayout*) : UInt8*
  fun pango_layout_get_character_count(layout : PangoLayout*) : Gint
  fun pango_layout_set_markup(layout : PangoLayout*, markup : UInt8*, length : Int32) : Void
  fun pango_layout_set_markup_with_accel(layout : PangoLayout*, markup : UInt8*, length : Int32, accel_marker : Gunichar, accel_char : Gunichar*) : Void
  fun pango_layout_set_font_description(layout : PangoLayout*, desc : PangoFontDescription*) : Void
  fun pango_layout_get_font_description(layout : PangoLayout*) : PangoFontDescription*
  fun pango_layout_set_width(layout : PangoLayout*, width : Int32) : Void
  fun pango_layout_get_width(layout : PangoLayout*) : Int32
  fun pango_layout_set_height(layout : PangoLayout*, height : Int32) : Void
  fun pango_layout_get_height(layout : PangoLayout*) : Int32
  fun pango_layout_set_wrap(layout : PangoLayout*, wrap : PangoWrapMode) : Void
  fun pango_layout_get_wrap(layout : PangoLayout*) : PangoWrapMode
  fun pango_layout_is_wrapped(layout : PangoLayout*) : Gboolean
  fun pango_layout_set_indent(layout : PangoLayout*, indent : Int32) : Void
  fun pango_layout_get_indent(layout : PangoLayout*) : Int32
  fun pango_layout_set_spacing(layout : PangoLayout*, spacing : Int32) : Void
  fun pango_layout_get_spacing(layout : PangoLayout*) : Int32
  fun pango_layout_set_justify(layout : PangoLayout*, justify : Gboolean) : Void
  fun pango_layout_get_justify(layout : PangoLayout*) : Gboolean
  fun pango_layout_set_auto_dir(layout : PangoLayout*, auto_dir : Gboolean) : Void
  fun pango_layout_get_auto_dir(layout : PangoLayout*) : Gboolean
  fun pango_layout_set_alignment(layout : PangoLayout*, alignment : PangoAlignment) : Void
  fun pango_layout_get_alignment(layout : PangoLayout*) : PangoAlignment
  fun pango_layout_set_tabs(layout : PangoLayout*, tabs : PangoTabArray*) : Void
  fun pango_layout_get_tabs(layout : PangoLayout*) : PangoTabArray*
  fun pango_layout_set_single_paragraph_mode(layout : PangoLayout*, setting : Gboolean) : Void
  fun pango_layout_get_single_paragraph_mode(layout : PangoLayout*) : Gboolean
  fun pango_layout_set_ellipsize(layout : PangoLayout*, ellipsize : PangoEllipsizeMode) : Void
  fun pango_layout_get_ellipsize(layout : PangoLayout*) : PangoEllipsizeMode
  fun pango_layout_is_ellipsized(layout : PangoLayout*) : Gboolean
  fun pango_layout_get_unknown_glyphs_count(layout : PangoLayout*) : Int32
  fun pango_layout_context_changed(layout : PangoLayout*) : Void
  fun pango_layout_get_serial(layout : PangoLayout*) : Guint
  fun pango_layout_get_log_attrs(layout : PangoLayout*, attrs : PangoLogAttr**, n_attrs : Gint*) : Void
  fun pango_layout_get_log_attrs_readonly(layout : PangoLayout*, n_attrs : Gint*) : PangoLogAttr*
  fun pango_layout_index_to_pos(layout : PangoLayout*, index_ : Int32, pos : PangoRectangle*) : Void
  fun pango_layout_index_to_line_x(layout : PangoLayout*, index_ : Int32, trailing : Gboolean, line : Int32*, x_pos : Int32*) : Void
  fun pango_layout_get_cursor_pos(layout : PangoLayout*, index_ : Int32, strong_pos : PangoRectangle*, weak_pos : PangoRectangle*) : Void
  fun pango_layout_move_cursor_visually(layout : PangoLayout*, strong : Gboolean, old_index : Int32, old_trailing : Int32, direction : Int32, new_index : Int32*, new_trailing : Int32*) : Void
  fun pango_layout_xy_to_index(layout : PangoLayout*, x : Int32, y : Int32, index_ : Int32*, trailing : Int32*) : Gboolean
  fun pango_layout_get_extents(layout : PangoLayout*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_get_pixel_extents(layout : PangoLayout*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_get_size(layout : PangoLayout*, width : Int32*, height : Int32*) : Void
  fun pango_layout_get_pixel_size(layout : PangoLayout*, width : Int32*, height : Int32*) : Void
  fun pango_layout_get_baseline(layout : PangoLayout*) : Int32
  fun pango_layout_get_line_count(layout : PangoLayout*) : Int32
  fun pango_layout_get_line(layout : PangoLayout*, line : Int32) : PangoLayoutLine*
  fun pango_layout_get_line_readonly(layout : PangoLayout*, line : Int32) : PangoLayoutLine*
  fun pango_layout_get_lines(layout : PangoLayout*) : GSList*
  fun pango_layout_get_lines_readonly(layout : PangoLayout*) : GSList*
  fun pango_layout_line_get_type : GType
  fun pango_layout_line_ref(line : PangoLayoutLine*) : PangoLayoutLine*
  fun pango_layout_line_unref(line : PangoLayoutLine*) : Void
  fun pango_layout_line_x_to_index(line : PangoLayoutLine*, x_pos : Int32, index_ : Int32*, trailing : Int32*) : Gboolean
  fun pango_layout_line_index_to_x(line : PangoLayoutLine*, index_ : Int32, trailing : Gboolean, x_pos : Int32*) : Void
  fun pango_layout_line_get_x_ranges(line : PangoLayoutLine*, start_index : Int32, end_index : Int32, ranges : Int32**, n_ranges : Int32*) : Void
  fun pango_layout_line_get_extents(line : PangoLayoutLine*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_line_get_pixel_extents(layout_line : PangoLayoutLine*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_iter_get_type : GType
  fun pango_layout_get_iter(layout : PangoLayout*) : PangoLayoutIter*
  fun pango_layout_iter_copy(iter : PangoLayoutIter*) : PangoLayoutIter*
  fun pango_layout_iter_free(iter : PangoLayoutIter*) : Void
  fun pango_layout_iter_get_index(iter : PangoLayoutIter*) : Int32
  fun pango_layout_iter_get_run(iter : PangoLayoutIter*) : PangoLayoutRun*
  fun pango_layout_iter_get_run_readonly(iter : PangoLayoutIter*) : PangoLayoutRun*
  fun pango_layout_iter_get_line(iter : PangoLayoutIter*) : PangoLayoutLine*
  fun pango_layout_iter_get_line_readonly(iter : PangoLayoutIter*) : PangoLayoutLine*
  fun pango_layout_iter_at_last_line(iter : PangoLayoutIter*) : Gboolean
  fun pango_layout_iter_get_layout(iter : PangoLayoutIter*) : PangoLayout*
  fun pango_layout_iter_next_char(iter : PangoLayoutIter*) : Gboolean
  fun pango_layout_iter_next_cluster(iter : PangoLayoutIter*) : Gboolean
  fun pango_layout_iter_next_run(iter : PangoLayoutIter*) : Gboolean
  fun pango_layout_iter_next_line(iter : PangoLayoutIter*) : Gboolean
  fun pango_layout_iter_get_char_extents(iter : PangoLayoutIter*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_iter_get_cluster_extents(iter : PangoLayoutIter*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_iter_get_run_extents(iter : PangoLayoutIter*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_iter_get_line_extents(iter : PangoLayoutIter*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_iter_get_line_yrange(iter : PangoLayoutIter*, y0_ : Int32*, y1_ : Int32*) : Void
  fun pango_layout_iter_get_layout_extents(iter : PangoLayoutIter*, ink_rect : PangoRectangle*, logical_rect : PangoRectangle*) : Void
  fun pango_layout_iter_get_baseline(iter : PangoLayoutIter*) : Int32
  fun pango_renderer_get_type : GType
  fun pango_renderer_draw_layout(renderer : PangoRenderer*, layout : PangoLayout*, x : Int32, y : Int32) : Void
  fun pango_renderer_draw_layout_line(renderer : PangoRenderer*, line : PangoLayoutLine*, x : Int32, y : Int32) : Void
  fun pango_renderer_draw_glyphs(renderer : PangoRenderer*, font : PangoFont*, glyphs : PangoGlyphString*, x : Int32, y : Int32) : Void
  fun pango_renderer_draw_glyph_item(renderer : PangoRenderer*, text : UInt8*, glyph_item : PangoGlyphItem*, x : Int32, y : Int32) : Void
  fun pango_renderer_draw_rectangle(renderer : PangoRenderer*, part : PangoRenderPart, x : Int32, y : Int32, width : Int32, height : Int32) : Void
  fun pango_renderer_draw_error_underline(renderer : PangoRenderer*, x : Int32, y : Int32, width : Int32, height : Int32) : Void
  fun pango_renderer_draw_trapezoid(renderer : PangoRenderer*, part : PangoRenderPart, y1_ : Float64, x11 : Float64, x21 : Float64, y2 : Float64, x12 : Float64, x22 : Float64) : Void
  fun pango_renderer_draw_glyph(renderer : PangoRenderer*, font : PangoFont*, glyph : PangoGlyph, x : Float64, y : Float64) : Void
  fun pango_renderer_activate(renderer : PangoRenderer*) : Void
  fun pango_renderer_deactivate(renderer : PangoRenderer*) : Void
  fun pango_renderer_part_changed(renderer : PangoRenderer*, part : PangoRenderPart) : Void
  fun pango_renderer_set_color(renderer : PangoRenderer*, part : PangoRenderPart, color : PangoColor*) : Void
  fun pango_renderer_get_color(renderer : PangoRenderer*, part : PangoRenderPart) : PangoColor*
  fun pango_renderer_set_alpha(renderer : PangoRenderer*, part : PangoRenderPart, alpha : Guint16) : Void
  fun pango_renderer_get_alpha(renderer : PangoRenderer*, part : PangoRenderPart) : Guint16
  fun pango_renderer_set_matrix(renderer : PangoRenderer*, matrix : PangoMatrix*) : Void
  fun pango_renderer_get_matrix(renderer : PangoRenderer*) : PangoMatrix*
  fun pango_renderer_get_layout(renderer : PangoRenderer*) : PangoLayout*
  fun pango_renderer_get_layout_line(renderer : PangoRenderer*) : PangoLayoutLine*
  fun __underflow(arg1 : X_IO_FILE*) : Int32
  fun __uflow(arg1 : X_IO_FILE*) : Int32
  fun __overflow(arg1 : X_IO_FILE*, arg2 : Int32) : Int32
  fun _io_getc(__fp : X_IO_FILE*) : Int32
  fun _io_putc(__c : Int32, __fp : X_IO_FILE*) : Int32
  fun _io_feof(__fp : X_IO_FILE*) : Int32
  fun _io_ferror(__fp : X_IO_FILE*) : Int32
  fun _io_peekc_locked(__fp : X_IO_FILE*) : Int32
  fun _io_flockfile(arg1 : X_IO_FILE*) : Void
  fun _io_funlockfile(arg1 : X_IO_FILE*) : Void
  fun _io_ftrylockfile(arg1 : X_IO_FILE*) : Int32
  fun _io_vfscanf(arg1 : X_IO_FILE*, arg2 : UInt8*, arg3 : X__va_list_tag*, arg4 : Int32*) : Int32
  fun _io_vfprintf(arg1 : X_IO_FILE*, arg2 : UInt8*, arg3 : X__va_list_tag*) : Int32
  fun _io_padn(arg1 : X_IO_FILE*, arg2 : Int32, arg3 : X__ssize_t) : X__ssize_t
  fun _io_sgetn(arg1 : X_IO_FILE*, arg2 : Void*, arg3 : SizeT) : SizeT
  fun _io_seekoff(arg1 : X_IO_FILE*, arg2 : X__off64_t, arg3 : Int32, arg4 : Int32) : X__off64_t
  fun _io_seekpos(arg1 : X_IO_FILE*, arg2 : X__off64_t, arg3 : Int32) : X__off64_t
  fun _io_free_backup_area(arg1 : X_IO_FILE*) : Void
  fun pango_split_file_list(str : UInt8*) : UInt8**
  fun pango_trim_string(str : UInt8*) : UInt8*
  fun pango_read_line(stream : FILE*, str : GString*) : Gint
  fun pango_skip_space(pos : UInt8**) : Gboolean
  fun pango_scan_word(pos : UInt8**, out : GString*) : Gboolean
  fun pango_scan_string(pos : UInt8**, out : GString*) : Gboolean
  fun pango_scan_int(pos : UInt8**, out : Int32*) : Gboolean
  fun pango_parse_enum(type : GType, str : UInt8*, value : Int32*, warn : Gboolean, possible_values : UInt8**) : Gboolean
  fun pango_parse_style(str : UInt8*, style : PangoStyle*, warn : Gboolean) : Gboolean
  fun pango_parse_variant(str : UInt8*, variant : PangoVariant*, warn : Gboolean) : Gboolean
  fun pango_parse_weight(str : UInt8*, weight : PangoWeight*, warn : Gboolean) : Gboolean
  fun pango_parse_stretch(str : UInt8*, stretch : PangoStretch*, warn : Gboolean) : Gboolean
  fun pango_quantize_line_geometry(thickness : Int32*, position : Int32*) : Void
  fun pango_log2vis_get_embedding_levels(text : Gchar*, length : Int32, pbase_dir : PangoDirection*) : Guint8*
  fun pango_is_zero_width(ch : Gunichar) : Gboolean
  fun pango_version : Int32
  fun pango_version_string : UInt8*
  fun pango_version_check(required_major : Int32, required_minor : Int32, required_micro : Int32) : UInt8*
  fun cairo_version : Int32
  fun cairo_version_string : UInt8*
  fun cairo_create(target : CairoSurfaceT*) : CairoT*
  fun cairo_reference(cr : CairoT*) : CairoT*
  fun cairo_destroy(cr : CairoT*) : Void
  fun cairo_get_reference_count(cr : CairoT*) : UInt32
  fun cairo_get_user_data(cr : CairoT*, key : CairoUserDataKeyT*) : Void*
  fun cairo_set_user_data(cr : CairoT*, key : CairoUserDataKeyT*, user_data : Void*, destroy : CairoDestroyFuncT) : CairoStatusT
  fun cairo_save(cr : CairoT*) : Void
  fun cairo_restore(cr : CairoT*) : Void
  fun cairo_push_group(cr : CairoT*) : Void
  fun cairo_push_group_with_content(cr : CairoT*, content : CairoContentT) : Void
  fun cairo_pop_group(cr : CairoT*) : CairoPatternT*
  fun cairo_pop_group_to_source(cr : CairoT*) : Void
  fun cairo_set_operator(cr : CairoT*, op : CairoOperatorT) : Void
  fun cairo_set_source(cr : CairoT*, source : CairoPatternT*) : Void
  fun cairo_set_source_rgb(cr : CairoT*, red : Float64, green : Float64, blue : Float64) : Void
  fun cairo_set_source_rgba(cr : CairoT*, red : Float64, green : Float64, blue : Float64, alpha : Float64) : Void
  fun cairo_set_source_surface(cr : CairoT*, surface : CairoSurfaceT*, x : Float64, y : Float64) : Void
  fun cairo_set_tolerance(cr : CairoT*, tolerance : Float64) : Void
  fun cairo_set_antialias(cr : CairoT*, antialias : CairoAntialiasT) : Void
  fun cairo_set_fill_rule(cr : CairoT*, fill_rule : CairoFillRuleT) : Void
  fun cairo_set_line_width(cr : CairoT*, width : Float64) : Void
  fun cairo_set_line_cap(cr : CairoT*, line_cap : CairoLineCapT) : Void
  fun cairo_set_line_join(cr : CairoT*, line_join : CairoLineJoinT) : Void
  fun cairo_set_dash(cr : CairoT*, dashes : Float64*, num_dashes : Int32, offset : Float64) : Void
  fun cairo_set_miter_limit(cr : CairoT*, limit : Float64) : Void
  fun cairo_translate(cr : CairoT*, tx : Float64, ty : Float64) : Void
  fun cairo_scale(cr : CairoT*, sx : Float64, sy : Float64) : Void
  fun cairo_rotate(cr : CairoT*, angle : Float64) : Void
  fun cairo_transform(cr : CairoT*, matrix : CairoMatrixT*) : Void
  fun cairo_set_matrix(cr : CairoT*, matrix : CairoMatrixT*) : Void
  fun cairo_identity_matrix(cr : CairoT*) : Void
  fun cairo_user_to_device(cr : CairoT*, x : Float64*, y : Float64*) : Void
  fun cairo_user_to_device_distance(cr : CairoT*, dx : Float64*, dy : Float64*) : Void
  fun cairo_device_to_user(cr : CairoT*, x : Float64*, y : Float64*) : Void
  fun cairo_device_to_user_distance(cr : CairoT*, dx : Float64*, dy : Float64*) : Void
  fun cairo_new_path(cr : CairoT*) : Void
  fun cairo_move_to(cr : CairoT*, x : Float64, y : Float64) : Void
  fun cairo_new_sub_path(cr : CairoT*) : Void
  fun cairo_line_to(cr : CairoT*, x : Float64, y : Float64) : Void
  fun cairo_curve_to(cr : CairoT*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64, x3 : Float64, y3 : Float64) : Void
  fun cairo_arc(cr : CairoT*, xc : Float64, yc : Float64, radius : Float64, angle1 : Float64, angle2 : Float64) : Void
  fun cairo_arc_negative(cr : CairoT*, xc : Float64, yc : Float64, radius : Float64, angle1 : Float64, angle2 : Float64) : Void
  fun cairo_rel_move_to(cr : CairoT*, dx : Float64, dy : Float64) : Void
  fun cairo_rel_line_to(cr : CairoT*, dx : Float64, dy : Float64) : Void
  fun cairo_rel_curve_to(cr : CairoT*, dx1 : Float64, dy1 : Float64, dx2 : Float64, dy2 : Float64, dx3 : Float64, dy3 : Float64) : Void
  fun cairo_rectangle(cr : CairoT*, x : Float64, y : Float64, width : Float64, height : Float64) : Void
  fun cairo_close_path(cr : CairoT*) : Void
  fun cairo_path_extents(cr : CairoT*, x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
  fun cairo_paint(cr : CairoT*) : Void
  fun cairo_paint_with_alpha(cr : CairoT*, alpha : Float64) : Void
  fun cairo_mask(cr : CairoT*, pattern : CairoPatternT*) : Void
  fun cairo_mask_surface(cr : CairoT*, surface : CairoSurfaceT*, surface_x : Float64, surface_y : Float64) : Void
  fun cairo_stroke(cr : CairoT*) : Void
  fun cairo_stroke_preserve(cr : CairoT*) : Void
  fun cairo_fill(cr : CairoT*) : Void
  fun cairo_fill_preserve(cr : CairoT*) : Void
  fun cairo_copy_page(cr : CairoT*) : Void
  fun cairo_show_page(cr : CairoT*) : Void
  fun cairo_in_stroke(cr : CairoT*, x : Float64, y : Float64) : CairoBoolT
  fun cairo_in_fill(cr : CairoT*, x : Float64, y : Float64) : CairoBoolT
  fun cairo_in_clip(cr : CairoT*, x : Float64, y : Float64) : CairoBoolT
  fun cairo_stroke_extents(cr : CairoT*, x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
  fun cairo_fill_extents(cr : CairoT*, x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
  fun cairo_reset_clip(cr : CairoT*) : Void
  fun cairo_clip(cr : CairoT*) : Void
  fun cairo_clip_preserve(cr : CairoT*) : Void
  fun cairo_clip_extents(cr : CairoT*, x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
  fun cairo_copy_clip_rectangle_list(cr : CairoT*) : CairoRectangleListT*
  fun cairo_rectangle_list_destroy(rectangle_list : CairoRectangleListT*) : Void
  fun cairo_glyph_allocate(num_glyphs : Int32) : CairoGlyphT*
  fun cairo_glyph_free(glyphs : CairoGlyphT*) : Void
  fun cairo_text_cluster_allocate(num_clusters : Int32) : CairoTextClusterT*
  fun cairo_text_cluster_free(clusters : CairoTextClusterT*) : Void
  fun cairo_font_options_create : CairoFontOptionsT*
  fun cairo_font_options_copy(original : CairoFontOptionsT*) : CairoFontOptionsT*
  fun cairo_font_options_destroy(options : CairoFontOptionsT*) : Void
  fun cairo_font_options_status(options : CairoFontOptionsT*) : CairoStatusT
  fun cairo_font_options_merge(options : CairoFontOptionsT*, other : CairoFontOptionsT*) : Void
  fun cairo_font_options_equal(options : CairoFontOptionsT*, other : CairoFontOptionsT*) : CairoBoolT
  fun cairo_font_options_hash(options : CairoFontOptionsT*) : UInt64
  fun cairo_font_options_set_antialias(options : CairoFontOptionsT*, antialias : CairoAntialiasT) : Void
  fun cairo_font_options_get_antialias(options : CairoFontOptionsT*) : CairoAntialiasT
  fun cairo_font_options_set_subpixel_order(options : CairoFontOptionsT*, subpixel_order : CairoSubpixelOrderT) : Void
  fun cairo_font_options_get_subpixel_order(options : CairoFontOptionsT*) : CairoSubpixelOrderT
  fun cairo_font_options_set_hint_style(options : CairoFontOptionsT*, hint_style : CairoHintStyleT) : Void
  fun cairo_font_options_get_hint_style(options : CairoFontOptionsT*) : CairoHintStyleT
  fun cairo_font_options_set_hint_metrics(options : CairoFontOptionsT*, hint_metrics : CairoHintMetricsT) : Void
  fun cairo_font_options_get_hint_metrics(options : CairoFontOptionsT*) : CairoHintMetricsT
  fun cairo_select_font_face(cr : CairoT*, family : UInt8*, slant : CairoFontSlantT, weight : CairoFontWeightT) : Void
  fun cairo_set_font_size(cr : CairoT*, size : Float64) : Void
  fun cairo_set_font_matrix(cr : CairoT*, matrix : CairoMatrixT*) : Void
  fun cairo_get_font_matrix(cr : CairoT*, matrix : CairoMatrixT*) : Void
  fun cairo_set_font_options(cr : CairoT*, options : CairoFontOptionsT*) : Void
  fun cairo_get_font_options(cr : CairoT*, options : CairoFontOptionsT*) : Void
  fun cairo_set_font_face(cr : CairoT*, font_face : CairoFontFaceT*) : Void
  fun cairo_get_font_face(cr : CairoT*) : CairoFontFaceT*
  fun cairo_set_scaled_font(cr : CairoT*, scaled_font : CairoScaledFontT*) : Void
  fun cairo_get_scaled_font(cr : CairoT*) : CairoScaledFontT*
  fun cairo_show_text(cr : CairoT*, utf8 : UInt8*) : Void
  fun cairo_show_glyphs(cr : CairoT*, glyphs : CairoGlyphT*, num_glyphs : Int32) : Void
  fun cairo_show_text_glyphs(cr : CairoT*, utf8 : UInt8*, utf8_len : Int32, glyphs : CairoGlyphT*, num_glyphs : Int32, clusters : CairoTextClusterT*, num_clusters : Int32, cluster_flags : CairoTextClusterFlagsT) : Void
  fun cairo_text_path(cr : CairoT*, utf8 : UInt8*) : Void
  fun cairo_glyph_path(cr : CairoT*, glyphs : CairoGlyphT*, num_glyphs : Int32) : Void
  fun cairo_text_extents(cr : CairoT*, utf8 : UInt8*, extents : CairoTextExtentsT*) : Void
  fun cairo_glyph_extents(cr : CairoT*, glyphs : CairoGlyphT*, num_glyphs : Int32, extents : CairoTextExtentsT*) : Void
  fun cairo_font_extents(cr : CairoT*, extents : CairoFontExtentsT*) : Void
  fun cairo_font_face_reference(font_face : CairoFontFaceT*) : CairoFontFaceT*
  fun cairo_font_face_destroy(font_face : CairoFontFaceT*) : Void
  fun cairo_font_face_get_reference_count(font_face : CairoFontFaceT*) : UInt32
  fun cairo_font_face_status(font_face : CairoFontFaceT*) : CairoStatusT
  fun cairo_font_face_get_type(font_face : CairoFontFaceT*) : CairoFontTypeT
  fun cairo_font_face_get_user_data(font_face : CairoFontFaceT*, key : CairoUserDataKeyT*) : Void*
  fun cairo_font_face_set_user_data(font_face : CairoFontFaceT*, key : CairoUserDataKeyT*, user_data : Void*, destroy : CairoDestroyFuncT) : CairoStatusT
  fun cairo_scaled_font_create(font_face : CairoFontFaceT*, font_matrix : CairoMatrixT*, ctm : CairoMatrixT*, options : CairoFontOptionsT*) : CairoScaledFontT*
  fun cairo_scaled_font_reference(scaled_font : CairoScaledFontT*) : CairoScaledFontT*
  fun cairo_scaled_font_destroy(scaled_font : CairoScaledFontT*) : Void
  fun cairo_scaled_font_get_reference_count(scaled_font : CairoScaledFontT*) : UInt32
  fun cairo_scaled_font_status(scaled_font : CairoScaledFontT*) : CairoStatusT
  fun cairo_scaled_font_get_type(scaled_font : CairoScaledFontT*) : CairoFontTypeT
  fun cairo_scaled_font_get_user_data(scaled_font : CairoScaledFontT*, key : CairoUserDataKeyT*) : Void*
  fun cairo_scaled_font_set_user_data(scaled_font : CairoScaledFontT*, key : CairoUserDataKeyT*, user_data : Void*, destroy : CairoDestroyFuncT) : CairoStatusT
  fun cairo_scaled_font_extents(scaled_font : CairoScaledFontT*, extents : CairoFontExtentsT*) : Void
  fun cairo_scaled_font_text_extents(scaled_font : CairoScaledFontT*, utf8 : UInt8*, extents : CairoTextExtentsT*) : Void
  fun cairo_scaled_font_glyph_extents(scaled_font : CairoScaledFontT*, glyphs : CairoGlyphT*, num_glyphs : Int32, extents : CairoTextExtentsT*) : Void
  fun cairo_scaled_font_text_to_glyphs(scaled_font : CairoScaledFontT*, x : Float64, y : Float64, utf8 : UInt8*, utf8_len : Int32, glyphs : CairoGlyphT**, num_glyphs : Int32*, clusters : CairoTextClusterT**, num_clusters : Int32*, cluster_flags : CairoTextClusterFlagsT*) : CairoStatusT
  fun cairo_scaled_font_get_font_face(scaled_font : CairoScaledFontT*) : CairoFontFaceT*
  fun cairo_scaled_font_get_font_matrix(scaled_font : CairoScaledFontT*, font_matrix : CairoMatrixT*) : Void
  fun cairo_scaled_font_get_ctm(scaled_font : CairoScaledFontT*, ctm : CairoMatrixT*) : Void
  fun cairo_scaled_font_get_scale_matrix(scaled_font : CairoScaledFontT*, scale_matrix : CairoMatrixT*) : Void
  fun cairo_scaled_font_get_font_options(scaled_font : CairoScaledFontT*, options : CairoFontOptionsT*) : Void
  fun cairo_toy_font_face_create(family : UInt8*, slant : CairoFontSlantT, weight : CairoFontWeightT) : CairoFontFaceT*
  fun cairo_toy_font_face_get_family(font_face : CairoFontFaceT*) : UInt8*
  fun cairo_toy_font_face_get_slant(font_face : CairoFontFaceT*) : CairoFontSlantT
  fun cairo_toy_font_face_get_weight(font_face : CairoFontFaceT*) : CairoFontWeightT
  fun cairo_user_font_face_create : CairoFontFaceT*
  fun cairo_user_font_face_set_init_func(font_face : CairoFontFaceT*, init_func : CairoUserScaledFontInitFuncT) : Void
  fun cairo_user_font_face_set_render_glyph_func(font_face : CairoFontFaceT*, render_glyph_func : CairoUserScaledFontRenderGlyphFuncT) : Void
  fun cairo_user_font_face_set_text_to_glyphs_func(font_face : CairoFontFaceT*, text_to_glyphs_func : CairoUserScaledFontTextToGlyphsFuncT) : Void
  fun cairo_user_font_face_set_unicode_to_glyph_func(font_face : CairoFontFaceT*, unicode_to_glyph_func : CairoUserScaledFontUnicodeToGlyphFuncT) : Void
  fun cairo_user_font_face_get_init_func(font_face : CairoFontFaceT*) : CairoUserScaledFontInitFuncT
  fun cairo_user_font_face_get_render_glyph_func(font_face : CairoFontFaceT*) : CairoUserScaledFontRenderGlyphFuncT
  fun cairo_user_font_face_get_text_to_glyphs_func(font_face : CairoFontFaceT*) : CairoUserScaledFontTextToGlyphsFuncT
  fun cairo_user_font_face_get_unicode_to_glyph_func(font_face : CairoFontFaceT*) : CairoUserScaledFontUnicodeToGlyphFuncT
  fun cairo_get_operator(cr : CairoT*) : CairoOperatorT
  fun cairo_get_source(cr : CairoT*) : CairoPatternT*
  fun cairo_get_tolerance(cr : CairoT*) : Float64
  fun cairo_get_antialias(cr : CairoT*) : CairoAntialiasT
  fun cairo_has_current_point(cr : CairoT*) : CairoBoolT
  fun cairo_get_current_point(cr : CairoT*, x : Float64*, y : Float64*) : Void
  fun cairo_get_fill_rule(cr : CairoT*) : CairoFillRuleT
  fun cairo_get_line_width(cr : CairoT*) : Float64
  fun cairo_get_line_cap(cr : CairoT*) : CairoLineCapT
  fun cairo_get_line_join(cr : CairoT*) : CairoLineJoinT
  fun cairo_get_miter_limit(cr : CairoT*) : Float64
  fun cairo_get_dash_count(cr : CairoT*) : Int32
  fun cairo_get_dash(cr : CairoT*, dashes : Float64*, offset : Float64*) : Void
  fun cairo_get_matrix(cr : CairoT*, matrix : CairoMatrixT*) : Void
  fun cairo_get_target(cr : CairoT*) : CairoSurfaceT*
  fun cairo_get_group_target(cr : CairoT*) : CairoSurfaceT*
  fun cairo_copy_path(cr : CairoT*) : CairoPathT*
  fun cairo_copy_path_flat(cr : CairoT*) : CairoPathT*
  fun cairo_append_path(cr : CairoT*, path : CairoPathT*) : Void
  fun cairo_path_destroy(path : CairoPathT*) : Void
  fun cairo_status(cr : CairoT*) : CairoStatusT
  fun cairo_status_to_string(status : CairoStatusT) : UInt8*
  fun cairo_device_reference(device : CairoDeviceT*) : CairoDeviceT*
  fun cairo_device_get_type(device : CairoDeviceT*) : CairoDeviceTypeT
  fun cairo_device_status(device : CairoDeviceT*) : CairoStatusT
  fun cairo_device_acquire(device : CairoDeviceT*) : CairoStatusT
  fun cairo_device_release(device : CairoDeviceT*) : Void
  fun cairo_device_flush(device : CairoDeviceT*) : Void
  fun cairo_device_finish(device : CairoDeviceT*) : Void
  fun cairo_device_destroy(device : CairoDeviceT*) : Void
  fun cairo_device_get_reference_count(device : CairoDeviceT*) : UInt32
  fun cairo_device_get_user_data(device : CairoDeviceT*, key : CairoUserDataKeyT*) : Void*
  fun cairo_device_set_user_data(device : CairoDeviceT*, key : CairoUserDataKeyT*, user_data : Void*, destroy : CairoDestroyFuncT) : CairoStatusT
  fun cairo_surface_create_similar(other : CairoSurfaceT*, content : CairoContentT, width : Int32, height : Int32) : CairoSurfaceT*
  fun cairo_surface_create_similar_image(other : CairoSurfaceT*, format : CairoFormatT, width : Int32, height : Int32) : CairoSurfaceT*
  fun cairo_surface_map_to_image(surface : CairoSurfaceT*, extents : CairoRectangleIntT*) : CairoSurfaceT*
  fun cairo_surface_unmap_image(surface : CairoSurfaceT*, image : CairoSurfaceT*) : Void
  fun cairo_surface_create_for_rectangle(target : CairoSurfaceT*, x : Float64, y : Float64, width : Float64, height : Float64) : CairoSurfaceT*
  fun cairo_surface_create_observer(target : CairoSurfaceT*, mode : CairoSurfaceObserverModeT) : CairoSurfaceT*
  fun cairo_surface_observer_add_paint_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_add_mask_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_add_fill_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_add_stroke_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_add_glyphs_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_add_flush_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_add_finish_callback(abstract_surface : CairoSurfaceT*, func : CairoSurfaceObserverCallbackT, data : Void*) : CairoStatusT
  fun cairo_surface_observer_print(surface : CairoSurfaceT*, write_func : CairoWriteFuncT, closure : Void*) : CairoStatusT
  fun cairo_surface_observer_elapsed(surface : CairoSurfaceT*) : Float64
  fun cairo_device_observer_print(device : CairoDeviceT*, write_func : CairoWriteFuncT, closure : Void*) : CairoStatusT
  fun cairo_device_observer_elapsed(device : CairoDeviceT*) : Float64
  fun cairo_device_observer_paint_elapsed(device : CairoDeviceT*) : Float64
  fun cairo_device_observer_mask_elapsed(device : CairoDeviceT*) : Float64
  fun cairo_device_observer_fill_elapsed(device : CairoDeviceT*) : Float64
  fun cairo_device_observer_stroke_elapsed(device : CairoDeviceT*) : Float64
  fun cairo_device_observer_glyphs_elapsed(device : CairoDeviceT*) : Float64
  fun cairo_surface_reference(surface : CairoSurfaceT*) : CairoSurfaceT*
  fun cairo_surface_finish(surface : CairoSurfaceT*) : Void
  fun cairo_surface_destroy(surface : CairoSurfaceT*) : Void
  fun cairo_surface_get_device(surface : CairoSurfaceT*) : CairoDeviceT*
  fun cairo_surface_get_reference_count(surface : CairoSurfaceT*) : UInt32
  fun cairo_surface_status(surface : CairoSurfaceT*) : CairoStatusT
  fun cairo_surface_get_type(surface : CairoSurfaceT*) : CairoSurfaceTypeT
  fun cairo_surface_get_content(surface : CairoSurfaceT*) : CairoContentT
  fun cairo_surface_write_to_png(surface : CairoSurfaceT*, filename : UInt8*) : CairoStatusT
  fun cairo_surface_write_to_png_stream(surface : CairoSurfaceT*, write_func : CairoWriteFuncT, closure : Void*) : CairoStatusT
  fun cairo_surface_get_user_data(surface : CairoSurfaceT*, key : CairoUserDataKeyT*) : Void*
  fun cairo_surface_set_user_data(surface : CairoSurfaceT*, key : CairoUserDataKeyT*, user_data : Void*, destroy : CairoDestroyFuncT) : CairoStatusT
  fun cairo_surface_get_mime_data(surface : CairoSurfaceT*, mime_type : UInt8*, data : UInt8**, length : UInt64*) : Void
  fun cairo_surface_set_mime_data(surface : CairoSurfaceT*, mime_type : UInt8*, data : UInt8*, length : UInt64, destroy : CairoDestroyFuncT, closure : Void*) : CairoStatusT
  fun cairo_surface_supports_mime_type(surface : CairoSurfaceT*, mime_type : UInt8*) : CairoBoolT
  fun cairo_surface_get_font_options(surface : CairoSurfaceT*, options : CairoFontOptionsT*) : Void
  fun cairo_surface_flush(surface : CairoSurfaceT*) : Void
  fun cairo_surface_mark_dirty(surface : CairoSurfaceT*) : Void
  fun cairo_surface_mark_dirty_rectangle(surface : CairoSurfaceT*, x : Int32, y : Int32, width : Int32, height : Int32) : Void
  fun cairo_surface_set_device_scale(surface : CairoSurfaceT*, x_scale : Float64, y_scale : Float64) : Void
  fun cairo_surface_get_device_scale(surface : CairoSurfaceT*, x_scale : Float64*, y_scale : Float64*) : Void
  fun cairo_surface_set_device_offset(surface : CairoSurfaceT*, x_offset : Float64, y_offset : Float64) : Void
  fun cairo_surface_get_device_offset(surface : CairoSurfaceT*, x_offset : Float64*, y_offset : Float64*) : Void
  fun cairo_surface_set_fallback_resolution(surface : CairoSurfaceT*, x_pixels_per_inch : Float64, y_pixels_per_inch : Float64) : Void
  fun cairo_surface_get_fallback_resolution(surface : CairoSurfaceT*, x_pixels_per_inch : Float64*, y_pixels_per_inch : Float64*) : Void
  fun cairo_surface_copy_page(surface : CairoSurfaceT*) : Void
  fun cairo_surface_show_page(surface : CairoSurfaceT*) : Void
  fun cairo_surface_has_show_text_glyphs(surface : CairoSurfaceT*) : CairoBoolT
  fun cairo_image_surface_create(format : CairoFormatT, width : Int32, height : Int32) : CairoSurfaceT*
  fun cairo_format_stride_for_width(format : CairoFormatT, width : Int32) : Int32
  fun cairo_image_surface_create_for_data(data : UInt8*, format : CairoFormatT, width : Int32, height : Int32, stride : Int32) : CairoSurfaceT*
  fun cairo_image_surface_get_data(surface : CairoSurfaceT*) : UInt8*
  fun cairo_image_surface_get_format(surface : CairoSurfaceT*) : CairoFormatT
  fun cairo_image_surface_get_width(surface : CairoSurfaceT*) : Int32
  fun cairo_image_surface_get_height(surface : CairoSurfaceT*) : Int32
  fun cairo_image_surface_get_stride(surface : CairoSurfaceT*) : Int32
  fun cairo_image_surface_create_from_png(filename : UInt8*) : CairoSurfaceT*
  fun cairo_image_surface_create_from_png_stream(read_func : CairoReadFuncT, closure : Void*) : CairoSurfaceT*
  fun cairo_recording_surface_create(content : CairoContentT, extents : CairoRectangleT*) : CairoSurfaceT*
  fun cairo_recording_surface_ink_extents(surface : CairoSurfaceT*, x0 : Float64*, y0 : Float64*, width : Float64*, height : Float64*) : Void
  fun cairo_recording_surface_get_extents(surface : CairoSurfaceT*, extents : CairoRectangleT*) : CairoBoolT
  fun cairo_pattern_create_raster_source(user_data : Void*, content : CairoContentT, width : Int32, height : Int32) : CairoPatternT*
  fun cairo_raster_source_pattern_set_callback_data(pattern : CairoPatternT*, data : Void*) : Void
  fun cairo_raster_source_pattern_get_callback_data(pattern : CairoPatternT*) : Void*
  fun cairo_raster_source_pattern_set_acquire(pattern : CairoPatternT*, acquire : CairoRasterSourceAcquireFuncT, release : CairoRasterSourceReleaseFuncT) : Void
  fun cairo_raster_source_pattern_get_acquire(pattern : CairoPatternT*, acquire : CairoRasterSourceAcquireFuncT*, release : CairoRasterSourceReleaseFuncT*) : Void
  fun cairo_raster_source_pattern_set_snapshot(pattern : CairoPatternT*, snapshot : CairoRasterSourceSnapshotFuncT) : Void
  fun cairo_raster_source_pattern_get_snapshot(pattern : CairoPatternT*) : CairoRasterSourceSnapshotFuncT
  fun cairo_raster_source_pattern_set_copy(pattern : CairoPatternT*, copy : CairoRasterSourceCopyFuncT) : Void
  fun cairo_raster_source_pattern_get_copy(pattern : CairoPatternT*) : CairoRasterSourceCopyFuncT
  fun cairo_raster_source_pattern_set_finish(pattern : CairoPatternT*, finish : CairoRasterSourceFinishFuncT) : Void
  fun cairo_raster_source_pattern_get_finish(pattern : CairoPatternT*) : CairoRasterSourceFinishFuncT
  fun cairo_pattern_create_rgb(red : Float64, green : Float64, blue : Float64) : CairoPatternT*
  fun cairo_pattern_create_rgba(red : Float64, green : Float64, blue : Float64, alpha : Float64) : CairoPatternT*
  fun cairo_pattern_create_for_surface(surface : CairoSurfaceT*) : CairoPatternT*
  fun cairo_pattern_create_linear(x0 : Float64, y0 : Float64, x1 : Float64, y1 : Float64) : CairoPatternT*
  fun cairo_pattern_create_radial(cx0 : Float64, cy0 : Float64, radius0 : Float64, cx1 : Float64, cy1 : Float64, radius1 : Float64) : CairoPatternT*
  fun cairo_pattern_create_mesh : CairoPatternT*
  fun cairo_pattern_reference(pattern : CairoPatternT*) : CairoPatternT*
  fun cairo_pattern_destroy(pattern : CairoPatternT*) : Void
  fun cairo_pattern_get_reference_count(pattern : CairoPatternT*) : UInt32
  fun cairo_pattern_status(pattern : CairoPatternT*) : CairoStatusT
  fun cairo_pattern_get_user_data(pattern : CairoPatternT*, key : CairoUserDataKeyT*) : Void*
  fun cairo_pattern_set_user_data(pattern : CairoPatternT*, key : CairoUserDataKeyT*, user_data : Void*, destroy : CairoDestroyFuncT) : CairoStatusT
  fun cairo_pattern_get_type(pattern : CairoPatternT*) : CairoPatternTypeT
  fun cairo_pattern_add_color_stop_rgb(pattern : CairoPatternT*, offset : Float64, red : Float64, green : Float64, blue : Float64) : Void
  fun cairo_pattern_add_color_stop_rgba(pattern : CairoPatternT*, offset : Float64, red : Float64, green : Float64, blue : Float64, alpha : Float64) : Void
  fun cairo_mesh_pattern_begin_patch(pattern : CairoPatternT*) : Void
  fun cairo_mesh_pattern_end_patch(pattern : CairoPatternT*) : Void
  fun cairo_mesh_pattern_curve_to(pattern : CairoPatternT*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64, x3 : Float64, y3 : Float64) : Void
  fun cairo_mesh_pattern_line_to(pattern : CairoPatternT*, x : Float64, y : Float64) : Void
  fun cairo_mesh_pattern_move_to(pattern : CairoPatternT*, x : Float64, y : Float64) : Void
  fun cairo_mesh_pattern_set_control_point(pattern : CairoPatternT*, point_num : UInt32, x : Float64, y : Float64) : Void
  fun cairo_mesh_pattern_set_corner_color_rgb(pattern : CairoPatternT*, corner_num : UInt32, red : Float64, green : Float64, blue : Float64) : Void
  fun cairo_mesh_pattern_set_corner_color_rgba(pattern : CairoPatternT*, corner_num : UInt32, red : Float64, green : Float64, blue : Float64, alpha : Float64) : Void
  fun cairo_pattern_set_matrix(pattern : CairoPatternT*, matrix : CairoMatrixT*) : Void
  fun cairo_pattern_get_matrix(pattern : CairoPatternT*, matrix : CairoMatrixT*) : Void
  fun cairo_pattern_set_extend(pattern : CairoPatternT*, extend : CairoExtendT) : Void
  fun cairo_pattern_get_extend(pattern : CairoPatternT*) : CairoExtendT
  fun cairo_pattern_set_filter(pattern : CairoPatternT*, filter : CairoFilterT) : Void
  fun cairo_pattern_get_filter(pattern : CairoPatternT*) : CairoFilterT
  fun cairo_pattern_get_rgba(pattern : CairoPatternT*, red : Float64*, green : Float64*, blue : Float64*, alpha : Float64*) : CairoStatusT
  fun cairo_pattern_get_surface(pattern : CairoPatternT*, surface : CairoSurfaceT**) : CairoStatusT
  fun cairo_pattern_get_color_stop_rgba(pattern : CairoPatternT*, index : Int32, offset : Float64*, red : Float64*, green : Float64*, blue : Float64*, alpha : Float64*) : CairoStatusT
  fun cairo_pattern_get_color_stop_count(pattern : CairoPatternT*, count : Int32*) : CairoStatusT
  fun cairo_pattern_get_linear_points(pattern : CairoPatternT*, x0 : Float64*, y0 : Float64*, x1 : Float64*, y1 : Float64*) : CairoStatusT
  fun cairo_pattern_get_radial_circles(pattern : CairoPatternT*, x0 : Float64*, y0 : Float64*, r0 : Float64*, x1 : Float64*, y1 : Float64*, r1 : Float64*) : CairoStatusT
  fun cairo_mesh_pattern_get_patch_count(pattern : CairoPatternT*, count : UInt32*) : CairoStatusT
  fun cairo_mesh_pattern_get_path(pattern : CairoPatternT*, patch_num : UInt32) : CairoPathT*
  fun cairo_mesh_pattern_get_corner_color_rgba(pattern : CairoPatternT*, patch_num : UInt32, corner_num : UInt32, red : Float64*, green : Float64*, blue : Float64*, alpha : Float64*) : CairoStatusT
  fun cairo_mesh_pattern_get_control_point(pattern : CairoPatternT*, patch_num : UInt32, point_num : UInt32, x : Float64*, y : Float64*) : CairoStatusT
  fun cairo_matrix_init(matrix : CairoMatrixT*, xx : Float64, yx : Float64, xy : Float64, yy : Float64, x0 : Float64, y0 : Float64) : Void
  fun cairo_matrix_init_identity(matrix : CairoMatrixT*) : Void
  fun cairo_matrix_init_translate(matrix : CairoMatrixT*, tx : Float64, ty : Float64) : Void
  fun cairo_matrix_init_scale(matrix : CairoMatrixT*, sx : Float64, sy : Float64) : Void
  fun cairo_matrix_init_rotate(matrix : CairoMatrixT*, radians : Float64) : Void
  fun cairo_matrix_translate(matrix : CairoMatrixT*, tx : Float64, ty : Float64) : Void
  fun cairo_matrix_scale(matrix : CairoMatrixT*, sx : Float64, sy : Float64) : Void
  fun cairo_matrix_rotate(matrix : CairoMatrixT*, radians : Float64) : Void
  fun cairo_matrix_invert(matrix : CairoMatrixT*) : CairoStatusT
  fun cairo_matrix_multiply(result : CairoMatrixT*, a : CairoMatrixT*, b : CairoMatrixT*) : Void
  fun cairo_matrix_transform_distance(matrix : CairoMatrixT*, dx : Float64*, dy : Float64*) : Void
  fun cairo_matrix_transform_point(matrix : CairoMatrixT*, x : Float64*, y : Float64*) : Void
  fun cairo_region_create : CairoRegionT*
  fun cairo_region_create_rectangle(rectangle : CairoRectangleIntT*) : CairoRegionT*
  fun cairo_region_create_rectangles(rects : CairoRectangleIntT*, count : Int32) : CairoRegionT*
  fun cairo_region_copy(original : CairoRegionT*) : CairoRegionT*
  fun cairo_region_reference(region : CairoRegionT*) : CairoRegionT*
  fun cairo_region_destroy(region : CairoRegionT*) : Void
  fun cairo_region_equal(a : CairoRegionT*, b : CairoRegionT*) : CairoBoolT
  fun cairo_region_status(region : CairoRegionT*) : CairoStatusT
  fun cairo_region_get_extents(region : CairoRegionT*, extents : CairoRectangleIntT*) : Void
  fun cairo_region_num_rectangles(region : CairoRegionT*) : Int32
  fun cairo_region_get_rectangle(region : CairoRegionT*, nth : Int32, rectangle : CairoRectangleIntT*) : Void
  fun cairo_region_is_empty(region : CairoRegionT*) : CairoBoolT
  fun cairo_region_contains_rectangle(region : CairoRegionT*, rectangle : CairoRectangleIntT*) : CairoRegionOverlapT
  fun cairo_region_contains_point(region : CairoRegionT*, x : Int32, y : Int32) : CairoBoolT
  fun cairo_region_translate(region : CairoRegionT*, dx : Int32, dy : Int32) : Void
  fun cairo_region_subtract(dst : CairoRegionT*, other : CairoRegionT*) : CairoStatusT
  fun cairo_region_subtract_rectangle(dst : CairoRegionT*, rectangle : CairoRectangleIntT*) : CairoStatusT
  fun cairo_region_intersect(dst : CairoRegionT*, other : CairoRegionT*) : CairoStatusT
  fun cairo_region_intersect_rectangle(dst : CairoRegionT*, rectangle : CairoRectangleIntT*) : CairoStatusT
  fun cairo_region_union(dst : CairoRegionT*, other : CairoRegionT*) : CairoStatusT
  fun cairo_region_union_rectangle(dst : CairoRegionT*, rectangle : CairoRectangleIntT*) : CairoStatusT
  fun cairo_region_xor(dst : CairoRegionT*, other : CairoRegionT*) : CairoStatusT
  fun cairo_region_xor_rectangle(dst : CairoRegionT*, rectangle : CairoRectangleIntT*) : CairoStatusT
  fun cairo_debug_reset_static_data : Void
  fun gdk_device_get_type : GType
  fun gdk_device_get_name(device : GdkDevice*) : Gchar*
  fun gdk_device_get_has_cursor(device : GdkDevice*) : Gboolean
  fun gdk_device_get_source(device : GdkDevice*) : GdkInputSource
  fun gdk_device_get_mode(device : GdkDevice*) : GdkInputMode
  fun gdk_device_set_mode(device : GdkDevice*, mode : GdkInputMode) : Gboolean
  fun gdk_device_get_n_keys(device : GdkDevice*) : Gint
  fun gdk_device_get_key(device : GdkDevice*, index_ : Guint, keyval : Guint*, modifiers : GdkModifierType*) : Gboolean
  fun gdk_device_set_key(device : GdkDevice*, index_ : Guint, keyval : Guint, modifiers : GdkModifierType) : Void
  fun gdk_device_get_axis_use(device : GdkDevice*, index_ : Guint) : GdkAxisUse
  fun gdk_device_set_axis_use(device : GdkDevice*, index_ : Guint, use : GdkAxisUse) : Void
  fun gdk_device_get_state(device : GdkDevice*, window : GdkWindow*, axes : Gdouble*, mask : GdkModifierType*) : Void
  fun gdk_device_get_position(device : GdkDevice*, screen : GdkScreen**, x : Gint*, y : Gint*) : Void
  fun gdk_device_get_window_at_position(device : GdkDevice*, win_x : Gint*, win_y : Gint*) : GdkWindow*
  fun gdk_device_get_position_double(device : GdkDevice*, screen : GdkScreen**, x : Gdouble*, y : Gdouble*) : Void
  fun gdk_device_get_window_at_position_double(device : GdkDevice*, win_x : Gdouble*, win_y : Gdouble*) : GdkWindow*
  fun gdk_device_get_history(device : GdkDevice*, window : GdkWindow*, start : Guint32, stop : Guint32, events : GdkTimeCoord***, n_events : Gint*) : Gboolean
  fun gdk_device_free_history(events : GdkTimeCoord**, n_events : Gint) : Void
  fun gdk_device_get_n_axes(device : GdkDevice*) : Gint
  fun gdk_device_list_axes(device : GdkDevice*) : GList*
  fun gdk_device_get_axis_value(device : GdkDevice*, axes : Gdouble*, axis_label : GdkAtom, value : Gdouble*) : Gboolean
  fun gdk_device_get_axis(device : GdkDevice*, axes : Gdouble*, use : GdkAxisUse, value : Gdouble*) : Gboolean
  fun gdk_device_get_display(device : GdkDevice*) : GdkDisplay*
  fun gdk_device_get_associated_device(device : GdkDevice*) : GdkDevice*
  fun gdk_device_list_slave_devices(device : GdkDevice*) : GList*
  fun gdk_device_get_device_type(device : GdkDevice*) : GdkDeviceType
  fun gdk_device_grab(device : GdkDevice*, window : GdkWindow*, grab_ownership : GdkGrabOwnership, owner_events : Gboolean, event_mask : GdkEventMask, cursor : GdkCursor*, time_ : Guint32) : GdkGrabStatus
  fun gdk_device_ungrab(device : GdkDevice*, time_ : Guint32) : Void
  fun gdk_device_warp(device : GdkDevice*, screen : GdkScreen*, x : Gint, y : Gint) : Void
  fun gdk_device_grab_info_libgtk_only(display : GdkDisplay*, device : GdkDevice*, grab_window : GdkWindow**, owner_events : Gboolean*) : Gboolean
  fun gdk_device_get_last_event_window(device : GdkDevice*) : GdkWindow*
  fun gdk_device_get_vendor_id(device : GdkDevice*) : Gchar*
  fun gdk_device_get_product_id(device : GdkDevice*) : Gchar*
  fun gdk_device_get_seat(device : GdkDevice*) : GdkSeat*
  fun gdk_drag_context_get_type : GType
  fun gdk_drag_context_set_device(context : GdkDragContext*, device : GdkDevice*) : Void
  fun gdk_drag_context_get_device(context : GdkDragContext*) : GdkDevice*
  fun gdk_drag_context_list_targets(context : GdkDragContext*) : GList*
  fun gdk_drag_context_get_actions(context : GdkDragContext*) : GdkDragAction
  fun gdk_drag_context_get_suggested_action(context : GdkDragContext*) : GdkDragAction
  fun gdk_drag_context_get_selected_action(context : GdkDragContext*) : GdkDragAction
  fun gdk_drag_context_get_source_window(context : GdkDragContext*) : GdkWindow*
  fun gdk_drag_context_get_dest_window(context : GdkDragContext*) : GdkWindow*
  fun gdk_drag_context_get_protocol(context : GdkDragContext*) : GdkDragProtocol
  fun gdk_drag_status(context : GdkDragContext*, action : GdkDragAction, time_ : Guint32) : Void
  fun gdk_drop_reply(context : GdkDragContext*, accepted : Gboolean, time_ : Guint32) : Void
  fun gdk_drop_finish(context : GdkDragContext*, success : Gboolean, time_ : Guint32) : Void
  fun gdk_drag_get_selection(context : GdkDragContext*) : GdkAtom
  fun gdk_drag_begin(window : GdkWindow*, targets : GList*) : GdkDragContext*
  fun gdk_drag_begin_for_device(window : GdkWindow*, device : GdkDevice*, targets : GList*) : GdkDragContext*
  fun gdk_drag_begin_from_point(window : GdkWindow*, device : GdkDevice*, targets : GList*, x_root : Gint, y_root : Gint) : GdkDragContext*
  fun gdk_drag_find_window_for_screen(context : GdkDragContext*, drag_window : GdkWindow*, screen : GdkScreen*, x_root : Gint, y_root : Gint, dest_window : GdkWindow**, protocol : GdkDragProtocol*) : Void
  fun gdk_drag_motion(context : GdkDragContext*, dest_window : GdkWindow*, protocol : GdkDragProtocol, x_root : Gint, y_root : Gint, suggested_action : GdkDragAction, possible_actions : GdkDragAction, time_ : Guint32) : Gboolean
  fun gdk_drag_drop(context : GdkDragContext*, time_ : Guint32) : Void
  fun gdk_drag_abort(context : GdkDragContext*, time_ : Guint32) : Void
  fun gdk_drag_drop_succeeded(context : GdkDragContext*) : Gboolean
  fun gdk_drag_drop_done(context : GdkDragContext*, success : Gboolean) : Void
  fun gdk_drag_context_get_drag_window(context : GdkDragContext*) : GdkWindow*
  fun gdk_drag_context_set_hotspot(context : GdkDragContext*, hot_x : Gint, hot_y : Gint) : Void
  fun gdk_drag_context_manage_dnd(context : GdkDragContext*, ipc_window : GdkWindow*, actions : GdkDragAction) : Gboolean
  fun gdk_event_get_type : GType
  fun gdk_event_sequence_get_type : GType
  fun gdk_events_pending : Gboolean
  fun gdk_event_get : GdkEvent*
  fun gdk_event_peek : GdkEvent*
  fun gdk_event_put(event : GdkEvent*) : Void
  fun gdk_event_new(type : GdkEventType) : GdkEvent*
  fun gdk_event_copy(event : GdkEvent*) : GdkEvent*
  fun gdk_event_free(event : GdkEvent*) : Void
  fun gdk_event_get_window(event : GdkEvent*) : GdkWindow*
  fun gdk_event_get_time(event : GdkEvent*) : Guint32
  fun gdk_event_get_state(event : GdkEvent*, state : GdkModifierType*) : Gboolean
  fun gdk_event_get_coords(event : GdkEvent*, x_win : Gdouble*, y_win : Gdouble*) : Gboolean
  fun gdk_event_get_root_coords(event : GdkEvent*, x_root : Gdouble*, y_root : Gdouble*) : Gboolean
  fun gdk_event_get_button(event : GdkEvent*, button : Guint*) : Gboolean
  fun gdk_event_get_click_count(event : GdkEvent*, click_count : Guint*) : Gboolean
  fun gdk_event_get_keyval(event : GdkEvent*, keyval : Guint*) : Gboolean
  fun gdk_event_get_keycode(event : GdkEvent*, keycode : Guint16*) : Gboolean
  fun gdk_event_get_scroll_direction(event : GdkEvent*, direction : GdkScrollDirection*) : Gboolean
  fun gdk_event_get_scroll_deltas(event : GdkEvent*, delta_x : Gdouble*, delta_y : Gdouble*) : Gboolean
  fun gdk_event_is_scroll_stop_event(event : GdkEvent*) : Gboolean
  fun gdk_event_get_axis(event : GdkEvent*, axis_use : GdkAxisUse, value : Gdouble*) : Gboolean
  fun gdk_event_set_device(event : GdkEvent*, device : GdkDevice*) : Void
  fun gdk_event_get_device(event : GdkEvent*) : GdkDevice*
  fun gdk_event_set_source_device(event : GdkEvent*, device : GdkDevice*) : Void
  fun gdk_event_get_source_device(event : GdkEvent*) : GdkDevice*
  fun gdk_event_request_motions(event : GdkEventMotion*) : Void
  fun gdk_event_triggers_context_menu(event : GdkEvent*) : Gboolean
  fun gdk_events_get_distance(event1 : GdkEvent*, event2 : GdkEvent*, distance : Gdouble*) : Gboolean
  fun gdk_events_get_angle(event1 : GdkEvent*, event2 : GdkEvent*, angle : Gdouble*) : Gboolean
  fun gdk_events_get_center(event1 : GdkEvent*, event2 : GdkEvent*, x : Gdouble*, y : Gdouble*) : Gboolean
  fun gdk_event_handler_set(func : GdkEventFunc, data : Gpointer, notify : GDestroyNotify) : Void
  fun gdk_event_set_screen(event : GdkEvent*, screen : GdkScreen*) : Void
  fun gdk_event_get_screen(event : GdkEvent*) : GdkScreen*
  fun gdk_event_get_event_sequence(event : GdkEvent*) : GdkEventSequence*
  fun gdk_event_get_event_type(event : GdkEvent*) : GdkEventType
  fun gdk_event_get_seat(event : GdkEvent*) : GdkSeat*
  fun gdk_set_show_events(show_events : Gboolean) : Void
  fun gdk_get_show_events : Gboolean
  fun gdk_setting_get(name : Gchar*, value : GValue*) : Gboolean
  fun gdk_device_manager_get_type : GType
  fun gdk_device_manager_get_display(device_manager : GdkDeviceManager*) : GdkDisplay*
  fun gdk_device_manager_list_devices(device_manager : GdkDeviceManager*, type : GdkDeviceType) : GList*
  fun gdk_device_manager_get_client_pointer(device_manager : GdkDeviceManager*) : GdkDevice*
  fun gdk_frame_timings_get_type : GType
  fun gdk_frame_timings_ref(timings : GdkFrameTimings*) : GdkFrameTimings*
  fun gdk_frame_timings_unref(timings : GdkFrameTimings*) : Void
  fun gdk_frame_timings_get_frame_counter(timings : GdkFrameTimings*) : Gint64
  fun gdk_frame_timings_get_complete(timings : GdkFrameTimings*) : Gboolean
  fun gdk_frame_timings_get_frame_time(timings : GdkFrameTimings*) : Gint64
  fun gdk_frame_timings_get_presentation_time(timings : GdkFrameTimings*) : Gint64
  fun gdk_frame_timings_get_refresh_interval(timings : GdkFrameTimings*) : Gint64
  fun gdk_frame_timings_get_predicted_presentation_time(timings : GdkFrameTimings*) : Gint64
  fun gdk_frame_clock_get_type : GType
  fun gdk_frame_clock_get_frame_time(frame_clock : GdkFrameClock*) : Gint64
  fun gdk_frame_clock_request_phase(frame_clock : GdkFrameClock*, phase : GdkFrameClockPhase) : Void
  fun gdk_frame_clock_begin_updating(frame_clock : GdkFrameClock*) : Void
  fun gdk_frame_clock_end_updating(frame_clock : GdkFrameClock*) : Void
  fun gdk_frame_clock_get_frame_counter(frame_clock : GdkFrameClock*) : Gint64
  fun gdk_frame_clock_get_history_start(frame_clock : GdkFrameClock*) : Gint64
  fun gdk_frame_clock_get_timings(frame_clock : GdkFrameClock*, frame_counter : Gint64) : GdkFrameTimings*
  fun gdk_frame_clock_get_current_timings(frame_clock : GdkFrameClock*) : GdkFrameTimings*
  fun gdk_frame_clock_get_refresh_info(frame_clock : GdkFrameClock*, base_time : Gint64, refresh_interval_return : Gint64*, presentation_time_return : Gint64*) : Void
  fun gdk_window_get_type : GType
  fun gdk_window_new(parent : GdkWindow*, attributes : GdkWindowAttr*, attributes_mask : Gint) : GdkWindow*
  fun gdk_window_destroy(window : GdkWindow*) : Void
  fun gdk_window_get_window_type(window : GdkWindow*) : GdkWindowType
  fun gdk_window_is_destroyed(window : GdkWindow*) : Gboolean
  fun gdk_window_get_visual(window : GdkWindow*) : GdkVisual*
  fun gdk_window_get_screen(window : GdkWindow*) : GdkScreen*
  fun gdk_window_get_display(window : GdkWindow*) : GdkDisplay*
  fun gdk_window_at_pointer(win_x : Gint*, win_y : Gint*) : GdkWindow*
  fun gdk_window_show(window : GdkWindow*) : Void
  fun gdk_window_hide(window : GdkWindow*) : Void
  fun gdk_window_withdraw(window : GdkWindow*) : Void
  fun gdk_window_show_unraised(window : GdkWindow*) : Void
  fun gdk_window_move(window : GdkWindow*, x : Gint, y : Gint) : Void
  fun gdk_window_resize(window : GdkWindow*, width : Gint, height : Gint) : Void
  fun gdk_window_move_resize(window : GdkWindow*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gdk_window_reparent(window : GdkWindow*, new_parent : GdkWindow*, x : Gint, y : Gint) : Void
  fun gdk_window_raise(window : GdkWindow*) : Void
  fun gdk_window_lower(window : GdkWindow*) : Void
  fun gdk_window_restack(window : GdkWindow*, sibling : GdkWindow*, above : Gboolean) : Void
  fun gdk_window_focus(window : GdkWindow*, timestamp : Guint32) : Void
  fun gdk_window_set_user_data(window : GdkWindow*, user_data : Gpointer) : Void
  fun gdk_window_set_override_redirect(window : GdkWindow*, override_redirect : Gboolean) : Void
  fun gdk_window_get_accept_focus(window : GdkWindow*) : Gboolean
  fun gdk_window_set_accept_focus(window : GdkWindow*, accept_focus : Gboolean) : Void
  fun gdk_window_get_focus_on_map(window : GdkWindow*) : Gboolean
  fun gdk_window_set_focus_on_map(window : GdkWindow*, focus_on_map : Gboolean) : Void
  fun gdk_window_add_filter(window : GdkWindow*, function : GdkFilterFunc, data : Gpointer) : Void
  fun gdk_window_remove_filter(window : GdkWindow*, function : GdkFilterFunc, data : Gpointer) : Void
  fun gdk_window_scroll(window : GdkWindow*, dx : Gint, dy : Gint) : Void
  fun gdk_window_move_region(window : GdkWindow*, region : CairoRegionT*, dx : Gint, dy : Gint) : Void
  fun gdk_window_ensure_native(window : GdkWindow*) : Gboolean
  fun gdk_window_shape_combine_region(window : GdkWindow*, shape_region : CairoRegionT*, offset_x : Gint, offset_y : Gint) : Void
  fun gdk_window_set_child_shapes(window : GdkWindow*) : Void
  fun gdk_window_get_composited(window : GdkWindow*) : Gboolean
  fun gdk_window_set_composited(window : GdkWindow*, composited : Gboolean) : Void
  fun gdk_window_merge_child_shapes(window : GdkWindow*) : Void
  fun gdk_window_input_shape_combine_region(window : GdkWindow*, shape_region : CairoRegionT*, offset_x : Gint, offset_y : Gint) : Void
  fun gdk_window_set_child_input_shapes(window : GdkWindow*) : Void
  fun gdk_window_merge_child_input_shapes(window : GdkWindow*) : Void
  fun gdk_window_set_pass_through(window : GdkWindow*, pass_through : Gboolean) : Void
  fun gdk_window_get_pass_through(window : GdkWindow*) : Gboolean
  fun gdk_window_is_visible(window : GdkWindow*) : Gboolean
  fun gdk_window_is_viewable(window : GdkWindow*) : Gboolean
  fun gdk_window_is_input_only(window : GdkWindow*) : Gboolean
  fun gdk_window_is_shaped(window : GdkWindow*) : Gboolean
  fun gdk_window_get_state(window : GdkWindow*) : GdkWindowState
  fun gdk_window_set_static_gravities(window : GdkWindow*, use_static : Gboolean) : Gboolean
  fun gdk_window_set_invalidate_handler(window : GdkWindow*, handler : GdkWindowInvalidateHandlerFunc) : Void
  fun gdk_window_has_native(window : GdkWindow*) : Gboolean
  fun gdk_window_set_type_hint(window : GdkWindow*, hint : GdkWindowTypeHint) : Void
  fun gdk_window_get_type_hint(window : GdkWindow*) : GdkWindowTypeHint
  fun gdk_window_get_modal_hint(window : GdkWindow*) : Gboolean
  fun gdk_window_set_modal_hint(window : GdkWindow*, modal : Gboolean) : Void
  fun gdk_window_set_skip_taskbar_hint(window : GdkWindow*, skips_taskbar : Gboolean) : Void
  fun gdk_window_set_skip_pager_hint(window : GdkWindow*, skips_pager : Gboolean) : Void
  fun gdk_window_set_urgency_hint(window : GdkWindow*, urgent : Gboolean) : Void
  fun gdk_window_set_geometry_hints(window : GdkWindow*, geometry : GdkGeometry*, geom_mask : GdkWindowHints) : Void
  fun gdk_window_get_clip_region(window : GdkWindow*) : CairoRegionT*
  fun gdk_window_get_visible_region(window : GdkWindow*) : CairoRegionT*
  fun gdk_window_begin_paint_rect(window : GdkWindow*, rectangle : GdkRectangle*) : Void
  fun gdk_window_mark_paint_from_clip(window : GdkWindow*, cr : CairoT*) : Void
  fun gdk_window_begin_paint_region(window : GdkWindow*, region : CairoRegionT*) : Void
  fun gdk_window_end_paint(window : GdkWindow*) : Void
  fun gdk_window_flush(window : GdkWindow*) : Void
  fun gdk_window_set_title(window : GdkWindow*, title : Gchar*) : Void
  fun gdk_window_set_role(window : GdkWindow*, role : Gchar*) : Void
  fun gdk_window_set_startup_id(window : GdkWindow*, startup_id : Gchar*) : Void
  fun gdk_window_set_transient_for(window : GdkWindow*, parent : GdkWindow*) : Void
  fun gdk_window_set_background(window : GdkWindow*, color : GdkColor*) : Void
  fun gdk_window_set_background_rgba(window : GdkWindow*, rgba : GdkRGBA*) : Void
  fun gdk_window_set_background_pattern(window : GdkWindow*, pattern : CairoPatternT*) : Void
  fun gdk_window_get_background_pattern(window : GdkWindow*) : CairoPatternT*
  fun gdk_window_set_cursor(window : GdkWindow*, cursor : GdkCursor*) : Void
  fun gdk_window_get_cursor(window : GdkWindow*) : GdkCursor*
  fun gdk_window_set_device_cursor(window : GdkWindow*, device : GdkDevice*, cursor : GdkCursor*) : Void
  fun gdk_window_get_device_cursor(window : GdkWindow*, device : GdkDevice*) : GdkCursor*
  fun gdk_window_get_user_data(window : GdkWindow*, data : Gpointer*) : Void
  fun gdk_window_get_geometry(window : GdkWindow*, x : Gint*, y : Gint*, width : Gint*, height : Gint*) : Void
  fun gdk_window_get_width(window : GdkWindow*) : Int32
  fun gdk_window_get_height(window : GdkWindow*) : Int32
  fun gdk_window_get_position(window : GdkWindow*, x : Gint*, y : Gint*) : Void
  fun gdk_window_get_origin(window : GdkWindow*, x : Gint*, y : Gint*) : Gint
  fun gdk_window_get_root_coords(window : GdkWindow*, x : Gint, y : Gint, root_x : Gint*, root_y : Gint*) : Void
  fun gdk_window_coords_to_parent(window : GdkWindow*, x : Gdouble, y : Gdouble, parent_x : Gdouble*, parent_y : Gdouble*) : Void
  fun gdk_window_coords_from_parent(window : GdkWindow*, parent_x : Gdouble, parent_y : Gdouble, x : Gdouble*, y : Gdouble*) : Void
  fun gdk_window_get_root_origin(window : GdkWindow*, x : Gint*, y : Gint*) : Void
  fun gdk_window_get_frame_extents(window : GdkWindow*, rect : GdkRectangle*) : Void
  fun gdk_window_get_scale_factor(window : GdkWindow*) : Gint
  fun gdk_window_get_pointer(window : GdkWindow*, x : Gint*, y : Gint*, mask : GdkModifierType*) : GdkWindow*
  fun gdk_window_get_device_position(window : GdkWindow*, device : GdkDevice*, x : Gint*, y : Gint*, mask : GdkModifierType*) : GdkWindow*
  fun gdk_window_get_device_position_double(window : GdkWindow*, device : GdkDevice*, x : Gdouble*, y : Gdouble*, mask : GdkModifierType*) : GdkWindow*
  fun gdk_window_get_parent(window : GdkWindow*) : GdkWindow*
  fun gdk_window_get_toplevel(window : GdkWindow*) : GdkWindow*
  fun gdk_window_get_effective_parent(window : GdkWindow*) : GdkWindow*
  fun gdk_window_get_effective_toplevel(window : GdkWindow*) : GdkWindow*
  fun gdk_window_get_children(window : GdkWindow*) : GList*
  fun gdk_window_peek_children(window : GdkWindow*) : GList*
  fun gdk_window_get_children_with_user_data(window : GdkWindow*, user_data : Gpointer) : GList*
  fun gdk_window_get_events(window : GdkWindow*) : GdkEventMask
  fun gdk_window_set_events(window : GdkWindow*, event_mask : GdkEventMask) : Void
  fun gdk_window_set_device_events(window : GdkWindow*, device : GdkDevice*, event_mask : GdkEventMask) : Void
  fun gdk_window_get_device_events(window : GdkWindow*, device : GdkDevice*) : GdkEventMask
  fun gdk_window_set_source_events(window : GdkWindow*, source : GdkInputSource, event_mask : GdkEventMask) : Void
  fun gdk_window_get_source_events(window : GdkWindow*, source : GdkInputSource) : GdkEventMask
  fun gdk_window_set_icon_list(window : GdkWindow*, pixbufs : GList*) : Void
  fun gdk_window_set_icon_name(window : GdkWindow*, name : Gchar*) : Void
  fun gdk_window_set_group(window : GdkWindow*, leader : GdkWindow*) : Void
  fun gdk_window_get_group(window : GdkWindow*) : GdkWindow*
  fun gdk_window_set_decorations(window : GdkWindow*, decorations : GdkWMDecoration) : Void
  fun gdk_window_get_decorations(window : GdkWindow*, decorations : GdkWMDecoration*) : Gboolean
  fun gdk_window_set_functions(window : GdkWindow*, functions : GdkWMFunction) : Void
  fun gdk_window_create_similar_surface(window : GdkWindow*, content : CairoContentT, width : Int32, height : Int32) : CairoSurfaceT*
  fun gdk_window_create_similar_image_surface(window : GdkWindow*, format : CairoFormatT, width : Int32, height : Int32, scale : Int32) : CairoSurfaceT*
  fun gdk_window_beep(window : GdkWindow*) : Void
  fun gdk_window_iconify(window : GdkWindow*) : Void
  fun gdk_window_deiconify(window : GdkWindow*) : Void
  fun gdk_window_stick(window : GdkWindow*) : Void
  fun gdk_window_unstick(window : GdkWindow*) : Void
  fun gdk_window_maximize(window : GdkWindow*) : Void
  fun gdk_window_unmaximize(window : GdkWindow*) : Void
  fun gdk_window_fullscreen(window : GdkWindow*) : Void
  fun gdk_window_fullscreen_on_monitor(window : GdkWindow*, monitor : Gint) : Void
  fun gdk_window_set_fullscreen_mode(window : GdkWindow*, mode : GdkFullscreenMode) : Void
  fun gdk_window_get_fullscreen_mode(window : GdkWindow*) : GdkFullscreenMode
  fun gdk_window_unfullscreen(window : GdkWindow*) : Void
  fun gdk_window_set_keep_above(window : GdkWindow*, setting : Gboolean) : Void
  fun gdk_window_set_keep_below(window : GdkWindow*, setting : Gboolean) : Void
  fun gdk_window_set_opacity(window : GdkWindow*, opacity : Gdouble) : Void
  fun gdk_window_register_dnd(window : GdkWindow*) : Void
  fun gdk_window_get_drag_protocol(window : GdkWindow*, target : GdkWindow**) : GdkDragProtocol
  fun gdk_window_begin_resize_drag(window : GdkWindow*, edge : GdkWindowEdge, button : Gint, root_x : Gint, root_y : Gint, timestamp : Guint32) : Void
  fun gdk_window_begin_resize_drag_for_device(window : GdkWindow*, edge : GdkWindowEdge, device : GdkDevice*, button : Gint, root_x : Gint, root_y : Gint, timestamp : Guint32) : Void
  fun gdk_window_begin_move_drag(window : GdkWindow*, button : Gint, root_x : Gint, root_y : Gint, timestamp : Guint32) : Void
  fun gdk_window_begin_move_drag_for_device(window : GdkWindow*, device : GdkDevice*, button : Gint, root_x : Gint, root_y : Gint, timestamp : Guint32) : Void
  fun gdk_window_invalidate_rect(window : GdkWindow*, rect : GdkRectangle*, invalidate_children : Gboolean) : Void
  fun gdk_window_invalidate_region(window : GdkWindow*, region : CairoRegionT*, invalidate_children : Gboolean) : Void
  fun gdk_window_invalidate_maybe_recurse(window : GdkWindow*, region : CairoRegionT*, child_func : GdkWindowChildFunc, user_data : Gpointer) : Void
  fun gdk_window_get_update_area(window : GdkWindow*) : CairoRegionT*
  fun gdk_window_freeze_updates(window : GdkWindow*) : Void
  fun gdk_window_thaw_updates(window : GdkWindow*) : Void
  fun gdk_window_freeze_toplevel_updates_libgtk_only(window : GdkWindow*) : Void
  fun gdk_window_thaw_toplevel_updates_libgtk_only(window : GdkWindow*) : Void
  fun gdk_window_process_all_updates : Void
  fun gdk_window_process_updates(window : GdkWindow*, update_children : Gboolean) : Void
  fun gdk_window_set_debug_updates(setting : Gboolean) : Void
  fun gdk_window_constrain_size(geometry : GdkGeometry*, flags : GdkWindowHints, width : Gint, height : Gint, new_width : Gint*, new_height : Gint*) : Void
  fun gdk_window_enable_synchronized_configure(window : GdkWindow*) : Void
  fun gdk_window_configure_finished(window : GdkWindow*) : Void
  fun gdk_get_default_root_window : GdkWindow*
  fun gdk_offscreen_window_get_surface(window : GdkWindow*) : CairoSurfaceT*
  fun gdk_offscreen_window_set_embedder(window : GdkWindow*, embedder : GdkWindow*) : Void
  fun gdk_offscreen_window_get_embedder(window : GdkWindow*) : GdkWindow*
  fun gdk_window_geometry_changed(window : GdkWindow*) : Void
  fun gdk_window_set_support_multidevice(window : GdkWindow*, support_multidevice : Gboolean) : Void
  fun gdk_window_get_support_multidevice(window : GdkWindow*) : Gboolean
  fun gdk_window_get_frame_clock(window : GdkWindow*) : GdkFrameClock*
  fun gdk_window_set_opaque_region(window : GdkWindow*, region : CairoRegionT*) : Void
  fun gdk_window_set_event_compression(window : GdkWindow*, event_compression : Gboolean) : Void
  fun gdk_window_get_event_compression(window : GdkWindow*) : Gboolean
  fun gdk_window_set_shadow_width(window : GdkWindow*, left : Gint, right : Gint, top : Gint, bottom : Gint) : Void
  fun gdk_window_show_window_menu(window : GdkWindow*, event : GdkEvent*) : Gboolean
  fun gdk_window_create_gl_context(window : GdkWindow*, error : GError**) : GdkGLContext*
  fun gdk_seat_get_type : GType
  fun gdk_seat_grab(seat : GdkSeat*, window : GdkWindow*, capabilities : GdkSeatCapabilities, owner_events : Gboolean, cursor : GdkCursor*, event : GdkEvent*, prepare_func : GdkSeatGrabPrepareFunc, prepare_func_data : Gpointer) : GdkGrabStatus
  fun gdk_seat_ungrab(seat : GdkSeat*) : Void
  fun gdk_seat_get_display(seat : GdkSeat*) : GdkDisplay*
  fun gdk_seat_get_capabilities(seat : GdkSeat*) : GdkSeatCapabilities
  fun gdk_seat_get_slaves(seat : GdkSeat*, capabilities : GdkSeatCapabilities) : GList*
  fun gdk_seat_get_pointer(seat : GdkSeat*) : GdkDevice*
  fun gdk_seat_get_keyboard(seat : GdkSeat*) : GdkDevice*
  fun gdk_display_get_type : GType
  fun gdk_display_open(display_name : Gchar*) : GdkDisplay*
  fun gdk_display_get_name(display : GdkDisplay*) : Gchar*
  fun gdk_display_get_n_screens(display : GdkDisplay*) : Gint
  fun gdk_display_get_screen(display : GdkDisplay*, screen_num : Gint) : GdkScreen*
  fun gdk_display_get_default_screen(display : GdkDisplay*) : GdkScreen*
  fun gdk_display_pointer_ungrab(display : GdkDisplay*, time_ : Guint32) : Void
  fun gdk_display_keyboard_ungrab(display : GdkDisplay*, time_ : Guint32) : Void
  fun gdk_display_pointer_is_grabbed(display : GdkDisplay*) : Gboolean
  fun gdk_display_device_is_grabbed(display : GdkDisplay*, device : GdkDevice*) : Gboolean
  fun gdk_display_beep(display : GdkDisplay*) : Void
  fun gdk_display_sync(display : GdkDisplay*) : Void
  fun gdk_display_flush(display : GdkDisplay*) : Void
  fun gdk_display_close(display : GdkDisplay*) : Void
  fun gdk_display_is_closed(display : GdkDisplay*) : Gboolean
  fun gdk_display_list_devices(display : GdkDisplay*) : GList*
  fun gdk_display_get_event(display : GdkDisplay*) : GdkEvent*
  fun gdk_display_peek_event(display : GdkDisplay*) : GdkEvent*
  fun gdk_display_put_event(display : GdkDisplay*, event : GdkEvent*) : Void
  fun gdk_display_has_pending(display : GdkDisplay*) : Gboolean
  fun gdk_display_set_double_click_time(display : GdkDisplay*, msec : Guint) : Void
  fun gdk_display_set_double_click_distance(display : GdkDisplay*, distance : Guint) : Void
  fun gdk_display_get_default : GdkDisplay*
  fun gdk_display_get_pointer(display : GdkDisplay*, screen : GdkScreen**, x : Gint*, y : Gint*, mask : GdkModifierType*) : Void
  fun gdk_display_get_window_at_pointer(display : GdkDisplay*, win_x : Gint*, win_y : Gint*) : GdkWindow*
  fun gdk_display_warp_pointer(display : GdkDisplay*, screen : GdkScreen*, x : Gint, y : Gint) : Void
  fun gdk_display_open_default_libgtk_only : GdkDisplay*
  fun gdk_display_supports_cursor_alpha(display : GdkDisplay*) : Gboolean
  fun gdk_display_supports_cursor_color(display : GdkDisplay*) : Gboolean
  fun gdk_display_get_default_cursor_size(display : GdkDisplay*) : Guint
  fun gdk_display_get_maximal_cursor_size(display : GdkDisplay*, width : Guint*, height : Guint*) : Void
  fun gdk_display_get_default_group(display : GdkDisplay*) : GdkWindow*
  fun gdk_display_supports_selection_notification(display : GdkDisplay*) : Gboolean
  fun gdk_display_request_selection_notification(display : GdkDisplay*, selection : GdkAtom) : Gboolean
  fun gdk_display_supports_clipboard_persistence(display : GdkDisplay*) : Gboolean
  fun gdk_display_store_clipboard(display : GdkDisplay*, clipboard_window : GdkWindow*, time_ : Guint32, targets : GdkAtom*, n_targets : Gint) : Void
  fun gdk_display_supports_shapes(display : GdkDisplay*) : Gboolean
  fun gdk_display_supports_input_shapes(display : GdkDisplay*) : Gboolean
  fun gdk_display_supports_composite(display : GdkDisplay*) : Gboolean
  fun gdk_display_notify_startup_complete(display : GdkDisplay*, startup_id : Gchar*) : Void
  fun gdk_display_get_device_manager(display : GdkDisplay*) : GdkDeviceManager*
  fun gdk_display_get_app_launch_context(display : GdkDisplay*) : GdkAppLaunchContext*
  fun gdk_display_get_default_seat(display : GdkDisplay*) : GdkSeat*
  fun gdk_display_list_seats(display : GdkDisplay*) : GList*
  fun gdk_screen_get_type : GType
  fun gdk_screen_get_system_visual(screen : GdkScreen*) : GdkVisual*
  fun gdk_screen_get_rgba_visual(screen : GdkScreen*) : GdkVisual*
  fun gdk_screen_is_composited(screen : GdkScreen*) : Gboolean
  fun gdk_screen_get_root_window(screen : GdkScreen*) : GdkWindow*
  fun gdk_screen_get_display(screen : GdkScreen*) : GdkDisplay*
  fun gdk_screen_get_number(screen : GdkScreen*) : Gint
  fun gdk_screen_get_width(screen : GdkScreen*) : Gint
  fun gdk_screen_get_height(screen : GdkScreen*) : Gint
  fun gdk_screen_get_width_mm(screen : GdkScreen*) : Gint
  fun gdk_screen_get_height_mm(screen : GdkScreen*) : Gint
  fun gdk_screen_list_visuals(screen : GdkScreen*) : GList*
  fun gdk_screen_get_toplevel_windows(screen : GdkScreen*) : GList*
  fun gdk_screen_make_display_name(screen : GdkScreen*) : Gchar*
  fun gdk_screen_get_n_monitors(screen : GdkScreen*) : Gint
  fun gdk_screen_get_primary_monitor(screen : GdkScreen*) : Gint
  fun gdk_screen_get_monitor_geometry(screen : GdkScreen*, monitor_num : Gint, dest : GdkRectangle*) : Void
  fun gdk_screen_get_monitor_workarea(screen : GdkScreen*, monitor_num : Gint, dest : GdkRectangle*) : Void
  fun gdk_screen_get_monitor_at_point(screen : GdkScreen*, x : Gint, y : Gint) : Gint
  fun gdk_screen_get_monitor_at_window(screen : GdkScreen*, window : GdkWindow*) : Gint
  fun gdk_screen_get_monitor_width_mm(screen : GdkScreen*, monitor_num : Gint) : Gint
  fun gdk_screen_get_monitor_height_mm(screen : GdkScreen*, monitor_num : Gint) : Gint
  fun gdk_screen_get_monitor_plug_name(screen : GdkScreen*, monitor_num : Gint) : Gchar*
  fun gdk_screen_get_monitor_scale_factor(screen : GdkScreen*, monitor_num : Gint) : Gint
  fun gdk_screen_get_default : GdkScreen*
  fun gdk_screen_get_setting(screen : GdkScreen*, name : Gchar*, value : GValue*) : Gboolean
  fun gdk_screen_set_font_options(screen : GdkScreen*, options : CairoFontOptionsT*) : Void
  fun gdk_screen_get_font_options(screen : GdkScreen*) : CairoFontOptionsT*
  fun gdk_screen_set_resolution(screen : GdkScreen*, dpi : Gdouble) : Void
  fun gdk_screen_get_resolution(screen : GdkScreen*) : Gdouble
  fun gdk_screen_get_active_window(screen : GdkScreen*) : GdkWindow*
  fun gdk_screen_get_window_stack(screen : GdkScreen*) : GList*
  fun gdk_app_launch_context_get_type : GType
  fun gdk_app_launch_context_new : GdkAppLaunchContext*
  fun gdk_app_launch_context_set_display(context : GdkAppLaunchContext*, display : GdkDisplay*) : Void
  fun gdk_app_launch_context_set_screen(context : GdkAppLaunchContext*, screen : GdkScreen*) : Void
  fun gdk_app_launch_context_set_desktop(context : GdkAppLaunchContext*, desktop : Gint) : Void
  fun gdk_app_launch_context_set_timestamp(context : GdkAppLaunchContext*, timestamp : Guint32) : Void
  fun gdk_app_launch_context_set_icon(context : GdkAppLaunchContext*, icon : GIcon*) : Void
  fun gdk_app_launch_context_set_icon_name(context : GdkAppLaunchContext*, icon_name : UInt8*) : Void
  fun gdk_color_get_type : GType
  fun gdk_color_copy(color : GdkColor*) : GdkColor*
  fun gdk_color_free(color : GdkColor*) : Void
  fun gdk_color_hash(color : GdkColor*) : Guint
  fun gdk_color_equal(colora : GdkColor*, colorb : GdkColor*) : Gboolean
  fun gdk_color_parse(spec : Gchar*, color : GdkColor*) : Gboolean
  fun gdk_color_to_string(color : GdkColor*) : Gchar*
  fun gdk_rgba_get_type : GType
  fun gdk_rgba_copy(rgba : GdkRGBA*) : GdkRGBA*
  fun gdk_rgba_free(rgba : GdkRGBA*) : Void
  fun gdk_rgba_hash(p : Gconstpointer) : Guint
  fun gdk_rgba_equal(p1 : Gconstpointer, p2 : Gconstpointer) : Gboolean
  fun gdk_rgba_parse(rgba : GdkRGBA*, spec : Gchar*) : Gboolean
  fun gdk_rgba_to_string(rgba : GdkRGBA*) : Gchar*
  fun gdk_pixbuf_error_quark : GQuark
  fun gdk_pixbuf_get_type : GType
  fun gdk_pixbuf_ref(pixbuf : GdkPixbuf*) : GdkPixbuf*
  fun gdk_pixbuf_unref(pixbuf : GdkPixbuf*) : Void
  fun gdk_pixbuf_get_colorspace(pixbuf : GdkPixbuf*) : GdkColorspace
  fun gdk_pixbuf_get_n_channels(pixbuf : GdkPixbuf*) : Int32
  fun gdk_pixbuf_get_has_alpha(pixbuf : GdkPixbuf*) : Gboolean
  fun gdk_pixbuf_get_bits_per_sample(pixbuf : GdkPixbuf*) : Int32
  fun gdk_pixbuf_get_pixels(pixbuf : GdkPixbuf*) : Guchar*
  fun gdk_pixbuf_get_width(pixbuf : GdkPixbuf*) : Int32
  fun gdk_pixbuf_get_height(pixbuf : GdkPixbuf*) : Int32
  fun gdk_pixbuf_get_rowstride(pixbuf : GdkPixbuf*) : Int32
  fun gdk_pixbuf_get_byte_length(pixbuf : GdkPixbuf*) : Gsize
  fun gdk_pixbuf_get_pixels_with_length(pixbuf : GdkPixbuf*, length : Guint*) : Guchar*
  fun gdk_pixbuf_read_pixels(pixbuf : GdkPixbuf*) : Guint8*
  fun gdk_pixbuf_read_pixel_bytes(pixbuf : GdkPixbuf*) : GBytes*
  fun gdk_pixbuf_new(colorspace : GdkColorspace, has_alpha : Gboolean, bits_per_sample : Int32, width : Int32, height : Int32) : GdkPixbuf*
  fun gdk_pixbuf_copy(pixbuf : GdkPixbuf*) : GdkPixbuf*
  fun gdk_pixbuf_new_subpixbuf(src_pixbuf : GdkPixbuf*, src_x : Int32, src_y : Int32, width : Int32, height : Int32) : GdkPixbuf*
  fun gdk_pixbuf_new_from_file(filename : UInt8*, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_file_at_size(filename : UInt8*, width : Int32, height : Int32, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_file_at_scale(filename : UInt8*, width : Int32, height : Int32, preserve_aspect_ratio : Gboolean, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_resource(resource_path : UInt8*, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_resource_at_scale(resource_path : UInt8*, width : Int32, height : Int32, preserve_aspect_ratio : Gboolean, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_data(data : Guchar*, colorspace : GdkColorspace, has_alpha : Gboolean, bits_per_sample : Int32, width : Int32, height : Int32, rowstride : Int32, destroy_fn : GdkPixbufDestroyNotify, destroy_fn_data : Gpointer) : GdkPixbuf*
  fun gdk_pixbuf_new_from_bytes(data : GBytes*, colorspace : GdkColorspace, has_alpha : Gboolean, bits_per_sample : Int32, width : Int32, height : Int32, rowstride : Int32) : GdkPixbuf*
  fun gdk_pixbuf_new_from_xpm_data(data : UInt8**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_inline(data_length : Gint, data : Guint8*, copy_pixels : Gboolean, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_fill(pixbuf : GdkPixbuf*, pixel : Guint32) : Void
  fun gdk_pixbuf_save(pixbuf : GdkPixbuf*, filename : UInt8*, type : UInt8*, error : GError**) : Gboolean
  fun gdk_pixbuf_savev(pixbuf : GdkPixbuf*, filename : UInt8*, type : UInt8*, option_keys : UInt8**, option_values : UInt8**, error : GError**) : Gboolean
  fun gdk_pixbuf_save_to_callback(pixbuf : GdkPixbuf*, save_func : GdkPixbufSaveFunc, user_data : Gpointer, type : UInt8*, error : GError**) : Gboolean
  fun gdk_pixbuf_save_to_callbackv(pixbuf : GdkPixbuf*, save_func : GdkPixbufSaveFunc, user_data : Gpointer, type : UInt8*, option_keys : UInt8**, option_values : UInt8**, error : GError**) : Gboolean
  fun gdk_pixbuf_save_to_buffer(pixbuf : GdkPixbuf*, buffer : Gchar**, buffer_size : Gsize*, type : UInt8*, error : GError**) : Gboolean
  fun gdk_pixbuf_save_to_bufferv(pixbuf : GdkPixbuf*, buffer : Gchar**, buffer_size : Gsize*, type : UInt8*, option_keys : UInt8**, option_values : UInt8**, error : GError**) : Gboolean
  fun gdk_pixbuf_new_from_stream(stream : GInputStream*, cancellable : GCancellable*, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_stream_async(stream : GInputStream*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gdk_pixbuf_new_from_stream_finish(async_result : GAsyncResult*, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_stream_at_scale(stream : GInputStream*, width : Gint, height : Gint, preserve_aspect_ratio : Gboolean, cancellable : GCancellable*, error : GError**) : GdkPixbuf*
  fun gdk_pixbuf_new_from_stream_at_scale_async(stream : GInputStream*, width : Gint, height : Gint, preserve_aspect_ratio : Gboolean, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gdk_pixbuf_save_to_stream(pixbuf : GdkPixbuf*, stream : GOutputStream*, type : UInt8*, cancellable : GCancellable*, error : GError**) : Gboolean
  fun gdk_pixbuf_save_to_stream_async(pixbuf : GdkPixbuf*, stream : GOutputStream*, type : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gdk_pixbuf_save_to_stream_finish(async_result : GAsyncResult*, error : GError**) : Gboolean
  fun gdk_pixbuf_add_alpha(pixbuf : GdkPixbuf*, substitute_color : Gboolean, r : Guchar, g : Guchar, b : Guchar) : GdkPixbuf*
  fun gdk_pixbuf_copy_area(src_pixbuf : GdkPixbuf*, src_x : Int32, src_y : Int32, width : Int32, height : Int32, dest_pixbuf : GdkPixbuf*, dest_x : Int32, dest_y : Int32) : Void
  fun gdk_pixbuf_saturate_and_pixelate(src : GdkPixbuf*, dest : GdkPixbuf*, saturation : Gfloat, pixelate : Gboolean) : Void
  fun gdk_pixbuf_apply_embedded_orientation(src : GdkPixbuf*) : GdkPixbuf*
  fun gdk_pixbuf_get_option(pixbuf : GdkPixbuf*, key : Gchar*) : Gchar*
  fun gdk_pixbuf_get_options(pixbuf : GdkPixbuf*) : GHashTable*
  fun gdk_pixbuf_scale(src : GdkPixbuf*, dest : GdkPixbuf*, dest_x : Int32, dest_y : Int32, dest_width : Int32, dest_height : Int32, offset_x : Float64, offset_y : Float64, scale_x : Float64, scale_y : Float64, interp_type : GdkInterpType) : Void
  fun gdk_pixbuf_composite(src : GdkPixbuf*, dest : GdkPixbuf*, dest_x : Int32, dest_y : Int32, dest_width : Int32, dest_height : Int32, offset_x : Float64, offset_y : Float64, scale_x : Float64, scale_y : Float64, interp_type : GdkInterpType, overall_alpha : Int32) : Void
  fun gdk_pixbuf_composite_color(src : GdkPixbuf*, dest : GdkPixbuf*, dest_x : Int32, dest_y : Int32, dest_width : Int32, dest_height : Int32, offset_x : Float64, offset_y : Float64, scale_x : Float64, scale_y : Float64, interp_type : GdkInterpType, overall_alpha : Int32, check_x : Int32, check_y : Int32, check_size : Int32, color1 : Guint32, color2 : Guint32) : Void
  fun gdk_pixbuf_scale_simple(src : GdkPixbuf*, dest_width : Int32, dest_height : Int32, interp_type : GdkInterpType) : GdkPixbuf*
  fun gdk_pixbuf_composite_color_simple(src : GdkPixbuf*, dest_width : Int32, dest_height : Int32, interp_type : GdkInterpType, overall_alpha : Int32, check_size : Int32, color1 : Guint32, color2 : Guint32) : GdkPixbuf*
  fun gdk_pixbuf_rotate_simple(src : GdkPixbuf*, angle : GdkPixbufRotation) : GdkPixbuf*
  fun gdk_pixbuf_flip(src : GdkPixbuf*, horizontal : Gboolean) : GdkPixbuf*
  fun gdk_pixbuf_animation_get_type : GType
  fun gdk_pixbuf_animation_new_from_file(filename : UInt8*, error : GError**) : GdkPixbufAnimation*
  fun gdk_pixbuf_animation_new_from_stream(stream : GInputStream*, cancellable : GCancellable*, error : GError**) : GdkPixbufAnimation*
  fun gdk_pixbuf_animation_new_from_stream_async(stream : GInputStream*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gdk_pixbuf_animation_new_from_stream_finish(async_result : GAsyncResult*, error : GError**) : GdkPixbufAnimation*
  fun gdk_pixbuf_animation_new_from_resource(resource_path : UInt8*, error : GError**) : GdkPixbufAnimation*
  fun gdk_pixbuf_animation_ref(animation : GdkPixbufAnimation*) : GdkPixbufAnimation*
  fun gdk_pixbuf_animation_unref(animation : GdkPixbufAnimation*) : Void
  fun gdk_pixbuf_animation_get_width(animation : GdkPixbufAnimation*) : Int32
  fun gdk_pixbuf_animation_get_height(animation : GdkPixbufAnimation*) : Int32
  fun gdk_pixbuf_animation_is_static_image(animation : GdkPixbufAnimation*) : Gboolean
  fun gdk_pixbuf_animation_get_static_image(animation : GdkPixbufAnimation*) : GdkPixbuf*
  fun gdk_pixbuf_animation_get_iter(animation : GdkPixbufAnimation*, start_time : GTimeVal*) : GdkPixbufAnimationIter*
  fun gdk_pixbuf_animation_iter_get_type : GType
  fun gdk_pixbuf_animation_iter_get_delay_time(iter : GdkPixbufAnimationIter*) : Int32
  fun gdk_pixbuf_animation_iter_get_pixbuf(iter : GdkPixbufAnimationIter*) : GdkPixbuf*
  fun gdk_pixbuf_animation_iter_on_currently_loading_frame(iter : GdkPixbufAnimationIter*) : Gboolean
  fun gdk_pixbuf_animation_iter_advance(iter : GdkPixbufAnimationIter*, current_time : GTimeVal*) : Gboolean
  fun gdk_pixbuf_simple_anim_get_type : GType
  fun gdk_pixbuf_simple_anim_iter_get_type : GType
  fun gdk_pixbuf_simple_anim_new(width : Gint, height : Gint, rate : Gfloat) : GdkPixbufSimpleAnim*
  fun gdk_pixbuf_simple_anim_add_frame(animation : GdkPixbufSimpleAnim*, pixbuf : GdkPixbuf*) : Void
  fun gdk_pixbuf_simple_anim_set_loop(animation : GdkPixbufSimpleAnim*, loop : Gboolean) : Void
  fun gdk_pixbuf_simple_anim_get_loop(animation : GdkPixbufSimpleAnim*) : Gboolean
  fun gdk_pixbuf_format_get_type : GType
  fun gdk_pixbuf_get_formats : GSList*
  fun gdk_pixbuf_format_get_name(format : GdkPixbufFormat*) : Gchar*
  fun gdk_pixbuf_format_get_description(format : GdkPixbufFormat*) : Gchar*
  fun gdk_pixbuf_format_get_mime_types(format : GdkPixbufFormat*) : Gchar**
  fun gdk_pixbuf_format_get_extensions(format : GdkPixbufFormat*) : Gchar**
  fun gdk_pixbuf_format_is_writable(format : GdkPixbufFormat*) : Gboolean
  fun gdk_pixbuf_format_is_scalable(format : GdkPixbufFormat*) : Gboolean
  fun gdk_pixbuf_format_is_disabled(format : GdkPixbufFormat*) : Gboolean
  fun gdk_pixbuf_format_set_disabled(format : GdkPixbufFormat*, disabled : Gboolean) : Void
  fun gdk_pixbuf_format_get_license(format : GdkPixbufFormat*) : Gchar*
  fun gdk_pixbuf_get_file_info(filename : Gchar*, width : Gint*, height : Gint*) : GdkPixbufFormat*
  fun gdk_pixbuf_get_file_info_async(filename : Gchar*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gdk_pixbuf_get_file_info_finish(async_result : GAsyncResult*, width : Gint*, height : Gint*, error : GError**) : GdkPixbufFormat*
  fun gdk_pixbuf_format_copy(format : GdkPixbufFormat*) : GdkPixbufFormat*
  fun gdk_pixbuf_format_free(format : GdkPixbufFormat*) : Void
  fun gdk_pixbuf_loader_get_type : GType
  fun gdk_pixbuf_loader_new : GdkPixbufLoader*
  fun gdk_pixbuf_loader_new_with_type(image_type : UInt8*, error : GError**) : GdkPixbufLoader*
  fun gdk_pixbuf_loader_new_with_mime_type(mime_type : UInt8*, error : GError**) : GdkPixbufLoader*
  fun gdk_pixbuf_loader_set_size(loader : GdkPixbufLoader*, width : Int32, height : Int32) : Void
  fun gdk_pixbuf_loader_write(loader : GdkPixbufLoader*, buf : Guchar*, count : Gsize, error : GError**) : Gboolean
  fun gdk_pixbuf_loader_write_bytes(loader : GdkPixbufLoader*, buffer : GBytes*, error : GError**) : Gboolean
  fun gdk_pixbuf_loader_get_pixbuf(loader : GdkPixbufLoader*) : GdkPixbuf*
  fun gdk_pixbuf_loader_get_animation(loader : GdkPixbufLoader*) : GdkPixbufAnimation*
  fun gdk_pixbuf_loader_close(loader : GdkPixbufLoader*, error : GError**) : Gboolean
  fun gdk_pixbuf_loader_get_format(loader : GdkPixbufLoader*) : GdkPixbufFormat*
  fun gdk_pixbuf_alpha_mode_get_type : GType
  fun gdk_colorspace_get_type : GType
  fun gdk_pixbuf_error_get_type : GType
  fun gdk_interp_type_get_type : GType
  fun gdk_pixbuf_rotation_get_type : GType
  fun glib_autoptr_cleanup_gdk_pixbuf(_ptr : GdkPixbuf**) : Void
  fun glib_autoptr_cleanup_gdk_pixbuf_animation(_ptr : GdkPixbufAnimation**) : Void
  fun glib_autoptr_cleanup_gdk_pixbuf_animation_iter(_ptr : GdkPixbufAnimationIter**) : Void
  fun glib_autoptr_cleanup_gdk_pixbuf_loader(_ptr : GdkPixbufLoader**) : Void
  fun glib_autoptr_cleanup_gdk_pixbuf_simple_anim(_ptr : GdkPixbufSimpleAnim**) : Void
  fun gdk_pixbuf_get_from_window(window : GdkWindow*, src_x : Gint, src_y : Gint, width : Gint, height : Gint) : GdkPixbuf*
  fun gdk_pixbuf_get_from_surface(surface : CairoSurfaceT*, src_x : Gint, src_y : Gint, width : Gint, height : Gint) : GdkPixbuf*
  fun pango_cairo_font_map_get_type : GType
  fun pango_cairo_font_map_new : PangoFontMap*
  fun pango_cairo_font_map_new_for_font_type(fonttype : CairoFontTypeT) : PangoFontMap*
  fun pango_cairo_font_map_get_default : PangoFontMap*
  fun pango_cairo_font_map_set_default(fontmap : PangoCairoFontMap*) : Void
  fun pango_cairo_font_map_get_font_type(fontmap : PangoCairoFontMap*) : CairoFontTypeT
  fun pango_cairo_font_map_set_resolution(fontmap : PangoCairoFontMap*, dpi : Float64) : Void
  fun pango_cairo_font_map_get_resolution(fontmap : PangoCairoFontMap*) : Float64
  fun pango_cairo_font_map_create_context(fontmap : PangoCairoFontMap*) : PangoContext*
  fun pango_cairo_font_get_type : GType
  fun pango_cairo_font_get_scaled_font(font : PangoCairoFont*) : CairoScaledFontT*
  fun pango_cairo_update_context(cr : CairoT*, context : PangoContext*) : Void
  fun pango_cairo_context_set_font_options(context : PangoContext*, options : CairoFontOptionsT*) : Void
  fun pango_cairo_context_get_font_options(context : PangoContext*) : CairoFontOptionsT*
  fun pango_cairo_context_set_resolution(context : PangoContext*, dpi : Float64) : Void
  fun pango_cairo_context_get_resolution(context : PangoContext*) : Float64
  fun pango_cairo_context_set_shape_renderer(context : PangoContext*, func : PangoCairoShapeRendererFunc, data : Gpointer, dnotify : GDestroyNotify) : Void
  fun pango_cairo_context_get_shape_renderer(context : PangoContext*, data : Gpointer*) : PangoCairoShapeRendererFunc
  fun pango_cairo_create_context(cr : CairoT*) : PangoContext*
  fun pango_cairo_create_layout(cr : CairoT*) : PangoLayout*
  fun pango_cairo_update_layout(cr : CairoT*, layout : PangoLayout*) : Void
  fun pango_cairo_show_glyph_string(cr : CairoT*, font : PangoFont*, glyphs : PangoGlyphString*) : Void
  fun pango_cairo_show_glyph_item(cr : CairoT*, text : UInt8*, glyph_item : PangoGlyphItem*) : Void
  fun pango_cairo_show_layout_line(cr : CairoT*, line : PangoLayoutLine*) : Void
  fun pango_cairo_show_layout(cr : CairoT*, layout : PangoLayout*) : Void
  fun pango_cairo_show_error_underline(cr : CairoT*, x : Float64, y : Float64, width : Float64, height : Float64) : Void
  fun pango_cairo_glyph_string_path(cr : CairoT*, font : PangoFont*, glyphs : PangoGlyphString*) : Void
  fun pango_cairo_layout_line_path(cr : CairoT*, line : PangoLayoutLine*) : Void
  fun pango_cairo_layout_path(cr : CairoT*, layout : PangoLayout*) : Void
  fun pango_cairo_error_underline_path(cr : CairoT*, x : Float64, y : Float64, width : Float64, height : Float64) : Void
  fun gdk_cairo_create(window : GdkWindow*) : CairoT*
  fun gdk_cairo_get_clip_rectangle(cr : CairoT*, rect : GdkRectangle*) : Gboolean
  fun gdk_cairo_set_source_rgba(cr : CairoT*, rgba : GdkRGBA*) : Void
  fun gdk_cairo_set_source_pixbuf(cr : CairoT*, pixbuf : GdkPixbuf*, pixbuf_x : Gdouble, pixbuf_y : Gdouble) : Void
  fun gdk_cairo_set_source_window(cr : CairoT*, window : GdkWindow*, x : Gdouble, y : Gdouble) : Void
  fun gdk_cairo_rectangle(cr : CairoT*, rectangle : GdkRectangle*) : Void
  fun gdk_cairo_region(cr : CairoT*, region : CairoRegionT*) : Void
  fun gdk_cairo_region_create_from_surface(surface : CairoSurfaceT*) : CairoRegionT*
  fun gdk_cairo_set_source_color(cr : CairoT*, color : GdkColor*) : Void
  fun gdk_cairo_surface_create_from_pixbuf(pixbuf : GdkPixbuf*, scale : Int32, for_window : GdkWindow*) : CairoSurfaceT*
  fun gdk_cairo_draw_from_gl(cr : CairoT*, window : GdkWindow*, source : Int32, source_type : Int32, buffer_scale : Int32, x : Int32, y : Int32, width : Int32, height : Int32) : Void
  fun gdk_cursor_get_type : GType
  fun gdk_cursor_new_for_display(display : GdkDisplay*, cursor_type : GdkCursorType) : GdkCursor*
  fun gdk_cursor_new(cursor_type : GdkCursorType) : GdkCursor*
  fun gdk_cursor_new_from_pixbuf(display : GdkDisplay*, pixbuf : GdkPixbuf*, x : Gint, y : Gint) : GdkCursor*
  fun gdk_cursor_new_from_surface(display : GdkDisplay*, surface : CairoSurfaceT*, x : Gdouble, y : Gdouble) : GdkCursor*
  fun gdk_cursor_new_from_name(display : GdkDisplay*, name : Gchar*) : GdkCursor*
  fun gdk_cursor_get_display(cursor : GdkCursor*) : GdkDisplay*
  fun gdk_cursor_ref(cursor : GdkCursor*) : GdkCursor*
  fun gdk_cursor_unref(cursor : GdkCursor*) : Void
  fun gdk_cursor_get_image(cursor : GdkCursor*) : GdkPixbuf*
  fun gdk_cursor_get_surface(cursor : GdkCursor*, x_hot : Gdouble*, y_hot : Gdouble*) : CairoSurfaceT*
  fun gdk_cursor_get_cursor_type(cursor : GdkCursor*) : GdkCursorType
  fun gdk_display_manager_get_type : GType
  fun gdk_display_manager_get : GdkDisplayManager*
  fun gdk_display_manager_get_default_display(manager : GdkDisplayManager*) : GdkDisplay*
  fun gdk_display_manager_set_default_display(manager : GdkDisplayManager*, display : GdkDisplay*) : Void
  fun gdk_display_manager_list_displays(manager : GdkDisplayManager*) : GSList*
  fun gdk_display_manager_open_display(manager : GdkDisplayManager*, name : Gchar*) : GdkDisplay*
  fun gdk_cursor_type_get_type : GType
  fun gdk_input_source_get_type : GType
  fun gdk_input_mode_get_type : GType
  fun gdk_axis_use_get_type : GType
  fun gdk_device_type_get_type : GType
  fun gdk_drag_action_get_type : GType
  fun gdk_drag_cancel_reason_get_type : GType
  fun gdk_drag_protocol_get_type : GType
  fun gdk_filter_return_get_type : GType
  fun gdk_event_type_get_type : GType
  fun gdk_visibility_state_get_type : GType
  fun gdk_touchpad_gesture_phase_get_type : GType
  fun gdk_scroll_direction_get_type : GType
  fun gdk_notify_type_get_type : GType
  fun gdk_crossing_mode_get_type : GType
  fun gdk_property_state_get_type : GType
  fun gdk_window_state_get_type : GType
  fun gdk_setting_action_get_type : GType
  fun gdk_owner_change_get_type : GType
  fun gdk_frame_clock_phase_get_type : GType
  fun gdk_prop_mode_get_type : GType
  fun gdk_seat_capabilities_get_type : GType
  fun gdk_byte_order_get_type : GType
  fun gdk_modifier_type_get_type : GType
  fun gdk_modifier_intent_get_type : GType
  fun gdk_status_get_type : GType
  fun gdk_grab_status_get_type : GType
  fun gdk_grab_ownership_get_type : GType
  fun gdk_event_mask_get_type : GType
  fun gdk_gl_error_get_type : GType
  fun gdk_window_type_hint_get_type : GType
  fun gdk_visual_type_get_type : GType
  fun gdk_window_window_class_get_type : GType
  fun gdk_window_type_get_type : GType
  fun gdk_window_attributes_type_get_type : GType
  fun gdk_window_hints_get_type : GType
  fun gdk_wm_decoration_get_type : GType
  fun gdk_wm_function_get_type : GType
  fun gdk_gravity_get_type : GType
  fun gdk_window_edge_get_type : GType
  fun gdk_fullscreen_mode_get_type : GType
  fun gdk_gl_error_quark : GQuark
  fun gdk_gl_context_get_type : GType
  fun gdk_gl_context_get_display(context : GdkGLContext*) : GdkDisplay*
  fun gdk_gl_context_get_window(context : GdkGLContext*) : GdkWindow*
  fun gdk_gl_context_get_shared_context(context : GdkGLContext*) : GdkGLContext*
  fun gdk_gl_context_get_version(context : GdkGLContext*, major : Int32*, minor : Int32*) : Void
  fun gdk_gl_context_is_legacy(context : GdkGLContext*) : Gboolean
  fun gdk_gl_context_set_required_version(context : GdkGLContext*, major : Int32, minor : Int32) : Void
  fun gdk_gl_context_get_required_version(context : GdkGLContext*, major : Int32*, minor : Int32*) : Void
  fun gdk_gl_context_set_debug_enabled(context : GdkGLContext*, enabled : Gboolean) : Void
  fun gdk_gl_context_get_debug_enabled(context : GdkGLContext*) : Gboolean
  fun gdk_gl_context_set_forward_compatible(context : GdkGLContext*, compatible : Gboolean) : Void
  fun gdk_gl_context_get_forward_compatible(context : GdkGLContext*) : Gboolean
  fun gdk_gl_context_realize(context : GdkGLContext*, error : GError**) : Gboolean
  fun gdk_gl_context_make_current(context : GdkGLContext*) : Void
  fun gdk_gl_context_get_current : GdkGLContext*
  fun gdk_gl_context_clear_current : Void
  fun gdk_keymap_get_type : GType
  fun gdk_keymap_get_default : GdkKeymap*
  fun gdk_keymap_get_for_display(display : GdkDisplay*) : GdkKeymap*
  fun gdk_keymap_lookup_key(keymap : GdkKeymap*, key : GdkKeymapKey*) : Guint
  fun gdk_keymap_translate_keyboard_state(keymap : GdkKeymap*, hardware_keycode : Guint, state : GdkModifierType, group : Gint, keyval : Guint*, effective_group : Gint*, level : Gint*, consumed_modifiers : GdkModifierType*) : Gboolean
  fun gdk_keymap_get_entries_for_keyval(keymap : GdkKeymap*, keyval : Guint, keys : GdkKeymapKey**, n_keys : Gint*) : Gboolean
  fun gdk_keymap_get_entries_for_keycode(keymap : GdkKeymap*, hardware_keycode : Guint, keys : GdkKeymapKey**, keyvals : Guint**, n_entries : Gint*) : Gboolean
  fun gdk_keymap_get_direction(keymap : GdkKeymap*) : PangoDirection
  fun gdk_keymap_have_bidi_layouts(keymap : GdkKeymap*) : Gboolean
  fun gdk_keymap_get_caps_lock_state(keymap : GdkKeymap*) : Gboolean
  fun gdk_keymap_get_num_lock_state(keymap : GdkKeymap*) : Gboolean
  fun gdk_keymap_get_scroll_lock_state(keymap : GdkKeymap*) : Gboolean
  fun gdk_keymap_get_modifier_state(keymap : GdkKeymap*) : Guint
  fun gdk_keymap_add_virtual_modifiers(keymap : GdkKeymap*, state : GdkModifierType*) : Void
  fun gdk_keymap_map_virtual_modifiers(keymap : GdkKeymap*, state : GdkModifierType*) : Gboolean
  fun gdk_keymap_get_modifier_mask(keymap : GdkKeymap*, intent : GdkModifierIntent) : GdkModifierType
  fun gdk_keyval_name(keyval : Guint) : Gchar*
  fun gdk_keyval_from_name(keyval_name : Gchar*) : Guint
  fun gdk_keyval_convert_case(symbol : Guint, lower : Guint*, upper : Guint*) : Void
  fun gdk_keyval_to_upper(keyval : Guint) : Guint
  fun gdk_keyval_to_lower(keyval : Guint) : Guint
  fun gdk_keyval_is_upper(keyval : Guint) : Gboolean
  fun gdk_keyval_is_lower(keyval : Guint) : Gboolean
  fun gdk_keyval_to_unicode(keyval : Guint) : Guint32
  fun gdk_unicode_to_keyval(wc : Guint32) : Guint
  fun gdk_parse_args(argc : Gint*, argv : Gchar***) : Void
  fun gdk_init(argc : Gint*, argv : Gchar***) : Void
  fun gdk_init_check(argc : Gint*, argv : Gchar***) : Gboolean
  fun gdk_add_option_entries_libgtk_only(group : GOptionGroup*) : Void
  fun gdk_pre_parse_libgtk_only : Void
  fun gdk_get_program_class : Gchar*
  fun gdk_set_program_class(program_class : Gchar*) : Void
  fun gdk_notify_startup_complete : Void
  fun gdk_notify_startup_complete_with_id(startup_id : Gchar*) : Void
  fun gdk_error_trap_push : Void
  fun gdk_error_trap_pop : Gint
  fun gdk_error_trap_pop_ignored : Void
  fun gdk_get_display_arg_name : Gchar*
  fun gdk_get_display : Gchar*
  fun gdk_pointer_grab(window : GdkWindow*, owner_events : Gboolean, event_mask : GdkEventMask, confine_to : GdkWindow*, cursor : GdkCursor*, time_ : Guint32) : GdkGrabStatus
  fun gdk_keyboard_grab(window : GdkWindow*, owner_events : Gboolean, time_ : Guint32) : GdkGrabStatus
  fun gdk_pointer_ungrab(time_ : Guint32) : Void
  fun gdk_keyboard_ungrab(time_ : Guint32) : Void
  fun gdk_pointer_is_grabbed : Gboolean
  fun gdk_screen_width : Gint
  fun gdk_screen_height : Gint
  fun gdk_screen_width_mm : Gint
  fun gdk_screen_height_mm : Gint
  fun gdk_set_double_click_time(msec : Guint) : Void
  fun gdk_beep : Void
  fun gdk_flush : Void
  fun gdk_disable_multidevice : Void
  fun gdk_set_allowed_backends(backends : Gchar*) : Void
  fun gdk_pango_context_get_for_screen(screen : GdkScreen*) : PangoContext*
  fun gdk_pango_context_get : PangoContext*
  fun gdk_pango_layout_line_get_clip_region(line : PangoLayoutLine*, x_origin : Gint, y_origin : Gint, index_ranges : Gint*, n_ranges : Gint) : CairoRegionT*
  fun gdk_pango_layout_get_clip_region(layout : PangoLayout*, x_origin : Gint, y_origin : Gint, index_ranges : Gint*, n_ranges : Gint) : CairoRegionT*
  fun gdk_atom_intern(atom_name : Gchar*, only_if_exists : Gboolean) : GdkAtom
  fun gdk_atom_intern_static_string(atom_name : Gchar*) : GdkAtom
  fun gdk_atom_name(atom : GdkAtom) : Gchar*
  fun gdk_property_get(window : GdkWindow*, property : GdkAtom, type : GdkAtom, offset : Gulong, length : Gulong, pdelete : Gint, actual_property_type : GdkAtom*, actual_format : Gint*, actual_length : Gint*, data : Guchar**) : Gboolean
  fun gdk_property_change(window : GdkWindow*, property : GdkAtom, type : GdkAtom, format : Gint, mode : GdkPropMode, data : Guchar*, nelements : Gint) : Void
  fun gdk_property_delete(window : GdkWindow*, property : GdkAtom) : Void
  fun gdk_text_property_to_utf8_list_for_display(display : GdkDisplay*, encoding : GdkAtom, format : Gint, text : Guchar*, length : Gint, list : Gchar***) : Gint
  fun gdk_utf8_to_string_target(str : Gchar*) : Gchar*
  fun gdk_rectangle_intersect(src1 : GdkRectangle*, src2 : GdkRectangle*, dest : GdkRectangle*) : Gboolean
  fun gdk_rectangle_union(src1 : GdkRectangle*, src2 : GdkRectangle*, dest : GdkRectangle*) : Void
  fun gdk_rectangle_equal(rect1 : GdkRectangle*, rect2 : GdkRectangle*) : Gboolean
  fun gdk_rectangle_get_type : GType
  fun gdk_selection_owner_set(owner : GdkWindow*, selection : GdkAtom, time_ : Guint32, send_event : Gboolean) : Gboolean
  fun gdk_selection_owner_get(selection : GdkAtom) : GdkWindow*
  fun gdk_selection_owner_set_for_display(display : GdkDisplay*, owner : GdkWindow*, selection : GdkAtom, time_ : Guint32, send_event : Gboolean) : Gboolean
  fun gdk_selection_owner_get_for_display(display : GdkDisplay*, selection : GdkAtom) : GdkWindow*
  fun gdk_selection_convert(requestor : GdkWindow*, selection : GdkAtom, target : GdkAtom, time_ : Guint32) : Void
  fun gdk_selection_property_get(requestor : GdkWindow*, data : Guchar**, prop_type : GdkAtom*, prop_format : Gint*) : Gint
  fun gdk_selection_send_notify(requestor : GdkWindow*, selection : GdkAtom, target : GdkAtom, property : GdkAtom, time_ : Guint32) : Void
  fun gdk_selection_send_notify_for_display(display : GdkDisplay*, requestor : GdkWindow*, selection : GdkAtom, target : GdkAtom, property : GdkAtom, time_ : Guint32) : Void
  fun gdk_test_render_sync(window : GdkWindow*) : Void
  fun gdk_test_simulate_key(window : GdkWindow*, x : Gint, y : Gint, keyval : Guint, modifiers : GdkModifierType, key_pressrelease : GdkEventType) : Gboolean
  fun gdk_test_simulate_button(window : GdkWindow*, x : Gint, y : Gint, button : Guint, modifiers : GdkModifierType, button_pressrelease : GdkEventType) : Gboolean
  fun gdk_threads_init : Void
  fun gdk_threads_enter : Void
  fun gdk_threads_leave : Void
  fun gdk_threads_set_lock_functions(enter_fn : GCallback, leave_fn : GCallback) : Void
  fun gdk_threads_add_idle_full(priority : Gint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun gdk_threads_add_idle(function : GSourceFunc, data : Gpointer) : Guint
  fun gdk_threads_add_timeout_full(priority : Gint, interval : Guint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun gdk_threads_add_timeout(interval : Guint, function : GSourceFunc, data : Gpointer) : Guint
  fun gdk_threads_add_timeout_seconds_full(priority : Gint, interval : Guint, function : GSourceFunc, data : Gpointer, notify : GDestroyNotify) : Guint
  fun gdk_threads_add_timeout_seconds(interval : Guint, function : GSourceFunc, data : Gpointer) : Guint
  fun gdk_visual_get_type : GType
  fun gdk_visual_get_best_depth : Gint
  fun gdk_visual_get_best_type : GdkVisualType
  fun gdk_visual_get_system : GdkVisual*
  fun gdk_visual_get_best : GdkVisual*
  fun gdk_visual_get_best_with_depth(depth : Gint) : GdkVisual*
  fun gdk_visual_get_best_with_type(visual_type : GdkVisualType) : GdkVisual*
  fun gdk_visual_get_best_with_both(depth : Gint, visual_type : GdkVisualType) : GdkVisual*
  fun gdk_query_depths(depths : Gint**, count : Gint*) : Void
  fun gdk_query_visual_types(visual_types : GdkVisualType**, count : Gint*) : Void
  fun gdk_list_visuals : GList*
  fun gdk_visual_get_screen(visual : GdkVisual*) : GdkScreen*
  fun gdk_visual_get_visual_type(visual : GdkVisual*) : GdkVisualType
  fun gdk_visual_get_depth(visual : GdkVisual*) : Gint
  fun gdk_visual_get_byte_order(visual : GdkVisual*) : GdkByteOrder
  fun gdk_visual_get_colormap_size(visual : GdkVisual*) : Gint
  fun gdk_visual_get_bits_per_rgb(visual : GdkVisual*) : Gint
  fun gdk_visual_get_red_pixel_details(visual : GdkVisual*, mask : Guint32*, shift : Gint*, precision : Gint*) : Void
  fun gdk_visual_get_green_pixel_details(visual : GdkVisual*, mask : Guint32*, shift : Gint*, precision : Gint*) : Void
  fun gdk_visual_get_blue_pixel_details(visual : GdkVisual*, mask : Guint32*, shift : Gint*, precision : Gint*) : Void
  fun glib_autoptr_cleanup_gdk_app_launch_context(_ptr : GdkAppLaunchContext**) : Void
  fun glib_autoptr_cleanup_gdk_cursor(_ptr : GdkCursor**) : Void
  fun glib_autoptr_cleanup_gdk_device(_ptr : GdkDevice**) : Void
  fun glib_autoptr_cleanup_gdk_device_manager(_ptr : GdkDeviceManager**) : Void
  fun glib_autoptr_cleanup_gdk_display(_ptr : GdkDisplay**) : Void
  fun glib_autoptr_cleanup_gdk_display_manager(_ptr : GdkDisplayManager**) : Void
  fun glib_autoptr_cleanup_gdk_drag_context(_ptr : GdkDragContext**) : Void
  fun glib_autoptr_cleanup_gdk_frame_clock(_ptr : GdkFrameClock**) : Void
  fun glib_autoptr_cleanup_gdk_gl_context(_ptr : GdkGLContext**) : Void
  fun glib_autoptr_cleanup_gdk_keymap(_ptr : GdkKeymap**) : Void
  fun glib_autoptr_cleanup_gdk_screen(_ptr : GdkScreen**) : Void
  fun glib_autoptr_cleanup_gdk_visual(_ptr : GdkVisual**) : Void
  fun glib_autoptr_cleanup_gdk_window(_ptr : GdkWindow**) : Void
  fun glib_autoptr_cleanup_gdk_event(_ptr : GdkEvent**) : Void
  fun glib_autoptr_cleanup_gdk_frame_timings(_ptr : GdkFrameTimings**) : Void
  fun glib_autoptr_cleanup_gdk_rgba(_ptr : GdkRGBA**) : Void
  fun gtk_accel_group_get_type : GType
  fun gtk_accel_group_new : GtkAccelGroup*
  fun gtk_accel_group_get_is_locked(accel_group : GtkAccelGroup*) : Gboolean
  fun gtk_accel_group_get_modifier_mask(accel_group : GtkAccelGroup*) : GdkModifierType
  fun gtk_accel_group_lock(accel_group : GtkAccelGroup*) : Void
  fun gtk_accel_group_unlock(accel_group : GtkAccelGroup*) : Void
  fun gtk_accel_group_connect(accel_group : GtkAccelGroup*, accel_key : Guint, accel_mods : GdkModifierType, accel_flags : GtkAccelFlags, closure : GClosure*) : Void
  fun gtk_accel_group_connect_by_path(accel_group : GtkAccelGroup*, accel_path : Gchar*, closure : GClosure*) : Void
  fun gtk_accel_group_disconnect(accel_group : GtkAccelGroup*, closure : GClosure*) : Gboolean
  fun gtk_accel_group_disconnect_key(accel_group : GtkAccelGroup*, accel_key : Guint, accel_mods : GdkModifierType) : Gboolean
  fun gtk_accel_group_activate(accel_group : GtkAccelGroup*, accel_quark : GQuark, acceleratable : GObject*, accel_key : Guint, accel_mods : GdkModifierType) : Gboolean
  fun _gtk_accel_group_attach(accel_group : GtkAccelGroup*, object : GObject*) : Void
  fun _gtk_accel_group_detach(accel_group : GtkAccelGroup*, object : GObject*) : Void
  fun gtk_accel_groups_activate(object : GObject*, accel_key : Guint, accel_mods : GdkModifierType) : Gboolean
  fun gtk_accel_groups_from_object(object : GObject*) : GSList*
  fun gtk_accel_group_find(accel_group : GtkAccelGroup*, find_func : GtkAccelGroupFindFunc, data : Gpointer) : GtkAccelKey*
  fun gtk_accel_group_from_accel_closure(closure : GClosure*) : GtkAccelGroup*
  fun gtk_accelerator_valid(keyval : Guint, modifiers : GdkModifierType) : Gboolean
  fun gtk_accelerator_parse(accelerator : Gchar*, accelerator_key : Guint*, accelerator_mods : GdkModifierType*) : Void
  fun gtk_accelerator_parse_with_keycode(accelerator : Gchar*, accelerator_key : Guint*, accelerator_codes : Guint**, accelerator_mods : GdkModifierType*) : Void
  fun gtk_accelerator_name(accelerator_key : Guint, accelerator_mods : GdkModifierType) : Gchar*
  fun gtk_accelerator_name_with_keycode(display : GdkDisplay*, accelerator_key : Guint, keycode : Guint, accelerator_mods : GdkModifierType) : Gchar*
  fun gtk_accelerator_get_label(accelerator_key : Guint, accelerator_mods : GdkModifierType) : Gchar*
  fun gtk_accelerator_get_label_with_keycode(display : GdkDisplay*, accelerator_key : Guint, keycode : Guint, accelerator_mods : GdkModifierType) : Gchar*
  fun gtk_accelerator_set_default_mod_mask(default_mod_mask : GdkModifierType) : Void
  fun gtk_accelerator_get_default_mod_mask : GdkModifierType
  fun gtk_accel_group_query(accel_group : GtkAccelGroup*, accel_key : Guint, accel_mods : GdkModifierType, n_entries : Guint*) : GtkAccelGroupEntry*
  fun glib_autoptr_cleanup_gtk_accel_group(_ptr : GtkAccelGroup**) : Void
  fun gtk_border_get_type : GType
  fun gtk_border_new : GtkBorder*
  fun gtk_border_copy(border_ : GtkBorder*) : GtkBorder*
  fun gtk_border_free(border_ : GtkBorder*) : Void
  fun glib_autoptr_cleanup_gtk_border(_ptr : GtkBorder**) : Void
  fun atk_get_major_version : Guint
  fun atk_get_minor_version : Guint
  fun atk_get_micro_version : Guint
  fun atk_get_binary_age : Guint
  fun atk_get_interface_age : Guint
  fun atk_state_type_register(name : Gchar*) : AtkStateType
  fun atk_state_type_get_name(type : AtkStateType) : Gchar*
  fun atk_state_type_for_name(name : Gchar*) : AtkStateType
  fun atk_object_get_type : GType
  fun atk_implementor_get_type : GType
  fun atk_implementor_ref_accessible(implementor : AtkImplementor*) : AtkObject*
  fun atk_object_get_name(accessible : AtkObject*) : Gchar*
  fun atk_object_get_description(accessible : AtkObject*) : Gchar*
  fun atk_object_get_parent(accessible : AtkObject*) : AtkObject*
  fun atk_object_peek_parent(accessible : AtkObject*) : AtkObject*
  fun atk_object_get_n_accessible_children(accessible : AtkObject*) : Gint
  fun atk_object_ref_accessible_child(accessible : AtkObject*, i : Gint) : AtkObject*
  fun atk_object_ref_relation_set(accessible : AtkObject*) : AtkRelationSet*
  fun atk_object_get_role(accessible : AtkObject*) : AtkRole
  fun atk_object_get_layer(accessible : AtkObject*) : AtkLayer
  fun atk_object_get_mdi_zorder(accessible : AtkObject*) : Gint
  fun atk_object_get_attributes(accessible : AtkObject*) : AtkAttributeSet*
  fun atk_object_ref_state_set(accessible : AtkObject*) : AtkStateSet*
  fun atk_object_get_index_in_parent(accessible : AtkObject*) : Gint
  fun atk_object_set_name(accessible : AtkObject*, name : Gchar*) : Void
  fun atk_object_set_description(accessible : AtkObject*, description : Gchar*) : Void
  fun atk_object_set_parent(accessible : AtkObject*, parent : AtkObject*) : Void
  fun atk_object_set_role(accessible : AtkObject*, role : AtkRole) : Void
  fun atk_object_connect_property_change_handler(accessible : AtkObject*, handler : AtkPropertyChangeHandler*) : Guint
  fun atk_object_remove_property_change_handler(accessible : AtkObject*, handler_id : Guint) : Void
  fun atk_object_notify_state_change(accessible : AtkObject*, state : AtkState, value : Gboolean) : Void
  fun atk_object_initialize(accessible : AtkObject*, data : Gpointer) : Void
  fun atk_role_get_name(role : AtkRole) : Gchar*
  fun atk_role_for_name(name : Gchar*) : AtkRole
  fun atk_object_add_relationship(object : AtkObject*, relationship : AtkRelationType, target : AtkObject*) : Gboolean
  fun atk_object_remove_relationship(object : AtkObject*, relationship : AtkRelationType, target : AtkObject*) : Gboolean
  fun atk_role_get_localized_name(role : AtkRole) : Gchar*
  fun atk_role_register(name : Gchar*) : AtkRole
  fun atk_object_get_object_locale(accessible : AtkObject*) : Gchar*
  fun atk_action_get_type : GType
  fun atk_action_do_action(action : AtkAction*, i : Gint) : Gboolean
  fun atk_action_get_n_actions(action : AtkAction*) : Gint
  fun atk_action_get_description(action : AtkAction*, i : Gint) : Gchar*
  fun atk_action_get_name(action : AtkAction*, i : Gint) : Gchar*
  fun atk_action_get_keybinding(action : AtkAction*, i : Gint) : Gchar*
  fun atk_action_set_description(action : AtkAction*, i : Gint, desc : Gchar*) : Gboolean
  fun atk_action_get_localized_name(action : AtkAction*, i : Gint) : Gchar*
  fun atk_util_get_type : GType
  fun atk_add_focus_tracker(focus_tracker : AtkEventListener) : Guint
  fun atk_remove_focus_tracker(tracker_id : Guint) : Void
  fun atk_focus_tracker_init(init : AtkEventListenerInit) : Void
  fun atk_focus_tracker_notify(object : AtkObject*) : Void
  fun atk_add_global_event_listener(listener : GSignalEmissionHook, event_type : Gchar*) : Guint
  fun atk_remove_global_event_listener(listener_id : Guint) : Void
  fun atk_add_key_event_listener(listener : AtkKeySnoopFunc, data : Gpointer) : Guint
  fun atk_remove_key_event_listener(listener_id : Guint) : Void
  fun atk_get_root : AtkObject*
  fun atk_get_focus_object : AtkObject*
  fun atk_get_toolkit_name : Gchar*
  fun atk_get_toolkit_version : Gchar*
  fun atk_get_version : Gchar*
  fun atk_rectangle_get_type : GType
  fun atk_component_get_type : GType
  fun atk_component_add_focus_handler(component : AtkComponent*, handler : AtkFocusHandler) : Guint
  fun atk_component_contains(component : AtkComponent*, x : Gint, y : Gint, coord_type : AtkCoordType) : Gboolean
  fun atk_component_ref_accessible_at_point(component : AtkComponent*, x : Gint, y : Gint, coord_type : AtkCoordType) : AtkObject*
  fun atk_component_get_extents(component : AtkComponent*, x : Gint*, y : Gint*, width : Gint*, height : Gint*, coord_type : AtkCoordType) : Void
  fun atk_component_get_position(component : AtkComponent*, x : Gint*, y : Gint*, coord_type : AtkCoordType) : Void
  fun atk_component_get_size(component : AtkComponent*, width : Gint*, height : Gint*) : Void
  fun atk_component_get_layer(component : AtkComponent*) : AtkLayer
  fun atk_component_get_mdi_zorder(component : AtkComponent*) : Gint
  fun atk_component_grab_focus(component : AtkComponent*) : Gboolean
  fun atk_component_remove_focus_handler(component : AtkComponent*, handler_id : Guint) : Void
  fun atk_component_set_extents(component : AtkComponent*, x : Gint, y : Gint, width : Gint, height : Gint, coord_type : AtkCoordType) : Gboolean
  fun atk_component_set_position(component : AtkComponent*, x : Gint, y : Gint, coord_type : AtkCoordType) : Gboolean
  fun atk_component_set_size(component : AtkComponent*, width : Gint, height : Gint) : Gboolean
  fun atk_component_get_alpha(component : AtkComponent*) : Gdouble
  fun atk_document_get_type : GType
  fun atk_document_get_document_type(document : AtkDocument*) : Gchar*
  fun atk_document_get_document(document : AtkDocument*) : Gpointer
  fun atk_document_get_locale(document : AtkDocument*) : Gchar*
  fun atk_document_get_attributes(document : AtkDocument*) : AtkAttributeSet*
  fun atk_document_get_attribute_value(document : AtkDocument*, attribute_name : Gchar*) : Gchar*
  fun atk_document_set_attribute_value(document : AtkDocument*, attribute_name : Gchar*, attribute_value : Gchar*) : Gboolean
  fun atk_document_get_current_page_number(document : AtkDocument*) : Gint
  fun atk_document_get_page_count(document : AtkDocument*) : Gint
  fun atk_text_attribute_register(name : Gchar*) : AtkTextAttribute
  fun atk_text_range_get_type : GType
  fun atk_text_get_type : GType
  fun atk_text_get_text(text : AtkText*, start_offset : Gint, end_offset : Gint) : Gchar*
  fun atk_text_get_character_at_offset(text : AtkText*, offset : Gint) : Gunichar
  fun atk_text_get_text_after_offset(text : AtkText*, offset : Gint, boundary_type : AtkTextBoundary, start_offset : Gint*, end_offset : Gint*) : Gchar*
  fun atk_text_get_text_at_offset(text : AtkText*, offset : Gint, boundary_type : AtkTextBoundary, start_offset : Gint*, end_offset : Gint*) : Gchar*
  fun atk_text_get_text_before_offset(text : AtkText*, offset : Gint, boundary_type : AtkTextBoundary, start_offset : Gint*, end_offset : Gint*) : Gchar*
  fun atk_text_get_string_at_offset(text : AtkText*, offset : Gint, granularity : AtkTextGranularity, start_offset : Gint*, end_offset : Gint*) : Gchar*
  fun atk_text_get_caret_offset(text : AtkText*) : Gint
  fun atk_text_get_character_extents(text : AtkText*, offset : Gint, x : Gint*, y : Gint*, width : Gint*, height : Gint*, coords : AtkCoordType) : Void
  fun atk_text_get_run_attributes(text : AtkText*, offset : Gint, start_offset : Gint*, end_offset : Gint*) : AtkAttributeSet*
  fun atk_text_get_default_attributes(text : AtkText*) : AtkAttributeSet*
  fun atk_text_get_character_count(text : AtkText*) : Gint
  fun atk_text_get_offset_at_point(text : AtkText*, x : Gint, y : Gint, coords : AtkCoordType) : Gint
  fun atk_text_get_n_selections(text : AtkText*) : Gint
  fun atk_text_get_selection(text : AtkText*, selection_num : Gint, start_offset : Gint*, end_offset : Gint*) : Gchar*
  fun atk_text_add_selection(text : AtkText*, start_offset : Gint, end_offset : Gint) : Gboolean
  fun atk_text_remove_selection(text : AtkText*, selection_num : Gint) : Gboolean
  fun atk_text_set_selection(text : AtkText*, selection_num : Gint, start_offset : Gint, end_offset : Gint) : Gboolean
  fun atk_text_set_caret_offset(text : AtkText*, offset : Gint) : Gboolean
  fun atk_text_get_range_extents(text : AtkText*, start_offset : Gint, end_offset : Gint, coord_type : AtkCoordType, rect : AtkTextRectangle*) : Void
  fun atk_text_get_bounded_ranges(text : AtkText*, rect : AtkTextRectangle*, coord_type : AtkCoordType, x_clip_type : AtkTextClipType, y_clip_type : AtkTextClipType) : AtkTextRange**
  fun atk_text_free_ranges(ranges : AtkTextRange**) : Void
  fun atk_attribute_set_free(attrib_set : AtkAttributeSet*) : Void
  fun atk_text_attribute_get_name(attr : AtkTextAttribute) : Gchar*
  fun atk_text_attribute_for_name(name : Gchar*) : AtkTextAttribute
  fun atk_text_attribute_get_value(attr : AtkTextAttribute, index_ : Gint) : Gchar*
  fun atk_editable_text_get_type : GType
  fun atk_editable_text_set_run_attributes(text : AtkEditableText*, attrib_set : AtkAttributeSet*, start_offset : Gint, end_offset : Gint) : Gboolean
  fun atk_editable_text_set_text_contents(text : AtkEditableText*, string : Gchar*) : Void
  fun atk_editable_text_insert_text(text : AtkEditableText*, string : Gchar*, length : Gint, position : Gint*) : Void
  fun atk_editable_text_copy_text(text : AtkEditableText*, start_pos : Gint, end_pos : Gint) : Void
  fun atk_editable_text_cut_text(text : AtkEditableText*, start_pos : Gint, end_pos : Gint) : Void
  fun atk_editable_text_delete_text(text : AtkEditableText*, start_pos : Gint, end_pos : Gint) : Void
  fun atk_editable_text_paste_text(text : AtkEditableText*, position : Gint) : Void
  fun atk_hyperlink_state_flags_get_type : GType
  fun atk_role_get_type : GType
  fun atk_layer_get_type : GType
  fun atk_relation_type_get_type : GType
  fun atk_state_type_get_type : GType
  fun atk_text_attribute_get_type : GType
  fun atk_text_boundary_get_type : GType
  fun atk_text_granularity_get_type : GType
  fun atk_text_clip_type_get_type : GType
  fun atk_key_event_type_get_type : GType
  fun atk_coord_type_get_type : GType
  fun atk_value_type_get_type : GType
  fun atk_gobject_accessible_get_type : GType
  fun atk_gobject_accessible_for_object(obj : GObject*) : AtkObject*
  fun atk_gobject_accessible_get_object(obj : AtkGObjectAccessible*) : GObject*
  fun atk_hyperlink_get_type : GType
  fun atk_hyperlink_get_uri(link_ : AtkHyperlink*, i : Gint) : Gchar*
  fun atk_hyperlink_get_object(link_ : AtkHyperlink*, i : Gint) : AtkObject*
  fun atk_hyperlink_get_end_index(link_ : AtkHyperlink*) : Gint
  fun atk_hyperlink_get_start_index(link_ : AtkHyperlink*) : Gint
  fun atk_hyperlink_is_valid(link_ : AtkHyperlink*) : Gboolean
  fun atk_hyperlink_is_inline(link_ : AtkHyperlink*) : Gboolean
  fun atk_hyperlink_get_n_anchors(link_ : AtkHyperlink*) : Gint
  fun atk_hyperlink_is_selected_link(link_ : AtkHyperlink*) : Gboolean
  fun atk_hyperlink_impl_get_type : GType
  fun atk_hyperlink_impl_get_hyperlink(impl : AtkHyperlinkImpl*) : AtkHyperlink*
  fun atk_hypertext_get_type : GType
  fun atk_hypertext_get_link(hypertext : AtkHypertext*, link_index : Gint) : AtkHyperlink*
  fun atk_hypertext_get_n_links(hypertext : AtkHypertext*) : Gint
  fun atk_hypertext_get_link_index(hypertext : AtkHypertext*, char_index : Gint) : Gint
  fun atk_image_get_type : GType
  fun atk_image_get_image_description(image : AtkImage*) : Gchar*
  fun atk_image_get_image_size(image : AtkImage*, width : Gint*, height : Gint*) : Void
  fun atk_image_set_image_description(image : AtkImage*, description : Gchar*) : Gboolean
  fun atk_image_get_image_position(image : AtkImage*, x : Gint*, y : Gint*, coord_type : AtkCoordType) : Void
  fun atk_image_get_image_locale(image : AtkImage*) : Gchar*
  fun atk_no_op_object_get_type : GType
  fun atk_no_op_object_new(obj : GObject*) : AtkObject*
  fun atk_object_factory_get_type : GType
  fun atk_object_factory_create_accessible(factory : AtkObjectFactory*, obj : GObject*) : AtkObject*
  fun atk_object_factory_invalidate(factory : AtkObjectFactory*) : Void
  fun atk_object_factory_get_accessible_type(factory : AtkObjectFactory*) : GType
  fun atk_no_op_object_factory_get_type : GType
  fun atk_no_op_object_factory_new : AtkObjectFactory*
  fun atk_plug_get_type : GType
  fun atk_plug_new : AtkObject*
  fun atk_plug_get_id(plug : AtkPlug*) : Gchar*
  fun atk_range_get_type : GType
  fun atk_range_copy(src : AtkRange*) : AtkRange*
  fun atk_range_free(range : AtkRange*) : Void
  fun atk_range_get_lower_limit(range : AtkRange*) : Gdouble
  fun atk_range_get_upper_limit(range : AtkRange*) : Gdouble
  fun atk_range_get_description(range : AtkRange*) : Gchar*
  fun atk_range_new(lower_limit : Gdouble, upper_limit : Gdouble, description : Gchar*) : AtkRange*
  fun atk_registry_get_type : GType
  fun atk_registry_set_factory_type(registry : AtkRegistry*, type : GType, factory_type : GType) : Void
  fun atk_registry_get_factory_type(registry : AtkRegistry*, type : GType) : GType
  fun atk_registry_get_factory(registry : AtkRegistry*, type : GType) : AtkObjectFactory*
  fun atk_get_default_registry : AtkRegistry*
  fun atk_relation_get_type : GType
  fun atk_relation_type_register(name : Gchar*) : AtkRelationType
  fun atk_relation_type_get_name(type : AtkRelationType) : Gchar*
  fun atk_relation_type_for_name(name : Gchar*) : AtkRelationType
  fun atk_relation_new(targets : AtkObject**, n_targets : Gint, relationship : AtkRelationType) : AtkRelation*
  fun atk_relation_get_relation_type(relation : AtkRelation*) : AtkRelationType
  fun atk_relation_get_target(relation : AtkRelation*) : GPtrArray*
  fun atk_relation_add_target(relation : AtkRelation*, target : AtkObject*) : Void
  fun atk_relation_remove_target(relation : AtkRelation*, target : AtkObject*) : Gboolean
  fun atk_relation_set_get_type : GType
  fun atk_relation_set_new : AtkRelationSet*
  fun atk_relation_set_contains(set : AtkRelationSet*, relationship : AtkRelationType) : Gboolean
  fun atk_relation_set_contains_target(set : AtkRelationSet*, relationship : AtkRelationType, target : AtkObject*) : Gboolean
  fun atk_relation_set_remove(set : AtkRelationSet*, relation : AtkRelation*) : Void
  fun atk_relation_set_add(set : AtkRelationSet*, relation : AtkRelation*) : Void
  fun atk_relation_set_get_n_relations(set : AtkRelationSet*) : Gint
  fun atk_relation_set_get_relation(set : AtkRelationSet*, i : Gint) : AtkRelation*
  fun atk_relation_set_get_relation_by_type(set : AtkRelationSet*, relationship : AtkRelationType) : AtkRelation*
  fun atk_relation_set_add_relation_by_type(set : AtkRelationSet*, relationship : AtkRelationType, target : AtkObject*) : Void
  fun atk_selection_get_type : GType
  fun atk_selection_add_selection(selection : AtkSelection*, i : Gint) : Gboolean
  fun atk_selection_clear_selection(selection : AtkSelection*) : Gboolean
  fun atk_selection_ref_selection(selection : AtkSelection*, i : Gint) : AtkObject*
  fun atk_selection_get_selection_count(selection : AtkSelection*) : Gint
  fun atk_selection_is_child_selected(selection : AtkSelection*, i : Gint) : Gboolean
  fun atk_selection_remove_selection(selection : AtkSelection*, i : Gint) : Gboolean
  fun atk_selection_select_all_selection(selection : AtkSelection*) : Gboolean
  fun atk_socket_get_type : GType
  fun atk_socket_new : AtkObject*
  fun atk_socket_embed(obj : AtkSocket*, plug_id : Gchar*) : Void
  fun atk_socket_is_occupied(obj : AtkSocket*) : Gboolean
  fun atk_state_set_get_type : GType
  fun atk_state_set_new : AtkStateSet*
  fun atk_state_set_is_empty(set : AtkStateSet*) : Gboolean
  fun atk_state_set_add_state(set : AtkStateSet*, type : AtkStateType) : Gboolean
  fun atk_state_set_add_states(set : AtkStateSet*, types : AtkStateType*, n_types : Gint) : Void
  fun atk_state_set_clear_states(set : AtkStateSet*) : Void
  fun atk_state_set_contains_state(set : AtkStateSet*, type : AtkStateType) : Gboolean
  fun atk_state_set_contains_states(set : AtkStateSet*, types : AtkStateType*, n_types : Gint) : Gboolean
  fun atk_state_set_remove_state(set : AtkStateSet*, type : AtkStateType) : Gboolean
  fun atk_state_set_and_sets(set : AtkStateSet*, compare_set : AtkStateSet*) : AtkStateSet*
  fun atk_state_set_or_sets(set : AtkStateSet*, compare_set : AtkStateSet*) : AtkStateSet*
  fun atk_state_set_xor_sets(set : AtkStateSet*, compare_set : AtkStateSet*) : AtkStateSet*
  fun atk_streamable_content_get_type : GType
  fun atk_streamable_content_get_n_mime_types(streamable : AtkStreamableContent*) : Gint
  fun atk_streamable_content_get_mime_type(streamable : AtkStreamableContent*, i : Gint) : Gchar*
  fun atk_streamable_content_get_stream(streamable : AtkStreamableContent*, mime_type : Gchar*) : GIOChannel*
  fun atk_streamable_content_get_uri(streamable : AtkStreamableContent*, mime_type : Gchar*) : Gchar*
  fun atk_table_get_type : GType
  fun atk_table_ref_at(table : AtkTable*, row : Gint, column : Gint) : AtkObject*
  fun atk_table_get_index_at(table : AtkTable*, row : Gint, column : Gint) : Gint
  fun atk_table_get_column_at_index(table : AtkTable*, index_ : Gint) : Gint
  fun atk_table_get_row_at_index(table : AtkTable*, index_ : Gint) : Gint
  fun atk_table_get_n_columns(table : AtkTable*) : Gint
  fun atk_table_get_n_rows(table : AtkTable*) : Gint
  fun atk_table_get_column_extent_at(table : AtkTable*, row : Gint, column : Gint) : Gint
  fun atk_table_get_row_extent_at(table : AtkTable*, row : Gint, column : Gint) : Gint
  fun atk_table_get_caption(table : AtkTable*) : AtkObject*
  fun atk_table_get_column_description(table : AtkTable*, column : Gint) : Gchar*
  fun atk_table_get_column_header(table : AtkTable*, column : Gint) : AtkObject*
  fun atk_table_get_row_description(table : AtkTable*, row : Gint) : Gchar*
  fun atk_table_get_row_header(table : AtkTable*, row : Gint) : AtkObject*
  fun atk_table_get_summary(table : AtkTable*) : AtkObject*
  fun atk_table_set_caption(table : AtkTable*, caption : AtkObject*) : Void
  fun atk_table_set_column_description(table : AtkTable*, column : Gint, description : Gchar*) : Void
  fun atk_table_set_column_header(table : AtkTable*, column : Gint, header : AtkObject*) : Void
  fun atk_table_set_row_description(table : AtkTable*, row : Gint, description : Gchar*) : Void
  fun atk_table_set_row_header(table : AtkTable*, row : Gint, header : AtkObject*) : Void
  fun atk_table_set_summary(table : AtkTable*, accessible : AtkObject*) : Void
  fun atk_table_get_selected_columns(table : AtkTable*, selected : Gint**) : Gint
  fun atk_table_get_selected_rows(table : AtkTable*, selected : Gint**) : Gint
  fun atk_table_is_column_selected(table : AtkTable*, column : Gint) : Gboolean
  fun atk_table_is_row_selected(table : AtkTable*, row : Gint) : Gboolean
  fun atk_table_is_selected(table : AtkTable*, row : Gint, column : Gint) : Gboolean
  fun atk_table_add_row_selection(table : AtkTable*, row : Gint) : Gboolean
  fun atk_table_remove_row_selection(table : AtkTable*, row : Gint) : Gboolean
  fun atk_table_add_column_selection(table : AtkTable*, column : Gint) : Gboolean
  fun atk_table_remove_column_selection(table : AtkTable*, column : Gint) : Gboolean
  fun atk_table_cell_get_type : GType
  fun atk_table_cell_get_column_span(cell : AtkTableCell*) : Gint
  fun atk_table_cell_get_column_header_cells(cell : AtkTableCell*) : GPtrArray*
  fun atk_table_cell_get_position(cell : AtkTableCell*, row : Gint*, column : Gint*) : Gboolean
  fun atk_table_cell_get_row_span(cell : AtkTableCell*) : Gint
  fun atk_table_cell_get_row_header_cells(cell : AtkTableCell*) : GPtrArray*
  fun atk_table_cell_get_row_column_span(cell : AtkTableCell*, row : Gint*, column : Gint*, row_span : Gint*, column_span : Gint*) : Gboolean
  fun atk_table_cell_get_table(cell : AtkTableCell*) : AtkObject*
  fun atk_misc_get_type : GType
  fun atk_misc_threads_enter(misc : AtkMisc*) : Void
  fun atk_misc_threads_leave(misc : AtkMisc*) : Void
  fun atk_misc_get_instance : AtkMisc*
  fun atk_value_get_type : GType
  fun atk_value_get_current_value(obj : AtkValue*, value : GValue*) : Void
  fun atk_value_get_maximum_value(obj : AtkValue*, value : GValue*) : Void
  fun atk_value_get_minimum_value(obj : AtkValue*, value : GValue*) : Void
  fun atk_value_set_current_value(obj : AtkValue*, value : GValue*) : Gboolean
  fun atk_value_get_minimum_increment(obj : AtkValue*, value : GValue*) : Void
  fun atk_value_get_value_and_text(obj : AtkValue*, value : Gdouble*, text : Gchar**) : Void
  fun atk_value_get_range(obj : AtkValue*) : AtkRange*
  fun atk_value_get_increment(obj : AtkValue*) : Gdouble
  fun atk_value_get_sub_ranges(obj : AtkValue*) : GSList*
  fun atk_value_set_value(obj : AtkValue*, new_value : Gdouble) : Void
  fun atk_value_type_get_name(value_type : AtkValueType) : Gchar*
  fun atk_value_type_get_localized_name(value_type : AtkValueType) : Gchar*
  fun atk_window_get_type : GType
  fun gtk_widget_get_type : GType
  fun gtk_widget_new(type : GType, first_property_name : Gchar*) : GtkWidget*
  fun gtk_widget_destroy(widget : GtkWidget*) : Void
  fun gtk_widget_destroyed(widget : GtkWidget*, widget_pointer : GtkWidget**) : Void
  fun gtk_widget_unparent(widget : GtkWidget*) : Void
  fun gtk_widget_show(widget : GtkWidget*) : Void
  fun gtk_widget_hide(widget : GtkWidget*) : Void
  fun gtk_widget_show_now(widget : GtkWidget*) : Void
  fun gtk_widget_show_all(widget : GtkWidget*) : Void
  fun gtk_widget_set_no_show_all(widget : GtkWidget*, no_show_all : Gboolean) : Void
  fun gtk_widget_get_no_show_all(widget : GtkWidget*) : Gboolean
  fun gtk_widget_map(widget : GtkWidget*) : Void
  fun gtk_widget_unmap(widget : GtkWidget*) : Void
  fun gtk_widget_realize(widget : GtkWidget*) : Void
  fun gtk_widget_unrealize(widget : GtkWidget*) : Void
  fun gtk_widget_draw(widget : GtkWidget*, cr : CairoT*) : Void
  fun gtk_widget_queue_draw(widget : GtkWidget*) : Void
  fun gtk_widget_queue_draw_area(widget : GtkWidget*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_widget_queue_draw_region(widget : GtkWidget*, region : CairoRegionT*) : Void
  fun gtk_widget_queue_resize(widget : GtkWidget*) : Void
  fun gtk_widget_queue_resize_no_redraw(widget : GtkWidget*) : Void
  fun gtk_widget_queue_allocate(widget : GtkWidget*) : Void
  fun gtk_widget_get_frame_clock(widget : GtkWidget*) : GdkFrameClock*
  fun gtk_widget_size_request(widget : GtkWidget*, requisition : GtkRequisition*) : Void
  fun gtk_widget_size_allocate(widget : GtkWidget*, allocation : GtkAllocation*) : Void
  fun gtk_widget_size_allocate_with_baseline(widget : GtkWidget*, allocation : GtkAllocation*, baseline : Gint) : Void
  fun gtk_widget_get_request_mode(widget : GtkWidget*) : GtkSizeRequestMode
  fun gtk_widget_get_preferred_width(widget : GtkWidget*, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_widget_get_preferred_height_for_width(widget : GtkWidget*, width : Gint, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_widget_get_preferred_height(widget : GtkWidget*, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_widget_get_preferred_width_for_height(widget : GtkWidget*, height : Gint, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_widget_get_preferred_height_and_baseline_for_width(widget : GtkWidget*, width : Gint, minimum_height : Gint*, natural_height : Gint*, minimum_baseline : Gint*, natural_baseline : Gint*) : Void
  fun gtk_widget_get_preferred_size(widget : GtkWidget*, minimum_size : GtkRequisition*, natural_size : GtkRequisition*) : Void
  fun gtk_widget_get_child_requisition(widget : GtkWidget*, requisition : GtkRequisition*) : Void
  fun gtk_widget_add_accelerator(widget : GtkWidget*, accel_signal : Gchar*, accel_group : GtkAccelGroup*, accel_key : Guint, accel_mods : GdkModifierType, accel_flags : GtkAccelFlags) : Void
  fun gtk_widget_remove_accelerator(widget : GtkWidget*, accel_group : GtkAccelGroup*, accel_key : Guint, accel_mods : GdkModifierType) : Gboolean
  fun gtk_widget_set_accel_path(widget : GtkWidget*, accel_path : Gchar*, accel_group : GtkAccelGroup*) : Void
  fun gtk_widget_list_accel_closures(widget : GtkWidget*) : GList*
  fun gtk_widget_can_activate_accel(widget : GtkWidget*, signal_id : Guint) : Gboolean
  fun gtk_widget_mnemonic_activate(widget : GtkWidget*, group_cycling : Gboolean) : Gboolean
  fun gtk_widget_event(widget : GtkWidget*, event : GdkEvent*) : Gboolean
  fun gtk_widget_send_expose(widget : GtkWidget*, event : GdkEvent*) : Gint
  fun gtk_widget_send_focus_change(widget : GtkWidget*, event : GdkEvent*) : Gboolean
  fun gtk_widget_activate(widget : GtkWidget*) : Gboolean
  fun gtk_widget_reparent(widget : GtkWidget*, new_parent : GtkWidget*) : Void
  fun gtk_widget_intersect(widget : GtkWidget*, area : GdkRectangle*, intersection : GdkRectangle*) : Gboolean
  fun gtk_widget_region_intersect(widget : GtkWidget*, region : CairoRegionT*) : CairoRegionT*
  fun gtk_widget_freeze_child_notify(widget : GtkWidget*) : Void
  fun gtk_widget_child_notify(widget : GtkWidget*, child_property : Gchar*) : Void
  fun gtk_widget_thaw_child_notify(widget : GtkWidget*) : Void
  fun gtk_widget_set_can_focus(widget : GtkWidget*, can_focus : Gboolean) : Void
  fun gtk_widget_get_can_focus(widget : GtkWidget*) : Gboolean
  fun gtk_widget_has_focus(widget : GtkWidget*) : Gboolean
  fun gtk_widget_is_focus(widget : GtkWidget*) : Gboolean
  fun gtk_widget_has_visible_focus(widget : GtkWidget*) : Gboolean
  fun gtk_widget_grab_focus(widget : GtkWidget*) : Void
  fun gtk_widget_set_focus_on_click(widget : GtkWidget*, focus_on_click : Gboolean) : Void
  fun gtk_widget_get_focus_on_click(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_can_default(widget : GtkWidget*, can_default : Gboolean) : Void
  fun gtk_widget_get_can_default(widget : GtkWidget*) : Gboolean
  fun gtk_widget_has_default(widget : GtkWidget*) : Gboolean
  fun gtk_widget_grab_default(widget : GtkWidget*) : Void
  fun gtk_widget_set_receives_default(widget : GtkWidget*, receives_default : Gboolean) : Void
  fun gtk_widget_get_receives_default(widget : GtkWidget*) : Gboolean
  fun gtk_widget_has_grab(widget : GtkWidget*) : Gboolean
  fun gtk_widget_device_is_shadowed(widget : GtkWidget*, device : GdkDevice*) : Gboolean
  fun gtk_widget_set_name(widget : GtkWidget*, name : Gchar*) : Void
  fun gtk_widget_get_name(widget : GtkWidget*) : Gchar*
  fun gtk_widget_set_state(widget : GtkWidget*, state : GtkStateType) : Void
  fun gtk_widget_get_state(widget : GtkWidget*) : GtkStateType
  fun gtk_widget_set_state_flags(widget : GtkWidget*, flags : GtkStateFlags, clear : Gboolean) : Void
  fun gtk_widget_unset_state_flags(widget : GtkWidget*, flags : GtkStateFlags) : Void
  fun gtk_widget_get_state_flags(widget : GtkWidget*) : GtkStateFlags
  fun gtk_widget_set_sensitive(widget : GtkWidget*, sensitive : Gboolean) : Void
  fun gtk_widget_get_sensitive(widget : GtkWidget*) : Gboolean
  fun gtk_widget_is_sensitive(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_visible(widget : GtkWidget*, visible : Gboolean) : Void
  fun gtk_widget_get_visible(widget : GtkWidget*) : Gboolean
  fun gtk_widget_is_visible(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_has_window(widget : GtkWidget*, has_window : Gboolean) : Void
  fun gtk_widget_get_has_window(widget : GtkWidget*) : Gboolean
  fun gtk_widget_is_toplevel(widget : GtkWidget*) : Gboolean
  fun gtk_widget_is_drawable(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_realized(widget : GtkWidget*, realized : Gboolean) : Void
  fun gtk_widget_get_realized(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_mapped(widget : GtkWidget*, mapped : Gboolean) : Void
  fun gtk_widget_get_mapped(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_app_paintable(widget : GtkWidget*, app_paintable : Gboolean) : Void
  fun gtk_widget_get_app_paintable(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_double_buffered(widget : GtkWidget*, double_buffered : Gboolean) : Void
  fun gtk_widget_get_double_buffered(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_redraw_on_allocate(widget : GtkWidget*, redraw_on_allocate : Gboolean) : Void
  fun gtk_widget_set_parent(widget : GtkWidget*, parent : GtkWidget*) : Void
  fun gtk_widget_get_parent(widget : GtkWidget*) : GtkWidget*
  fun gtk_widget_set_parent_window(widget : GtkWidget*, parent_window : GdkWindow*) : Void
  fun gtk_widget_get_parent_window(widget : GtkWidget*) : GdkWindow*
  fun gtk_widget_set_child_visible(widget : GtkWidget*, is_visible : Gboolean) : Void
  fun gtk_widget_get_child_visible(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_window(widget : GtkWidget*, window : GdkWindow*) : Void
  fun gtk_widget_get_window(widget : GtkWidget*) : GdkWindow*
  fun gtk_widget_register_window(widget : GtkWidget*, window : GdkWindow*) : Void
  fun gtk_widget_unregister_window(widget : GtkWidget*, window : GdkWindow*) : Void
  fun gtk_widget_get_allocated_width(widget : GtkWidget*) : Int32
  fun gtk_widget_get_allocated_height(widget : GtkWidget*) : Int32
  fun gtk_widget_get_allocated_baseline(widget : GtkWidget*) : Int32
  fun gtk_widget_get_allocated_size(widget : GtkWidget*, allocation : GtkAllocation*, baseline : Int32*) : Void
  fun gtk_widget_get_allocation(widget : GtkWidget*, allocation : GtkAllocation*) : Void
  fun gtk_widget_set_allocation(widget : GtkWidget*, allocation : GtkAllocation*) : Void
  fun gtk_widget_set_clip(widget : GtkWidget*, clip : GtkAllocation*) : Void
  fun gtk_widget_get_clip(widget : GtkWidget*, clip : GtkAllocation*) : Void
  fun gtk_widget_get_requisition(widget : GtkWidget*, requisition : GtkRequisition*) : Void
  fun gtk_widget_child_focus(widget : GtkWidget*, direction : GtkDirectionType) : Gboolean
  fun gtk_widget_keynav_failed(widget : GtkWidget*, direction : GtkDirectionType) : Gboolean
  fun gtk_widget_error_bell(widget : GtkWidget*) : Void
  fun gtk_widget_set_size_request(widget : GtkWidget*, width : Gint, height : Gint) : Void
  fun gtk_widget_get_size_request(widget : GtkWidget*, width : Gint*, height : Gint*) : Void
  fun gtk_widget_set_events(widget : GtkWidget*, events : Gint) : Void
  fun gtk_widget_add_events(widget : GtkWidget*, events : Gint) : Void
  fun gtk_widget_set_device_events(widget : GtkWidget*, device : GdkDevice*, events : GdkEventMask) : Void
  fun gtk_widget_add_device_events(widget : GtkWidget*, device : GdkDevice*, events : GdkEventMask) : Void
  fun gtk_widget_set_opacity(widget : GtkWidget*, opacity : Float64) : Void
  fun gtk_widget_get_opacity(widget : GtkWidget*) : Float64
  fun gtk_widget_set_device_enabled(widget : GtkWidget*, device : GdkDevice*, enabled : Gboolean) : Void
  fun gtk_widget_get_device_enabled(widget : GtkWidget*, device : GdkDevice*) : Gboolean
  fun gtk_widget_get_toplevel(widget : GtkWidget*) : GtkWidget*
  fun gtk_widget_get_ancestor(widget : GtkWidget*, widget_type : GType) : GtkWidget*
  fun gtk_widget_get_visual(widget : GtkWidget*) : GdkVisual*
  fun gtk_widget_set_visual(widget : GtkWidget*, visual : GdkVisual*) : Void
  fun gtk_widget_get_screen(widget : GtkWidget*) : GdkScreen*
  fun gtk_widget_has_screen(widget : GtkWidget*) : Gboolean
  fun gtk_widget_get_scale_factor(widget : GtkWidget*) : Gint
  fun gtk_widget_get_display(widget : GtkWidget*) : GdkDisplay*
  fun gtk_widget_get_root_window(widget : GtkWidget*) : GdkWindow*
  fun gtk_widget_get_settings(widget : GtkWidget*) : GtkSettings*
  fun gtk_widget_get_clipboard(widget : GtkWidget*, selection : GdkAtom) : GtkClipboard*
  fun gtk_widget_get_hexpand(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_hexpand(widget : GtkWidget*, expand : Gboolean) : Void
  fun gtk_widget_get_hexpand_set(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_hexpand_set(widget : GtkWidget*, set : Gboolean) : Void
  fun gtk_widget_get_vexpand(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_vexpand(widget : GtkWidget*, expand : Gboolean) : Void
  fun gtk_widget_get_vexpand_set(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_vexpand_set(widget : GtkWidget*, set : Gboolean) : Void
  fun gtk_widget_queue_compute_expand(widget : GtkWidget*) : Void
  fun gtk_widget_compute_expand(widget : GtkWidget*, orientation : GtkOrientation) : Gboolean
  fun gtk_widget_get_support_multidevice(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_support_multidevice(widget : GtkWidget*, support_multidevice : Gboolean) : Void
  fun gtk_widget_class_set_accessible_type(widget_class : GtkWidgetClass*, type : GType) : Void
  fun gtk_widget_class_set_accessible_role(widget_class : GtkWidgetClass*, role : AtkRole) : Void
  fun gtk_widget_get_accessible(widget : GtkWidget*) : AtkObject*
  fun gtk_widget_get_halign(widget : GtkWidget*) : GtkAlign
  fun gtk_widget_set_halign(widget : GtkWidget*, align : GtkAlign) : Void
  fun gtk_widget_get_valign(widget : GtkWidget*) : GtkAlign
  fun gtk_widget_get_valign_with_baseline(widget : GtkWidget*) : GtkAlign
  fun gtk_widget_set_valign(widget : GtkWidget*, align : GtkAlign) : Void
  fun gtk_widget_get_margin_left(widget : GtkWidget*) : Gint
  fun gtk_widget_set_margin_left(widget : GtkWidget*, margin : Gint) : Void
  fun gtk_widget_get_margin_right(widget : GtkWidget*) : Gint
  fun gtk_widget_set_margin_right(widget : GtkWidget*, margin : Gint) : Void
  fun gtk_widget_get_margin_start(widget : GtkWidget*) : Gint
  fun gtk_widget_set_margin_start(widget : GtkWidget*, margin : Gint) : Void
  fun gtk_widget_get_margin_end(widget : GtkWidget*) : Gint
  fun gtk_widget_set_margin_end(widget : GtkWidget*, margin : Gint) : Void
  fun gtk_widget_get_margin_top(widget : GtkWidget*) : Gint
  fun gtk_widget_set_margin_top(widget : GtkWidget*, margin : Gint) : Void
  fun gtk_widget_get_margin_bottom(widget : GtkWidget*) : Gint
  fun gtk_widget_set_margin_bottom(widget : GtkWidget*, margin : Gint) : Void
  fun gtk_widget_get_events(widget : GtkWidget*) : Gint
  fun gtk_widget_get_device_events(widget : GtkWidget*, device : GdkDevice*) : GdkEventMask
  fun gtk_widget_get_pointer(widget : GtkWidget*, x : Gint*, y : Gint*) : Void
  fun gtk_widget_is_ancestor(widget : GtkWidget*, ancestor : GtkWidget*) : Gboolean
  fun gtk_widget_translate_coordinates(src_widget : GtkWidget*, dest_widget : GtkWidget*, src_x : Gint, src_y : Gint, dest_x : Gint*, dest_y : Gint*) : Gboolean
  fun gtk_widget_hide_on_delete(widget : GtkWidget*) : Gboolean
  fun gtk_widget_override_color(widget : GtkWidget*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_widget_override_background_color(widget : GtkWidget*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_widget_override_font(widget : GtkWidget*, font_desc : PangoFontDescription*) : Void
  fun gtk_widget_override_symbolic_color(widget : GtkWidget*, name : Gchar*, color : GdkRGBA*) : Void
  fun gtk_widget_override_cursor(widget : GtkWidget*, cursor : GdkRGBA*, secondary_cursor : GdkRGBA*) : Void
  fun gtk_widget_reset_style(widget : GtkWidget*) : Void
  fun gtk_widget_create_pango_context(widget : GtkWidget*) : PangoContext*
  fun gtk_widget_get_pango_context(widget : GtkWidget*) : PangoContext*
  fun gtk_widget_set_font_options(widget : GtkWidget*, options : CairoFontOptionsT*) : Void
  fun gtk_widget_get_font_options(widget : GtkWidget*) : CairoFontOptionsT*
  fun gtk_widget_create_pango_layout(widget : GtkWidget*, text : Gchar*) : PangoLayout*
  fun gtk_widget_render_icon_pixbuf(widget : GtkWidget*, stock_id : Gchar*, size : GtkIconSize) : GdkPixbuf*
  fun gtk_widget_set_composite_name(widget : GtkWidget*, name : Gchar*) : Void
  fun gtk_widget_get_composite_name(widget : GtkWidget*) : Gchar*
  fun gtk_widget_push_composite_child : Void
  fun gtk_widget_pop_composite_child : Void
  fun gtk_widget_class_install_style_property(klass : GtkWidgetClass*, pspec : GParamSpec*) : Void
  fun gtk_widget_class_install_style_property_parser(klass : GtkWidgetClass*, pspec : GParamSpec*, parser : GtkRcPropertyParser) : Void
  fun gtk_widget_class_find_style_property(klass : GtkWidgetClass*, property_name : Gchar*) : GParamSpec*
  fun gtk_widget_class_list_style_properties(klass : GtkWidgetClass*, n_properties : Guint*) : GParamSpec**
  fun gtk_widget_style_get_property(widget : GtkWidget*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_widget_style_get_valist(widget : GtkWidget*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun gtk_widget_style_get(widget : GtkWidget*, first_property_name : Gchar*) : Void
  fun gtk_widget_set_direction(widget : GtkWidget*, dir : GtkTextDirection) : Void
  fun gtk_widget_get_direction(widget : GtkWidget*) : GtkTextDirection
  fun gtk_widget_set_default_direction(dir : GtkTextDirection) : Void
  fun gtk_widget_get_default_direction : GtkTextDirection
  fun gtk_widget_is_composited(widget : GtkWidget*) : Gboolean
  fun gtk_widget_shape_combine_region(widget : GtkWidget*, region : CairoRegionT*) : Void
  fun gtk_widget_input_shape_combine_region(widget : GtkWidget*, region : CairoRegionT*) : Void
  fun gtk_widget_list_mnemonic_labels(widget : GtkWidget*) : GList*
  fun gtk_widget_add_mnemonic_label(widget : GtkWidget*, label : GtkWidget*) : Void
  fun gtk_widget_remove_mnemonic_label(widget : GtkWidget*, label : GtkWidget*) : Void
  fun gtk_widget_set_tooltip_window(widget : GtkWidget*, custom_window : GtkWindow*) : Void
  fun gtk_widget_get_tooltip_window(widget : GtkWidget*) : GtkWindow*
  fun gtk_widget_trigger_tooltip_query(widget : GtkWidget*) : Void
  fun gtk_widget_set_tooltip_text(widget : GtkWidget*, text : Gchar*) : Void
  fun gtk_widget_get_tooltip_text(widget : GtkWidget*) : Gchar*
  fun gtk_widget_set_tooltip_markup(widget : GtkWidget*, markup : Gchar*) : Void
  fun gtk_widget_get_tooltip_markup(widget : GtkWidget*) : Gchar*
  fun gtk_widget_set_has_tooltip(widget : GtkWidget*, has_tooltip : Gboolean) : Void
  fun gtk_widget_get_has_tooltip(widget : GtkWidget*) : Gboolean
  fun gtk_cairo_should_draw_window(cr : CairoT*, window : GdkWindow*) : Gboolean
  fun gtk_cairo_transform_to_window(cr : CairoT*, widget : GtkWidget*, window : GdkWindow*) : Void
  fun gtk_requisition_get_type : GType
  fun gtk_requisition_new : GtkRequisition*
  fun gtk_requisition_copy(requisition : GtkRequisition*) : GtkRequisition*
  fun gtk_requisition_free(requisition : GtkRequisition*) : Void
  fun gtk_widget_in_destruction(widget : GtkWidget*) : Gboolean
  fun gtk_widget_get_style_context(widget : GtkWidget*) : GtkStyleContext*
  fun gtk_widget_get_path(widget : GtkWidget*) : GtkWidgetPath*
  fun gtk_widget_class_set_css_name(widget_class : GtkWidgetClass*, name : UInt8*) : Void
  fun gtk_widget_class_get_css_name(widget_class : GtkWidgetClass*) : UInt8*
  fun gtk_widget_get_modifier_mask(widget : GtkWidget*, intent : GdkModifierIntent) : GdkModifierType
  fun gtk_widget_insert_action_group(widget : GtkWidget*, name : Gchar*, group : GActionGroup*) : Void
  fun gtk_widget_add_tick_callback(widget : GtkWidget*, callback : GtkTickCallback, user_data : Gpointer, notify : GDestroyNotify) : Guint
  fun gtk_widget_remove_tick_callback(widget : GtkWidget*, id : Guint) : Void
  fun gtk_widget_init_template(widget : GtkWidget*) : Void
  fun gtk_widget_get_template_child(widget : GtkWidget*, widget_type : GType, name : Gchar*) : GObject*
  fun gtk_widget_class_set_template(widget_class : GtkWidgetClass*, template_bytes : GBytes*) : Void
  fun gtk_widget_class_set_template_from_resource(widget_class : GtkWidgetClass*, resource_name : Gchar*) : Void
  fun gtk_widget_class_bind_template_callback_full(widget_class : GtkWidgetClass*, callback_name : Gchar*, callback_symbol : GCallback) : Void
  fun gtk_widget_class_set_connect_func(widget_class : GtkWidgetClass*, connect_func : GtkBuilderConnectFunc, connect_data : Gpointer, connect_data_destroy : GDestroyNotify) : Void
  fun gtk_widget_class_bind_template_child_full(widget_class : GtkWidgetClass*, name : Gchar*, internal_child : Gboolean, struct_offset : Gssize) : Void
  fun gtk_widget_get_action_group(widget : GtkWidget*, prefix : Gchar*) : GActionGroup*
  fun gtk_widget_list_action_prefixes(widget : GtkWidget*) : Gchar**
  fun gtk_widget_set_font_map(widget : GtkWidget*, font_map : PangoFontMap*) : Void
  fun gtk_widget_get_font_map(widget : GtkWidget*) : PangoFontMap*
  fun glib_autoptr_cleanup_gtk_widget(_ptr : GtkWidget**) : Void
  fun glib_autoptr_cleanup_gtk_requisition(_ptr : GtkRequisition**) : Void
  fun gtk_application_get_type : GType
  fun gtk_application_new(application_id : Gchar*, flags : GApplicationFlags) : GtkApplication*
  fun gtk_application_add_window(application : GtkApplication*, window : GtkWindow*) : Void
  fun gtk_application_remove_window(application : GtkApplication*, window : GtkWindow*) : Void
  fun gtk_application_get_windows(application : GtkApplication*) : GList*
  fun gtk_application_get_app_menu(application : GtkApplication*) : GMenuModel*
  fun gtk_application_set_app_menu(application : GtkApplication*, app_menu : GMenuModel*) : Void
  fun gtk_application_get_menubar(application : GtkApplication*) : GMenuModel*
  fun gtk_application_set_menubar(application : GtkApplication*, menubar : GMenuModel*) : Void
  fun gtk_application_add_accelerator(application : GtkApplication*, accelerator : Gchar*, action_name : Gchar*, parameter : GVariant*) : Void
  fun gtk_application_remove_accelerator(application : GtkApplication*, action_name : Gchar*, parameter : GVariant*) : Void
  fun gtk_application_inhibit(application : GtkApplication*, window : GtkWindow*, flags : GtkApplicationInhibitFlags, reason : Gchar*) : Guint
  fun gtk_application_uninhibit(application : GtkApplication*, cookie : Guint) : Void
  fun gtk_application_is_inhibited(application : GtkApplication*, flags : GtkApplicationInhibitFlags) : Gboolean
  fun gtk_application_get_window_by_id(application : GtkApplication*, id : Guint) : GtkWindow*
  fun gtk_application_get_active_window(application : GtkApplication*) : GtkWindow*
  fun gtk_application_list_action_descriptions(application : GtkApplication*) : Gchar**
  fun gtk_application_get_accels_for_action(application : GtkApplication*, detailed_action_name : Gchar*) : Gchar**
  fun gtk_application_get_actions_for_accel(application : GtkApplication*, accel : Gchar*) : Gchar**
  fun gtk_application_set_accels_for_action(application : GtkApplication*, detailed_action_name : Gchar*, accels : Gchar**) : Void
  fun gtk_application_prefers_app_menu(application : GtkApplication*) : Gboolean
  fun gtk_application_get_menu_by_id(application : GtkApplication*, id : Gchar*) : GMenu*
  fun glib_autoptr_cleanup_gtk_application(_ptr : GtkApplication**) : Void
  fun gtk_container_get_type : GType
  fun gtk_container_set_border_width(container : GtkContainer*, border_width : Guint) : Void
  fun gtk_container_get_border_width(container : GtkContainer*) : Guint
  fun gtk_container_add(container : GtkContainer*, widget : GtkWidget*) : Void
  fun gtk_container_remove(container : GtkContainer*, widget : GtkWidget*) : Void
  fun gtk_container_set_resize_mode(container : GtkContainer*, resize_mode : GtkResizeMode) : Void
  fun gtk_container_get_resize_mode(container : GtkContainer*) : GtkResizeMode
  fun gtk_container_check_resize(container : GtkContainer*) : Void
  fun gtk_container_foreach(container : GtkContainer*, callback : GtkCallback, callback_data : Gpointer) : Void
  fun gtk_container_get_children(container : GtkContainer*) : GList*
  fun gtk_container_propagate_draw(container : GtkContainer*, child : GtkWidget*, cr : CairoT*) : Void
  fun gtk_container_set_focus_chain(container : GtkContainer*, focusable_widgets : GList*) : Void
  fun gtk_container_get_focus_chain(container : GtkContainer*, focusable_widgets : GList**) : Gboolean
  fun gtk_container_unset_focus_chain(container : GtkContainer*) : Void
  fun gtk_container_set_reallocate_redraws(container : GtkContainer*, needs_redraws : Gboolean) : Void
  fun gtk_container_set_focus_child(container : GtkContainer*, child : GtkWidget*) : Void
  fun gtk_container_get_focus_child(container : GtkContainer*) : GtkWidget*
  fun gtk_container_set_focus_vadjustment(container : GtkContainer*, adjustment : GtkAdjustment*) : Void
  fun gtk_container_get_focus_vadjustment(container : GtkContainer*) : GtkAdjustment*
  fun gtk_container_set_focus_hadjustment(container : GtkContainer*, adjustment : GtkAdjustment*) : Void
  fun gtk_container_get_focus_hadjustment(container : GtkContainer*) : GtkAdjustment*
  fun gtk_container_resize_children(container : GtkContainer*) : Void
  fun gtk_container_child_type(container : GtkContainer*) : GType
  fun gtk_container_class_install_child_property(cclass : GtkContainerClass*, property_id : Guint, pspec : GParamSpec*) : Void
  fun gtk_container_class_install_child_properties(cclass : GtkContainerClass*, n_pspecs : Guint, pspecs : GParamSpec**) : Void
  fun gtk_container_class_find_child_property(cclass : GObjectClass*, property_name : Gchar*) : GParamSpec*
  fun gtk_container_class_list_child_properties(cclass : GObjectClass*, n_properties : Guint*) : GParamSpec**
  fun gtk_container_add_with_properties(container : GtkContainer*, widget : GtkWidget*, first_prop_name : Gchar*) : Void
  fun gtk_container_child_set(container : GtkContainer*, child : GtkWidget*, first_prop_name : Gchar*) : Void
  fun gtk_container_child_get(container : GtkContainer*, child : GtkWidget*, first_prop_name : Gchar*) : Void
  fun gtk_container_child_set_valist(container : GtkContainer*, child : GtkWidget*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun gtk_container_child_get_valist(container : GtkContainer*, child : GtkWidget*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun gtk_container_child_set_property(container : GtkContainer*, child : GtkWidget*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_container_child_get_property(container : GtkContainer*, child : GtkWidget*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_container_child_notify(container : GtkContainer*, child : GtkWidget*, child_property : Gchar*) : Void
  fun gtk_container_child_notify_by_pspec(container : GtkContainer*, child : GtkWidget*, pspec : GParamSpec*) : Void
  fun gtk_container_forall(container : GtkContainer*, callback : GtkCallback, callback_data : Gpointer) : Void
  fun gtk_container_class_handle_border_width(klass : GtkContainerClass*) : Void
  fun gtk_container_get_path_for_child(container : GtkContainer*, child : GtkWidget*) : GtkWidgetPath*
  fun glib_autoptr_cleanup_gtk_container(_ptr : GtkContainer**) : Void
  fun gtk_bin_get_type : GType
  fun gtk_bin_get_child(bin : GtkBin*) : GtkWidget*
  fun _gtk_bin_set_child(bin : GtkBin*, widget : GtkWidget*) : Void
  fun glib_autoptr_cleanup_gtk_bin(_ptr : GtkBin**) : Void
  fun gtk_window_get_type : GType
  fun gtk_window_new(type : GtkWindowType) : GtkWidget*
  fun gtk_window_set_title(window : GtkWindow*, title : Gchar*) : Void
  fun gtk_window_get_title(window : GtkWindow*) : Gchar*
  fun gtk_window_set_wmclass(window : GtkWindow*, wmclass_name : Gchar*, wmclass_class : Gchar*) : Void
  fun gtk_window_set_role(window : GtkWindow*, role : Gchar*) : Void
  fun gtk_window_set_startup_id(window : GtkWindow*, startup_id : Gchar*) : Void
  fun gtk_window_get_role(window : GtkWindow*) : Gchar*
  fun gtk_window_add_accel_group(window : GtkWindow*, accel_group : GtkAccelGroup*) : Void
  fun gtk_window_remove_accel_group(window : GtkWindow*, accel_group : GtkAccelGroup*) : Void
  fun gtk_window_set_position(window : GtkWindow*, position : GtkWindowPosition) : Void
  fun gtk_window_activate_focus(window : GtkWindow*) : Gboolean
  fun gtk_window_set_focus(window : GtkWindow*, focus : GtkWidget*) : Void
  fun gtk_window_get_focus(window : GtkWindow*) : GtkWidget*
  fun gtk_window_set_default(window : GtkWindow*, default_widget : GtkWidget*) : Void
  fun gtk_window_get_default_widget(window : GtkWindow*) : GtkWidget*
  fun gtk_window_activate_default(window : GtkWindow*) : Gboolean
  fun gtk_window_set_transient_for(window : GtkWindow*, parent : GtkWindow*) : Void
  fun gtk_window_get_transient_for(window : GtkWindow*) : GtkWindow*
  fun gtk_window_set_attached_to(window : GtkWindow*, attach_widget : GtkWidget*) : Void
  fun gtk_window_get_attached_to(window : GtkWindow*) : GtkWidget*
  fun gtk_window_set_opacity(window : GtkWindow*, opacity : Gdouble) : Void
  fun gtk_window_get_opacity(window : GtkWindow*) : Gdouble
  fun gtk_window_set_type_hint(window : GtkWindow*, hint : GdkWindowTypeHint) : Void
  fun gtk_window_get_type_hint(window : GtkWindow*) : GdkWindowTypeHint
  fun gtk_window_set_skip_taskbar_hint(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_skip_taskbar_hint(window : GtkWindow*) : Gboolean
  fun gtk_window_set_skip_pager_hint(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_skip_pager_hint(window : GtkWindow*) : Gboolean
  fun gtk_window_set_urgency_hint(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_urgency_hint(window : GtkWindow*) : Gboolean
  fun gtk_window_set_accept_focus(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_accept_focus(window : GtkWindow*) : Gboolean
  fun gtk_window_set_focus_on_map(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_focus_on_map(window : GtkWindow*) : Gboolean
  fun gtk_window_set_destroy_with_parent(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_destroy_with_parent(window : GtkWindow*) : Gboolean
  fun gtk_window_set_hide_titlebar_when_maximized(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_hide_titlebar_when_maximized(window : GtkWindow*) : Gboolean
  fun gtk_window_set_mnemonics_visible(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_mnemonics_visible(window : GtkWindow*) : Gboolean
  fun gtk_window_set_focus_visible(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_focus_visible(window : GtkWindow*) : Gboolean
  fun gtk_window_set_resizable(window : GtkWindow*, resizable : Gboolean) : Void
  fun gtk_window_get_resizable(window : GtkWindow*) : Gboolean
  fun gtk_window_set_gravity(window : GtkWindow*, gravity : GdkGravity) : Void
  fun gtk_window_get_gravity(window : GtkWindow*) : GdkGravity
  fun gtk_window_set_geometry_hints(window : GtkWindow*, geometry_widget : GtkWidget*, geometry : GdkGeometry*, geom_mask : GdkWindowHints) : Void
  fun gtk_window_set_screen(window : GtkWindow*, screen : GdkScreen*) : Void
  fun gtk_window_get_screen(window : GtkWindow*) : GdkScreen*
  fun gtk_window_is_active(window : GtkWindow*) : Gboolean
  fun gtk_window_has_toplevel_focus(window : GtkWindow*) : Gboolean
  fun gtk_window_set_decorated(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_decorated(window : GtkWindow*) : Gboolean
  fun gtk_window_set_deletable(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_get_deletable(window : GtkWindow*) : Gboolean
  fun gtk_window_set_icon_list(window : GtkWindow*, list : GList*) : Void
  fun gtk_window_get_icon_list(window : GtkWindow*) : GList*
  fun gtk_window_set_icon(window : GtkWindow*, icon : GdkPixbuf*) : Void
  fun gtk_window_set_icon_name(window : GtkWindow*, name : Gchar*) : Void
  fun gtk_window_set_icon_from_file(window : GtkWindow*, filename : Gchar*, err : GError**) : Gboolean
  fun gtk_window_get_icon(window : GtkWindow*) : GdkPixbuf*
  fun gtk_window_get_icon_name(window : GtkWindow*) : Gchar*
  fun gtk_window_set_default_icon_list(list : GList*) : Void
  fun gtk_window_get_default_icon_list : GList*
  fun gtk_window_set_default_icon(icon : GdkPixbuf*) : Void
  fun gtk_window_set_default_icon_name(name : Gchar*) : Void
  fun gtk_window_get_default_icon_name : Gchar*
  fun gtk_window_set_default_icon_from_file(filename : Gchar*, err : GError**) : Gboolean
  fun gtk_window_set_auto_startup_notification(setting : Gboolean) : Void
  fun gtk_window_set_modal(window : GtkWindow*, modal : Gboolean) : Void
  fun gtk_window_get_modal(window : GtkWindow*) : Gboolean
  fun gtk_window_list_toplevels : GList*
  fun gtk_window_set_has_user_ref_count(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_add_mnemonic(window : GtkWindow*, keyval : Guint, target : GtkWidget*) : Void
  fun gtk_window_remove_mnemonic(window : GtkWindow*, keyval : Guint, target : GtkWidget*) : Void
  fun gtk_window_mnemonic_activate(window : GtkWindow*, keyval : Guint, modifier : GdkModifierType) : Gboolean
  fun gtk_window_set_mnemonic_modifier(window : GtkWindow*, modifier : GdkModifierType) : Void
  fun gtk_window_get_mnemonic_modifier(window : GtkWindow*) : GdkModifierType
  fun gtk_window_activate_key(window : GtkWindow*, event : GdkEventKey*) : Gboolean
  fun gtk_window_propagate_key_event(window : GtkWindow*, event : GdkEventKey*) : Gboolean
  fun gtk_window_present(window : GtkWindow*) : Void
  fun gtk_window_present_with_time(window : GtkWindow*, timestamp : Guint32) : Void
  fun gtk_window_iconify(window : GtkWindow*) : Void
  fun gtk_window_deiconify(window : GtkWindow*) : Void
  fun gtk_window_stick(window : GtkWindow*) : Void
  fun gtk_window_unstick(window : GtkWindow*) : Void
  fun gtk_window_maximize(window : GtkWindow*) : Void
  fun gtk_window_unmaximize(window : GtkWindow*) : Void
  fun gtk_window_fullscreen(window : GtkWindow*) : Void
  fun gtk_window_unfullscreen(window : GtkWindow*) : Void
  fun gtk_window_fullscreen_on_monitor(window : GtkWindow*, screen : GdkScreen*, monitor : Gint) : Void
  fun gtk_window_close(window : GtkWindow*) : Void
  fun gtk_window_set_keep_above(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_set_keep_below(window : GtkWindow*, setting : Gboolean) : Void
  fun gtk_window_begin_resize_drag(window : GtkWindow*, edge : GdkWindowEdge, button : Gint, root_x : Gint, root_y : Gint, timestamp : Guint32) : Void
  fun gtk_window_begin_move_drag(window : GtkWindow*, button : Gint, root_x : Gint, root_y : Gint, timestamp : Guint32) : Void
  fun gtk_window_set_default_size(window : GtkWindow*, width : Gint, height : Gint) : Void
  fun gtk_window_get_default_size(window : GtkWindow*, width : Gint*, height : Gint*) : Void
  fun gtk_window_resize(window : GtkWindow*, width : Gint, height : Gint) : Void
  fun gtk_window_get_size(window : GtkWindow*, width : Gint*, height : Gint*) : Void
  fun gtk_window_move(window : GtkWindow*, x : Gint, y : Gint) : Void
  fun gtk_window_get_position(window : GtkWindow*, root_x : Gint*, root_y : Gint*) : Void
  fun gtk_window_parse_geometry(window : GtkWindow*, geometry : Gchar*) : Gboolean
  fun gtk_window_set_default_geometry(window : GtkWindow*, width : Gint, height : Gint) : Void
  fun gtk_window_resize_to_geometry(window : GtkWindow*, width : Gint, height : Gint) : Void
  fun gtk_window_get_group(window : GtkWindow*) : GtkWindowGroup*
  fun gtk_window_has_group(window : GtkWindow*) : Gboolean
  fun gtk_window_reshow_with_initial_size(window : GtkWindow*) : Void
  fun gtk_window_get_window_type(window : GtkWindow*) : GtkWindowType
  fun gtk_window_get_application(window : GtkWindow*) : GtkApplication*
  fun gtk_window_set_application(window : GtkWindow*, application : GtkApplication*) : Void
  fun gtk_window_set_has_resize_grip(window : GtkWindow*, value : Gboolean) : Void
  fun gtk_window_get_has_resize_grip(window : GtkWindow*) : Gboolean
  fun gtk_window_resize_grip_is_visible(window : GtkWindow*) : Gboolean
  fun gtk_window_get_resize_grip_area(window : GtkWindow*, rect : GdkRectangle*) : Gboolean
  fun gtk_window_set_titlebar(window : GtkWindow*, titlebar : GtkWidget*) : Void
  fun gtk_window_get_titlebar(window : GtkWindow*) : GtkWidget*
  fun gtk_window_is_maximized(window : GtkWindow*) : Gboolean
  fun gtk_window_set_interactive_debugging(enable : Gboolean) : Void
  fun glib_autoptr_cleanup_gtk_window(_ptr : GtkWindow**) : Void
  fun glib_autoptr_cleanup_gtk_window_group(_ptr : GtkWindowGroup**) : Void
  fun gtk_dialog_get_type : GType
  fun gtk_dialog_new : GtkWidget*
  fun gtk_dialog_new_with_buttons(title : Gchar*, parent : GtkWindow*, flags : GtkDialogFlags, first_button_text : Gchar*) : GtkWidget*
  fun gtk_dialog_add_action_widget(dialog : GtkDialog*, child : GtkWidget*, response_id : Gint) : Void
  fun gtk_dialog_add_button(dialog : GtkDialog*, button_text : Gchar*, response_id : Gint) : GtkWidget*
  fun gtk_dialog_add_buttons(dialog : GtkDialog*, first_button_text : Gchar*) : Void
  fun gtk_dialog_set_response_sensitive(dialog : GtkDialog*, response_id : Gint, setting : Gboolean) : Void
  fun gtk_dialog_set_default_response(dialog : GtkDialog*, response_id : Gint) : Void
  fun gtk_dialog_get_widget_for_response(dialog : GtkDialog*, response_id : Gint) : GtkWidget*
  fun gtk_dialog_get_response_for_widget(dialog : GtkDialog*, widget : GtkWidget*) : Gint
  fun gtk_alternative_dialog_button_order(screen : GdkScreen*) : Gboolean
  fun gtk_dialog_set_alternative_button_order(dialog : GtkDialog*, first_response_id : Gint) : Void
  fun gtk_dialog_set_alternative_button_order_from_array(dialog : GtkDialog*, n_params : Gint, new_order : Gint*) : Void
  fun gtk_dialog_response(dialog : GtkDialog*, response_id : Gint) : Void
  fun gtk_dialog_run(dialog : GtkDialog*) : Gint
  fun gtk_dialog_get_action_area(dialog : GtkDialog*) : GtkWidget*
  fun gtk_dialog_get_content_area(dialog : GtkDialog*) : GtkWidget*
  fun gtk_dialog_get_header_bar(dialog : GtkDialog*) : GtkWidget*
  fun glib_autoptr_cleanup_gtk_dialog(_ptr : GtkDialog**) : Void
  fun gtk_about_dialog_get_type : GType
  fun gtk_about_dialog_new : GtkWidget*
  fun gtk_show_about_dialog(parent : GtkWindow*, first_property_name : Gchar*) : Void
  fun gtk_about_dialog_get_program_name(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_program_name(about : GtkAboutDialog*, name : Gchar*) : Void
  fun gtk_about_dialog_get_version(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_version(about : GtkAboutDialog*, version : Gchar*) : Void
  fun gtk_about_dialog_get_copyright(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_copyright(about : GtkAboutDialog*, copyright : Gchar*) : Void
  fun gtk_about_dialog_get_comments(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_comments(about : GtkAboutDialog*, comments : Gchar*) : Void
  fun gtk_about_dialog_get_license(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_license(about : GtkAboutDialog*, license : Gchar*) : Void
  fun gtk_about_dialog_set_license_type(about : GtkAboutDialog*, license_type : GtkLicense) : Void
  fun gtk_about_dialog_get_license_type(about : GtkAboutDialog*) : GtkLicense
  fun gtk_about_dialog_get_wrap_license(about : GtkAboutDialog*) : Gboolean
  fun gtk_about_dialog_set_wrap_license(about : GtkAboutDialog*, wrap_license : Gboolean) : Void
  fun gtk_about_dialog_get_website(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_website(about : GtkAboutDialog*, website : Gchar*) : Void
  fun gtk_about_dialog_get_website_label(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_website_label(about : GtkAboutDialog*, website_label : Gchar*) : Void
  fun gtk_about_dialog_get_authors(about : GtkAboutDialog*) : Gchar**
  fun gtk_about_dialog_set_authors(about : GtkAboutDialog*, authors : Gchar**) : Void
  fun gtk_about_dialog_get_documenters(about : GtkAboutDialog*) : Gchar**
  fun gtk_about_dialog_set_documenters(about : GtkAboutDialog*, documenters : Gchar**) : Void
  fun gtk_about_dialog_get_artists(about : GtkAboutDialog*) : Gchar**
  fun gtk_about_dialog_set_artists(about : GtkAboutDialog*, artists : Gchar**) : Void
  fun gtk_about_dialog_get_translator_credits(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_translator_credits(about : GtkAboutDialog*, translator_credits : Gchar*) : Void
  fun gtk_about_dialog_get_logo(about : GtkAboutDialog*) : GdkPixbuf*
  fun gtk_about_dialog_set_logo(about : GtkAboutDialog*, logo : GdkPixbuf*) : Void
  fun gtk_about_dialog_get_logo_icon_name(about : GtkAboutDialog*) : Gchar*
  fun gtk_about_dialog_set_logo_icon_name(about : GtkAboutDialog*, icon_name : Gchar*) : Void
  fun gtk_about_dialog_add_credit_section(about : GtkAboutDialog*, section_name : Gchar*, people : Gchar**) : Void
  fun glib_autoptr_cleanup_gtk_about_dialog(_ptr : GtkAboutDialog**) : Void
  fun gtk_misc_get_type : GType
  fun gtk_misc_set_alignment(misc : GtkMisc*, xalign : Gfloat, yalign : Gfloat) : Void
  fun gtk_misc_get_alignment(misc : GtkMisc*, xalign : Gfloat*, yalign : Gfloat*) : Void
  fun gtk_misc_set_padding(misc : GtkMisc*, xpad : Gint, ypad : Gint) : Void
  fun gtk_misc_get_padding(misc : GtkMisc*, xpad : Gint*, ypad : Gint*) : Void
  fun _gtk_misc_get_padding_and_border(misc : GtkMisc*, border : GtkBorder*) : Void
  fun gtk_menu_shell_get_type : GType
  fun gtk_menu_shell_append(menu_shell : GtkMenuShell*, child : GtkWidget*) : Void
  fun gtk_menu_shell_prepend(menu_shell : GtkMenuShell*, child : GtkWidget*) : Void
  fun gtk_menu_shell_insert(menu_shell : GtkMenuShell*, child : GtkWidget*, position : Gint) : Void
  fun gtk_menu_shell_deactivate(menu_shell : GtkMenuShell*) : Void
  fun gtk_menu_shell_select_item(menu_shell : GtkMenuShell*, menu_item : GtkWidget*) : Void
  fun gtk_menu_shell_deselect(menu_shell : GtkMenuShell*) : Void
  fun gtk_menu_shell_activate_item(menu_shell : GtkMenuShell*, menu_item : GtkWidget*, force_deactivate : Gboolean) : Void
  fun gtk_menu_shell_select_first(menu_shell : GtkMenuShell*, search_sensitive : Gboolean) : Void
  fun gtk_menu_shell_cancel(menu_shell : GtkMenuShell*) : Void
  fun gtk_menu_shell_get_take_focus(menu_shell : GtkMenuShell*) : Gboolean
  fun gtk_menu_shell_set_take_focus(menu_shell : GtkMenuShell*, take_focus : Gboolean) : Void
  fun gtk_menu_shell_get_selected_item(menu_shell : GtkMenuShell*) : GtkWidget*
  fun gtk_menu_shell_get_parent_shell(menu_shell : GtkMenuShell*) : GtkWidget*
  fun gtk_menu_shell_bind_model(menu_shell : GtkMenuShell*, model : GMenuModel*, action_namespace : Gchar*, with_separators : Gboolean) : Void
  fun glib_autoptr_cleanup_gtk_menu_shell(_ptr : GtkMenuShell**) : Void
  fun gtk_menu_get_type : GType
  fun gtk_menu_new : GtkWidget*
  fun gtk_menu_new_from_model(model : GMenuModel*) : GtkWidget*
  fun gtk_menu_popup(menu : GtkMenu*, parent_menu_shell : GtkWidget*, parent_menu_item : GtkWidget*, func : GtkMenuPositionFunc, data : Gpointer, button : Guint, activate_time : Guint32) : Void
  fun gtk_menu_popup_for_device(menu : GtkMenu*, device : GdkDevice*, parent_menu_shell : GtkWidget*, parent_menu_item : GtkWidget*, func : GtkMenuPositionFunc, data : Gpointer, destroy : GDestroyNotify, button : Guint, activate_time : Guint32) : Void
  fun gtk_menu_reposition(menu : GtkMenu*) : Void
  fun gtk_menu_popdown(menu : GtkMenu*) : Void
  fun gtk_menu_get_active(menu : GtkMenu*) : GtkWidget*
  fun gtk_menu_set_active(menu : GtkMenu*, index : Guint) : Void
  fun gtk_menu_set_accel_group(menu : GtkMenu*, accel_group : GtkAccelGroup*) : Void
  fun gtk_menu_get_accel_group(menu : GtkMenu*) : GtkAccelGroup*
  fun gtk_menu_set_accel_path(menu : GtkMenu*, accel_path : Gchar*) : Void
  fun gtk_menu_get_accel_path(menu : GtkMenu*) : Gchar*
  fun gtk_menu_attach_to_widget(menu : GtkMenu*, attach_widget : GtkWidget*, detacher : GtkMenuDetachFunc) : Void
  fun gtk_menu_detach(menu : GtkMenu*) : Void
  fun gtk_menu_get_attach_widget(menu : GtkMenu*) : GtkWidget*
  fun gtk_menu_set_tearoff_state(menu : GtkMenu*, torn_off : Gboolean) : Void
  fun gtk_menu_get_tearoff_state(menu : GtkMenu*) : Gboolean
  fun gtk_menu_set_title(menu : GtkMenu*, title : Gchar*) : Void
  fun gtk_menu_get_title(menu : GtkMenu*) : Gchar*
  fun gtk_menu_reorder_child(menu : GtkMenu*, child : GtkWidget*, position : Gint) : Void
  fun gtk_menu_set_screen(menu : GtkMenu*, screen : GdkScreen*) : Void
  fun gtk_menu_attach(menu : GtkMenu*, child : GtkWidget*, left_attach : Guint, right_attach : Guint, top_attach : Guint, bottom_attach : Guint) : Void
  fun gtk_menu_set_monitor(menu : GtkMenu*, monitor_num : Gint) : Void
  fun gtk_menu_get_monitor(menu : GtkMenu*) : Gint
  fun gtk_menu_get_for_attach_widget(widget : GtkWidget*) : GList*
  fun gtk_menu_set_reserve_toggle_size(menu : GtkMenu*, reserve_toggle_size : Gboolean) : Void
  fun gtk_menu_get_reserve_toggle_size(menu : GtkMenu*) : Gboolean
  fun glib_autoptr_cleanup_gtk_menu(_ptr : GtkMenu**) : Void
  fun gtk_label_get_type : GType
  fun gtk_label_new(str : Gchar*) : GtkWidget*
  fun gtk_label_new_with_mnemonic(str : Gchar*) : GtkWidget*
  fun gtk_label_set_text(label : GtkLabel*, str : Gchar*) : Void
  fun gtk_label_get_text(label : GtkLabel*) : Gchar*
  fun gtk_label_set_attributes(label : GtkLabel*, attrs : PangoAttrList*) : Void
  fun gtk_label_get_attributes(label : GtkLabel*) : PangoAttrList*
  fun gtk_label_set_label(label : GtkLabel*, str : Gchar*) : Void
  fun gtk_label_get_label(label : GtkLabel*) : Gchar*
  fun gtk_label_set_markup(label : GtkLabel*, str : Gchar*) : Void
  fun gtk_label_set_use_markup(label : GtkLabel*, setting : Gboolean) : Void
  fun gtk_label_get_use_markup(label : GtkLabel*) : Gboolean
  fun gtk_label_set_use_underline(label : GtkLabel*, setting : Gboolean) : Void
  fun gtk_label_get_use_underline(label : GtkLabel*) : Gboolean
  fun gtk_label_set_markup_with_mnemonic(label : GtkLabel*, str : Gchar*) : Void
  fun gtk_label_get_mnemonic_keyval(label : GtkLabel*) : Guint
  fun gtk_label_set_mnemonic_widget(label : GtkLabel*, widget : GtkWidget*) : Void
  fun gtk_label_get_mnemonic_widget(label : GtkLabel*) : GtkWidget*
  fun gtk_label_set_text_with_mnemonic(label : GtkLabel*, str : Gchar*) : Void
  fun gtk_label_set_justify(label : GtkLabel*, jtype : GtkJustification) : Void
  fun gtk_label_get_justify(label : GtkLabel*) : GtkJustification
  fun gtk_label_set_ellipsize(label : GtkLabel*, mode : PangoEllipsizeMode) : Void
  fun gtk_label_get_ellipsize(label : GtkLabel*) : PangoEllipsizeMode
  fun gtk_label_set_width_chars(label : GtkLabel*, n_chars : Gint) : Void
  fun gtk_label_get_width_chars(label : GtkLabel*) : Gint
  fun gtk_label_set_max_width_chars(label : GtkLabel*, n_chars : Gint) : Void
  fun gtk_label_get_max_width_chars(label : GtkLabel*) : Gint
  fun gtk_label_set_lines(label : GtkLabel*, lines : Gint) : Void
  fun gtk_label_get_lines(label : GtkLabel*) : Gint
  fun gtk_label_set_pattern(label : GtkLabel*, pattern : Gchar*) : Void
  fun gtk_label_set_line_wrap(label : GtkLabel*, wrap : Gboolean) : Void
  fun gtk_label_get_line_wrap(label : GtkLabel*) : Gboolean
  fun gtk_label_set_line_wrap_mode(label : GtkLabel*, wrap_mode : PangoWrapMode) : Void
  fun gtk_label_get_line_wrap_mode(label : GtkLabel*) : PangoWrapMode
  fun gtk_label_set_selectable(label : GtkLabel*, setting : Gboolean) : Void
  fun gtk_label_get_selectable(label : GtkLabel*) : Gboolean
  fun gtk_label_set_angle(label : GtkLabel*, angle : Gdouble) : Void
  fun gtk_label_get_angle(label : GtkLabel*) : Gdouble
  fun gtk_label_select_region(label : GtkLabel*, start_offset : Gint, end_offset : Gint) : Void
  fun gtk_label_get_selection_bounds(label : GtkLabel*, start : Gint*, end : Gint*) : Gboolean
  fun gtk_label_get_layout(label : GtkLabel*) : PangoLayout*
  fun gtk_label_get_layout_offsets(label : GtkLabel*, x : Gint*, y : Gint*) : Void
  fun gtk_label_set_single_line_mode(label : GtkLabel*, single_line_mode : Gboolean) : Void
  fun gtk_label_get_single_line_mode(label : GtkLabel*) : Gboolean
  fun gtk_label_get_current_uri(label : GtkLabel*) : Gchar*
  fun gtk_label_set_track_visited_links(label : GtkLabel*, track_links : Gboolean) : Void
  fun gtk_label_get_track_visited_links(label : GtkLabel*) : Gboolean
  fun gtk_label_set_xalign(label : GtkLabel*, xalign : Gfloat) : Void
  fun gtk_label_get_xalign(label : GtkLabel*) : Gfloat
  fun gtk_label_set_yalign(label : GtkLabel*, yalign : Gfloat) : Void
  fun gtk_label_get_yalign(label : GtkLabel*) : Gfloat
  fun glib_autoptr_cleanup_gtk_label(_ptr : GtkLabel**) : Void
  fun gtk_accel_label_get_type : GType
  fun gtk_accel_label_new(string : Gchar*) : GtkWidget*
  fun gtk_accel_label_get_accel_widget(accel_label : GtkAccelLabel*) : GtkWidget*
  fun gtk_accel_label_get_accel_width(accel_label : GtkAccelLabel*) : Guint
  fun gtk_accel_label_set_accel_widget(accel_label : GtkAccelLabel*, accel_widget : GtkWidget*) : Void
  fun gtk_accel_label_set_accel_closure(accel_label : GtkAccelLabel*, accel_closure : GClosure*) : Void
  fun gtk_accel_label_refetch(accel_label : GtkAccelLabel*) : Gboolean
  fun gtk_accel_label_set_accel(accel_label : GtkAccelLabel*, accelerator_key : Guint, accelerator_mods : GdkModifierType) : Void
  fun gtk_accel_label_get_accel(accel_label : GtkAccelLabel*, accelerator_key : Guint*, accelerator_mods : GdkModifierType*) : Void
  fun _gtk_accel_label_class_get_accelerator_label(klass : GtkAccelLabelClass*, accelerator_key : Guint, accelerator_mods : GdkModifierType) : Gchar*
  fun glib_autoptr_cleanup_gtk_accel_label(_ptr : GtkAccelLabel**) : Void
  fun gtk_accel_map_add_entry(accel_path : Gchar*, accel_key : Guint, accel_mods : GdkModifierType) : Void
  fun gtk_accel_map_lookup_entry(accel_path : Gchar*, key : GtkAccelKey*) : Gboolean
  fun gtk_accel_map_change_entry(accel_path : Gchar*, accel_key : Guint, accel_mods : GdkModifierType, replace : Gboolean) : Gboolean
  fun gtk_accel_map_load(file_name : Gchar*) : Void
  fun gtk_accel_map_save(file_name : Gchar*) : Void
  fun gtk_accel_map_foreach(data : Gpointer, foreach_func : GtkAccelMapForeach) : Void
  fun gtk_accel_map_load_fd(fd : Gint) : Void
  fun gtk_accel_map_load_scanner(scanner : GScanner*) : Void
  fun gtk_accel_map_save_fd(fd : Gint) : Void
  fun gtk_accel_map_lock_path(accel_path : Gchar*) : Void
  fun gtk_accel_map_unlock_path(accel_path : Gchar*) : Void
  fun gtk_accel_map_add_filter(filter_pattern : Gchar*) : Void
  fun gtk_accel_map_foreach_unfiltered(data : Gpointer, foreach_func : GtkAccelMapForeach) : Void
  fun gtk_accel_map_get_type : GType
  fun gtk_accel_map_get : GtkAccelMap*
  fun glib_autoptr_cleanup_gtk_accel_map(_ptr : GtkAccelMap**) : Void
  fun gtk_accessible_get_type : GType
  fun gtk_accessible_set_widget(accessible : GtkAccessible*, widget : GtkWidget*) : Void
  fun gtk_accessible_get_widget(accessible : GtkAccessible*) : GtkWidget*
  fun gtk_accessible_connect_widget_destroyed(accessible : GtkAccessible*) : Void
  fun gtk_actionable_get_type : GType
  fun gtk_actionable_get_action_name(actionable : GtkActionable*) : Gchar*
  fun gtk_actionable_set_action_name(actionable : GtkActionable*, action_name : Gchar*) : Void
  fun gtk_actionable_get_action_target_value(actionable : GtkActionable*) : GVariant*
  fun gtk_actionable_set_action_target_value(actionable : GtkActionable*, target_value : GVariant*) : Void
  fun gtk_actionable_set_action_target(actionable : GtkActionable*, format_string : Gchar*) : Void
  fun gtk_actionable_set_detailed_action_name(actionable : GtkActionable*, detailed_action_name : Gchar*) : Void
  fun gtk_action_bar_get_type : GType
  fun gtk_action_bar_new : GtkWidget*
  fun gtk_action_bar_get_center_widget(action_bar : GtkActionBar*) : GtkWidget*
  fun gtk_action_bar_set_center_widget(action_bar : GtkActionBar*, center_widget : GtkWidget*) : Void
  fun gtk_action_bar_pack_start(action_bar : GtkActionBar*, child : GtkWidget*) : Void
  fun gtk_action_bar_pack_end(action_bar : GtkActionBar*, child : GtkWidget*) : Void
  fun gtk_adjustment_get_type : GType
  fun gtk_adjustment_new(value : Gdouble, lower : Gdouble, upper : Gdouble, step_increment : Gdouble, page_increment : Gdouble, page_size : Gdouble) : GtkAdjustment*
  fun gtk_adjustment_changed(adjustment : GtkAdjustment*) : Void
  fun gtk_adjustment_value_changed(adjustment : GtkAdjustment*) : Void
  fun gtk_adjustment_clamp_page(adjustment : GtkAdjustment*, lower : Gdouble, upper : Gdouble) : Void
  fun gtk_adjustment_get_value(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_adjustment_set_value(adjustment : GtkAdjustment*, value : Gdouble) : Void
  fun gtk_adjustment_get_lower(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_adjustment_set_lower(adjustment : GtkAdjustment*, lower : Gdouble) : Void
  fun gtk_adjustment_get_upper(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_adjustment_set_upper(adjustment : GtkAdjustment*, upper : Gdouble) : Void
  fun gtk_adjustment_get_step_increment(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_adjustment_set_step_increment(adjustment : GtkAdjustment*, step_increment : Gdouble) : Void
  fun gtk_adjustment_get_page_increment(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_adjustment_set_page_increment(adjustment : GtkAdjustment*, page_increment : Gdouble) : Void
  fun gtk_adjustment_get_page_size(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_adjustment_set_page_size(adjustment : GtkAdjustment*, page_size : Gdouble) : Void
  fun gtk_adjustment_configure(adjustment : GtkAdjustment*, value : Gdouble, lower : Gdouble, upper : Gdouble, step_increment : Gdouble, page_increment : Gdouble, page_size : Gdouble) : Void
  fun gtk_adjustment_get_minimum_increment(adjustment : GtkAdjustment*) : Gdouble
  fun gtk_app_chooser_get_type : GType
  fun gtk_app_chooser_get_app_info(self : GtkAppChooser*) : GAppInfo*
  fun gtk_app_chooser_get_content_type(self : GtkAppChooser*) : Gchar*
  fun gtk_app_chooser_refresh(self : GtkAppChooser*) : Void
  fun gtk_app_chooser_dialog_get_type : GType
  fun gtk_app_chooser_dialog_new(parent : GtkWindow*, flags : GtkDialogFlags, file : GFile*) : GtkWidget*
  fun gtk_app_chooser_dialog_new_for_content_type(parent : GtkWindow*, flags : GtkDialogFlags, content_type : Gchar*) : GtkWidget*
  fun gtk_app_chooser_dialog_get_widget(self : GtkAppChooserDialog*) : GtkWidget*
  fun gtk_app_chooser_dialog_set_heading(self : GtkAppChooserDialog*, heading : Gchar*) : Void
  fun gtk_app_chooser_dialog_get_heading(self : GtkAppChooserDialog*) : Gchar*
  fun gtk_box_get_type : GType
  fun gtk_box_new(orientation : GtkOrientation, spacing : Gint) : GtkWidget*
  fun gtk_box_pack_start(box : GtkBox*, child : GtkWidget*, expand : Gboolean, fill : Gboolean, padding : Guint) : Void
  fun gtk_box_pack_end(box : GtkBox*, child : GtkWidget*, expand : Gboolean, fill : Gboolean, padding : Guint) : Void
  fun gtk_box_set_homogeneous(box : GtkBox*, homogeneous : Gboolean) : Void
  fun gtk_box_get_homogeneous(box : GtkBox*) : Gboolean
  fun gtk_box_set_spacing(box : GtkBox*, spacing : Gint) : Void
  fun gtk_box_get_spacing(box : GtkBox*) : Gint
  fun gtk_box_set_baseline_position(box : GtkBox*, position : GtkBaselinePosition) : Void
  fun gtk_box_get_baseline_position(box : GtkBox*) : GtkBaselinePosition
  fun gtk_box_reorder_child(box : GtkBox*, child : GtkWidget*, position : Gint) : Void
  fun gtk_box_query_child_packing(box : GtkBox*, child : GtkWidget*, expand : Gboolean*, fill : Gboolean*, padding : Guint*, pack_type : GtkPackType*) : Void
  fun gtk_box_set_child_packing(box : GtkBox*, child : GtkWidget*, expand : Gboolean, fill : Gboolean, padding : Guint, pack_type : GtkPackType) : Void
  fun gtk_box_set_center_widget(box : GtkBox*, widget : GtkWidget*) : Void
  fun gtk_box_get_center_widget(box : GtkBox*) : GtkWidget*
  fun gtk_app_chooser_widget_get_type : GType
  fun gtk_app_chooser_widget_new(content_type : Gchar*) : GtkWidget*
  fun gtk_app_chooser_widget_set_show_default(self : GtkAppChooserWidget*, setting : Gboolean) : Void
  fun gtk_app_chooser_widget_get_show_default(self : GtkAppChooserWidget*) : Gboolean
  fun gtk_app_chooser_widget_set_show_recommended(self : GtkAppChooserWidget*, setting : Gboolean) : Void
  fun gtk_app_chooser_widget_get_show_recommended(self : GtkAppChooserWidget*) : Gboolean
  fun gtk_app_chooser_widget_set_show_fallback(self : GtkAppChooserWidget*, setting : Gboolean) : Void
  fun gtk_app_chooser_widget_get_show_fallback(self : GtkAppChooserWidget*) : Gboolean
  fun gtk_app_chooser_widget_set_show_other(self : GtkAppChooserWidget*, setting : Gboolean) : Void
  fun gtk_app_chooser_widget_get_show_other(self : GtkAppChooserWidget*) : Gboolean
  fun gtk_app_chooser_widget_set_show_all(self : GtkAppChooserWidget*, setting : Gboolean) : Void
  fun gtk_app_chooser_widget_get_show_all(self : GtkAppChooserWidget*) : Gboolean
  fun gtk_app_chooser_widget_set_default_text(self : GtkAppChooserWidget*, text : Gchar*) : Void
  fun gtk_app_chooser_widget_get_default_text(self : GtkAppChooserWidget*) : Gchar*
  fun gtk_tree_path_new : GtkTreePath*
  fun gtk_tree_path_new_from_string(path : Gchar*) : GtkTreePath*
  fun gtk_tree_path_new_from_indices(first_index : Gint) : GtkTreePath*
  fun gtk_tree_path_new_from_indicesv(indices : Gint*, length : Gsize) : GtkTreePath*
  fun gtk_tree_path_to_string(path : GtkTreePath*) : Gchar*
  fun gtk_tree_path_new_first : GtkTreePath*
  fun gtk_tree_path_append_index(path : GtkTreePath*, index_ : Gint) : Void
  fun gtk_tree_path_prepend_index(path : GtkTreePath*, index_ : Gint) : Void
  fun gtk_tree_path_get_depth(path : GtkTreePath*) : Gint
  fun gtk_tree_path_get_indices(path : GtkTreePath*) : Gint*
  fun gtk_tree_path_get_indices_with_depth(path : GtkTreePath*, depth : Gint*) : Gint*
  fun gtk_tree_path_free(path : GtkTreePath*) : Void
  fun gtk_tree_path_copy(path : GtkTreePath*) : GtkTreePath*
  fun gtk_tree_path_get_type : GType
  fun gtk_tree_path_compare(a : GtkTreePath*, b : GtkTreePath*) : Gint
  fun gtk_tree_path_next(path : GtkTreePath*) : Void
  fun gtk_tree_path_prev(path : GtkTreePath*) : Gboolean
  fun gtk_tree_path_up(path : GtkTreePath*) : Gboolean
  fun gtk_tree_path_down(path : GtkTreePath*) : Void
  fun gtk_tree_path_is_ancestor(path : GtkTreePath*, descendant : GtkTreePath*) : Gboolean
  fun gtk_tree_path_is_descendant(path : GtkTreePath*, ancestor : GtkTreePath*) : Gboolean
  fun gtk_tree_row_reference_get_type : GType
  fun gtk_tree_row_reference_new(model : GtkTreeModel*, path : GtkTreePath*) : GtkTreeRowReference*
  fun gtk_tree_row_reference_new_proxy(proxy : GObject*, model : GtkTreeModel*, path : GtkTreePath*) : GtkTreeRowReference*
  fun gtk_tree_row_reference_get_path(reference : GtkTreeRowReference*) : GtkTreePath*
  fun gtk_tree_row_reference_get_model(reference : GtkTreeRowReference*) : GtkTreeModel*
  fun gtk_tree_row_reference_valid(reference : GtkTreeRowReference*) : Gboolean
  fun gtk_tree_row_reference_copy(reference : GtkTreeRowReference*) : GtkTreeRowReference*
  fun gtk_tree_row_reference_free(reference : GtkTreeRowReference*) : Void
  fun gtk_tree_row_reference_inserted(proxy : GObject*, path : GtkTreePath*) : Void
  fun gtk_tree_row_reference_deleted(proxy : GObject*, path : GtkTreePath*) : Void
  fun gtk_tree_row_reference_reordered(proxy : GObject*, path : GtkTreePath*, iter : GtkTreeIter*, new_order : Gint*) : Void
  fun gtk_tree_iter_copy(iter : GtkTreeIter*) : GtkTreeIter*
  fun gtk_tree_iter_free(iter : GtkTreeIter*) : Void
  fun gtk_tree_iter_get_type : GType
  fun gtk_tree_model_get_type : GType
  fun gtk_tree_model_get_flags(tree_model : GtkTreeModel*) : GtkTreeModelFlags
  fun gtk_tree_model_get_n_columns(tree_model : GtkTreeModel*) : Gint
  fun gtk_tree_model_get_column_type(tree_model : GtkTreeModel*, index_ : Gint) : GType
  fun gtk_tree_model_get_iter(tree_model : GtkTreeModel*, iter : GtkTreeIter*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_model_get_iter_from_string(tree_model : GtkTreeModel*, iter : GtkTreeIter*, path_string : Gchar*) : Gboolean
  fun gtk_tree_model_get_string_from_iter(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Gchar*
  fun gtk_tree_model_get_iter_first(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_get_path(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : GtkTreePath*
  fun gtk_tree_model_get_value(tree_model : GtkTreeModel*, iter : GtkTreeIter*, column : Gint, value : GValue*) : Void
  fun gtk_tree_model_iter_previous(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_iter_next(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_iter_children(tree_model : GtkTreeModel*, iter : GtkTreeIter*, parent : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_iter_has_child(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_iter_n_children(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Gint
  fun gtk_tree_model_iter_nth_child(tree_model : GtkTreeModel*, iter : GtkTreeIter*, parent : GtkTreeIter*, n : Gint) : Gboolean
  fun gtk_tree_model_iter_parent(tree_model : GtkTreeModel*, iter : GtkTreeIter*, child : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_ref_node(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Void
  fun gtk_tree_model_unref_node(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Void
  fun gtk_tree_model_get(tree_model : GtkTreeModel*, iter : GtkTreeIter*) : Void
  fun gtk_tree_model_get_valist(tree_model : GtkTreeModel*, iter : GtkTreeIter*, var_args : X__va_list_tag*) : Void
  fun gtk_tree_model_foreach(model : GtkTreeModel*, func : GtkTreeModelForeachFunc, user_data : Gpointer) : Void
  fun gtk_tree_model_row_changed(tree_model : GtkTreeModel*, path : GtkTreePath*, iter : GtkTreeIter*) : Void
  fun gtk_tree_model_row_inserted(tree_model : GtkTreeModel*, path : GtkTreePath*, iter : GtkTreeIter*) : Void
  fun gtk_tree_model_row_has_child_toggled(tree_model : GtkTreeModel*, path : GtkTreePath*, iter : GtkTreeIter*) : Void
  fun gtk_tree_model_row_deleted(tree_model : GtkTreeModel*, path : GtkTreePath*) : Void
  fun gtk_tree_model_rows_reordered(tree_model : GtkTreeModel*, path : GtkTreePath*, iter : GtkTreeIter*, new_order : Gint*) : Void
  fun gtk_tree_model_rows_reordered_with_length(tree_model : GtkTreeModel*, path : GtkTreePath*, iter : GtkTreeIter*, new_order : Gint*, length : Gint) : Void
  fun gtk_cell_editable_get_type : GType
  fun gtk_cell_editable_start_editing(cell_editable : GtkCellEditable*, event : GdkEvent*) : Void
  fun gtk_cell_editable_editing_done(cell_editable : GtkCellEditable*) : Void
  fun gtk_cell_editable_remove_widget(cell_editable : GtkCellEditable*) : Void
  fun gtk_cell_renderer_get_type : GType
  fun gtk_cell_renderer_get_request_mode(cell : GtkCellRenderer*) : GtkSizeRequestMode
  fun gtk_cell_renderer_get_preferred_width(cell : GtkCellRenderer*, widget : GtkWidget*, minimum_size : Gint*, natural_size : Gint*) : Void
  fun gtk_cell_renderer_get_preferred_height_for_width(cell : GtkCellRenderer*, widget : GtkWidget*, width : Gint, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_cell_renderer_get_preferred_height(cell : GtkCellRenderer*, widget : GtkWidget*, minimum_size : Gint*, natural_size : Gint*) : Void
  fun gtk_cell_renderer_get_preferred_width_for_height(cell : GtkCellRenderer*, widget : GtkWidget*, height : Gint, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_cell_renderer_get_preferred_size(cell : GtkCellRenderer*, widget : GtkWidget*, minimum_size : GtkRequisition*, natural_size : GtkRequisition*) : Void
  fun gtk_cell_renderer_get_aligned_area(cell : GtkCellRenderer*, widget : GtkWidget*, flags : GtkCellRendererState, cell_area : GdkRectangle*, aligned_area : GdkRectangle*) : Void
  fun gtk_cell_renderer_get_size(cell : GtkCellRenderer*, widget : GtkWidget*, cell_area : GdkRectangle*, x_offset : Gint*, y_offset : Gint*, width : Gint*, height : Gint*) : Void
  fun gtk_cell_renderer_render(cell : GtkCellRenderer*, cr : CairoT*, widget : GtkWidget*, background_area : GdkRectangle*, cell_area : GdkRectangle*, flags : GtkCellRendererState) : Void
  fun gtk_cell_renderer_activate(cell : GtkCellRenderer*, event : GdkEvent*, widget : GtkWidget*, path : Gchar*, background_area : GdkRectangle*, cell_area : GdkRectangle*, flags : GtkCellRendererState) : Gboolean
  fun gtk_cell_renderer_start_editing(cell : GtkCellRenderer*, event : GdkEvent*, widget : GtkWidget*, path : Gchar*, background_area : GdkRectangle*, cell_area : GdkRectangle*, flags : GtkCellRendererState) : GtkCellEditable*
  fun gtk_cell_renderer_set_fixed_size(cell : GtkCellRenderer*, width : Gint, height : Gint) : Void
  fun gtk_cell_renderer_get_fixed_size(cell : GtkCellRenderer*, width : Gint*, height : Gint*) : Void
  fun gtk_cell_renderer_set_alignment(cell : GtkCellRenderer*, xalign : Gfloat, yalign : Gfloat) : Void
  fun gtk_cell_renderer_get_alignment(cell : GtkCellRenderer*, xalign : Gfloat*, yalign : Gfloat*) : Void
  fun gtk_cell_renderer_set_padding(cell : GtkCellRenderer*, xpad : Gint, ypad : Gint) : Void
  fun gtk_cell_renderer_get_padding(cell : GtkCellRenderer*, xpad : Gint*, ypad : Gint*) : Void
  fun gtk_cell_renderer_set_visible(cell : GtkCellRenderer*, visible : Gboolean) : Void
  fun gtk_cell_renderer_get_visible(cell : GtkCellRenderer*) : Gboolean
  fun gtk_cell_renderer_set_sensitive(cell : GtkCellRenderer*, sensitive : Gboolean) : Void
  fun gtk_cell_renderer_get_sensitive(cell : GtkCellRenderer*) : Gboolean
  fun gtk_cell_renderer_is_activatable(cell : GtkCellRenderer*) : Gboolean
  fun gtk_cell_renderer_stop_editing(cell : GtkCellRenderer*, canceled : Gboolean) : Void
  fun _gtk_cell_renderer_calc_offset(cell : GtkCellRenderer*, cell_area : GdkRectangle*, direction : GtkTextDirection, width : Gint, height : Gint, x_offset : Gint*, y_offset : Gint*) : Void
  fun gtk_cell_renderer_get_state(cell : GtkCellRenderer*, widget : GtkWidget*, cell_state : GtkCellRendererState) : GtkStateFlags
  fun gtk_cell_renderer_class_set_accessible_type(renderer_class : GtkCellRendererClass*, type : GType) : Void
  fun _gtk_cell_renderer_get_accessible_type(renderer : GtkCellRenderer*) : GType
  fun gtk_tree_sortable_get_type : GType
  fun gtk_tree_sortable_sort_column_changed(sortable : GtkTreeSortable*) : Void
  fun gtk_tree_sortable_get_sort_column_id(sortable : GtkTreeSortable*, sort_column_id : Gint*, order : GtkSortType*) : Gboolean
  fun gtk_tree_sortable_set_sort_column_id(sortable : GtkTreeSortable*, sort_column_id : Gint, order : GtkSortType) : Void
  fun gtk_tree_sortable_set_sort_func(sortable : GtkTreeSortable*, sort_column_id : Gint, sort_func : GtkTreeIterCompareFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_sortable_set_default_sort_func(sortable : GtkTreeSortable*, sort_func : GtkTreeIterCompareFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_sortable_has_default_sort_func(sortable : GtkTreeSortable*) : Gboolean
  fun gtk_cell_area_get_type : GType
  fun gtk_cell_area_add(area : GtkCellArea*, renderer : GtkCellRenderer*) : Void
  fun gtk_cell_area_remove(area : GtkCellArea*, renderer : GtkCellRenderer*) : Void
  fun gtk_cell_area_has_renderer(area : GtkCellArea*, renderer : GtkCellRenderer*) : Gboolean
  fun gtk_cell_area_foreach(area : GtkCellArea*, callback : GtkCellCallback, callback_data : Gpointer) : Void
  fun gtk_cell_area_foreach_alloc(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, cell_area : GdkRectangle*, background_area : GdkRectangle*, callback : GtkCellAllocCallback, callback_data : Gpointer) : Void
  fun gtk_cell_area_event(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, event : GdkEvent*, cell_area : GdkRectangle*, flags : GtkCellRendererState) : Gint
  fun gtk_cell_area_render(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, cr : CairoT*, background_area : GdkRectangle*, cell_area : GdkRectangle*, flags : GtkCellRendererState, paint_focus : Gboolean) : Void
  fun gtk_cell_area_get_cell_allocation(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, renderer : GtkCellRenderer*, cell_area : GdkRectangle*, allocation : GdkRectangle*) : Void
  fun gtk_cell_area_get_cell_at_position(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, cell_area : GdkRectangle*, x : Gint, y : Gint, alloc_area : GdkRectangle*) : GtkCellRenderer*
  fun gtk_cell_area_create_context(area : GtkCellArea*) : GtkCellAreaContext*
  fun gtk_cell_area_copy_context(area : GtkCellArea*, context : GtkCellAreaContext*) : GtkCellAreaContext*
  fun gtk_cell_area_get_request_mode(area : GtkCellArea*) : GtkSizeRequestMode
  fun gtk_cell_area_get_preferred_width(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_cell_area_get_preferred_height_for_width(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, width : Gint, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_cell_area_get_preferred_height(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_cell_area_get_preferred_width_for_height(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, height : Gint, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_cell_area_get_current_path_string(area : GtkCellArea*) : Gchar*
  fun gtk_cell_area_apply_attributes(area : GtkCellArea*, tree_model : GtkTreeModel*, iter : GtkTreeIter*, is_expander : Gboolean, is_expanded : Gboolean) : Void
  fun gtk_cell_area_attribute_connect(area : GtkCellArea*, renderer : GtkCellRenderer*, attribute : Gchar*, column : Gint) : Void
  fun gtk_cell_area_attribute_disconnect(area : GtkCellArea*, renderer : GtkCellRenderer*, attribute : Gchar*) : Void
  fun gtk_cell_area_attribute_get_column(area : GtkCellArea*, renderer : GtkCellRenderer*, attribute : Gchar*) : Gint
  fun gtk_cell_area_class_install_cell_property(aclass : GtkCellAreaClass*, property_id : Guint, pspec : GParamSpec*) : Void
  fun gtk_cell_area_class_find_cell_property(aclass : GtkCellAreaClass*, property_name : Gchar*) : GParamSpec*
  fun gtk_cell_area_class_list_cell_properties(aclass : GtkCellAreaClass*, n_properties : Guint*) : GParamSpec**
  fun gtk_cell_area_add_with_properties(area : GtkCellArea*, renderer : GtkCellRenderer*, first_prop_name : Gchar*) : Void
  fun gtk_cell_area_cell_set(area : GtkCellArea*, renderer : GtkCellRenderer*, first_prop_name : Gchar*) : Void
  fun gtk_cell_area_cell_get(area : GtkCellArea*, renderer : GtkCellRenderer*, first_prop_name : Gchar*) : Void
  fun gtk_cell_area_cell_set_valist(area : GtkCellArea*, renderer : GtkCellRenderer*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun gtk_cell_area_cell_get_valist(area : GtkCellArea*, renderer : GtkCellRenderer*, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun gtk_cell_area_cell_set_property(area : GtkCellArea*, renderer : GtkCellRenderer*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_cell_area_cell_get_property(area : GtkCellArea*, renderer : GtkCellRenderer*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_cell_area_is_activatable(area : GtkCellArea*) : Gboolean
  fun gtk_cell_area_activate(area : GtkCellArea*, context : GtkCellAreaContext*, widget : GtkWidget*, cell_area : GdkRectangle*, flags : GtkCellRendererState, edit_only : Gboolean) : Gboolean
  fun gtk_cell_area_focus(area : GtkCellArea*, direction : GtkDirectionType) : Gboolean
  fun gtk_cell_area_set_focus_cell(area : GtkCellArea*, renderer : GtkCellRenderer*) : Void
  fun gtk_cell_area_get_focus_cell(area : GtkCellArea*) : GtkCellRenderer*
  fun gtk_cell_area_add_focus_sibling(area : GtkCellArea*, renderer : GtkCellRenderer*, sibling : GtkCellRenderer*) : Void
  fun gtk_cell_area_remove_focus_sibling(area : GtkCellArea*, renderer : GtkCellRenderer*, sibling : GtkCellRenderer*) : Void
  fun gtk_cell_area_is_focus_sibling(area : GtkCellArea*, renderer : GtkCellRenderer*, sibling : GtkCellRenderer*) : Gboolean
  fun gtk_cell_area_get_focus_siblings(area : GtkCellArea*, renderer : GtkCellRenderer*) : GList*
  fun gtk_cell_area_get_focus_from_sibling(area : GtkCellArea*, renderer : GtkCellRenderer*) : GtkCellRenderer*
  fun gtk_cell_area_get_edited_cell(area : GtkCellArea*) : GtkCellRenderer*
  fun gtk_cell_area_get_edit_widget(area : GtkCellArea*) : GtkCellEditable*
  fun gtk_cell_area_activate_cell(area : GtkCellArea*, widget : GtkWidget*, renderer : GtkCellRenderer*, event : GdkEvent*, cell_area : GdkRectangle*, flags : GtkCellRendererState) : Gboolean
  fun gtk_cell_area_stop_editing(area : GtkCellArea*, canceled : Gboolean) : Void
  fun gtk_cell_area_inner_cell_area(area : GtkCellArea*, widget : GtkWidget*, cell_area : GdkRectangle*, inner_area : GdkRectangle*) : Void
  fun gtk_cell_area_request_renderer(area : GtkCellArea*, renderer : GtkCellRenderer*, orientation : GtkOrientation, widget : GtkWidget*, for_size : Gint, minimum_size : Gint*, natural_size : Gint*) : Void
  fun _gtk_cell_area_set_cell_data_func_with_proxy(area : GtkCellArea*, cell : GtkCellRenderer*, func : GFunc, func_data : Gpointer, destroy : GDestroyNotify, proxy : Gpointer) : Void
  fun gtk_tree_view_column_get_type : GType
  fun gtk_tree_view_column_new : GtkTreeViewColumn*
  fun gtk_tree_view_column_new_with_area(area : GtkCellArea*) : GtkTreeViewColumn*
  fun gtk_tree_view_column_new_with_attributes(title : Gchar*, cell : GtkCellRenderer*) : GtkTreeViewColumn*
  fun gtk_tree_view_column_pack_start(tree_column : GtkTreeViewColumn*, cell : GtkCellRenderer*, expand : Gboolean) : Void
  fun gtk_tree_view_column_pack_end(tree_column : GtkTreeViewColumn*, cell : GtkCellRenderer*, expand : Gboolean) : Void
  fun gtk_tree_view_column_clear(tree_column : GtkTreeViewColumn*) : Void
  fun gtk_tree_view_column_add_attribute(tree_column : GtkTreeViewColumn*, cell_renderer : GtkCellRenderer*, attribute : Gchar*, column : Gint) : Void
  fun gtk_tree_view_column_set_attributes(tree_column : GtkTreeViewColumn*, cell_renderer : GtkCellRenderer*) : Void
  fun gtk_tree_view_column_set_cell_data_func(tree_column : GtkTreeViewColumn*, cell_renderer : GtkCellRenderer*, func : GtkTreeCellDataFunc, func_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_view_column_clear_attributes(tree_column : GtkTreeViewColumn*, cell_renderer : GtkCellRenderer*) : Void
  fun gtk_tree_view_column_set_spacing(tree_column : GtkTreeViewColumn*, spacing : Gint) : Void
  fun gtk_tree_view_column_get_spacing(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_set_visible(tree_column : GtkTreeViewColumn*, visible : Gboolean) : Void
  fun gtk_tree_view_column_get_visible(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_set_resizable(tree_column : GtkTreeViewColumn*, resizable : Gboolean) : Void
  fun gtk_tree_view_column_get_resizable(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_set_sizing(tree_column : GtkTreeViewColumn*, type : GtkTreeViewColumnSizing) : Void
  fun gtk_tree_view_column_get_sizing(tree_column : GtkTreeViewColumn*) : GtkTreeViewColumnSizing
  fun gtk_tree_view_column_get_x_offset(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_get_width(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_get_fixed_width(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_set_fixed_width(tree_column : GtkTreeViewColumn*, fixed_width : Gint) : Void
  fun gtk_tree_view_column_set_min_width(tree_column : GtkTreeViewColumn*, min_width : Gint) : Void
  fun gtk_tree_view_column_get_min_width(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_set_max_width(tree_column : GtkTreeViewColumn*, max_width : Gint) : Void
  fun gtk_tree_view_column_get_max_width(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_clicked(tree_column : GtkTreeViewColumn*) : Void
  fun gtk_tree_view_column_set_title(tree_column : GtkTreeViewColumn*, title : Gchar*) : Void
  fun gtk_tree_view_column_get_title(tree_column : GtkTreeViewColumn*) : Gchar*
  fun gtk_tree_view_column_set_expand(tree_column : GtkTreeViewColumn*, expand : Gboolean) : Void
  fun gtk_tree_view_column_get_expand(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_set_clickable(tree_column : GtkTreeViewColumn*, clickable : Gboolean) : Void
  fun gtk_tree_view_column_get_clickable(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_set_widget(tree_column : GtkTreeViewColumn*, widget : GtkWidget*) : Void
  fun gtk_tree_view_column_get_widget(tree_column : GtkTreeViewColumn*) : GtkWidget*
  fun gtk_tree_view_column_set_alignment(tree_column : GtkTreeViewColumn*, xalign : Gfloat) : Void
  fun gtk_tree_view_column_get_alignment(tree_column : GtkTreeViewColumn*) : Gfloat
  fun gtk_tree_view_column_set_reorderable(tree_column : GtkTreeViewColumn*, reorderable : Gboolean) : Void
  fun gtk_tree_view_column_get_reorderable(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_set_sort_column_id(tree_column : GtkTreeViewColumn*, sort_column_id : Gint) : Void
  fun gtk_tree_view_column_get_sort_column_id(tree_column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_column_set_sort_indicator(tree_column : GtkTreeViewColumn*, setting : Gboolean) : Void
  fun gtk_tree_view_column_get_sort_indicator(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_set_sort_order(tree_column : GtkTreeViewColumn*, order : GtkSortType) : Void
  fun gtk_tree_view_column_get_sort_order(tree_column : GtkTreeViewColumn*) : GtkSortType
  fun gtk_tree_view_column_cell_set_cell_data(tree_column : GtkTreeViewColumn*, tree_model : GtkTreeModel*, iter : GtkTreeIter*, is_expander : Gboolean, is_expanded : Gboolean) : Void
  fun gtk_tree_view_column_cell_get_size(tree_column : GtkTreeViewColumn*, cell_area : GdkRectangle*, x_offset : Gint*, y_offset : Gint*, width : Gint*, height : Gint*) : Void
  fun gtk_tree_view_column_cell_is_visible(tree_column : GtkTreeViewColumn*) : Gboolean
  fun gtk_tree_view_column_focus_cell(tree_column : GtkTreeViewColumn*, cell : GtkCellRenderer*) : Void
  fun gtk_tree_view_column_cell_get_position(tree_column : GtkTreeViewColumn*, cell_renderer : GtkCellRenderer*, x_offset : Gint*, width : Gint*) : Gboolean
  fun gtk_tree_view_column_queue_resize(tree_column : GtkTreeViewColumn*) : Void
  fun gtk_tree_view_column_get_tree_view(tree_column : GtkTreeViewColumn*) : GtkWidget*
  fun gtk_tree_view_column_get_button(tree_column : GtkTreeViewColumn*) : GtkWidget*
  fun gtk_text_attributes_new : GtkTextAttributes*
  fun gtk_text_attributes_copy(src : GtkTextAttributes*) : GtkTextAttributes*
  fun gtk_text_attributes_copy_values(src : GtkTextAttributes*, dest : GtkTextAttributes*) : Void
  fun gtk_text_attributes_unref(values : GtkTextAttributes*) : Void
  fun gtk_text_attributes_ref(values : GtkTextAttributes*) : GtkTextAttributes*
  fun gtk_text_attributes_get_type : GType
  fun gtk_text_child_anchor_get_type : GType
  fun gtk_text_child_anchor_new : GtkTextChildAnchor*
  fun gtk_text_child_anchor_get_widgets(anchor : GtkTextChildAnchor*) : GList*
  fun gtk_text_child_anchor_get_deleted(anchor : GtkTextChildAnchor*) : Gboolean
  fun gtk_text_tag_get_type : GType
  fun gtk_text_tag_new(name : Gchar*) : GtkTextTag*
  fun gtk_text_tag_get_priority(tag : GtkTextTag*) : Gint
  fun gtk_text_tag_set_priority(tag : GtkTextTag*, priority : Gint) : Void
  fun gtk_text_tag_event(tag : GtkTextTag*, event_object : GObject*, event : GdkEvent*, iter : GtkTextIter*) : Gboolean
  fun gtk_text_tag_changed(tag : GtkTextTag*, size_changed : Gboolean) : Void
  fun gtk_text_iter_get_buffer(iter : GtkTextIter*) : GtkTextBuffer*
  fun gtk_text_iter_copy(iter : GtkTextIter*) : GtkTextIter*
  fun gtk_text_iter_free(iter : GtkTextIter*) : Void
  fun gtk_text_iter_assign(iter : GtkTextIter*, other : GtkTextIter*) : Void
  fun gtk_text_iter_get_type : GType
  fun gtk_text_iter_get_offset(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_line(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_line_offset(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_line_index(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_visible_line_offset(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_visible_line_index(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_char(iter : GtkTextIter*) : Gunichar
  fun gtk_text_iter_get_slice(start : GtkTextIter*, end : GtkTextIter*) : Gchar*
  fun gtk_text_iter_get_text(start : GtkTextIter*, end : GtkTextIter*) : Gchar*
  fun gtk_text_iter_get_visible_slice(start : GtkTextIter*, end : GtkTextIter*) : Gchar*
  fun gtk_text_iter_get_visible_text(start : GtkTextIter*, end : GtkTextIter*) : Gchar*
  fun gtk_text_iter_get_pixbuf(iter : GtkTextIter*) : GdkPixbuf*
  fun gtk_text_iter_get_marks(iter : GtkTextIter*) : GSList*
  fun gtk_text_iter_get_child_anchor(iter : GtkTextIter*) : GtkTextChildAnchor*
  fun gtk_text_iter_get_toggled_tags(iter : GtkTextIter*, toggled_on : Gboolean) : GSList*
  fun gtk_text_iter_starts_tag(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_begins_tag(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_ends_tag(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_toggles_tag(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_has_tag(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_get_tags(iter : GtkTextIter*) : GSList*
  fun gtk_text_iter_editable(iter : GtkTextIter*, default_setting : Gboolean) : Gboolean
  fun gtk_text_iter_can_insert(iter : GtkTextIter*, default_editability : Gboolean) : Gboolean
  fun gtk_text_iter_starts_word(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_ends_word(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_inside_word(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_starts_sentence(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_ends_sentence(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_inside_sentence(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_starts_line(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_ends_line(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_is_cursor_position(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_get_chars_in_line(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_bytes_in_line(iter : GtkTextIter*) : Gint
  fun gtk_text_iter_get_attributes(iter : GtkTextIter*, values : GtkTextAttributes*) : Gboolean
  fun gtk_text_iter_get_language(iter : GtkTextIter*) : PangoLanguage*
  fun gtk_text_iter_is_end(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_is_start(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_char(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_char(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_chars(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_chars(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_line(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_line(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_lines(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_lines(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_word_end(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_word_start(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_word_ends(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_word_starts(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_visible_line(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_visible_line(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_visible_lines(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_visible_lines(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_visible_word_end(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_visible_word_start(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_visible_word_ends(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_visible_word_starts(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_sentence_end(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_sentence_start(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_sentence_ends(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_sentence_starts(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_cursor_position(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_cursor_position(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_cursor_positions(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_cursor_positions(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_forward_visible_cursor_position(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_visible_cursor_position(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_visible_cursor_positions(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_backward_visible_cursor_positions(iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_iter_set_offset(iter : GtkTextIter*, char_offset : Gint) : Void
  fun gtk_text_iter_set_line(iter : GtkTextIter*, line_number : Gint) : Void
  fun gtk_text_iter_set_line_offset(iter : GtkTextIter*, char_on_line : Gint) : Void
  fun gtk_text_iter_set_line_index(iter : GtkTextIter*, byte_on_line : Gint) : Void
  fun gtk_text_iter_forward_to_end(iter : GtkTextIter*) : Void
  fun gtk_text_iter_forward_to_line_end(iter : GtkTextIter*) : Gboolean
  fun gtk_text_iter_set_visible_line_offset(iter : GtkTextIter*, char_on_line : Gint) : Void
  fun gtk_text_iter_set_visible_line_index(iter : GtkTextIter*, byte_on_line : Gint) : Void
  fun gtk_text_iter_forward_to_tag_toggle(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_backward_to_tag_toggle(iter : GtkTextIter*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_iter_forward_find_char(iter : GtkTextIter*, pred : GtkTextCharPredicate, user_data : Gpointer, limit : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_find_char(iter : GtkTextIter*, pred : GtkTextCharPredicate, user_data : Gpointer, limit : GtkTextIter*) : Gboolean
  fun gtk_text_iter_forward_search(iter : GtkTextIter*, str : Gchar*, flags : GtkTextSearchFlags, match_start : GtkTextIter*, match_end : GtkTextIter*, limit : GtkTextIter*) : Gboolean
  fun gtk_text_iter_backward_search(iter : GtkTextIter*, str : Gchar*, flags : GtkTextSearchFlags, match_start : GtkTextIter*, match_end : GtkTextIter*, limit : GtkTextIter*) : Gboolean
  fun gtk_text_iter_equal(lhs : GtkTextIter*, rhs : GtkTextIter*) : Gboolean
  fun gtk_text_iter_compare(lhs : GtkTextIter*, rhs : GtkTextIter*) : Gint
  fun gtk_text_iter_in_range(iter : GtkTextIter*, start : GtkTextIter*, end : GtkTextIter*) : Gboolean
  fun gtk_text_iter_order(first : GtkTextIter*, second : GtkTextIter*) : Void
  fun gtk_target_list_get_type : GType
  fun gtk_target_list_new(targets : GtkTargetEntry*, ntargets : Guint) : GtkTargetList*
  fun gtk_target_list_ref(list : GtkTargetList*) : GtkTargetList*
  fun gtk_target_list_unref(list : GtkTargetList*) : Void
  fun gtk_target_list_add(list : GtkTargetList*, target : GdkAtom, flags : Guint, info : Guint) : Void
  fun gtk_target_list_add_text_targets(list : GtkTargetList*, info : Guint) : Void
  fun gtk_target_list_add_rich_text_targets(list : GtkTargetList*, info : Guint, deserializable : Gboolean, buffer : GtkTextBuffer*) : Void
  fun gtk_target_list_add_image_targets(list : GtkTargetList*, info : Guint, writable : Gboolean) : Void
  fun gtk_target_list_add_uri_targets(list : GtkTargetList*, info : Guint) : Void
  fun gtk_target_list_add_table(list : GtkTargetList*, targets : GtkTargetEntry*, ntargets : Guint) : Void
  fun gtk_target_list_remove(list : GtkTargetList*, target : GdkAtom) : Void
  fun gtk_target_list_find(list : GtkTargetList*, target : GdkAtom, info : Guint*) : Gboolean
  fun gtk_target_table_new_from_list(list : GtkTargetList*, n_targets : Gint*) : GtkTargetEntry*
  fun gtk_target_table_free(targets : GtkTargetEntry*, n_targets : Gint) : Void
  fun gtk_selection_owner_set(widget : GtkWidget*, selection : GdkAtom, time_ : Guint32) : Gboolean
  fun gtk_selection_owner_set_for_display(display : GdkDisplay*, widget : GtkWidget*, selection : GdkAtom, time_ : Guint32) : Gboolean
  fun gtk_selection_add_target(widget : GtkWidget*, selection : GdkAtom, target : GdkAtom, info : Guint) : Void
  fun gtk_selection_add_targets(widget : GtkWidget*, selection : GdkAtom, targets : GtkTargetEntry*, ntargets : Guint) : Void
  fun gtk_selection_clear_targets(widget : GtkWidget*, selection : GdkAtom) : Void
  fun gtk_selection_convert(widget : GtkWidget*, selection : GdkAtom, target : GdkAtom, time_ : Guint32) : Gboolean
  fun gtk_selection_remove_all(widget : GtkWidget*) : Void
  fun gtk_selection_data_get_selection(selection_data : GtkSelectionData*) : GdkAtom
  fun gtk_selection_data_get_target(selection_data : GtkSelectionData*) : GdkAtom
  fun gtk_selection_data_get_data_type(selection_data : GtkSelectionData*) : GdkAtom
  fun gtk_selection_data_get_format(selection_data : GtkSelectionData*) : Gint
  fun gtk_selection_data_get_data(selection_data : GtkSelectionData*) : Guchar*
  fun gtk_selection_data_get_length(selection_data : GtkSelectionData*) : Gint
  fun gtk_selection_data_get_data_with_length(selection_data : GtkSelectionData*, length : Gint*) : Guchar*
  fun gtk_selection_data_get_display(selection_data : GtkSelectionData*) : GdkDisplay*
  fun gtk_selection_data_set(selection_data : GtkSelectionData*, type : GdkAtom, format : Gint, data : Guchar*, length : Gint) : Void
  fun gtk_selection_data_set_text(selection_data : GtkSelectionData*, str : Gchar*, len : Gint) : Gboolean
  fun gtk_selection_data_get_text(selection_data : GtkSelectionData*) : Guchar*
  fun gtk_selection_data_set_pixbuf(selection_data : GtkSelectionData*, pixbuf : GdkPixbuf*) : Gboolean
  fun gtk_selection_data_get_pixbuf(selection_data : GtkSelectionData*) : GdkPixbuf*
  fun gtk_selection_data_set_uris(selection_data : GtkSelectionData*, uris : Gchar**) : Gboolean
  fun gtk_selection_data_get_uris(selection_data : GtkSelectionData*) : Gchar**
  fun gtk_selection_data_get_targets(selection_data : GtkSelectionData*, targets : GdkAtom**, n_atoms : Gint*) : Gboolean
  fun gtk_selection_data_targets_include_text(selection_data : GtkSelectionData*) : Gboolean
  fun gtk_selection_data_targets_include_rich_text(selection_data : GtkSelectionData*, buffer : GtkTextBuffer*) : Gboolean
  fun gtk_selection_data_targets_include_image(selection_data : GtkSelectionData*, writable : Gboolean) : Gboolean
  fun gtk_selection_data_targets_include_uri(selection_data : GtkSelectionData*) : Gboolean
  fun gtk_targets_include_text(targets : GdkAtom*, n_targets : Gint) : Gboolean
  fun gtk_targets_include_rich_text(targets : GdkAtom*, n_targets : Gint, buffer : GtkTextBuffer*) : Gboolean
  fun gtk_targets_include_image(targets : GdkAtom*, n_targets : Gint, writable : Gboolean) : Gboolean
  fun gtk_targets_include_uri(targets : GdkAtom*, n_targets : Gint) : Gboolean
  fun gtk_selection_data_get_type : GType
  fun gtk_selection_data_copy(data : GtkSelectionData*) : GtkSelectionData*
  fun gtk_selection_data_free(data : GtkSelectionData*) : Void
  fun gtk_target_entry_get_type : GType
  fun gtk_target_entry_new(target : Gchar*, flags : Guint, info : Guint) : GtkTargetEntry*
  fun gtk_target_entry_copy(data : GtkTargetEntry*) : GtkTargetEntry*
  fun gtk_target_entry_free(data : GtkTargetEntry*) : Void
  fun gtk_drag_get_data(widget : GtkWidget*, context : GdkDragContext*, target : GdkAtom, time_ : Guint32) : Void
  fun gtk_drag_finish(context : GdkDragContext*, success : Gboolean, del : Gboolean, time_ : Guint32) : Void
  fun gtk_drag_get_source_widget(context : GdkDragContext*) : GtkWidget*
  fun gtk_drag_highlight(widget : GtkWidget*) : Void
  fun gtk_drag_unhighlight(widget : GtkWidget*) : Void
  fun gtk_drag_dest_set(widget : GtkWidget*, flags : GtkDestDefaults, targets : GtkTargetEntry*, n_targets : Gint, actions : GdkDragAction) : Void
  fun gtk_drag_dest_set_proxy(widget : GtkWidget*, proxy_window : GdkWindow*, protocol : GdkDragProtocol, use_coordinates : Gboolean) : Void
  fun gtk_drag_dest_unset(widget : GtkWidget*) : Void
  fun gtk_drag_dest_find_target(widget : GtkWidget*, context : GdkDragContext*, target_list : GtkTargetList*) : GdkAtom
  fun gtk_drag_dest_get_target_list(widget : GtkWidget*) : GtkTargetList*
  fun gtk_drag_dest_set_target_list(widget : GtkWidget*, target_list : GtkTargetList*) : Void
  fun gtk_drag_dest_add_text_targets(widget : GtkWidget*) : Void
  fun gtk_drag_dest_add_image_targets(widget : GtkWidget*) : Void
  fun gtk_drag_dest_add_uri_targets(widget : GtkWidget*) : Void
  fun gtk_drag_dest_set_track_motion(widget : GtkWidget*, track_motion : Gboolean) : Void
  fun gtk_drag_dest_get_track_motion(widget : GtkWidget*) : Gboolean
  fun gtk_drag_begin_with_coordinates(widget : GtkWidget*, targets : GtkTargetList*, actions : GdkDragAction, button : Gint, event : GdkEvent*, x : Gint, y : Gint) : GdkDragContext*
  fun gtk_drag_begin(widget : GtkWidget*, targets : GtkTargetList*, actions : GdkDragAction, button : Gint, event : GdkEvent*) : GdkDragContext*
  fun gtk_drag_cancel(context : GdkDragContext*) : Void
  fun gtk_drag_set_icon_widget(context : GdkDragContext*, widget : GtkWidget*, hot_x : Gint, hot_y : Gint) : Void
  fun gtk_drag_set_icon_pixbuf(context : GdkDragContext*, pixbuf : GdkPixbuf*, hot_x : Gint, hot_y : Gint) : Void
  fun gtk_drag_set_icon_stock(context : GdkDragContext*, stock_id : Gchar*, hot_x : Gint, hot_y : Gint) : Void
  fun gtk_drag_set_icon_surface(context : GdkDragContext*, surface : CairoSurfaceT*) : Void
  fun gtk_drag_set_icon_name(context : GdkDragContext*, icon_name : Gchar*, hot_x : Gint, hot_y : Gint) : Void
  fun gtk_drag_set_icon_gicon(context : GdkDragContext*, icon : GIcon*, hot_x : Gint, hot_y : Gint) : Void
  fun gtk_drag_set_icon_default(context : GdkDragContext*) : Void
  fun gtk_drag_check_threshold(widget : GtkWidget*, start_x : Gint, start_y : Gint, current_x : Gint, current_y : Gint) : Gboolean
  fun gtk_editable_get_type : GType
  fun gtk_editable_select_region(editable : GtkEditable*, start_pos : Gint, end_pos : Gint) : Void
  fun gtk_editable_get_selection_bounds(editable : GtkEditable*, start_pos : Gint*, end_pos : Gint*) : Gboolean
  fun gtk_editable_insert_text(editable : GtkEditable*, new_text : Gchar*, new_text_length : Gint, position : Gint*) : Void
  fun gtk_editable_delete_text(editable : GtkEditable*, start_pos : Gint, end_pos : Gint) : Void
  fun gtk_editable_get_chars(editable : GtkEditable*, start_pos : Gint, end_pos : Gint) : Gchar*
  fun gtk_editable_cut_clipboard(editable : GtkEditable*) : Void
  fun gtk_editable_copy_clipboard(editable : GtkEditable*) : Void
  fun gtk_editable_paste_clipboard(editable : GtkEditable*) : Void
  fun gtk_editable_delete_selection(editable : GtkEditable*) : Void
  fun gtk_editable_set_position(editable : GtkEditable*, position : Gint) : Void
  fun gtk_editable_get_position(editable : GtkEditable*) : Gint
  fun gtk_editable_set_editable(editable : GtkEditable*, is_editable : Gboolean) : Void
  fun gtk_editable_get_editable(editable : GtkEditable*) : Gboolean
  fun gtk_im_context_get_type : GType
  fun gtk_im_context_set_client_window(context : GtkIMContext*, window : GdkWindow*) : Void
  fun gtk_im_context_get_preedit_string(context : GtkIMContext*, str : Gchar**, attrs : PangoAttrList**, cursor_pos : Gint*) : Void
  fun gtk_im_context_filter_keypress(context : GtkIMContext*, event : GdkEventKey*) : Gboolean
  fun gtk_im_context_focus_in(context : GtkIMContext*) : Void
  fun gtk_im_context_focus_out(context : GtkIMContext*) : Void
  fun gtk_im_context_reset(context : GtkIMContext*) : Void
  fun gtk_im_context_set_cursor_location(context : GtkIMContext*, area : GdkRectangle*) : Void
  fun gtk_im_context_set_use_preedit(context : GtkIMContext*, use_preedit : Gboolean) : Void
  fun gtk_im_context_set_surrounding(context : GtkIMContext*, text : Gchar*, len : Gint, cursor_index : Gint) : Void
  fun gtk_im_context_get_surrounding(context : GtkIMContext*, text : Gchar**, cursor_index : Gint*) : Gboolean
  fun gtk_im_context_delete_surrounding(context : GtkIMContext*, offset : Gint, n_chars : Gint) : Gboolean
  fun gtk_entry_buffer_get_type : GType
  fun gtk_entry_buffer_new(initial_chars : Gchar*, n_initial_chars : Gint) : GtkEntryBuffer*
  fun gtk_entry_buffer_get_bytes(buffer : GtkEntryBuffer*) : Gsize
  fun gtk_entry_buffer_get_length(buffer : GtkEntryBuffer*) : Guint
  fun gtk_entry_buffer_get_text(buffer : GtkEntryBuffer*) : Gchar*
  fun gtk_entry_buffer_set_text(buffer : GtkEntryBuffer*, chars : Gchar*, n_chars : Gint) : Void
  fun gtk_entry_buffer_set_max_length(buffer : GtkEntryBuffer*, max_length : Gint) : Void
  fun gtk_entry_buffer_get_max_length(buffer : GtkEntryBuffer*) : Gint
  fun gtk_entry_buffer_insert_text(buffer : GtkEntryBuffer*, position : Guint, chars : Gchar*, n_chars : Gint) : Guint
  fun gtk_entry_buffer_delete_text(buffer : GtkEntryBuffer*, position : Guint, n_chars : Gint) : Guint
  fun gtk_entry_buffer_emit_inserted_text(buffer : GtkEntryBuffer*, position : Guint, chars : Gchar*, n_chars : Guint) : Void
  fun gtk_entry_buffer_emit_deleted_text(buffer : GtkEntryBuffer*, position : Guint, n_chars : Guint) : Void
  fun gtk_list_store_get_type : GType
  fun gtk_list_store_new(n_columns : Gint) : GtkListStore*
  fun gtk_list_store_newv(n_columns : Gint, types : GType*) : GtkListStore*
  fun gtk_list_store_set_column_types(list_store : GtkListStore*, n_columns : Gint, types : GType*) : Void
  fun gtk_list_store_set_value(list_store : GtkListStore*, iter : GtkTreeIter*, column : Gint, value : GValue*) : Void
  fun gtk_list_store_set(list_store : GtkListStore*, iter : GtkTreeIter*) : Void
  fun gtk_list_store_set_valuesv(list_store : GtkListStore*, iter : GtkTreeIter*, columns : Gint*, values : GValue*, n_values : Gint) : Void
  fun gtk_list_store_set_valist(list_store : GtkListStore*, iter : GtkTreeIter*, var_args : X__va_list_tag*) : Void
  fun gtk_list_store_remove(list_store : GtkListStore*, iter : GtkTreeIter*) : Gboolean
  fun gtk_list_store_insert(list_store : GtkListStore*, iter : GtkTreeIter*, position : Gint) : Void
  fun gtk_list_store_insert_before(list_store : GtkListStore*, iter : GtkTreeIter*, sibling : GtkTreeIter*) : Void
  fun gtk_list_store_insert_after(list_store : GtkListStore*, iter : GtkTreeIter*, sibling : GtkTreeIter*) : Void
  fun gtk_list_store_insert_with_values(list_store : GtkListStore*, iter : GtkTreeIter*, position : Gint) : Void
  fun gtk_list_store_insert_with_valuesv(list_store : GtkListStore*, iter : GtkTreeIter*, position : Gint, columns : Gint*, values : GValue*, n_values : Gint) : Void
  fun gtk_list_store_prepend(list_store : GtkListStore*, iter : GtkTreeIter*) : Void
  fun gtk_list_store_append(list_store : GtkListStore*, iter : GtkTreeIter*) : Void
  fun gtk_list_store_clear(list_store : GtkListStore*) : Void
  fun gtk_list_store_iter_is_valid(list_store : GtkListStore*, iter : GtkTreeIter*) : Gboolean
  fun gtk_list_store_reorder(store : GtkListStore*, new_order : Gint*) : Void
  fun gtk_list_store_swap(store : GtkListStore*, a : GtkTreeIter*, b : GtkTreeIter*) : Void
  fun gtk_list_store_move_after(store : GtkListStore*, iter : GtkTreeIter*, position : GtkTreeIter*) : Void
  fun gtk_list_store_move_before(store : GtkListStore*, iter : GtkTreeIter*, position : GtkTreeIter*) : Void
  fun gtk_tree_model_filter_get_type : GType
  fun gtk_tree_model_filter_new(child_model : GtkTreeModel*, root : GtkTreePath*) : GtkTreeModel*
  fun gtk_tree_model_filter_set_visible_func(filter : GtkTreeModelFilter*, func : GtkTreeModelFilterVisibleFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_model_filter_set_modify_func(filter : GtkTreeModelFilter*, n_columns : Gint, types : GType*, func : GtkTreeModelFilterModifyFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_model_filter_set_visible_column(filter : GtkTreeModelFilter*, column : Gint) : Void
  fun gtk_tree_model_filter_get_model(filter : GtkTreeModelFilter*) : GtkTreeModel*
  fun gtk_tree_model_filter_convert_child_iter_to_iter(filter : GtkTreeModelFilter*, filter_iter : GtkTreeIter*, child_iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_filter_convert_iter_to_child_iter(filter : GtkTreeModelFilter*, child_iter : GtkTreeIter*, filter_iter : GtkTreeIter*) : Void
  fun gtk_tree_model_filter_convert_child_path_to_path(filter : GtkTreeModelFilter*, child_path : GtkTreePath*) : GtkTreePath*
  fun gtk_tree_model_filter_convert_path_to_child_path(filter : GtkTreeModelFilter*, filter_path : GtkTreePath*) : GtkTreePath*
  fun gtk_tree_model_filter_refilter(filter : GtkTreeModelFilter*) : Void
  fun gtk_tree_model_filter_clear_cache(filter : GtkTreeModelFilter*) : Void
  fun gtk_entry_completion_get_type : GType
  fun gtk_entry_completion_new : GtkEntryCompletion*
  fun gtk_entry_completion_new_with_area(area : GtkCellArea*) : GtkEntryCompletion*
  fun gtk_entry_completion_get_entry(completion : GtkEntryCompletion*) : GtkWidget*
  fun gtk_entry_completion_set_model(completion : GtkEntryCompletion*, model : GtkTreeModel*) : Void
  fun gtk_entry_completion_get_model(completion : GtkEntryCompletion*) : GtkTreeModel*
  fun gtk_entry_completion_set_match_func(completion : GtkEntryCompletion*, func : GtkEntryCompletionMatchFunc, func_data : Gpointer, func_notify : GDestroyNotify) : Void
  fun gtk_entry_completion_set_minimum_key_length(completion : GtkEntryCompletion*, length : Gint) : Void
  fun gtk_entry_completion_get_minimum_key_length(completion : GtkEntryCompletion*) : Gint
  fun gtk_entry_completion_compute_prefix(completion : GtkEntryCompletion*, key : UInt8*) : Gchar*
  fun gtk_entry_completion_complete(completion : GtkEntryCompletion*) : Void
  fun gtk_entry_completion_insert_prefix(completion : GtkEntryCompletion*) : Void
  fun gtk_entry_completion_insert_action_text(completion : GtkEntryCompletion*, index_ : Gint, text : Gchar*) : Void
  fun gtk_entry_completion_insert_action_markup(completion : GtkEntryCompletion*, index_ : Gint, markup : Gchar*) : Void
  fun gtk_entry_completion_delete_action(completion : GtkEntryCompletion*, index_ : Gint) : Void
  fun gtk_entry_completion_set_inline_completion(completion : GtkEntryCompletion*, inline_completion : Gboolean) : Void
  fun gtk_entry_completion_get_inline_completion(completion : GtkEntryCompletion*) : Gboolean
  fun gtk_entry_completion_set_inline_selection(completion : GtkEntryCompletion*, inline_selection : Gboolean) : Void
  fun gtk_entry_completion_get_inline_selection(completion : GtkEntryCompletion*) : Gboolean
  fun gtk_entry_completion_set_popup_completion(completion : GtkEntryCompletion*, popup_completion : Gboolean) : Void
  fun gtk_entry_completion_get_popup_completion(completion : GtkEntryCompletion*) : Gboolean
  fun gtk_entry_completion_set_popup_set_width(completion : GtkEntryCompletion*, popup_set_width : Gboolean) : Void
  fun gtk_entry_completion_get_popup_set_width(completion : GtkEntryCompletion*) : Gboolean
  fun gtk_entry_completion_set_popup_single_match(completion : GtkEntryCompletion*, popup_single_match : Gboolean) : Void
  fun gtk_entry_completion_get_popup_single_match(completion : GtkEntryCompletion*) : Gboolean
  fun gtk_entry_completion_get_completion_prefix(completion : GtkEntryCompletion*) : Gchar*
  fun gtk_entry_completion_set_text_column(completion : GtkEntryCompletion*, column : Gint) : Void
  fun gtk_entry_completion_get_text_column(completion : GtkEntryCompletion*) : Gint
  fun gtk_image_get_type : GType
  fun gtk_image_new : GtkWidget*
  fun gtk_image_new_from_file(filename : Gchar*) : GtkWidget*
  fun gtk_image_new_from_resource(resource_path : Gchar*) : GtkWidget*
  fun gtk_image_new_from_pixbuf(pixbuf : GdkPixbuf*) : GtkWidget*
  fun gtk_image_new_from_stock(stock_id : Gchar*, size : GtkIconSize) : GtkWidget*
  fun gtk_image_new_from_icon_set(icon_set : GtkIconSet*, size : GtkIconSize) : GtkWidget*
  fun gtk_image_new_from_animation(animation : GdkPixbufAnimation*) : GtkWidget*
  fun gtk_image_new_from_icon_name(icon_name : Gchar*, size : GtkIconSize) : GtkWidget*
  fun gtk_image_new_from_gicon(icon : GIcon*, size : GtkIconSize) : GtkWidget*
  fun gtk_image_new_from_surface(surface : CairoSurfaceT*) : GtkWidget*
  fun gtk_image_clear(image : GtkImage*) : Void
  fun gtk_image_set_from_file(image : GtkImage*, filename : Gchar*) : Void
  fun gtk_image_set_from_resource(image : GtkImage*, resource_path : Gchar*) : Void
  fun gtk_image_set_from_pixbuf(image : GtkImage*, pixbuf : GdkPixbuf*) : Void
  fun gtk_image_set_from_stock(image : GtkImage*, stock_id : Gchar*, size : GtkIconSize) : Void
  fun gtk_image_set_from_icon_set(image : GtkImage*, icon_set : GtkIconSet*, size : GtkIconSize) : Void
  fun gtk_image_set_from_animation(image : GtkImage*, animation : GdkPixbufAnimation*) : Void
  fun gtk_image_set_from_icon_name(image : GtkImage*, icon_name : Gchar*, size : GtkIconSize) : Void
  fun gtk_image_set_from_gicon(image : GtkImage*, icon : GIcon*, size : GtkIconSize) : Void
  fun gtk_image_set_from_surface(image : GtkImage*, surface : CairoSurfaceT*) : Void
  fun gtk_image_set_pixel_size(image : GtkImage*, pixel_size : Gint) : Void
  fun gtk_image_get_storage_type(image : GtkImage*) : GtkImageType
  fun gtk_image_get_pixbuf(image : GtkImage*) : GdkPixbuf*
  fun gtk_image_get_stock(image : GtkImage*, stock_id : Gchar**, size : GtkIconSize*) : Void
  fun gtk_image_get_icon_set(image : GtkImage*, icon_set : GtkIconSet**, size : GtkIconSize*) : Void
  fun gtk_image_get_animation(image : GtkImage*) : GdkPixbufAnimation*
  fun gtk_image_get_icon_name(image : GtkImage*, icon_name : Gchar**, size : GtkIconSize*) : Void
  fun gtk_image_get_gicon(image : GtkImage*, gicon : GIcon**, size : GtkIconSize*) : Void
  fun gtk_image_get_pixel_size(image : GtkImage*) : Gint
  fun gtk_entry_get_type : GType
  fun gtk_entry_new : GtkWidget*
  fun gtk_entry_new_with_buffer(buffer : GtkEntryBuffer*) : GtkWidget*
  fun gtk_entry_get_buffer(entry : GtkEntry*) : GtkEntryBuffer*
  fun gtk_entry_set_buffer(entry : GtkEntry*, buffer : GtkEntryBuffer*) : Void
  fun gtk_entry_get_text_area(entry : GtkEntry*, text_area : GdkRectangle*) : Void
  fun gtk_entry_set_visibility(entry : GtkEntry*, visible : Gboolean) : Void
  fun gtk_entry_get_visibility(entry : GtkEntry*) : Gboolean
  fun gtk_entry_set_invisible_char(entry : GtkEntry*, ch : Gunichar) : Void
  fun gtk_entry_get_invisible_char(entry : GtkEntry*) : Gunichar
  fun gtk_entry_unset_invisible_char(entry : GtkEntry*) : Void
  fun gtk_entry_set_has_frame(entry : GtkEntry*, setting : Gboolean) : Void
  fun gtk_entry_get_has_frame(entry : GtkEntry*) : Gboolean
  fun gtk_entry_set_inner_border(entry : GtkEntry*, border : GtkBorder*) : Void
  fun gtk_entry_get_inner_border(entry : GtkEntry*) : GtkBorder*
  fun gtk_entry_set_overwrite_mode(entry : GtkEntry*, overwrite : Gboolean) : Void
  fun gtk_entry_get_overwrite_mode(entry : GtkEntry*) : Gboolean
  fun gtk_entry_set_max_length(entry : GtkEntry*, max : Gint) : Void
  fun gtk_entry_get_max_length(entry : GtkEntry*) : Gint
  fun gtk_entry_get_text_length(entry : GtkEntry*) : Guint16
  fun gtk_entry_set_activates_default(entry : GtkEntry*, setting : Gboolean) : Void
  fun gtk_entry_get_activates_default(entry : GtkEntry*) : Gboolean
  fun gtk_entry_set_width_chars(entry : GtkEntry*, n_chars : Gint) : Void
  fun gtk_entry_get_width_chars(entry : GtkEntry*) : Gint
  fun gtk_entry_set_max_width_chars(entry : GtkEntry*, n_chars : Gint) : Void
  fun gtk_entry_get_max_width_chars(entry : GtkEntry*) : Gint
  fun gtk_entry_set_text(entry : GtkEntry*, text : Gchar*) : Void
  fun gtk_entry_get_text(entry : GtkEntry*) : Gchar*
  fun gtk_entry_get_layout(entry : GtkEntry*) : PangoLayout*
  fun gtk_entry_get_layout_offsets(entry : GtkEntry*, x : Gint*, y : Gint*) : Void
  fun gtk_entry_set_alignment(entry : GtkEntry*, xalign : Gfloat) : Void
  fun gtk_entry_get_alignment(entry : GtkEntry*) : Gfloat
  fun gtk_entry_set_completion(entry : GtkEntry*, completion : GtkEntryCompletion*) : Void
  fun gtk_entry_get_completion(entry : GtkEntry*) : GtkEntryCompletion*
  fun gtk_entry_layout_index_to_text_index(entry : GtkEntry*, layout_index : Gint) : Gint
  fun gtk_entry_text_index_to_layout_index(entry : GtkEntry*, text_index : Gint) : Gint
  fun gtk_entry_set_cursor_hadjustment(entry : GtkEntry*, adjustment : GtkAdjustment*) : Void
  fun gtk_entry_get_cursor_hadjustment(entry : GtkEntry*) : GtkAdjustment*
  fun gtk_entry_set_progress_fraction(entry : GtkEntry*, fraction : Gdouble) : Void
  fun gtk_entry_get_progress_fraction(entry : GtkEntry*) : Gdouble
  fun gtk_entry_set_progress_pulse_step(entry : GtkEntry*, fraction : Gdouble) : Void
  fun gtk_entry_get_progress_pulse_step(entry : GtkEntry*) : Gdouble
  fun gtk_entry_progress_pulse(entry : GtkEntry*) : Void
  fun gtk_entry_get_placeholder_text(entry : GtkEntry*) : Gchar*
  fun gtk_entry_set_placeholder_text(entry : GtkEntry*, text : Gchar*) : Void
  fun gtk_entry_set_icon_from_pixbuf(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, pixbuf : GdkPixbuf*) : Void
  fun gtk_entry_set_icon_from_stock(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, stock_id : Gchar*) : Void
  fun gtk_entry_set_icon_from_icon_name(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, icon_name : Gchar*) : Void
  fun gtk_entry_set_icon_from_gicon(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, icon : GIcon*) : Void
  fun gtk_entry_get_icon_storage_type(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : GtkImageType
  fun gtk_entry_get_icon_pixbuf(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : GdkPixbuf*
  fun gtk_entry_get_icon_stock(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : Gchar*
  fun gtk_entry_get_icon_name(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : Gchar*
  fun gtk_entry_get_icon_gicon(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : GIcon*
  fun gtk_entry_set_icon_activatable(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, activatable : Gboolean) : Void
  fun gtk_entry_get_icon_activatable(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : Gboolean
  fun gtk_entry_set_icon_sensitive(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, sensitive : Gboolean) : Void
  fun gtk_entry_get_icon_sensitive(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : Gboolean
  fun gtk_entry_get_icon_at_pos(entry : GtkEntry*, x : Gint, y : Gint) : Gint
  fun gtk_entry_set_icon_tooltip_text(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, tooltip : Gchar*) : Void
  fun gtk_entry_get_icon_tooltip_text(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : Gchar*
  fun gtk_entry_set_icon_tooltip_markup(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, tooltip : Gchar*) : Void
  fun gtk_entry_get_icon_tooltip_markup(entry : GtkEntry*, icon_pos : GtkEntryIconPosition) : Gchar*
  fun gtk_entry_set_icon_drag_source(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, target_list : GtkTargetList*, actions : GdkDragAction) : Void
  fun gtk_entry_get_current_icon_drag_source(entry : GtkEntry*) : Gint
  fun gtk_entry_get_icon_area(entry : GtkEntry*, icon_pos : GtkEntryIconPosition, icon_area : GdkRectangle*) : Void
  fun gtk_entry_im_context_filter_keypress(entry : GtkEntry*, event : GdkEventKey*) : Gboolean
  fun gtk_entry_reset_im_context(entry : GtkEntry*) : Void
  fun gtk_entry_set_input_purpose(entry : GtkEntry*, purpose : GtkInputPurpose) : Void
  fun gtk_entry_get_input_purpose(entry : GtkEntry*) : GtkInputPurpose
  fun gtk_entry_set_input_hints(entry : GtkEntry*, hints : GtkInputHints) : Void
  fun gtk_entry_get_input_hints(entry : GtkEntry*) : GtkInputHints
  fun gtk_entry_set_attributes(entry : GtkEntry*, attrs : PangoAttrList*) : Void
  fun gtk_entry_get_attributes(entry : GtkEntry*) : PangoAttrList*
  fun gtk_entry_set_tabs(entry : GtkEntry*, tabs : PangoTabArray*) : Void
  fun gtk_entry_get_tabs(entry : GtkEntry*) : PangoTabArray*
  fun gtk_entry_grab_focus_without_selecting(entry : GtkEntry*) : Void
  fun gtk_tree_view_get_type : GType
  fun gtk_tree_view_new : GtkWidget*
  fun gtk_tree_view_new_with_model(model : GtkTreeModel*) : GtkWidget*
  fun gtk_tree_view_get_model(tree_view : GtkTreeView*) : GtkTreeModel*
  fun gtk_tree_view_set_model(tree_view : GtkTreeView*, model : GtkTreeModel*) : Void
  fun gtk_tree_view_get_selection(tree_view : GtkTreeView*) : GtkTreeSelection*
  fun gtk_tree_view_get_hadjustment(tree_view : GtkTreeView*) : GtkAdjustment*
  fun gtk_tree_view_set_hadjustment(tree_view : GtkTreeView*, adjustment : GtkAdjustment*) : Void
  fun gtk_tree_view_get_vadjustment(tree_view : GtkTreeView*) : GtkAdjustment*
  fun gtk_tree_view_set_vadjustment(tree_view : GtkTreeView*, adjustment : GtkAdjustment*) : Void
  fun gtk_tree_view_get_headers_visible(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_headers_visible(tree_view : GtkTreeView*, headers_visible : Gboolean) : Void
  fun gtk_tree_view_columns_autosize(tree_view : GtkTreeView*) : Void
  fun gtk_tree_view_get_headers_clickable(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_headers_clickable(tree_view : GtkTreeView*, setting : Gboolean) : Void
  fun gtk_tree_view_set_rules_hint(tree_view : GtkTreeView*, setting : Gboolean) : Void
  fun gtk_tree_view_get_rules_hint(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_get_activate_on_single_click(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_activate_on_single_click(tree_view : GtkTreeView*, single : Gboolean) : Void
  fun gtk_tree_view_append_column(tree_view : GtkTreeView*, column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_remove_column(tree_view : GtkTreeView*, column : GtkTreeViewColumn*) : Gint
  fun gtk_tree_view_insert_column(tree_view : GtkTreeView*, column : GtkTreeViewColumn*, position : Gint) : Gint
  fun gtk_tree_view_insert_column_with_attributes(tree_view : GtkTreeView*, position : Gint, title : Gchar*, cell : GtkCellRenderer*) : Gint
  fun gtk_tree_view_insert_column_with_data_func(tree_view : GtkTreeView*, position : Gint, title : Gchar*, cell : GtkCellRenderer*, func : GtkTreeCellDataFunc, data : Gpointer, dnotify : GDestroyNotify) : Gint
  fun gtk_tree_view_get_n_columns(tree_view : GtkTreeView*) : Guint
  fun gtk_tree_view_get_column(tree_view : GtkTreeView*, n : Gint) : GtkTreeViewColumn*
  fun gtk_tree_view_get_columns(tree_view : GtkTreeView*) : GList*
  fun gtk_tree_view_move_column_after(tree_view : GtkTreeView*, column : GtkTreeViewColumn*, base_column : GtkTreeViewColumn*) : Void
  fun gtk_tree_view_set_expander_column(tree_view : GtkTreeView*, column : GtkTreeViewColumn*) : Void
  fun gtk_tree_view_get_expander_column(tree_view : GtkTreeView*) : GtkTreeViewColumn*
  fun gtk_tree_view_set_column_drag_function(tree_view : GtkTreeView*, func : GtkTreeViewColumnDropFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_view_scroll_to_point(tree_view : GtkTreeView*, tree_x : Gint, tree_y : Gint) : Void
  fun gtk_tree_view_scroll_to_cell(tree_view : GtkTreeView*, path : GtkTreePath*, column : GtkTreeViewColumn*, use_align : Gboolean, row_align : Gfloat, col_align : Gfloat) : Void
  fun gtk_tree_view_row_activated(tree_view : GtkTreeView*, path : GtkTreePath*, column : GtkTreeViewColumn*) : Void
  fun gtk_tree_view_expand_all(tree_view : GtkTreeView*) : Void
  fun gtk_tree_view_collapse_all(tree_view : GtkTreeView*) : Void
  fun gtk_tree_view_expand_to_path(tree_view : GtkTreeView*, path : GtkTreePath*) : Void
  fun gtk_tree_view_expand_row(tree_view : GtkTreeView*, path : GtkTreePath*, open_all : Gboolean) : Gboolean
  fun gtk_tree_view_collapse_row(tree_view : GtkTreeView*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_view_map_expanded_rows(tree_view : GtkTreeView*, func : GtkTreeViewMappingFunc, data : Gpointer) : Void
  fun gtk_tree_view_row_expanded(tree_view : GtkTreeView*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_view_set_reorderable(tree_view : GtkTreeView*, reorderable : Gboolean) : Void
  fun gtk_tree_view_get_reorderable(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_cursor(tree_view : GtkTreeView*, path : GtkTreePath*, focus_column : GtkTreeViewColumn*, start_editing : Gboolean) : Void
  fun gtk_tree_view_set_cursor_on_cell(tree_view : GtkTreeView*, path : GtkTreePath*, focus_column : GtkTreeViewColumn*, focus_cell : GtkCellRenderer*, start_editing : Gboolean) : Void
  fun gtk_tree_view_get_cursor(tree_view : GtkTreeView*, path : GtkTreePath**, focus_column : GtkTreeViewColumn**) : Void
  fun gtk_tree_view_get_bin_window(tree_view : GtkTreeView*) : GdkWindow*
  fun gtk_tree_view_get_path_at_pos(tree_view : GtkTreeView*, x : Gint, y : Gint, path : GtkTreePath**, column : GtkTreeViewColumn**, cell_x : Gint*, cell_y : Gint*) : Gboolean
  fun gtk_tree_view_get_cell_area(tree_view : GtkTreeView*, path : GtkTreePath*, column : GtkTreeViewColumn*, rect : GdkRectangle*) : Void
  fun gtk_tree_view_get_background_area(tree_view : GtkTreeView*, path : GtkTreePath*, column : GtkTreeViewColumn*, rect : GdkRectangle*) : Void
  fun gtk_tree_view_get_visible_rect(tree_view : GtkTreeView*, visible_rect : GdkRectangle*) : Void
  fun gtk_tree_view_get_visible_range(tree_view : GtkTreeView*, start_path : GtkTreePath**, end_path : GtkTreePath**) : Gboolean
  fun gtk_tree_view_is_blank_at_pos(tree_view : GtkTreeView*, x : Gint, y : Gint, path : GtkTreePath**, column : GtkTreeViewColumn**, cell_x : Gint*, cell_y : Gint*) : Gboolean
  fun gtk_tree_view_enable_model_drag_source(tree_view : GtkTreeView*, start_button_mask : GdkModifierType, targets : GtkTargetEntry*, n_targets : Gint, actions : GdkDragAction) : Void
  fun gtk_tree_view_enable_model_drag_dest(tree_view : GtkTreeView*, targets : GtkTargetEntry*, n_targets : Gint, actions : GdkDragAction) : Void
  fun gtk_tree_view_unset_rows_drag_source(tree_view : GtkTreeView*) : Void
  fun gtk_tree_view_unset_rows_drag_dest(tree_view : GtkTreeView*) : Void
  fun gtk_tree_view_set_drag_dest_row(tree_view : GtkTreeView*, path : GtkTreePath*, pos : GtkTreeViewDropPosition) : Void
  fun gtk_tree_view_get_drag_dest_row(tree_view : GtkTreeView*, path : GtkTreePath**, pos : GtkTreeViewDropPosition*) : Void
  fun gtk_tree_view_get_dest_row_at_pos(tree_view : GtkTreeView*, drag_x : Gint, drag_y : Gint, path : GtkTreePath**, pos : GtkTreeViewDropPosition*) : Gboolean
  fun gtk_tree_view_create_row_drag_icon(tree_view : GtkTreeView*, path : GtkTreePath*) : CairoSurfaceT*
  fun gtk_tree_view_set_enable_search(tree_view : GtkTreeView*, enable_search : Gboolean) : Void
  fun gtk_tree_view_get_enable_search(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_get_search_column(tree_view : GtkTreeView*) : Gint
  fun gtk_tree_view_set_search_column(tree_view : GtkTreeView*, column : Gint) : Void
  fun gtk_tree_view_get_search_equal_func(tree_view : GtkTreeView*) : GtkTreeViewSearchEqualFunc
  fun gtk_tree_view_set_search_equal_func(tree_view : GtkTreeView*, search_equal_func : GtkTreeViewSearchEqualFunc, search_user_data : Gpointer, search_destroy : GDestroyNotify) : Void
  fun gtk_tree_view_get_search_entry(tree_view : GtkTreeView*) : GtkEntry*
  fun gtk_tree_view_set_search_entry(tree_view : GtkTreeView*, entry : GtkEntry*) : Void
  fun gtk_tree_view_get_search_position_func(tree_view : GtkTreeView*) : GtkTreeViewSearchPositionFunc
  fun gtk_tree_view_set_search_position_func(tree_view : GtkTreeView*, func : GtkTreeViewSearchPositionFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_view_convert_widget_to_tree_coords(tree_view : GtkTreeView*, wx : Gint, wy : Gint, tx : Gint*, ty : Gint*) : Void
  fun gtk_tree_view_convert_tree_to_widget_coords(tree_view : GtkTreeView*, tx : Gint, ty : Gint, wx : Gint*, wy : Gint*) : Void
  fun gtk_tree_view_convert_widget_to_bin_window_coords(tree_view : GtkTreeView*, wx : Gint, wy : Gint, bx : Gint*, by : Gint*) : Void
  fun gtk_tree_view_convert_bin_window_to_widget_coords(tree_view : GtkTreeView*, bx : Gint, by : Gint, wx : Gint*, wy : Gint*) : Void
  fun gtk_tree_view_convert_tree_to_bin_window_coords(tree_view : GtkTreeView*, tx : Gint, ty : Gint, bx : Gint*, by : Gint*) : Void
  fun gtk_tree_view_convert_bin_window_to_tree_coords(tree_view : GtkTreeView*, bx : Gint, by : Gint, tx : Gint*, ty : Gint*) : Void
  fun gtk_tree_view_set_destroy_count_func(tree_view : GtkTreeView*, func : GtkTreeDestroyCountFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_view_set_fixed_height_mode(tree_view : GtkTreeView*, enable : Gboolean) : Void
  fun gtk_tree_view_get_fixed_height_mode(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_hover_selection(tree_view : GtkTreeView*, hover : Gboolean) : Void
  fun gtk_tree_view_get_hover_selection(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_hover_expand(tree_view : GtkTreeView*, expand : Gboolean) : Void
  fun gtk_tree_view_get_hover_expand(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_rubber_banding(tree_view : GtkTreeView*, enable : Gboolean) : Void
  fun gtk_tree_view_get_rubber_banding(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_is_rubber_banding_active(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_get_row_separator_func(tree_view : GtkTreeView*) : GtkTreeViewRowSeparatorFunc
  fun gtk_tree_view_set_row_separator_func(tree_view : GtkTreeView*, func : GtkTreeViewRowSeparatorFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_view_get_grid_lines(tree_view : GtkTreeView*) : GtkTreeViewGridLines
  fun gtk_tree_view_set_grid_lines(tree_view : GtkTreeView*, grid_lines : GtkTreeViewGridLines) : Void
  fun gtk_tree_view_get_enable_tree_lines(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_enable_tree_lines(tree_view : GtkTreeView*, enabled : Gboolean) : Void
  fun gtk_tree_view_set_show_expanders(tree_view : GtkTreeView*, enabled : Gboolean) : Void
  fun gtk_tree_view_get_show_expanders(tree_view : GtkTreeView*) : Gboolean
  fun gtk_tree_view_set_level_indentation(tree_view : GtkTreeView*, indentation : Gint) : Void
  fun gtk_tree_view_get_level_indentation(tree_view : GtkTreeView*) : Gint
  fun gtk_tree_view_set_tooltip_row(tree_view : GtkTreeView*, tooltip : GtkTooltip*, path : GtkTreePath*) : Void
  fun gtk_tree_view_set_tooltip_cell(tree_view : GtkTreeView*, tooltip : GtkTooltip*, path : GtkTreePath*, column : GtkTreeViewColumn*, cell : GtkCellRenderer*) : Void
  fun gtk_tree_view_get_tooltip_context(tree_view : GtkTreeView*, x : Gint*, y : Gint*, keyboard_tip : Gboolean, model : GtkTreeModel**, path : GtkTreePath**, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_view_set_tooltip_column(tree_view : GtkTreeView*, column : Gint) : Void
  fun gtk_tree_view_get_tooltip_column(tree_view : GtkTreeView*) : Gint
  fun gtk_combo_box_get_type : GType
  fun gtk_combo_box_new : GtkWidget*
  fun gtk_combo_box_new_with_area(area : GtkCellArea*) : GtkWidget*
  fun gtk_combo_box_new_with_area_and_entry(area : GtkCellArea*) : GtkWidget*
  fun gtk_combo_box_new_with_entry : GtkWidget*
  fun gtk_combo_box_new_with_model(model : GtkTreeModel*) : GtkWidget*
  fun gtk_combo_box_new_with_model_and_entry(model : GtkTreeModel*) : GtkWidget*
  fun gtk_combo_box_get_wrap_width(combo_box : GtkComboBox*) : Gint
  fun gtk_combo_box_set_wrap_width(combo_box : GtkComboBox*, width : Gint) : Void
  fun gtk_combo_box_get_row_span_column(combo_box : GtkComboBox*) : Gint
  fun gtk_combo_box_set_row_span_column(combo_box : GtkComboBox*, row_span : Gint) : Void
  fun gtk_combo_box_get_column_span_column(combo_box : GtkComboBox*) : Gint
  fun gtk_combo_box_set_column_span_column(combo_box : GtkComboBox*, column_span : Gint) : Void
  fun gtk_combo_box_get_add_tearoffs(combo_box : GtkComboBox*) : Gboolean
  fun gtk_combo_box_set_add_tearoffs(combo_box : GtkComboBox*, add_tearoffs : Gboolean) : Void
  fun gtk_combo_box_get_title(combo_box : GtkComboBox*) : Gchar*
  fun gtk_combo_box_set_title(combo_box : GtkComboBox*, title : Gchar*) : Void
  fun gtk_combo_box_get_focus_on_click(combo : GtkComboBox*) : Gboolean
  fun gtk_combo_box_set_focus_on_click(combo : GtkComboBox*, focus_on_click : Gboolean) : Void
  fun gtk_combo_box_get_active(combo_box : GtkComboBox*) : Gint
  fun gtk_combo_box_set_active(combo_box : GtkComboBox*, index_ : Gint) : Void
  fun gtk_combo_box_get_active_iter(combo_box : GtkComboBox*, iter : GtkTreeIter*) : Gboolean
  fun gtk_combo_box_set_active_iter(combo_box : GtkComboBox*, iter : GtkTreeIter*) : Void
  fun gtk_combo_box_set_model(combo_box : GtkComboBox*, model : GtkTreeModel*) : Void
  fun gtk_combo_box_get_model(combo_box : GtkComboBox*) : GtkTreeModel*
  fun gtk_combo_box_get_row_separator_func(combo_box : GtkComboBox*) : GtkTreeViewRowSeparatorFunc
  fun gtk_combo_box_set_row_separator_func(combo_box : GtkComboBox*, func : GtkTreeViewRowSeparatorFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_combo_box_set_button_sensitivity(combo_box : GtkComboBox*, sensitivity : GtkSensitivityType) : Void
  fun gtk_combo_box_get_button_sensitivity(combo_box : GtkComboBox*) : GtkSensitivityType
  fun gtk_combo_box_get_has_entry(combo_box : GtkComboBox*) : Gboolean
  fun gtk_combo_box_set_entry_text_column(combo_box : GtkComboBox*, text_column : Gint) : Void
  fun gtk_combo_box_get_entry_text_column(combo_box : GtkComboBox*) : Gint
  fun gtk_combo_box_set_popup_fixed_width(combo_box : GtkComboBox*, fixed : Gboolean) : Void
  fun gtk_combo_box_get_popup_fixed_width(combo_box : GtkComboBox*) : Gboolean
  fun gtk_combo_box_popup(combo_box : GtkComboBox*) : Void
  fun gtk_combo_box_popup_for_device(combo_box : GtkComboBox*, device : GdkDevice*) : Void
  fun gtk_combo_box_popdown(combo_box : GtkComboBox*) : Void
  fun gtk_combo_box_get_popup_accessible(combo_box : GtkComboBox*) : AtkObject*
  fun gtk_combo_box_get_id_column(combo_box : GtkComboBox*) : Gint
  fun gtk_combo_box_set_id_column(combo_box : GtkComboBox*, id_column : Gint) : Void
  fun gtk_combo_box_get_active_id(combo_box : GtkComboBox*) : Gchar*
  fun gtk_combo_box_set_active_id(combo_box : GtkComboBox*, active_id : Gchar*) : Gboolean
  fun gtk_app_chooser_button_get_type : GType
  fun gtk_app_chooser_button_new(content_type : Gchar*) : GtkWidget*
  fun gtk_app_chooser_button_append_separator(self : GtkAppChooserButton*) : Void
  fun gtk_app_chooser_button_append_custom_item(self : GtkAppChooserButton*, name : Gchar*, label : Gchar*, icon : GIcon*) : Void
  fun gtk_app_chooser_button_set_active_custom_item(self : GtkAppChooserButton*, name : Gchar*) : Void
  fun gtk_app_chooser_button_set_show_dialog_item(self : GtkAppChooserButton*, setting : Gboolean) : Void
  fun gtk_app_chooser_button_get_show_dialog_item(self : GtkAppChooserButton*) : Gboolean
  fun gtk_app_chooser_button_set_heading(self : GtkAppChooserButton*, heading : Gchar*) : Void
  fun gtk_app_chooser_button_get_heading(self : GtkAppChooserButton*) : Gchar*
  fun gtk_app_chooser_button_set_show_default_item(self : GtkAppChooserButton*, setting : Gboolean) : Void
  fun gtk_app_chooser_button_get_show_default_item(self : GtkAppChooserButton*) : Gboolean
  fun gtk_shortcuts_window_get_type : GType
  fun glib_autoptr_cleanup_gtk_shortcuts_window(_ptr : GtkShortcutsWindow**) : Void
  fun gtk_application_window_get_type : GType
  fun gtk_application_window_new(application : GtkApplication*) : GtkWidget*
  fun gtk_application_window_set_show_menubar(window : GtkApplicationWindow*, show_menubar : Gboolean) : Void
  fun gtk_application_window_get_show_menubar(window : GtkApplicationWindow*) : Gboolean
  fun gtk_application_window_get_id(window : GtkApplicationWindow*) : Guint
  fun gtk_application_window_set_help_overlay(window : GtkApplicationWindow*, help_overlay : GtkShortcutsWindow*) : Void
  fun gtk_application_window_get_help_overlay(window : GtkApplicationWindow*) : GtkShortcutsWindow*
  fun gtk_frame_get_type : GType
  fun gtk_frame_new(label : Gchar*) : GtkWidget*
  fun gtk_frame_set_label(frame : GtkFrame*, label : Gchar*) : Void
  fun gtk_frame_get_label(frame : GtkFrame*) : Gchar*
  fun gtk_frame_set_label_widget(frame : GtkFrame*, label_widget : GtkWidget*) : Void
  fun gtk_frame_get_label_widget(frame : GtkFrame*) : GtkWidget*
  fun gtk_frame_set_label_align(frame : GtkFrame*, xalign : Gfloat, yalign : Gfloat) : Void
  fun gtk_frame_get_label_align(frame : GtkFrame*, xalign : Gfloat*, yalign : Gfloat*) : Void
  fun gtk_frame_set_shadow_type(frame : GtkFrame*, type : GtkShadowType) : Void
  fun gtk_frame_get_shadow_type(frame : GtkFrame*) : GtkShadowType
  fun gtk_aspect_frame_get_type : GType
  fun gtk_aspect_frame_new(label : Gchar*, xalign : Gfloat, yalign : Gfloat, ratio : Gfloat, obey_child : Gboolean) : GtkWidget*
  fun gtk_aspect_frame_set(aspect_frame : GtkAspectFrame*, xalign : Gfloat, yalign : Gfloat, ratio : Gfloat, obey_child : Gboolean) : Void
  fun gtk_assistant_get_type : GType
  fun gtk_assistant_new : GtkWidget*
  fun gtk_assistant_next_page(assistant : GtkAssistant*) : Void
  fun gtk_assistant_previous_page(assistant : GtkAssistant*) : Void
  fun gtk_assistant_get_current_page(assistant : GtkAssistant*) : Gint
  fun gtk_assistant_set_current_page(assistant : GtkAssistant*, page_num : Gint) : Void
  fun gtk_assistant_get_n_pages(assistant : GtkAssistant*) : Gint
  fun gtk_assistant_get_nth_page(assistant : GtkAssistant*, page_num : Gint) : GtkWidget*
  fun gtk_assistant_prepend_page(assistant : GtkAssistant*, page : GtkWidget*) : Gint
  fun gtk_assistant_append_page(assistant : GtkAssistant*, page : GtkWidget*) : Gint
  fun gtk_assistant_insert_page(assistant : GtkAssistant*, page : GtkWidget*, position : Gint) : Gint
  fun gtk_assistant_remove_page(assistant : GtkAssistant*, page_num : Gint) : Void
  fun gtk_assistant_set_forward_page_func(assistant : GtkAssistant*, page_func : GtkAssistantPageFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_assistant_set_page_type(assistant : GtkAssistant*, page : GtkWidget*, type : GtkAssistantPageType) : Void
  fun gtk_assistant_get_page_type(assistant : GtkAssistant*, page : GtkWidget*) : GtkAssistantPageType
  fun gtk_assistant_set_page_title(assistant : GtkAssistant*, page : GtkWidget*, title : Gchar*) : Void
  fun gtk_assistant_get_page_title(assistant : GtkAssistant*, page : GtkWidget*) : Gchar*
  fun gtk_assistant_set_page_header_image(assistant : GtkAssistant*, page : GtkWidget*, pixbuf : GdkPixbuf*) : Void
  fun gtk_assistant_get_page_header_image(assistant : GtkAssistant*, page : GtkWidget*) : GdkPixbuf*
  fun gtk_assistant_set_page_side_image(assistant : GtkAssistant*, page : GtkWidget*, pixbuf : GdkPixbuf*) : Void
  fun gtk_assistant_get_page_side_image(assistant : GtkAssistant*, page : GtkWidget*) : GdkPixbuf*
  fun gtk_assistant_set_page_complete(assistant : GtkAssistant*, page : GtkWidget*, complete : Gboolean) : Void
  fun gtk_assistant_get_page_complete(assistant : GtkAssistant*, page : GtkWidget*) : Gboolean
  fun gtk_assistant_add_action_widget(assistant : GtkAssistant*, child : GtkWidget*) : Void
  fun gtk_assistant_remove_action_widget(assistant : GtkAssistant*, child : GtkWidget*) : Void
  fun gtk_assistant_update_buttons_state(assistant : GtkAssistant*) : Void
  fun gtk_assistant_commit(assistant : GtkAssistant*) : Void
  fun gtk_assistant_set_page_has_padding(assistant : GtkAssistant*, page : GtkWidget*, has_padding : Gboolean) : Void
  fun gtk_assistant_get_page_has_padding(assistant : GtkAssistant*, page : GtkWidget*) : Gboolean
  fun gtk_button_box_get_type : GType
  fun gtk_button_box_new(orientation : GtkOrientation) : GtkWidget*
  fun gtk_button_box_get_layout(widget : GtkButtonBox*) : GtkButtonBoxStyle
  fun gtk_button_box_set_layout(widget : GtkButtonBox*, layout_style : GtkButtonBoxStyle) : Void
  fun gtk_button_box_get_child_secondary(widget : GtkButtonBox*, child : GtkWidget*) : Gboolean
  fun gtk_button_box_set_child_secondary(widget : GtkButtonBox*, child : GtkWidget*, is_secondary : Gboolean) : Void
  fun gtk_button_box_get_child_non_homogeneous(widget : GtkButtonBox*, child : GtkWidget*) : Gboolean
  fun gtk_button_box_set_child_non_homogeneous(widget : GtkButtonBox*, child : GtkWidget*, non_homogeneous : Gboolean) : Void
  fun gtk_binding_set_new(set_name : Gchar*) : GtkBindingSet*
  fun gtk_binding_set_by_class(object_class : Gpointer) : GtkBindingSet*
  fun gtk_binding_set_find(set_name : Gchar*) : GtkBindingSet*
  fun gtk_bindings_activate(object : GObject*, keyval : Guint, modifiers : GdkModifierType) : Gboolean
  fun gtk_bindings_activate_event(object : GObject*, event : GdkEventKey*) : Gboolean
  fun gtk_binding_set_activate(binding_set : GtkBindingSet*, keyval : Guint, modifiers : GdkModifierType, object : GObject*) : Gboolean
  fun gtk_binding_entry_skip(binding_set : GtkBindingSet*, keyval : Guint, modifiers : GdkModifierType) : Void
  fun gtk_binding_entry_add_signal(binding_set : GtkBindingSet*, keyval : Guint, modifiers : GdkModifierType, signal_name : Gchar*, n_args : Guint) : Void
  fun gtk_binding_entry_add_signall(binding_set : GtkBindingSet*, keyval : Guint, modifiers : GdkModifierType, signal_name : Gchar*, binding_args : GSList*) : Void
  fun gtk_binding_entry_add_signal_from_string(binding_set : GtkBindingSet*, signal_desc : Gchar*) : GTokenType
  fun gtk_binding_entry_remove(binding_set : GtkBindingSet*, keyval : Guint, modifiers : GdkModifierType) : Void
  fun gtk_builder_error_quark : GQuark
  fun gtk_builder_get_type : GType
  fun gtk_builder_new : GtkBuilder*
  fun gtk_builder_add_from_file(builder : GtkBuilder*, filename : Gchar*, error : GError**) : Guint
  fun gtk_builder_add_from_resource(builder : GtkBuilder*, resource_path : Gchar*, error : GError**) : Guint
  fun gtk_builder_add_from_string(builder : GtkBuilder*, buffer : Gchar*, length : Gsize, error : GError**) : Guint
  fun gtk_builder_add_objects_from_file(builder : GtkBuilder*, filename : Gchar*, object_ids : Gchar**, error : GError**) : Guint
  fun gtk_builder_add_objects_from_resource(builder : GtkBuilder*, resource_path : Gchar*, object_ids : Gchar**, error : GError**) : Guint
  fun gtk_builder_add_objects_from_string(builder : GtkBuilder*, buffer : Gchar*, length : Gsize, object_ids : Gchar**, error : GError**) : Guint
  fun gtk_builder_get_object(builder : GtkBuilder*, name : Gchar*) : GObject*
  fun gtk_builder_get_objects(builder : GtkBuilder*) : GSList*
  fun gtk_builder_expose_object(builder : GtkBuilder*, name : Gchar*, object : GObject*) : Void
  fun gtk_builder_connect_signals(builder : GtkBuilder*, user_data : Gpointer) : Void
  fun gtk_builder_connect_signals_full(builder : GtkBuilder*, func : GtkBuilderConnectFunc, user_data : Gpointer) : Void
  fun gtk_builder_set_translation_domain(builder : GtkBuilder*, domain : Gchar*) : Void
  fun gtk_builder_get_translation_domain(builder : GtkBuilder*) : Gchar*
  fun gtk_builder_get_type_from_name(builder : GtkBuilder*, type_name : UInt8*) : GType
  fun gtk_builder_value_from_string(builder : GtkBuilder*, pspec : GParamSpec*, string : Gchar*, value : GValue*, error : GError**) : Gboolean
  fun gtk_builder_value_from_string_type(builder : GtkBuilder*, type : GType, string : Gchar*, value : GValue*, error : GError**) : Gboolean
  fun gtk_builder_new_from_file(filename : Gchar*) : GtkBuilder*
  fun gtk_builder_new_from_resource(resource_path : Gchar*) : GtkBuilder*
  fun gtk_builder_new_from_string(string : Gchar*, length : Gssize) : GtkBuilder*
  fun gtk_builder_add_callback_symbol(builder : GtkBuilder*, callback_name : Gchar*, callback_symbol : GCallback) : Void
  fun gtk_builder_add_callback_symbols(builder : GtkBuilder*, first_callback_name : Gchar*, first_callback_symbol : GCallback) : Void
  fun gtk_builder_lookup_callback_symbol(builder : GtkBuilder*, callback_name : Gchar*) : GCallback
  fun gtk_builder_set_application(builder : GtkBuilder*, application : GtkApplication*) : Void
  fun gtk_builder_get_application(builder : GtkBuilder*) : GtkApplication*
  fun gtk_builder_extend_with_template(builder : GtkBuilder*, widget : GtkWidget*, template_type : GType, buffer : Gchar*, length : Gsize, error : GError**) : Guint
  fun gtk_buildable_get_type : GType
  fun gtk_buildable_set_name(buildable : GtkBuildable*, name : Gchar*) : Void
  fun gtk_buildable_get_name(buildable : GtkBuildable*) : Gchar*
  fun gtk_buildable_add_child(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, type : Gchar*) : Void
  fun gtk_buildable_set_buildable_property(buildable : GtkBuildable*, builder : GtkBuilder*, name : Gchar*, value : GValue*) : Void
  fun gtk_buildable_construct_child(buildable : GtkBuildable*, builder : GtkBuilder*, name : Gchar*) : GObject*
  fun gtk_buildable_custom_tag_start(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, tagname : Gchar*, parser : GMarkupParser*, data : Gpointer*) : Gboolean
  fun gtk_buildable_custom_tag_end(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, tagname : Gchar*, data : Gpointer*) : Void
  fun gtk_buildable_custom_finished(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, tagname : Gchar*, data : Gpointer) : Void
  fun gtk_buildable_parser_finished(buildable : GtkBuildable*, builder : GtkBuilder*) : Void
  fun gtk_buildable_get_internal_child(buildable : GtkBuildable*, builder : GtkBuilder*, childname : Gchar*) : GObject*
  fun gtk_button_get_type : GType
  fun gtk_button_new : GtkWidget*
  fun gtk_button_new_with_label(label : Gchar*) : GtkWidget*
  fun gtk_button_new_from_icon_name(icon_name : Gchar*, size : GtkIconSize) : GtkWidget*
  fun gtk_button_new_from_stock(stock_id : Gchar*) : GtkWidget*
  fun gtk_button_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun gtk_button_clicked(button : GtkButton*) : Void
  fun gtk_button_pressed(button : GtkButton*) : Void
  fun gtk_button_released(button : GtkButton*) : Void
  fun gtk_button_enter(button : GtkButton*) : Void
  fun gtk_button_leave(button : GtkButton*) : Void
  fun gtk_button_set_relief(button : GtkButton*, relief : GtkReliefStyle) : Void
  fun gtk_button_get_relief(button : GtkButton*) : GtkReliefStyle
  fun gtk_button_set_label(button : GtkButton*, label : Gchar*) : Void
  fun gtk_button_get_label(button : GtkButton*) : Gchar*
  fun gtk_button_set_use_underline(button : GtkButton*, use_underline : Gboolean) : Void
  fun gtk_button_get_use_underline(button : GtkButton*) : Gboolean
  fun gtk_button_set_use_stock(button : GtkButton*, use_stock : Gboolean) : Void
  fun gtk_button_get_use_stock(button : GtkButton*) : Gboolean
  fun gtk_button_set_focus_on_click(button : GtkButton*, focus_on_click : Gboolean) : Void
  fun gtk_button_get_focus_on_click(button : GtkButton*) : Gboolean
  fun gtk_button_set_alignment(button : GtkButton*, xalign : Gfloat, yalign : Gfloat) : Void
  fun gtk_button_get_alignment(button : GtkButton*, xalign : Gfloat*, yalign : Gfloat*) : Void
  fun gtk_button_set_image(button : GtkButton*, image : GtkWidget*) : Void
  fun gtk_button_get_image(button : GtkButton*) : GtkWidget*
  fun gtk_button_set_image_position(button : GtkButton*, position : GtkPositionType) : Void
  fun gtk_button_get_image_position(button : GtkButton*) : GtkPositionType
  fun gtk_button_set_always_show_image(button : GtkButton*, always_show : Gboolean) : Void
  fun gtk_button_get_always_show_image(button : GtkButton*) : Gboolean
  fun gtk_button_get_event_window(button : GtkButton*) : GdkWindow*
  fun gtk_calendar_get_type : GType
  fun gtk_calendar_new : GtkWidget*
  fun gtk_calendar_select_month(calendar : GtkCalendar*, month : Guint, year : Guint) : Void
  fun gtk_calendar_select_day(calendar : GtkCalendar*, day : Guint) : Void
  fun gtk_calendar_mark_day(calendar : GtkCalendar*, day : Guint) : Void
  fun gtk_calendar_unmark_day(calendar : GtkCalendar*, day : Guint) : Void
  fun gtk_calendar_clear_marks(calendar : GtkCalendar*) : Void
  fun gtk_calendar_set_display_options(calendar : GtkCalendar*, flags : GtkCalendarDisplayOptions) : Void
  fun gtk_calendar_get_display_options(calendar : GtkCalendar*) : GtkCalendarDisplayOptions
  fun gtk_calendar_get_date(calendar : GtkCalendar*, year : Guint*, month : Guint*, day : Guint*) : Void
  fun gtk_calendar_set_detail_func(calendar : GtkCalendar*, func : GtkCalendarDetailFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_calendar_set_detail_width_chars(calendar : GtkCalendar*, chars : Gint) : Void
  fun gtk_calendar_set_detail_height_rows(calendar : GtkCalendar*, rows : Gint) : Void
  fun gtk_calendar_get_detail_width_chars(calendar : GtkCalendar*) : Gint
  fun gtk_calendar_get_detail_height_rows(calendar : GtkCalendar*) : Gint
  fun gtk_calendar_get_day_is_marked(calendar : GtkCalendar*, day : Guint) : Gboolean
  fun gtk_cell_area_box_get_type : GType
  fun gtk_cell_area_box_new : GtkCellArea*
  fun gtk_cell_area_box_pack_start(box : GtkCellAreaBox*, renderer : GtkCellRenderer*, expand : Gboolean, align : Gboolean, fixed : Gboolean) : Void
  fun gtk_cell_area_box_pack_end(box : GtkCellAreaBox*, renderer : GtkCellRenderer*, expand : Gboolean, align : Gboolean, fixed : Gboolean) : Void
  fun gtk_cell_area_box_get_spacing(box : GtkCellAreaBox*) : Gint
  fun gtk_cell_area_box_set_spacing(box : GtkCellAreaBox*, spacing : Gint) : Void
  fun _gtk_cell_area_box_group_visible(box : GtkCellAreaBox*, group_idx : Gint) : Gboolean
  fun gtk_cell_area_context_get_type : GType
  fun gtk_cell_area_context_get_area(context : GtkCellAreaContext*) : GtkCellArea*
  fun gtk_cell_area_context_allocate(context : GtkCellAreaContext*, width : Gint, height : Gint) : Void
  fun gtk_cell_area_context_reset(context : GtkCellAreaContext*) : Void
  fun gtk_cell_area_context_get_preferred_width(context : GtkCellAreaContext*, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_cell_area_context_get_preferred_height(context : GtkCellAreaContext*, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_cell_area_context_get_preferred_height_for_width(context : GtkCellAreaContext*, width : Gint, minimum_height : Gint*, natural_height : Gint*) : Void
  fun gtk_cell_area_context_get_preferred_width_for_height(context : GtkCellAreaContext*, height : Gint, minimum_width : Gint*, natural_width : Gint*) : Void
  fun gtk_cell_area_context_get_allocation(context : GtkCellAreaContext*, width : Gint*, height : Gint*) : Void
  fun gtk_cell_area_context_push_preferred_width(context : GtkCellAreaContext*, minimum_width : Gint, natural_width : Gint) : Void
  fun gtk_cell_area_context_push_preferred_height(context : GtkCellAreaContext*, minimum_height : Gint, natural_height : Gint) : Void
  fun gtk_cell_layout_get_type : GType
  fun gtk_cell_layout_pack_start(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*, expand : Gboolean) : Void
  fun gtk_cell_layout_pack_end(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*, expand : Gboolean) : Void
  fun gtk_cell_layout_get_cells(cell_layout : GtkCellLayout*) : GList*
  fun gtk_cell_layout_clear(cell_layout : GtkCellLayout*) : Void
  fun gtk_cell_layout_set_attributes(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*) : Void
  fun gtk_cell_layout_add_attribute(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*, attribute : Gchar*, column : Gint) : Void
  fun gtk_cell_layout_set_cell_data_func(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*, func : GtkCellLayoutDataFunc, func_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_cell_layout_clear_attributes(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*) : Void
  fun gtk_cell_layout_reorder(cell_layout : GtkCellLayout*, cell : GtkCellRenderer*, position : Gint) : Void
  fun gtk_cell_layout_get_area(cell_layout : GtkCellLayout*) : GtkCellArea*
  fun _gtk_cell_layout_buildable_custom_tag_start(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, tagname : Gchar*, parser : GMarkupParser*, data : Gpointer*) : Gboolean
  fun _gtk_cell_layout_buildable_custom_tag_end(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, tagname : Gchar*, data : Gpointer*) : Gboolean
  fun _gtk_cell_layout_buildable_add_child(buildable : GtkBuildable*, builder : GtkBuilder*, child : GObject*, type : Gchar*) : Void
  fun gtk_cell_renderer_text_get_type : GType
  fun gtk_cell_renderer_text_new : GtkCellRenderer*
  fun gtk_cell_renderer_text_set_fixed_height_from_font(renderer : GtkCellRendererText*, number_of_rows : Gint) : Void
  fun gtk_cell_renderer_accel_get_type : GType
  fun gtk_cell_renderer_accel_new : GtkCellRenderer*
  fun gtk_cell_renderer_combo_get_type : GType
  fun gtk_cell_renderer_combo_new : GtkCellRenderer*
  fun gtk_cell_renderer_pixbuf_get_type : GType
  fun gtk_cell_renderer_pixbuf_new : GtkCellRenderer*
  fun gtk_cell_renderer_progress_get_type : GType
  fun gtk_cell_renderer_progress_new : GtkCellRenderer*
  fun gtk_cell_renderer_spin_get_type : GType
  fun gtk_cell_renderer_spin_new : GtkCellRenderer*
  fun gtk_cell_renderer_spinner_get_type : GType
  fun gtk_cell_renderer_spinner_new : GtkCellRenderer*
  fun gtk_cell_renderer_toggle_get_type : GType
  fun gtk_cell_renderer_toggle_new : GtkCellRenderer*
  fun gtk_cell_renderer_toggle_get_radio(toggle : GtkCellRendererToggle*) : Gboolean
  fun gtk_cell_renderer_toggle_set_radio(toggle : GtkCellRendererToggle*, radio : Gboolean) : Void
  fun gtk_cell_renderer_toggle_get_active(toggle : GtkCellRendererToggle*) : Gboolean
  fun gtk_cell_renderer_toggle_set_active(toggle : GtkCellRendererToggle*, setting : Gboolean) : Void
  fun gtk_cell_renderer_toggle_get_activatable(toggle : GtkCellRendererToggle*) : Gboolean
  fun gtk_cell_renderer_toggle_set_activatable(toggle : GtkCellRendererToggle*, setting : Gboolean) : Void
  fun gtk_cell_view_get_type : GType
  fun gtk_cell_view_new : GtkWidget*
  fun gtk_cell_view_new_with_context(area : GtkCellArea*, context : GtkCellAreaContext*) : GtkWidget*
  fun gtk_cell_view_new_with_text(text : Gchar*) : GtkWidget*
  fun gtk_cell_view_new_with_markup(markup : Gchar*) : GtkWidget*
  fun gtk_cell_view_new_with_pixbuf(pixbuf : GdkPixbuf*) : GtkWidget*
  fun gtk_cell_view_set_model(cell_view : GtkCellView*, model : GtkTreeModel*) : Void
  fun gtk_cell_view_get_model(cell_view : GtkCellView*) : GtkTreeModel*
  fun gtk_cell_view_set_displayed_row(cell_view : GtkCellView*, path : GtkTreePath*) : Void
  fun gtk_cell_view_get_displayed_row(cell_view : GtkCellView*) : GtkTreePath*
  fun gtk_cell_view_set_background_rgba(cell_view : GtkCellView*, rgba : GdkRGBA*) : Void
  fun gtk_cell_view_get_draw_sensitive(cell_view : GtkCellView*) : Gboolean
  fun gtk_cell_view_set_draw_sensitive(cell_view : GtkCellView*, draw_sensitive : Gboolean) : Void
  fun gtk_cell_view_get_fit_model(cell_view : GtkCellView*) : Gboolean
  fun gtk_cell_view_set_fit_model(cell_view : GtkCellView*, fit_model : Gboolean) : Void
  fun gtk_cell_view_get_size_of_row(cell_view : GtkCellView*, path : GtkTreePath*, requisition : GtkRequisition*) : Gboolean
  fun gtk_cell_view_set_background_color(cell_view : GtkCellView*, color : GdkColor*) : Void
  fun gtk_toggle_button_get_type : GType
  fun gtk_toggle_button_new : GtkWidget*
  fun gtk_toggle_button_new_with_label(label : Gchar*) : GtkWidget*
  fun gtk_toggle_button_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun gtk_toggle_button_set_mode(toggle_button : GtkToggleButton*, draw_indicator : Gboolean) : Void
  fun gtk_toggle_button_get_mode(toggle_button : GtkToggleButton*) : Gboolean
  fun gtk_toggle_button_set_active(toggle_button : GtkToggleButton*, is_active : Gboolean) : Void
  fun gtk_toggle_button_get_active(toggle_button : GtkToggleButton*) : Gboolean
  fun gtk_toggle_button_toggled(toggle_button : GtkToggleButton*) : Void
  fun gtk_toggle_button_set_inconsistent(toggle_button : GtkToggleButton*, setting : Gboolean) : Void
  fun gtk_toggle_button_get_inconsistent(toggle_button : GtkToggleButton*) : Gboolean
  fun gtk_check_button_get_type : GType
  fun gtk_check_button_new : GtkWidget*
  fun gtk_check_button_new_with_label(label : Gchar*) : GtkWidget*
  fun gtk_check_button_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun _gtk_check_button_get_props(check_button : GtkCheckButton*, indicator_size : Gint*, indicator_spacing : Gint*) : Void
  fun gtk_menu_item_get_type : GType
  fun gtk_menu_item_new : GtkWidget*
  fun gtk_menu_item_new_with_label(label : Gchar*) : GtkWidget*
  fun gtk_menu_item_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun gtk_menu_item_set_submenu(menu_item : GtkMenuItem*, submenu : GtkWidget*) : Void
  fun gtk_menu_item_get_submenu(menu_item : GtkMenuItem*) : GtkWidget*
  fun gtk_menu_item_select(menu_item : GtkMenuItem*) : Void
  fun gtk_menu_item_deselect(menu_item : GtkMenuItem*) : Void
  fun gtk_menu_item_activate(menu_item : GtkMenuItem*) : Void
  fun gtk_menu_item_toggle_size_request(menu_item : GtkMenuItem*, requisition : Gint*) : Void
  fun gtk_menu_item_toggle_size_allocate(menu_item : GtkMenuItem*, allocation : Gint) : Void
  fun gtk_menu_item_set_right_justified(menu_item : GtkMenuItem*, right_justified : Gboolean) : Void
  fun gtk_menu_item_get_right_justified(menu_item : GtkMenuItem*) : Gboolean
  fun gtk_menu_item_set_accel_path(menu_item : GtkMenuItem*, accel_path : Gchar*) : Void
  fun gtk_menu_item_get_accel_path(menu_item : GtkMenuItem*) : Gchar*
  fun gtk_menu_item_set_label(menu_item : GtkMenuItem*, label : Gchar*) : Void
  fun gtk_menu_item_get_label(menu_item : GtkMenuItem*) : Gchar*
  fun gtk_menu_item_set_use_underline(menu_item : GtkMenuItem*, setting : Gboolean) : Void
  fun gtk_menu_item_get_use_underline(menu_item : GtkMenuItem*) : Gboolean
  fun gtk_menu_item_set_reserve_indicator(menu_item : GtkMenuItem*, reserve : Gboolean) : Void
  fun gtk_menu_item_get_reserve_indicator(menu_item : GtkMenuItem*) : Gboolean
  fun gtk_check_menu_item_get_type : GType
  fun gtk_check_menu_item_new : GtkWidget*
  fun gtk_check_menu_item_new_with_label(label : Gchar*) : GtkWidget*
  fun gtk_check_menu_item_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun gtk_check_menu_item_set_active(check_menu_item : GtkCheckMenuItem*, is_active : Gboolean) : Void
  fun gtk_check_menu_item_get_active(check_menu_item : GtkCheckMenuItem*) : Gboolean
  fun gtk_check_menu_item_toggled(check_menu_item : GtkCheckMenuItem*) : Void
  fun gtk_check_menu_item_set_inconsistent(check_menu_item : GtkCheckMenuItem*, setting : Gboolean) : Void
  fun gtk_check_menu_item_get_inconsistent(check_menu_item : GtkCheckMenuItem*) : Gboolean
  fun gtk_check_menu_item_set_draw_as_radio(check_menu_item : GtkCheckMenuItem*, draw_as_radio : Gboolean) : Void
  fun gtk_check_menu_item_get_draw_as_radio(check_menu_item : GtkCheckMenuItem*) : Gboolean
  fun gtk_clipboard_get_type : GType
  fun gtk_clipboard_get_for_display(display : GdkDisplay*, selection : GdkAtom) : GtkClipboard*
  fun gtk_clipboard_get(selection : GdkAtom) : GtkClipboard*
  fun gtk_clipboard_get_default(display : GdkDisplay*) : GtkClipboard*
  fun gtk_clipboard_get_display(clipboard : GtkClipboard*) : GdkDisplay*
  fun gtk_clipboard_set_with_data(clipboard : GtkClipboard*, targets : GtkTargetEntry*, n_targets : Guint, get_func : GtkClipboardGetFunc, clear_func : GtkClipboardClearFunc, user_data : Gpointer) : Gboolean
  fun gtk_clipboard_set_with_owner(clipboard : GtkClipboard*, targets : GtkTargetEntry*, n_targets : Guint, get_func : GtkClipboardGetFunc, clear_func : GtkClipboardClearFunc, owner : GObject*) : Gboolean
  fun gtk_clipboard_get_owner(clipboard : GtkClipboard*) : GObject*
  fun gtk_clipboard_clear(clipboard : GtkClipboard*) : Void
  fun gtk_clipboard_set_text(clipboard : GtkClipboard*, text : Gchar*, len : Gint) : Void
  fun gtk_clipboard_set_image(clipboard : GtkClipboard*, pixbuf : GdkPixbuf*) : Void
  fun gtk_clipboard_request_contents(clipboard : GtkClipboard*, target : GdkAtom, callback : GtkClipboardReceivedFunc, user_data : Gpointer) : Void
  fun gtk_clipboard_request_text(clipboard : GtkClipboard*, callback : GtkClipboardTextReceivedFunc, user_data : Gpointer) : Void
  fun gtk_clipboard_request_rich_text(clipboard : GtkClipboard*, buffer : GtkTextBuffer*, callback : GtkClipboardRichTextReceivedFunc, user_data : Gpointer) : Void
  fun gtk_clipboard_request_image(clipboard : GtkClipboard*, callback : GtkClipboardImageReceivedFunc, user_data : Gpointer) : Void
  fun gtk_clipboard_request_uris(clipboard : GtkClipboard*, callback : GtkClipboardURIReceivedFunc, user_data : Gpointer) : Void
  fun gtk_clipboard_request_targets(clipboard : GtkClipboard*, callback : GtkClipboardTargetsReceivedFunc, user_data : Gpointer) : Void
  fun gtk_clipboard_wait_for_contents(clipboard : GtkClipboard*, target : GdkAtom) : GtkSelectionData*
  fun gtk_clipboard_wait_for_text(clipboard : GtkClipboard*) : Gchar*
  fun gtk_clipboard_wait_for_rich_text(clipboard : GtkClipboard*, buffer : GtkTextBuffer*, format : GdkAtom*, length : Gsize*) : Guint8*
  fun gtk_clipboard_wait_for_image(clipboard : GtkClipboard*) : GdkPixbuf*
  fun gtk_clipboard_wait_for_uris(clipboard : GtkClipboard*) : Gchar**
  fun gtk_clipboard_wait_for_targets(clipboard : GtkClipboard*, targets : GdkAtom**, n_targets : Gint*) : Gboolean
  fun gtk_clipboard_wait_is_text_available(clipboard : GtkClipboard*) : Gboolean
  fun gtk_clipboard_wait_is_rich_text_available(clipboard : GtkClipboard*, buffer : GtkTextBuffer*) : Gboolean
  fun gtk_clipboard_wait_is_image_available(clipboard : GtkClipboard*) : Gboolean
  fun gtk_clipboard_wait_is_uris_available(clipboard : GtkClipboard*) : Gboolean
  fun gtk_clipboard_wait_is_target_available(clipboard : GtkClipboard*, target : GdkAtom) : Gboolean
  fun gtk_clipboard_set_can_store(clipboard : GtkClipboard*, targets : GtkTargetEntry*, n_targets : Gint) : Void
  fun gtk_clipboard_store(clipboard : GtkClipboard*) : Void
  fun _gtk_clipboard_handle_event(event : GdkEventOwnerChange*) : Void
  fun _gtk_clipboard_store_all : Void
  fun gtk_color_button_get_type : GType
  fun gtk_color_button_new : GtkWidget*
  fun gtk_color_button_new_with_rgba(rgba : GdkRGBA*) : GtkWidget*
  fun gtk_color_button_set_title(button : GtkColorButton*, title : Gchar*) : Void
  fun gtk_color_button_get_title(button : GtkColorButton*) : Gchar*
  fun gtk_color_button_new_with_color(color : GdkColor*) : GtkWidget*
  fun gtk_color_button_set_color(button : GtkColorButton*, color : GdkColor*) : Void
  fun gtk_color_button_get_color(button : GtkColorButton*, color : GdkColor*) : Void
  fun gtk_color_button_set_alpha(button : GtkColorButton*, alpha : Guint16) : Void
  fun gtk_color_button_get_alpha(button : GtkColorButton*) : Guint16
  fun gtk_color_button_set_use_alpha(button : GtkColorButton*, use_alpha : Gboolean) : Void
  fun gtk_color_button_get_use_alpha(button : GtkColorButton*) : Gboolean
  fun gtk_color_button_set_rgba(button : GtkColorButton*, rgba : GdkRGBA*) : Void
  fun gtk_color_button_get_rgba(button : GtkColorButton*, rgba : GdkRGBA*) : Void
  fun gtk_color_chooser_get_type : GType
  fun gtk_color_chooser_get_rgba(chooser : GtkColorChooser*, color : GdkRGBA*) : Void
  fun gtk_color_chooser_set_rgba(chooser : GtkColorChooser*, color : GdkRGBA*) : Void
  fun gtk_color_chooser_get_use_alpha(chooser : GtkColorChooser*) : Gboolean
  fun gtk_color_chooser_set_use_alpha(chooser : GtkColorChooser*, use_alpha : Gboolean) : Void
  fun gtk_color_chooser_add_palette(chooser : GtkColorChooser*, orientation : GtkOrientation, colors_per_line : Gint, n_colors : Gint, colors : GdkRGBA*) : Void
  fun gtk_color_chooser_dialog_get_type : GType
  fun gtk_color_chooser_dialog_new(title : Gchar*, parent : GtkWindow*) : GtkWidget*
  fun gtk_color_chooser_widget_get_type : GType
  fun gtk_color_chooser_widget_new : GtkWidget*
  fun gtk_hsv_to_rgb(h : Gdouble, s : Gdouble, v : Gdouble, r : Gdouble*, g : Gdouble*, b : Gdouble*) : Void
  fun gtk_rgb_to_hsv(r : Gdouble, g : Gdouble, b : Gdouble, h : Gdouble*, s : Gdouble*, v : Gdouble*) : Void
  fun gtk_combo_box_text_get_type : GType
  fun gtk_combo_box_text_new : GtkWidget*
  fun gtk_combo_box_text_new_with_entry : GtkWidget*
  fun gtk_combo_box_text_append_text(combo_box : GtkComboBoxText*, text : Gchar*) : Void
  fun gtk_combo_box_text_insert_text(combo_box : GtkComboBoxText*, position : Gint, text : Gchar*) : Void
  fun gtk_combo_box_text_prepend_text(combo_box : GtkComboBoxText*, text : Gchar*) : Void
  fun gtk_combo_box_text_remove(combo_box : GtkComboBoxText*, position : Gint) : Void
  fun gtk_combo_box_text_remove_all(combo_box : GtkComboBoxText*) : Void
  fun gtk_combo_box_text_get_active_text(combo_box : GtkComboBoxText*) : Gchar*
  fun gtk_combo_box_text_insert(combo_box : GtkComboBoxText*, position : Gint, id : Gchar*, text : Gchar*) : Void
  fun gtk_combo_box_text_append(combo_box : GtkComboBoxText*, id : Gchar*, text : Gchar*) : Void
  fun gtk_combo_box_text_prepend(combo_box : GtkComboBoxText*, id : Gchar*, text : Gchar*) : Void
  fun gtk_css_section_get_type : GType
  fun gtk_css_section_ref(section : GtkCssSection*) : GtkCssSection*
  fun gtk_css_section_unref(section : GtkCssSection*) : Void
  fun gtk_css_section_get_section_type(section : GtkCssSection*) : GtkCssSectionType
  fun gtk_css_section_get_parent(section : GtkCssSection*) : GtkCssSection*
  fun gtk_css_section_get_file(section : GtkCssSection*) : GFile*
  fun gtk_css_section_get_start_line(section : GtkCssSection*) : Guint
  fun gtk_css_section_get_start_position(section : GtkCssSection*) : Guint
  fun gtk_css_section_get_end_line(section : GtkCssSection*) : Guint
  fun gtk_css_section_get_end_position(section : GtkCssSection*) : Guint
  fun gtk_css_provider_error_quark : GQuark
  fun gtk_css_provider_get_type : GType
  fun gtk_css_provider_new : GtkCssProvider*
  fun gtk_css_provider_to_string(provider : GtkCssProvider*) : UInt8*
  fun gtk_css_provider_load_from_data(css_provider : GtkCssProvider*, data : Gchar*, length : Gssize, error : GError**) : Gboolean
  fun gtk_css_provider_load_from_file(css_provider : GtkCssProvider*, file : GFile*, error : GError**) : Gboolean
  fun gtk_css_provider_load_from_path(css_provider : GtkCssProvider*, path : Gchar*, error : GError**) : Gboolean
  fun gtk_css_provider_load_from_resource(css_provider : GtkCssProvider*, resource_path : Gchar*) : Void
  fun gtk_css_provider_get_default : GtkCssProvider*
  fun gtk_css_provider_get_named(name : Gchar*, variant : Gchar*) : GtkCssProvider*
  fun gtk_get_debug_flags : Guint
  fun gtk_set_debug_flags(flags : Guint) : Void
  fun gtk_drag_source_set(widget : GtkWidget*, start_button_mask : GdkModifierType, targets : GtkTargetEntry*, n_targets : Gint, actions : GdkDragAction) : Void
  fun gtk_drag_source_unset(widget : GtkWidget*) : Void
  fun gtk_drag_source_get_target_list(widget : GtkWidget*) : GtkTargetList*
  fun gtk_drag_source_set_target_list(widget : GtkWidget*, target_list : GtkTargetList*) : Void
  fun gtk_drag_source_add_text_targets(widget : GtkWidget*) : Void
  fun gtk_drag_source_add_image_targets(widget : GtkWidget*) : Void
  fun gtk_drag_source_add_uri_targets(widget : GtkWidget*) : Void
  fun gtk_drag_source_set_icon_pixbuf(widget : GtkWidget*, pixbuf : GdkPixbuf*) : Void
  fun gtk_drag_source_set_icon_stock(widget : GtkWidget*, stock_id : Gchar*) : Void
  fun gtk_drag_source_set_icon_name(widget : GtkWidget*, icon_name : Gchar*) : Void
  fun gtk_drag_source_set_icon_gicon(widget : GtkWidget*, icon : GIcon*) : Void
  fun gtk_drawing_area_get_type : GType
  fun gtk_drawing_area_new : GtkWidget*
  fun gtk_event_box_get_type : GType
  fun gtk_event_box_new : GtkWidget*
  fun gtk_event_box_get_visible_window(event_box : GtkEventBox*) : Gboolean
  fun gtk_event_box_set_visible_window(event_box : GtkEventBox*, visible_window : Gboolean) : Void
  fun gtk_event_box_get_above_child(event_box : GtkEventBox*) : Gboolean
  fun gtk_event_box_set_above_child(event_box : GtkEventBox*, above_child : Gboolean) : Void
  fun gtk_event_controller_get_type : GType
  fun gtk_event_controller_get_widget(controller : GtkEventController*) : GtkWidget*
  fun gtk_event_controller_handle_event(controller : GtkEventController*, event : GdkEvent*) : Gboolean
  fun gtk_event_controller_reset(controller : GtkEventController*) : Void
  fun gtk_event_controller_get_propagation_phase(controller : GtkEventController*) : GtkPropagationPhase
  fun gtk_event_controller_set_propagation_phase(controller : GtkEventController*, phase : GtkPropagationPhase) : Void
  fun gtk_expander_get_type : GType
  fun gtk_expander_new(label : Gchar*) : GtkWidget*
  fun gtk_expander_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun gtk_expander_set_expanded(expander : GtkExpander*, expanded : Gboolean) : Void
  fun gtk_expander_get_expanded(expander : GtkExpander*) : Gboolean
  fun gtk_expander_set_spacing(expander : GtkExpander*, spacing : Gint) : Void
  fun gtk_expander_get_spacing(expander : GtkExpander*) : Gint
  fun gtk_expander_set_label(expander : GtkExpander*, label : Gchar*) : Void
  fun gtk_expander_get_label(expander : GtkExpander*) : Gchar*
  fun gtk_expander_set_use_underline(expander : GtkExpander*, use_underline : Gboolean) : Void
  fun gtk_expander_get_use_underline(expander : GtkExpander*) : Gboolean
  fun gtk_expander_set_use_markup(expander : GtkExpander*, use_markup : Gboolean) : Void
  fun gtk_expander_get_use_markup(expander : GtkExpander*) : Gboolean
  fun gtk_expander_set_label_widget(expander : GtkExpander*, label_widget : GtkWidget*) : Void
  fun gtk_expander_get_label_widget(expander : GtkExpander*) : GtkWidget*
  fun gtk_expander_set_label_fill(expander : GtkExpander*, label_fill : Gboolean) : Void
  fun gtk_expander_get_label_fill(expander : GtkExpander*) : Gboolean
  fun gtk_expander_set_resize_toplevel(expander : GtkExpander*, resize_toplevel : Gboolean) : Void
  fun gtk_expander_get_resize_toplevel(expander : GtkExpander*) : Gboolean
  fun gtk_fixed_get_type : GType
  fun gtk_fixed_new : GtkWidget*
  fun gtk_fixed_put(fixed : GtkFixed*, widget : GtkWidget*, x : Gint, y : Gint) : Void
  fun gtk_fixed_move(fixed : GtkFixed*, widget : GtkWidget*, x : Gint, y : Gint) : Void
  fun gtk_file_filter_get_type : GType
  fun gtk_file_filter_new : GtkFileFilter*
  fun gtk_file_filter_set_name(filter : GtkFileFilter*, name : Gchar*) : Void
  fun gtk_file_filter_get_name(filter : GtkFileFilter*) : Gchar*
  fun gtk_file_filter_add_mime_type(filter : GtkFileFilter*, mime_type : Gchar*) : Void
  fun gtk_file_filter_add_pattern(filter : GtkFileFilter*, pattern : Gchar*) : Void
  fun gtk_file_filter_add_pixbuf_formats(filter : GtkFileFilter*) : Void
  fun gtk_file_filter_add_custom(filter : GtkFileFilter*, needed : GtkFileFilterFlags, func : GtkFileFilterFunc, data : Gpointer, notify : GDestroyNotify) : Void
  fun gtk_file_filter_get_needed(filter : GtkFileFilter*) : GtkFileFilterFlags
  fun gtk_file_filter_filter(filter : GtkFileFilter*, filter_info : GtkFileFilterInfo*) : Gboolean
  fun gtk_file_chooser_get_type : GType
  fun gtk_file_chooser_error_quark : GQuark
  fun gtk_file_chooser_set_action(chooser : GtkFileChooser*, action : GtkFileChooserAction) : Void
  fun gtk_file_chooser_get_action(chooser : GtkFileChooser*) : GtkFileChooserAction
  fun gtk_file_chooser_set_local_only(chooser : GtkFileChooser*, local_only : Gboolean) : Void
  fun gtk_file_chooser_get_local_only(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_set_select_multiple(chooser : GtkFileChooser*, select_multiple : Gboolean) : Void
  fun gtk_file_chooser_get_select_multiple(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_set_show_hidden(chooser : GtkFileChooser*, show_hidden : Gboolean) : Void
  fun gtk_file_chooser_get_show_hidden(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_set_do_overwrite_confirmation(chooser : GtkFileChooser*, do_overwrite_confirmation : Gboolean) : Void
  fun gtk_file_chooser_get_do_overwrite_confirmation(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_set_create_folders(chooser : GtkFileChooser*, create_folders : Gboolean) : Void
  fun gtk_file_chooser_get_create_folders(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_set_current_name(chooser : GtkFileChooser*, name : Gchar*) : Void
  fun gtk_file_chooser_get_current_name(chooser : GtkFileChooser*) : Gchar*
  fun gtk_file_chooser_get_filename(chooser : GtkFileChooser*) : Gchar*
  fun gtk_file_chooser_set_filename(chooser : GtkFileChooser*, filename : UInt8*) : Gboolean
  fun gtk_file_chooser_select_filename(chooser : GtkFileChooser*, filename : UInt8*) : Gboolean
  fun gtk_file_chooser_unselect_filename(chooser : GtkFileChooser*, filename : UInt8*) : Void
  fun gtk_file_chooser_select_all(chooser : GtkFileChooser*) : Void
  fun gtk_file_chooser_unselect_all(chooser : GtkFileChooser*) : Void
  fun gtk_file_chooser_get_filenames(chooser : GtkFileChooser*) : GSList*
  fun gtk_file_chooser_set_current_folder(chooser : GtkFileChooser*, filename : Gchar*) : Gboolean
  fun gtk_file_chooser_get_current_folder(chooser : GtkFileChooser*) : Gchar*
  fun gtk_file_chooser_get_uri(chooser : GtkFileChooser*) : Gchar*
  fun gtk_file_chooser_set_uri(chooser : GtkFileChooser*, uri : UInt8*) : Gboolean
  fun gtk_file_chooser_select_uri(chooser : GtkFileChooser*, uri : UInt8*) : Gboolean
  fun gtk_file_chooser_unselect_uri(chooser : GtkFileChooser*, uri : UInt8*) : Void
  fun gtk_file_chooser_get_uris(chooser : GtkFileChooser*) : GSList*
  fun gtk_file_chooser_set_current_folder_uri(chooser : GtkFileChooser*, uri : Gchar*) : Gboolean
  fun gtk_file_chooser_get_current_folder_uri(chooser : GtkFileChooser*) : Gchar*
  fun gtk_file_chooser_get_file(chooser : GtkFileChooser*) : GFile*
  fun gtk_file_chooser_set_file(chooser : GtkFileChooser*, file : GFile*, error : GError**) : Gboolean
  fun gtk_file_chooser_select_file(chooser : GtkFileChooser*, file : GFile*, error : GError**) : Gboolean
  fun gtk_file_chooser_unselect_file(chooser : GtkFileChooser*, file : GFile*) : Void
  fun gtk_file_chooser_get_files(chooser : GtkFileChooser*) : GSList*
  fun gtk_file_chooser_set_current_folder_file(chooser : GtkFileChooser*, file : GFile*, error : GError**) : Gboolean
  fun gtk_file_chooser_get_current_folder_file(chooser : GtkFileChooser*) : GFile*
  fun gtk_file_chooser_set_preview_widget(chooser : GtkFileChooser*, preview_widget : GtkWidget*) : Void
  fun gtk_file_chooser_get_preview_widget(chooser : GtkFileChooser*) : GtkWidget*
  fun gtk_file_chooser_set_preview_widget_active(chooser : GtkFileChooser*, active : Gboolean) : Void
  fun gtk_file_chooser_get_preview_widget_active(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_set_use_preview_label(chooser : GtkFileChooser*, use_label : Gboolean) : Void
  fun gtk_file_chooser_get_use_preview_label(chooser : GtkFileChooser*) : Gboolean
  fun gtk_file_chooser_get_preview_filename(chooser : GtkFileChooser*) : UInt8*
  fun gtk_file_chooser_get_preview_uri(chooser : GtkFileChooser*) : UInt8*
  fun gtk_file_chooser_get_preview_file(chooser : GtkFileChooser*) : GFile*
  fun gtk_file_chooser_set_extra_widget(chooser : GtkFileChooser*, extra_widget : GtkWidget*) : Void
  fun gtk_file_chooser_get_extra_widget(chooser : GtkFileChooser*) : GtkWidget*
  fun gtk_file_chooser_add_filter(chooser : GtkFileChooser*, filter : GtkFileFilter*) : Void
  fun gtk_file_chooser_remove_filter(chooser : GtkFileChooser*, filter : GtkFileFilter*) : Void
  fun gtk_file_chooser_list_filters(chooser : GtkFileChooser*) : GSList*
  fun gtk_file_chooser_set_filter(chooser : GtkFileChooser*, filter : GtkFileFilter*) : Void
  fun gtk_file_chooser_get_filter(chooser : GtkFileChooser*) : GtkFileFilter*
  fun gtk_file_chooser_add_shortcut_folder(chooser : GtkFileChooser*, folder : UInt8*, error : GError**) : Gboolean
  fun gtk_file_chooser_remove_shortcut_folder(chooser : GtkFileChooser*, folder : UInt8*, error : GError**) : Gboolean
  fun gtk_file_chooser_list_shortcut_folders(chooser : GtkFileChooser*) : GSList*
  fun gtk_file_chooser_add_shortcut_folder_uri(chooser : GtkFileChooser*, uri : UInt8*, error : GError**) : Gboolean
  fun gtk_file_chooser_remove_shortcut_folder_uri(chooser : GtkFileChooser*, uri : UInt8*, error : GError**) : Gboolean
  fun gtk_file_chooser_list_shortcut_folder_uris(chooser : GtkFileChooser*) : GSList*
  fun gtk_file_chooser_button_get_type : GType
  fun gtk_file_chooser_button_new(title : Gchar*, action : GtkFileChooserAction) : GtkWidget*
  fun gtk_file_chooser_button_new_with_dialog(dialog : GtkWidget*) : GtkWidget*
  fun gtk_file_chooser_button_get_title(button : GtkFileChooserButton*) : Gchar*
  fun gtk_file_chooser_button_set_title(button : GtkFileChooserButton*, title : Gchar*) : Void
  fun gtk_file_chooser_button_get_width_chars(button : GtkFileChooserButton*) : Gint
  fun gtk_file_chooser_button_set_width_chars(button : GtkFileChooserButton*, n_chars : Gint) : Void
  fun gtk_file_chooser_button_get_focus_on_click(button : GtkFileChooserButton*) : Gboolean
  fun gtk_file_chooser_button_set_focus_on_click(button : GtkFileChooserButton*, focus_on_click : Gboolean) : Void
  fun gtk_file_chooser_dialog_get_type : GType
  fun gtk_file_chooser_dialog_new(title : Gchar*, parent : GtkWindow*, action : GtkFileChooserAction, first_button_text : Gchar*) : GtkWidget*
  fun gtk_native_dialog_get_type : GType
  fun glib_autoptr_cleanup_gtk_native_dialog(_ptr : GtkNativeDialog**) : Void
  fun gtk_native_dialog(ptr : Gpointer) : GtkNativeDialog*
  fun gtk_native_dialog_class(ptr : Gpointer) : GtkNativeDialogClass*
  fun gtk_is_native_dialog(ptr : Gpointer) : Gboolean
  fun gtk_is_native_dialog_class(ptr : Gpointer) : Gboolean
  fun gtk_native_dialog_get_class(ptr : Gpointer) : GtkNativeDialogClass*
  fun gtk_native_dialog_show(self : GtkNativeDialog*) : Void
  fun gtk_native_dialog_hide(self : GtkNativeDialog*) : Void
  fun gtk_native_dialog_destroy(self : GtkNativeDialog*) : Void
  fun gtk_native_dialog_get_visible(self : GtkNativeDialog*) : Gboolean
  fun gtk_native_dialog_set_modal(self : GtkNativeDialog*, modal : Gboolean) : Void
  fun gtk_native_dialog_get_modal(self : GtkNativeDialog*) : Gboolean
  fun gtk_native_dialog_set_title(self : GtkNativeDialog*, title : UInt8*) : Void
  fun gtk_native_dialog_get_title(self : GtkNativeDialog*) : UInt8*
  fun gtk_native_dialog_set_transient_for(self : GtkNativeDialog*, parent : GtkWindow*) : Void
  fun gtk_native_dialog_get_transient_for(self : GtkNativeDialog*) : GtkWindow*
  fun gtk_native_dialog_run(self : GtkNativeDialog*) : Gint
  fun gtk_file_chooser_native_get_type : GType
  fun glib_autoptr_cleanup_gtk_file_chooser_native(_ptr : GtkFileChooserNative**) : Void
  fun gtk_file_chooser_native(ptr : Gpointer) : GtkFileChooserNative*
  fun gtk_is_file_chooser_native(ptr : Gpointer) : Gboolean
  fun gtk_file_chooser_native_new(title : Gchar*, parent : GtkWindow*, action : GtkFileChooserAction, accept_label : Gchar*, cancel_label : Gchar*) : GtkFileChooserNative*
  fun gtk_file_chooser_native_get_accept_label(self : GtkFileChooserNative*) : UInt8*
  fun gtk_file_chooser_native_set_accept_label(self : GtkFileChooserNative*, accept_label : UInt8*) : Void
  fun gtk_file_chooser_native_get_cancel_label(self : GtkFileChooserNative*) : UInt8*
  fun gtk_file_chooser_native_set_cancel_label(self : GtkFileChooserNative*, cancel_label : UInt8*) : Void
  fun gtk_file_chooser_widget_get_type : GType
  fun gtk_file_chooser_widget_new(action : GtkFileChooserAction) : GtkWidget*
  fun gtk_flow_box_child_get_type : GType
  fun gtk_flow_box_child_new : GtkWidget*
  fun gtk_flow_box_child_get_index(child : GtkFlowBoxChild*) : Gint
  fun gtk_flow_box_child_is_selected(child : GtkFlowBoxChild*) : Gboolean
  fun gtk_flow_box_child_changed(child : GtkFlowBoxChild*) : Void
  fun gtk_flow_box_get_type : GType
  fun gtk_flow_box_new : GtkWidget*
  fun gtk_flow_box_bind_model(box : GtkFlowBox*, model : GListModel*, create_widget_func : GtkFlowBoxCreateWidgetFunc, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Void
  fun gtk_flow_box_set_homogeneous(box : GtkFlowBox*, homogeneous : Gboolean) : Void
  fun gtk_flow_box_get_homogeneous(box : GtkFlowBox*) : Gboolean
  fun gtk_flow_box_set_row_spacing(box : GtkFlowBox*, spacing : Guint) : Void
  fun gtk_flow_box_get_row_spacing(box : GtkFlowBox*) : Guint
  fun gtk_flow_box_set_column_spacing(box : GtkFlowBox*, spacing : Guint) : Void
  fun gtk_flow_box_get_column_spacing(box : GtkFlowBox*) : Guint
  fun gtk_flow_box_set_min_children_per_line(box : GtkFlowBox*, n_children : Guint) : Void
  fun gtk_flow_box_get_min_children_per_line(box : GtkFlowBox*) : Guint
  fun gtk_flow_box_set_max_children_per_line(box : GtkFlowBox*, n_children : Guint) : Void
  fun gtk_flow_box_get_max_children_per_line(box : GtkFlowBox*) : Guint
  fun gtk_flow_box_set_activate_on_single_click(box : GtkFlowBox*, single : Gboolean) : Void
  fun gtk_flow_box_get_activate_on_single_click(box : GtkFlowBox*) : Gboolean
  fun gtk_flow_box_insert(box : GtkFlowBox*, widget : GtkWidget*, position : Gint) : Void
  fun gtk_flow_box_get_child_at_index(box : GtkFlowBox*, idx : Gint) : GtkFlowBoxChild*
  fun gtk_flow_box_selected_foreach(box : GtkFlowBox*, func : GtkFlowBoxForeachFunc, data : Gpointer) : Void
  fun gtk_flow_box_get_selected_children(box : GtkFlowBox*) : GList*
  fun gtk_flow_box_select_child(box : GtkFlowBox*, child : GtkFlowBoxChild*) : Void
  fun gtk_flow_box_unselect_child(box : GtkFlowBox*, child : GtkFlowBoxChild*) : Void
  fun gtk_flow_box_select_all(box : GtkFlowBox*) : Void
  fun gtk_flow_box_unselect_all(box : GtkFlowBox*) : Void
  fun gtk_flow_box_set_selection_mode(box : GtkFlowBox*, mode : GtkSelectionMode) : Void
  fun gtk_flow_box_get_selection_mode(box : GtkFlowBox*) : GtkSelectionMode
  fun gtk_flow_box_set_hadjustment(box : GtkFlowBox*, adjustment : GtkAdjustment*) : Void
  fun gtk_flow_box_set_vadjustment(box : GtkFlowBox*, adjustment : GtkAdjustment*) : Void
  fun gtk_flow_box_set_filter_func(box : GtkFlowBox*, filter_func : GtkFlowBoxFilterFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_flow_box_invalidate_filter(box : GtkFlowBox*) : Void
  fun gtk_flow_box_set_sort_func(box : GtkFlowBox*, sort_func : GtkFlowBoxSortFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_flow_box_invalidate_sort(box : GtkFlowBox*) : Void
  fun gtk_font_button_get_type : GType
  fun gtk_font_button_new : GtkWidget*
  fun gtk_font_button_new_with_font(fontname : Gchar*) : GtkWidget*
  fun gtk_font_button_get_title(font_button : GtkFontButton*) : Gchar*
  fun gtk_font_button_set_title(font_button : GtkFontButton*, title : Gchar*) : Void
  fun gtk_font_button_get_use_font(font_button : GtkFontButton*) : Gboolean
  fun gtk_font_button_set_use_font(font_button : GtkFontButton*, use_font : Gboolean) : Void
  fun gtk_font_button_get_use_size(font_button : GtkFontButton*) : Gboolean
  fun gtk_font_button_set_use_size(font_button : GtkFontButton*, use_size : Gboolean) : Void
  fun gtk_font_button_get_font_name(font_button : GtkFontButton*) : Gchar*
  fun gtk_font_button_set_font_name(font_button : GtkFontButton*, fontname : Gchar*) : Gboolean
  fun gtk_font_button_get_show_style(font_button : GtkFontButton*) : Gboolean
  fun gtk_font_button_set_show_style(font_button : GtkFontButton*, show_style : Gboolean) : Void
  fun gtk_font_button_get_show_size(font_button : GtkFontButton*) : Gboolean
  fun gtk_font_button_set_show_size(font_button : GtkFontButton*, show_size : Gboolean) : Void
  fun gtk_font_chooser_get_type : GType
  fun gtk_font_chooser_get_font_family(fontchooser : GtkFontChooser*) : PangoFontFamily*
  fun gtk_font_chooser_get_font_face(fontchooser : GtkFontChooser*) : PangoFontFace*
  fun gtk_font_chooser_get_font_size(fontchooser : GtkFontChooser*) : Gint
  fun gtk_font_chooser_get_font_desc(fontchooser : GtkFontChooser*) : PangoFontDescription*
  fun gtk_font_chooser_set_font_desc(fontchooser : GtkFontChooser*, font_desc : PangoFontDescription*) : Void
  fun gtk_font_chooser_get_font(fontchooser : GtkFontChooser*) : Gchar*
  fun gtk_font_chooser_set_font(fontchooser : GtkFontChooser*, fontname : Gchar*) : Void
  fun gtk_font_chooser_get_preview_text(fontchooser : GtkFontChooser*) : Gchar*
  fun gtk_font_chooser_set_preview_text(fontchooser : GtkFontChooser*, text : Gchar*) : Void
  fun gtk_font_chooser_get_show_preview_entry(fontchooser : GtkFontChooser*) : Gboolean
  fun gtk_font_chooser_set_show_preview_entry(fontchooser : GtkFontChooser*, show_preview_entry : Gboolean) : Void
  fun gtk_font_chooser_set_filter_func(fontchooser : GtkFontChooser*, filter : GtkFontFilterFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_font_chooser_set_font_map(fontchooser : GtkFontChooser*, fontmap : PangoFontMap*) : Void
  fun gtk_font_chooser_get_font_map(fontchooser : GtkFontChooser*) : PangoFontMap*
  fun gtk_font_chooser_dialog_get_type : GType
  fun gtk_font_chooser_dialog_new(title : Gchar*, parent : GtkWindow*) : GtkWidget*
  fun gtk_font_chooser_widget_get_type : GType
  fun gtk_font_chooser_widget_new : GtkWidget*
  fun gtk_gesture_get_type : GType
  fun gtk_gesture_get_device(gesture : GtkGesture*) : GdkDevice*
  fun gtk_gesture_set_state(gesture : GtkGesture*, state : GtkEventSequenceState) : Gboolean
  fun gtk_gesture_get_sequence_state(gesture : GtkGesture*, sequence : GdkEventSequence*) : GtkEventSequenceState
  fun gtk_gesture_set_sequence_state(gesture : GtkGesture*, sequence : GdkEventSequence*, state : GtkEventSequenceState) : Gboolean
  fun gtk_gesture_get_sequences(gesture : GtkGesture*) : GList*
  fun gtk_gesture_get_last_updated_sequence(gesture : GtkGesture*) : GdkEventSequence*
  fun gtk_gesture_handles_sequence(gesture : GtkGesture*, sequence : GdkEventSequence*) : Gboolean
  fun gtk_gesture_get_last_event(gesture : GtkGesture*, sequence : GdkEventSequence*) : GdkEvent*
  fun gtk_gesture_get_point(gesture : GtkGesture*, sequence : GdkEventSequence*, x : Gdouble*, y : Gdouble*) : Gboolean
  fun gtk_gesture_get_bounding_box(gesture : GtkGesture*, rect : GdkRectangle*) : Gboolean
  fun gtk_gesture_get_bounding_box_center(gesture : GtkGesture*, x : Gdouble*, y : Gdouble*) : Gboolean
  fun gtk_gesture_is_active(gesture : GtkGesture*) : Gboolean
  fun gtk_gesture_is_recognized(gesture : GtkGesture*) : Gboolean
  fun gtk_gesture_get_window(gesture : GtkGesture*) : GdkWindow*
  fun gtk_gesture_set_window(gesture : GtkGesture*, window : GdkWindow*) : Void
  fun gtk_gesture_group(group_gesture : GtkGesture*, gesture : GtkGesture*) : Void
  fun gtk_gesture_ungroup(gesture : GtkGesture*) : Void
  fun gtk_gesture_get_group(gesture : GtkGesture*) : GList*
  fun gtk_gesture_is_grouped_with(gesture : GtkGesture*, other : GtkGesture*) : Gboolean
  fun gtk_gesture_single_get_type : GType
  fun gtk_gesture_single_get_touch_only(gesture : GtkGestureSingle*) : Gboolean
  fun gtk_gesture_single_set_touch_only(gesture : GtkGestureSingle*, touch_only : Gboolean) : Void
  fun gtk_gesture_single_get_exclusive(gesture : GtkGestureSingle*) : Gboolean
  fun gtk_gesture_single_set_exclusive(gesture : GtkGestureSingle*, exclusive : Gboolean) : Void
  fun gtk_gesture_single_get_button(gesture : GtkGestureSingle*) : Guint
  fun gtk_gesture_single_set_button(gesture : GtkGestureSingle*, button : Guint) : Void
  fun gtk_gesture_single_get_current_button(gesture : GtkGestureSingle*) : Guint
  fun gtk_gesture_single_get_current_sequence(gesture : GtkGestureSingle*) : GdkEventSequence*
  fun gtk_gesture_drag_get_type : GType
  fun gtk_gesture_drag_new(widget : GtkWidget*) : GtkGesture*
  fun gtk_gesture_drag_get_start_point(gesture : GtkGestureDrag*, x : Gdouble*, y : Gdouble*) : Gboolean
  fun gtk_gesture_drag_get_offset(gesture : GtkGestureDrag*, x : Gdouble*, y : Gdouble*) : Gboolean
  fun gtk_gesture_long_press_get_type : GType
  fun gtk_gesture_long_press_new(widget : GtkWidget*) : GtkGesture*
  fun gtk_gesture_multi_press_get_type : GType
  fun gtk_gesture_multi_press_new(widget : GtkWidget*) : GtkGesture*
  fun gtk_gesture_multi_press_set_area(gesture : GtkGestureMultiPress*, rect : GdkRectangle*) : Void
  fun gtk_gesture_multi_press_get_area(gesture : GtkGestureMultiPress*, rect : GdkRectangle*) : Gboolean
  fun gtk_gesture_pan_get_type : GType
  fun gtk_gesture_pan_new(widget : GtkWidget*, orientation : GtkOrientation) : GtkGesture*
  fun gtk_gesture_pan_get_orientation(gesture : GtkGesturePan*) : GtkOrientation
  fun gtk_gesture_pan_set_orientation(gesture : GtkGesturePan*, orientation : GtkOrientation) : Void
  fun gtk_gesture_rotate_get_type : GType
  fun gtk_gesture_rotate_new(widget : GtkWidget*) : GtkGesture*
  fun gtk_gesture_rotate_get_angle_delta(gesture : GtkGestureRotate*) : Gdouble
  fun gtk_gesture_swipe_get_type : GType
  fun gtk_gesture_swipe_new(widget : GtkWidget*) : GtkGesture*
  fun gtk_gesture_swipe_get_velocity(gesture : GtkGestureSwipe*, velocity_x : Gdouble*, velocity_y : Gdouble*) : Gboolean
  fun gtk_gesture_zoom_get_type : GType
  fun gtk_gesture_zoom_new(widget : GtkWidget*) : GtkGesture*
  fun gtk_gesture_zoom_get_scale_delta(gesture : GtkGestureZoom*) : Gdouble
  fun gtk_gl_area_get_type : GType
  fun gtk_gl_area_new : GtkWidget*
  fun gtk_gl_area_set_required_version(area : GtkGLArea*, major : Gint, minor : Gint) : Void
  fun gtk_gl_area_get_required_version(area : GtkGLArea*, major : Gint*, minor : Gint*) : Void
  fun gtk_gl_area_get_has_alpha(area : GtkGLArea*) : Gboolean
  fun gtk_gl_area_set_has_alpha(area : GtkGLArea*, has_alpha : Gboolean) : Void
  fun gtk_gl_area_get_has_depth_buffer(area : GtkGLArea*) : Gboolean
  fun gtk_gl_area_set_has_depth_buffer(area : GtkGLArea*, has_depth_buffer : Gboolean) : Void
  fun gtk_gl_area_get_has_stencil_buffer(area : GtkGLArea*) : Gboolean
  fun gtk_gl_area_set_has_stencil_buffer(area : GtkGLArea*, has_stencil_buffer : Gboolean) : Void
  fun gtk_gl_area_get_auto_render(area : GtkGLArea*) : Gboolean
  fun gtk_gl_area_set_auto_render(area : GtkGLArea*, auto_render : Gboolean) : Void
  fun gtk_gl_area_queue_render(area : GtkGLArea*) : Void
  fun gtk_gl_area_get_context(area : GtkGLArea*) : GdkGLContext*
  fun gtk_gl_area_make_current(area : GtkGLArea*) : Void
  fun gtk_gl_area_attach_buffers(area : GtkGLArea*) : Void
  fun gtk_gl_area_set_error(area : GtkGLArea*, error : GError*) : Void
  fun gtk_gl_area_get_error(area : GtkGLArea*) : GError*
  fun gtk_grid_get_type : GType
  fun gtk_grid_new : GtkWidget*
  fun gtk_grid_attach(grid : GtkGrid*, child : GtkWidget*, left : Gint, top : Gint, width : Gint, height : Gint) : Void
  fun gtk_grid_attach_next_to(grid : GtkGrid*, child : GtkWidget*, sibling : GtkWidget*, side : GtkPositionType, width : Gint, height : Gint) : Void
  fun gtk_grid_get_child_at(grid : GtkGrid*, left : Gint, top : Gint) : GtkWidget*
  fun gtk_grid_insert_row(grid : GtkGrid*, position : Gint) : Void
  fun gtk_grid_insert_column(grid : GtkGrid*, position : Gint) : Void
  fun gtk_grid_remove_row(grid : GtkGrid*, position : Gint) : Void
  fun gtk_grid_remove_column(grid : GtkGrid*, position : Gint) : Void
  fun gtk_grid_insert_next_to(grid : GtkGrid*, sibling : GtkWidget*, side : GtkPositionType) : Void
  fun gtk_grid_set_row_homogeneous(grid : GtkGrid*, homogeneous : Gboolean) : Void
  fun gtk_grid_get_row_homogeneous(grid : GtkGrid*) : Gboolean
  fun gtk_grid_set_row_spacing(grid : GtkGrid*, spacing : Guint) : Void
  fun gtk_grid_get_row_spacing(grid : GtkGrid*) : Guint
  fun gtk_grid_set_column_homogeneous(grid : GtkGrid*, homogeneous : Gboolean) : Void
  fun gtk_grid_get_column_homogeneous(grid : GtkGrid*) : Gboolean
  fun gtk_grid_set_column_spacing(grid : GtkGrid*, spacing : Guint) : Void
  fun gtk_grid_get_column_spacing(grid : GtkGrid*) : Guint
  fun gtk_grid_set_row_baseline_position(grid : GtkGrid*, row : Gint, pos : GtkBaselinePosition) : Void
  fun gtk_grid_get_row_baseline_position(grid : GtkGrid*, row : Gint) : GtkBaselinePosition
  fun gtk_grid_set_baseline_row(grid : GtkGrid*, row : Gint) : Void
  fun gtk_grid_get_baseline_row(grid : GtkGrid*) : Gint
  fun gtk_header_bar_get_type : GType
  fun gtk_header_bar_new : GtkWidget*
  fun gtk_header_bar_set_title(bar : GtkHeaderBar*, title : Gchar*) : Void
  fun gtk_header_bar_get_title(bar : GtkHeaderBar*) : Gchar*
  fun gtk_header_bar_set_subtitle(bar : GtkHeaderBar*, subtitle : Gchar*) : Void
  fun gtk_header_bar_get_subtitle(bar : GtkHeaderBar*) : Gchar*
  fun gtk_header_bar_set_custom_title(bar : GtkHeaderBar*, title_widget : GtkWidget*) : Void
  fun gtk_header_bar_get_custom_title(bar : GtkHeaderBar*) : GtkWidget*
  fun gtk_header_bar_pack_start(bar : GtkHeaderBar*, child : GtkWidget*) : Void
  fun gtk_header_bar_pack_end(bar : GtkHeaderBar*, child : GtkWidget*) : Void
  fun gtk_header_bar_get_show_close_button(bar : GtkHeaderBar*) : Gboolean
  fun gtk_header_bar_set_show_close_button(bar : GtkHeaderBar*, setting : Gboolean) : Void
  fun gtk_header_bar_set_has_subtitle(bar : GtkHeaderBar*, setting : Gboolean) : Void
  fun gtk_header_bar_get_has_subtitle(bar : GtkHeaderBar*) : Gboolean
  fun gtk_header_bar_set_decoration_layout(bar : GtkHeaderBar*, layout : Gchar*) : Void
  fun gtk_header_bar_get_decoration_layout(bar : GtkHeaderBar*) : Gchar*
  fun gtk_icon_factory_get_type : GType
  fun gtk_icon_factory_new : GtkIconFactory*
  fun gtk_icon_factory_add(factory : GtkIconFactory*, stock_id : Gchar*, icon_set : GtkIconSet*) : Void
  fun gtk_icon_factory_lookup(factory : GtkIconFactory*, stock_id : Gchar*) : GtkIconSet*
  fun gtk_icon_factory_add_default(factory : GtkIconFactory*) : Void
  fun gtk_icon_factory_remove_default(factory : GtkIconFactory*) : Void
  fun gtk_icon_factory_lookup_default(stock_id : Gchar*) : GtkIconSet*
  fun gtk_icon_size_lookup(size : GtkIconSize, width : Gint*, height : Gint*) : Gboolean
  fun gtk_icon_size_lookup_for_settings(settings : GtkSettings*, size : GtkIconSize, width : Gint*, height : Gint*) : Gboolean
  fun gtk_icon_size_register(name : Gchar*, width : Gint, height : Gint) : GtkIconSize
  fun gtk_icon_size_register_alias(alias : Gchar*, target : GtkIconSize) : Void
  fun gtk_icon_size_from_name(name : Gchar*) : GtkIconSize
  fun gtk_icon_size_get_name(size : GtkIconSize) : Gchar*
  fun gtk_icon_set_get_type : GType
  fun gtk_icon_set_new : GtkIconSet*
  fun gtk_icon_set_new_from_pixbuf(pixbuf : GdkPixbuf*) : GtkIconSet*
  fun gtk_icon_set_ref(icon_set : GtkIconSet*) : GtkIconSet*
  fun gtk_icon_set_unref(icon_set : GtkIconSet*) : Void
  fun gtk_icon_set_copy(icon_set : GtkIconSet*) : GtkIconSet*
  fun gtk_icon_set_render_icon(icon_set : GtkIconSet*, style : GtkStyle*, direction : GtkTextDirection, state : GtkStateType, size : GtkIconSize, widget : GtkWidget*, detail : Gchar*) : GdkPixbuf*
  fun gtk_icon_set_add_source(icon_set : GtkIconSet*, source : GtkIconSource*) : Void
  fun gtk_icon_set_get_sizes(icon_set : GtkIconSet*, sizes : GtkIconSize**, n_sizes : Gint*) : Void
  fun gtk_icon_source_get_type : GType
  fun gtk_icon_source_new : GtkIconSource*
  fun gtk_icon_source_copy(source : GtkIconSource*) : GtkIconSource*
  fun gtk_icon_source_free(source : GtkIconSource*) : Void
  fun gtk_icon_source_set_filename(source : GtkIconSource*, filename : Gchar*) : Void
  fun gtk_icon_source_set_icon_name(source : GtkIconSource*, icon_name : Gchar*) : Void
  fun gtk_icon_source_set_pixbuf(source : GtkIconSource*, pixbuf : GdkPixbuf*) : Void
  fun gtk_icon_source_get_filename(source : GtkIconSource*) : Gchar*
  fun gtk_icon_source_get_icon_name(source : GtkIconSource*) : Gchar*
  fun gtk_icon_source_get_pixbuf(source : GtkIconSource*) : GdkPixbuf*
  fun gtk_icon_source_set_direction_wildcarded(source : GtkIconSource*, setting : Gboolean) : Void
  fun gtk_icon_source_set_state_wildcarded(source : GtkIconSource*, setting : Gboolean) : Void
  fun gtk_icon_source_set_size_wildcarded(source : GtkIconSource*, setting : Gboolean) : Void
  fun gtk_icon_source_get_size_wildcarded(source : GtkIconSource*) : Gboolean
  fun gtk_icon_source_get_state_wildcarded(source : GtkIconSource*) : Gboolean
  fun gtk_icon_source_get_direction_wildcarded(source : GtkIconSource*) : Gboolean
  fun gtk_icon_source_set_direction(source : GtkIconSource*, direction : GtkTextDirection) : Void
  fun gtk_icon_source_set_state(source : GtkIconSource*, state : GtkStateType) : Void
  fun gtk_icon_source_set_size(source : GtkIconSource*, size : GtkIconSize) : Void
  fun gtk_icon_source_get_direction(source : GtkIconSource*) : GtkTextDirection
  fun gtk_icon_source_get_state(source : GtkIconSource*) : GtkStateType
  fun gtk_icon_source_get_size(source : GtkIconSource*) : GtkIconSize
  fun gtk_style_properties_get_type : GType
  fun gtk_style_properties_register_property(parse_func : GtkStylePropertyParser, pspec : GParamSpec*) : Void
  fun gtk_style_properties_lookup_property(property_name : Gchar*, parse_func : GtkStylePropertyParser*, pspec : GParamSpec**) : Gboolean
  fun gtk_style_properties_new : GtkStyleProperties*
  fun gtk_style_properties_map_color(props : GtkStyleProperties*, name : Gchar*, color : GtkSymbolicColor*) : Void
  fun gtk_style_properties_lookup_color(props : GtkStyleProperties*, name : Gchar*) : GtkSymbolicColor*
  fun gtk_style_properties_set_property(props : GtkStyleProperties*, property : Gchar*, state : GtkStateFlags, value : GValue*) : Void
  fun gtk_style_properties_set_valist(props : GtkStyleProperties*, state : GtkStateFlags, args : X__va_list_tag*) : Void
  fun gtk_style_properties_set(props : GtkStyleProperties*, state : GtkStateFlags) : Void
  fun gtk_style_properties_get_property(props : GtkStyleProperties*, property : Gchar*, state : GtkStateFlags, value : GValue*) : Gboolean
  fun gtk_style_properties_get_valist(props : GtkStyleProperties*, state : GtkStateFlags, args : X__va_list_tag*) : Void
  fun gtk_style_properties_get(props : GtkStyleProperties*, state : GtkStateFlags) : Void
  fun gtk_style_properties_unset_property(props : GtkStyleProperties*, property : Gchar*, state : GtkStateFlags) : Void
  fun gtk_style_properties_clear(props : GtkStyleProperties*) : Void
  fun gtk_style_properties_merge(props : GtkStyleProperties*, props_to_merge : GtkStyleProperties*, replace : Gboolean) : Void
  fun gtk_style_provider_get_type : GType
  fun gtk_style_provider_get_style(provider : GtkStyleProvider*, path : GtkWidgetPath*) : GtkStyleProperties*
  fun gtk_style_provider_get_style_property(provider : GtkStyleProvider*, path : GtkWidgetPath*, state : GtkStateFlags, pspec : GParamSpec*, value : GValue*) : Gboolean
  fun gtk_style_provider_get_icon_factory(provider : GtkStyleProvider*, path : GtkWidgetPath*) : GtkIconFactory*
  fun gtk_style_context_get_type : GType
  fun gtk_style_context_new : GtkStyleContext*
  fun gtk_style_context_add_provider_for_screen(screen : GdkScreen*, provider : GtkStyleProvider*, priority : Guint) : Void
  fun gtk_style_context_remove_provider_for_screen(screen : GdkScreen*, provider : GtkStyleProvider*) : Void
  fun gtk_style_context_add_provider(context : GtkStyleContext*, provider : GtkStyleProvider*, priority : Guint) : Void
  fun gtk_style_context_remove_provider(context : GtkStyleContext*, provider : GtkStyleProvider*) : Void
  fun gtk_style_context_save(context : GtkStyleContext*) : Void
  fun gtk_style_context_restore(context : GtkStyleContext*) : Void
  fun gtk_style_context_get_section(context : GtkStyleContext*, property : Gchar*) : GtkCssSection*
  fun gtk_style_context_get_property(context : GtkStyleContext*, property : Gchar*, state : GtkStateFlags, value : GValue*) : Void
  fun gtk_style_context_get_valist(context : GtkStyleContext*, state : GtkStateFlags, args : X__va_list_tag*) : Void
  fun gtk_style_context_get(context : GtkStyleContext*, state : GtkStateFlags) : Void
  fun gtk_style_context_set_state(context : GtkStyleContext*, flags : GtkStateFlags) : Void
  fun gtk_style_context_get_state(context : GtkStyleContext*) : GtkStateFlags
  fun gtk_style_context_set_scale(context : GtkStyleContext*, scale : Gint) : Void
  fun gtk_style_context_get_scale(context : GtkStyleContext*) : Gint
  fun gtk_style_context_state_is_running(context : GtkStyleContext*, state : GtkStateType, progress : Gdouble*) : Gboolean
  fun gtk_style_context_set_path(context : GtkStyleContext*, path : GtkWidgetPath*) : Void
  fun gtk_style_context_get_path(context : GtkStyleContext*) : GtkWidgetPath*
  fun gtk_style_context_set_parent(context : GtkStyleContext*, parent : GtkStyleContext*) : Void
  fun gtk_style_context_get_parent(context : GtkStyleContext*) : GtkStyleContext*
  fun gtk_style_context_list_classes(context : GtkStyleContext*) : GList*
  fun gtk_style_context_add_class(context : GtkStyleContext*, class_name : Gchar*) : Void
  fun gtk_style_context_remove_class(context : GtkStyleContext*, class_name : Gchar*) : Void
  fun gtk_style_context_has_class(context : GtkStyleContext*, class_name : Gchar*) : Gboolean
  fun gtk_style_context_list_regions(context : GtkStyleContext*) : GList*
  fun gtk_style_context_add_region(context : GtkStyleContext*, region_name : Gchar*, flags : GtkRegionFlags) : Void
  fun gtk_style_context_remove_region(context : GtkStyleContext*, region_name : Gchar*) : Void
  fun gtk_style_context_has_region(context : GtkStyleContext*, region_name : Gchar*, flags_return : GtkRegionFlags*) : Gboolean
  fun gtk_style_context_get_style_property(context : GtkStyleContext*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_style_context_get_style_valist(context : GtkStyleContext*, args : X__va_list_tag*) : Void
  fun gtk_style_context_get_style(context : GtkStyleContext*) : Void
  fun gtk_style_context_lookup_icon_set(context : GtkStyleContext*, stock_id : Gchar*) : GtkIconSet*
  fun gtk_icon_set_render_icon_pixbuf(icon_set : GtkIconSet*, context : GtkStyleContext*, size : GtkIconSize) : GdkPixbuf*
  fun gtk_icon_set_render_icon_surface(icon_set : GtkIconSet*, context : GtkStyleContext*, size : GtkIconSize, scale : Int32, for_window : GdkWindow*) : CairoSurfaceT*
  fun gtk_style_context_set_screen(context : GtkStyleContext*, screen : GdkScreen*) : Void
  fun gtk_style_context_get_screen(context : GtkStyleContext*) : GdkScreen*
  fun gtk_style_context_set_frame_clock(context : GtkStyleContext*, frame_clock : GdkFrameClock*) : Void
  fun gtk_style_context_get_frame_clock(context : GtkStyleContext*) : GdkFrameClock*
  fun gtk_style_context_set_direction(context : GtkStyleContext*, direction : GtkTextDirection) : Void
  fun gtk_style_context_get_direction(context : GtkStyleContext*) : GtkTextDirection
  fun gtk_style_context_set_junction_sides(context : GtkStyleContext*, sides : GtkJunctionSides) : Void
  fun gtk_style_context_get_junction_sides(context : GtkStyleContext*) : GtkJunctionSides
  fun gtk_style_context_lookup_color(context : GtkStyleContext*, color_name : Gchar*, color : GdkRGBA*) : Gboolean
  fun gtk_style_context_notify_state_change(context : GtkStyleContext*, window : GdkWindow*, region_id : Gpointer, state : GtkStateType, state_value : Gboolean) : Void
  fun gtk_style_context_cancel_animations(context : GtkStyleContext*, region_id : Gpointer) : Void
  fun gtk_style_context_scroll_animations(context : GtkStyleContext*, window : GdkWindow*, dx : Gint, dy : Gint) : Void
  fun gtk_style_context_push_animatable_region(context : GtkStyleContext*, region_id : Gpointer) : Void
  fun gtk_style_context_pop_animatable_region(context : GtkStyleContext*) : Void
  fun gtk_style_context_get_color(context : GtkStyleContext*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_style_context_get_background_color(context : GtkStyleContext*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_style_context_get_border_color(context : GtkStyleContext*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_style_context_get_font(context : GtkStyleContext*, state : GtkStateFlags) : PangoFontDescription*
  fun gtk_style_context_get_border(context : GtkStyleContext*, state : GtkStateFlags, border : GtkBorder*) : Void
  fun gtk_style_context_get_padding(context : GtkStyleContext*, state : GtkStateFlags, padding : GtkBorder*) : Void
  fun gtk_style_context_get_margin(context : GtkStyleContext*, state : GtkStateFlags, margin : GtkBorder*) : Void
  fun gtk_style_context_invalidate(context : GtkStyleContext*) : Void
  fun gtk_style_context_reset_widgets(screen : GdkScreen*) : Void
  fun gtk_style_context_set_background(context : GtkStyleContext*, window : GdkWindow*) : Void
  fun gtk_render_insertion_cursor(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, layout : PangoLayout*, index : Int32, direction : PangoDirection) : Void
  fun gtk_draw_insertion_cursor(widget : GtkWidget*, cr : CairoT*, location : GdkRectangle*, is_primary : Gboolean, direction : GtkTextDirection, draw_arrow : Gboolean) : Void
  fun gtk_style_context_to_string(context : GtkStyleContext*, flags : GtkStyleContextPrintFlags) : UInt8*
  fun gtk_icon_theme_error_quark : GQuark
  fun gtk_icon_theme_get_type : GType
  fun gtk_icon_theme_new : GtkIconTheme*
  fun gtk_icon_theme_get_default : GtkIconTheme*
  fun gtk_icon_theme_get_for_screen(screen : GdkScreen*) : GtkIconTheme*
  fun gtk_icon_theme_set_screen(icon_theme : GtkIconTheme*, screen : GdkScreen*) : Void
  fun gtk_icon_theme_set_search_path(icon_theme : GtkIconTheme*, path : Gchar**, n_elements : Gint) : Void
  fun gtk_icon_theme_get_search_path(icon_theme : GtkIconTheme*, path : Gchar***, n_elements : Gint*) : Void
  fun gtk_icon_theme_append_search_path(icon_theme : GtkIconTheme*, path : Gchar*) : Void
  fun gtk_icon_theme_prepend_search_path(icon_theme : GtkIconTheme*, path : Gchar*) : Void
  fun gtk_icon_theme_add_resource_path(icon_theme : GtkIconTheme*, path : Gchar*) : Void
  fun gtk_icon_theme_set_custom_theme(icon_theme : GtkIconTheme*, theme_name : Gchar*) : Void
  fun gtk_icon_theme_has_icon(icon_theme : GtkIconTheme*, icon_name : Gchar*) : Gboolean
  fun gtk_icon_theme_get_icon_sizes(icon_theme : GtkIconTheme*, icon_name : Gchar*) : Gint*
  fun gtk_icon_theme_lookup_icon(icon_theme : GtkIconTheme*, icon_name : Gchar*, size : Gint, flags : GtkIconLookupFlags) : GtkIconInfo*
  fun gtk_icon_theme_lookup_icon_for_scale(icon_theme : GtkIconTheme*, icon_name : Gchar*, size : Gint, scale : Gint, flags : GtkIconLookupFlags) : GtkIconInfo*
  fun gtk_icon_theme_choose_icon(icon_theme : GtkIconTheme*, icon_names : Gchar**, size : Gint, flags : GtkIconLookupFlags) : GtkIconInfo*
  fun gtk_icon_theme_choose_icon_for_scale(icon_theme : GtkIconTheme*, icon_names : Gchar**, size : Gint, scale : Gint, flags : GtkIconLookupFlags) : GtkIconInfo*
  fun gtk_icon_theme_load_icon(icon_theme : GtkIconTheme*, icon_name : Gchar*, size : Gint, flags : GtkIconLookupFlags, error : GError**) : GdkPixbuf*
  fun gtk_icon_theme_load_icon_for_scale(icon_theme : GtkIconTheme*, icon_name : Gchar*, size : Gint, scale : Gint, flags : GtkIconLookupFlags, error : GError**) : GdkPixbuf*
  fun gtk_icon_theme_load_surface(icon_theme : GtkIconTheme*, icon_name : Gchar*, size : Gint, scale : Gint, for_window : GdkWindow*, flags : GtkIconLookupFlags, error : GError**) : CairoSurfaceT*
  fun gtk_icon_theme_lookup_by_gicon(icon_theme : GtkIconTheme*, icon : GIcon*, size : Gint, flags : GtkIconLookupFlags) : GtkIconInfo*
  fun gtk_icon_theme_lookup_by_gicon_for_scale(icon_theme : GtkIconTheme*, icon : GIcon*, size : Gint, scale : Gint, flags : GtkIconLookupFlags) : GtkIconInfo*
  fun gtk_icon_theme_list_icons(icon_theme : GtkIconTheme*, context : Gchar*) : GList*
  fun gtk_icon_theme_list_contexts(icon_theme : GtkIconTheme*) : GList*
  fun gtk_icon_theme_get_example_icon_name(icon_theme : GtkIconTheme*) : UInt8*
  fun gtk_icon_theme_rescan_if_needed(icon_theme : GtkIconTheme*) : Gboolean
  fun gtk_icon_theme_add_builtin_icon(icon_name : Gchar*, size : Gint, pixbuf : GdkPixbuf*) : Void
  fun gtk_icon_info_get_type : GType
  fun gtk_icon_info_copy(icon_info : GtkIconInfo*) : GtkIconInfo*
  fun gtk_icon_info_free(icon_info : GtkIconInfo*) : Void
  fun gtk_icon_info_new_for_pixbuf(icon_theme : GtkIconTheme*, pixbuf : GdkPixbuf*) : GtkIconInfo*
  fun gtk_icon_info_get_base_size(icon_info : GtkIconInfo*) : Gint
  fun gtk_icon_info_get_base_scale(icon_info : GtkIconInfo*) : Gint
  fun gtk_icon_info_get_filename(icon_info : GtkIconInfo*) : Gchar*
  fun gtk_icon_info_get_builtin_pixbuf(icon_info : GtkIconInfo*) : GdkPixbuf*
  fun gtk_icon_info_is_symbolic(icon_info : GtkIconInfo*) : Gboolean
  fun gtk_icon_info_load_icon(icon_info : GtkIconInfo*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_load_surface(icon_info : GtkIconInfo*, for_window : GdkWindow*, error : GError**) : CairoSurfaceT*
  fun gtk_icon_info_load_icon_async(icon_info : GtkIconInfo*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gtk_icon_info_load_icon_finish(icon_info : GtkIconInfo*, res : GAsyncResult*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_load_symbolic(icon_info : GtkIconInfo*, fg : GdkRGBA*, success_color : GdkRGBA*, warning_color : GdkRGBA*, error_color : GdkRGBA*, was_symbolic : Gboolean*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_load_symbolic_async(icon_info : GtkIconInfo*, fg : GdkRGBA*, success_color : GdkRGBA*, warning_color : GdkRGBA*, error_color : GdkRGBA*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gtk_icon_info_load_symbolic_finish(icon_info : GtkIconInfo*, res : GAsyncResult*, was_symbolic : Gboolean*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_load_symbolic_for_context(icon_info : GtkIconInfo*, context : GtkStyleContext*, was_symbolic : Gboolean*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_load_symbolic_for_context_async(icon_info : GtkIconInfo*, context : GtkStyleContext*, cancellable : GCancellable*, callback : GAsyncReadyCallback, user_data : Gpointer) : Void
  fun gtk_icon_info_load_symbolic_for_context_finish(icon_info : GtkIconInfo*, res : GAsyncResult*, was_symbolic : Gboolean*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_load_symbolic_for_style(icon_info : GtkIconInfo*, style : GtkStyle*, state : GtkStateType, was_symbolic : Gboolean*, error : GError**) : GdkPixbuf*
  fun gtk_icon_info_set_raw_coordinates(icon_info : GtkIconInfo*, raw_coordinates : Gboolean) : Void
  fun gtk_icon_info_get_embedded_rect(icon_info : GtkIconInfo*, rectangle : GdkRectangle*) : Gboolean
  fun gtk_icon_info_get_attach_points(icon_info : GtkIconInfo*, points : GdkPoint**, n_points : Gint*) : Gboolean
  fun gtk_icon_info_get_display_name(icon_info : GtkIconInfo*) : Gchar*
  fun gtk_tooltip_get_type : GType
  fun gtk_tooltip_set_markup(tooltip : GtkTooltip*, markup : Gchar*) : Void
  fun gtk_tooltip_set_text(tooltip : GtkTooltip*, text : Gchar*) : Void
  fun gtk_tooltip_set_icon(tooltip : GtkTooltip*, pixbuf : GdkPixbuf*) : Void
  fun gtk_tooltip_set_icon_from_stock(tooltip : GtkTooltip*, stock_id : Gchar*, size : GtkIconSize) : Void
  fun gtk_tooltip_set_icon_from_icon_name(tooltip : GtkTooltip*, icon_name : Gchar*, size : GtkIconSize) : Void
  fun gtk_tooltip_set_icon_from_gicon(tooltip : GtkTooltip*, gicon : GIcon*, size : GtkIconSize) : Void
  fun gtk_tooltip_set_custom(tooltip : GtkTooltip*, custom_widget : GtkWidget*) : Void
  fun gtk_tooltip_set_tip_area(tooltip : GtkTooltip*, rect : GdkRectangle*) : Void
  fun gtk_tooltip_trigger_tooltip_query(display : GdkDisplay*) : Void
  fun gtk_icon_view_get_type : GType
  fun gtk_icon_view_new : GtkWidget*
  fun gtk_icon_view_new_with_area(area : GtkCellArea*) : GtkWidget*
  fun gtk_icon_view_new_with_model(model : GtkTreeModel*) : GtkWidget*
  fun gtk_icon_view_set_model(icon_view : GtkIconView*, model : GtkTreeModel*) : Void
  fun gtk_icon_view_get_model(icon_view : GtkIconView*) : GtkTreeModel*
  fun gtk_icon_view_set_text_column(icon_view : GtkIconView*, column : Gint) : Void
  fun gtk_icon_view_get_text_column(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_markup_column(icon_view : GtkIconView*, column : Gint) : Void
  fun gtk_icon_view_get_markup_column(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_pixbuf_column(icon_view : GtkIconView*, column : Gint) : Void
  fun gtk_icon_view_get_pixbuf_column(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_item_orientation(icon_view : GtkIconView*, orientation : GtkOrientation) : Void
  fun gtk_icon_view_get_item_orientation(icon_view : GtkIconView*) : GtkOrientation
  fun gtk_icon_view_set_columns(icon_view : GtkIconView*, columns : Gint) : Void
  fun gtk_icon_view_get_columns(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_item_width(icon_view : GtkIconView*, item_width : Gint) : Void
  fun gtk_icon_view_get_item_width(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_spacing(icon_view : GtkIconView*, spacing : Gint) : Void
  fun gtk_icon_view_get_spacing(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_row_spacing(icon_view : GtkIconView*, row_spacing : Gint) : Void
  fun gtk_icon_view_get_row_spacing(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_column_spacing(icon_view : GtkIconView*, column_spacing : Gint) : Void
  fun gtk_icon_view_get_column_spacing(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_margin(icon_view : GtkIconView*, margin : Gint) : Void
  fun gtk_icon_view_get_margin(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_set_item_padding(icon_view : GtkIconView*, item_padding : Gint) : Void
  fun gtk_icon_view_get_item_padding(icon_view : GtkIconView*) : Gint
  fun gtk_icon_view_get_path_at_pos(icon_view : GtkIconView*, x : Gint, y : Gint) : GtkTreePath*
  fun gtk_icon_view_get_item_at_pos(icon_view : GtkIconView*, x : Gint, y : Gint, path : GtkTreePath**, cell : GtkCellRenderer**) : Gboolean
  fun gtk_icon_view_get_visible_range(icon_view : GtkIconView*, start_path : GtkTreePath**, end_path : GtkTreePath**) : Gboolean
  fun gtk_icon_view_set_activate_on_single_click(icon_view : GtkIconView*, single : Gboolean) : Void
  fun gtk_icon_view_get_activate_on_single_click(icon_view : GtkIconView*) : Gboolean
  fun gtk_icon_view_selected_foreach(icon_view : GtkIconView*, func : GtkIconViewForeachFunc, data : Gpointer) : Void
  fun gtk_icon_view_set_selection_mode(icon_view : GtkIconView*, mode : GtkSelectionMode) : Void
  fun gtk_icon_view_get_selection_mode(icon_view : GtkIconView*) : GtkSelectionMode
  fun gtk_icon_view_select_path(icon_view : GtkIconView*, path : GtkTreePath*) : Void
  fun gtk_icon_view_unselect_path(icon_view : GtkIconView*, path : GtkTreePath*) : Void
  fun gtk_icon_view_path_is_selected(icon_view : GtkIconView*, path : GtkTreePath*) : Gboolean
  fun gtk_icon_view_get_item_row(icon_view : GtkIconView*, path : GtkTreePath*) : Gint
  fun gtk_icon_view_get_item_column(icon_view : GtkIconView*, path : GtkTreePath*) : Gint
  fun gtk_icon_view_get_selected_items(icon_view : GtkIconView*) : GList*
  fun gtk_icon_view_select_all(icon_view : GtkIconView*) : Void
  fun gtk_icon_view_unselect_all(icon_view : GtkIconView*) : Void
  fun gtk_icon_view_item_activated(icon_view : GtkIconView*, path : GtkTreePath*) : Void
  fun gtk_icon_view_set_cursor(icon_view : GtkIconView*, path : GtkTreePath*, cell : GtkCellRenderer*, start_editing : Gboolean) : Void
  fun gtk_icon_view_get_cursor(icon_view : GtkIconView*, path : GtkTreePath**, cell : GtkCellRenderer**) : Gboolean
  fun gtk_icon_view_scroll_to_path(icon_view : GtkIconView*, path : GtkTreePath*, use_align : Gboolean, row_align : Gfloat, col_align : Gfloat) : Void
  fun gtk_icon_view_enable_model_drag_source(icon_view : GtkIconView*, start_button_mask : GdkModifierType, targets : GtkTargetEntry*, n_targets : Gint, actions : GdkDragAction) : Void
  fun gtk_icon_view_enable_model_drag_dest(icon_view : GtkIconView*, targets : GtkTargetEntry*, n_targets : Gint, actions : GdkDragAction) : Void
  fun gtk_icon_view_unset_model_drag_source(icon_view : GtkIconView*) : Void
  fun gtk_icon_view_unset_model_drag_dest(icon_view : GtkIconView*) : Void
  fun gtk_icon_view_set_reorderable(icon_view : GtkIconView*, reorderable : Gboolean) : Void
  fun gtk_icon_view_get_reorderable(icon_view : GtkIconView*) : Gboolean
  fun gtk_icon_view_set_drag_dest_item(icon_view : GtkIconView*, path : GtkTreePath*, pos : GtkIconViewDropPosition) : Void
  fun gtk_icon_view_get_drag_dest_item(icon_view : GtkIconView*, path : GtkTreePath**, pos : GtkIconViewDropPosition*) : Void
  fun gtk_icon_view_get_dest_item_at_pos(icon_view : GtkIconView*, drag_x : Gint, drag_y : Gint, path : GtkTreePath**, pos : GtkIconViewDropPosition*) : Gboolean
  fun gtk_icon_view_create_drag_icon(icon_view : GtkIconView*, path : GtkTreePath*) : CairoSurfaceT*
  fun gtk_icon_view_convert_widget_to_bin_window_coords(icon_view : GtkIconView*, wx : Gint, wy : Gint, bx : Gint*, by : Gint*) : Void
  fun gtk_icon_view_get_cell_rect(icon_view : GtkIconView*, path : GtkTreePath*, cell : GtkCellRenderer*, rect : GdkRectangle*) : Gboolean
  fun gtk_icon_view_set_tooltip_item(icon_view : GtkIconView*, tooltip : GtkTooltip*, path : GtkTreePath*) : Void
  fun gtk_icon_view_set_tooltip_cell(icon_view : GtkIconView*, tooltip : GtkTooltip*, path : GtkTreePath*, cell : GtkCellRenderer*) : Void
  fun gtk_icon_view_get_tooltip_context(icon_view : GtkIconView*, x : Gint*, y : Gint*, keyboard_tip : Gboolean, model : GtkTreeModel**, path : GtkTreePath**, iter : GtkTreeIter*) : Gboolean
  fun gtk_icon_view_set_tooltip_column(icon_view : GtkIconView*, column : Gint) : Void
  fun gtk_icon_view_get_tooltip_column(icon_view : GtkIconView*) : Gint
  fun gtk_im_context_simple_get_type : GType
  fun gtk_im_context_simple_new : GtkIMContext*
  fun gtk_im_context_simple_add_table(context_simple : GtkIMContextSimple*, data : Guint16*, max_seq_len : Gint, n_seqs : Gint) : Void
  fun gtk_im_context_simple_add_compose_file(context_simple : GtkIMContextSimple*, compose_file : Gchar*) : Void
  fun gtk_im_multicontext_get_type : GType
  fun gtk_im_multicontext_new : GtkIMContext*
  fun gtk_im_multicontext_append_menuitems(context : GtkIMMulticontext*, menushell : GtkMenuShell*) : Void
  fun gtk_im_multicontext_get_context_id(context : GtkIMMulticontext*) : UInt8*
  fun gtk_im_multicontext_set_context_id(context : GtkIMMulticontext*, context_id : UInt8*) : Void
  fun gtk_info_bar_get_type : GType
  fun gtk_info_bar_new : GtkWidget*
  fun gtk_info_bar_new_with_buttons(first_button_text : Gchar*) : GtkWidget*
  fun gtk_info_bar_get_action_area(info_bar : GtkInfoBar*) : GtkWidget*
  fun gtk_info_bar_get_content_area(info_bar : GtkInfoBar*) : GtkWidget*
  fun gtk_info_bar_add_action_widget(info_bar : GtkInfoBar*, child : GtkWidget*, response_id : Gint) : Void
  fun gtk_info_bar_add_button(info_bar : GtkInfoBar*, button_text : Gchar*, response_id : Gint) : GtkWidget*
  fun gtk_info_bar_add_buttons(info_bar : GtkInfoBar*, first_button_text : Gchar*) : Void
  fun gtk_info_bar_set_response_sensitive(info_bar : GtkInfoBar*, response_id : Gint, setting : Gboolean) : Void
  fun gtk_info_bar_set_default_response(info_bar : GtkInfoBar*, response_id : Gint) : Void
  fun gtk_info_bar_response(info_bar : GtkInfoBar*, response_id : Gint) : Void
  fun gtk_info_bar_set_message_type(info_bar : GtkInfoBar*, message_type : GtkMessageType) : Void
  fun gtk_info_bar_get_message_type(info_bar : GtkInfoBar*) : GtkMessageType
  fun gtk_info_bar_set_show_close_button(info_bar : GtkInfoBar*, setting : Gboolean) : Void
  fun gtk_info_bar_get_show_close_button(info_bar : GtkInfoBar*) : Gboolean
  fun gtk_invisible_get_type : GType
  fun gtk_invisible_new : GtkWidget*
  fun gtk_invisible_new_for_screen(screen : GdkScreen*) : GtkWidget*
  fun gtk_invisible_set_screen(invisible : GtkInvisible*, screen : GdkScreen*) : Void
  fun gtk_invisible_get_screen(invisible : GtkInvisible*) : GdkScreen*
  fun gtk_layout_get_type : GType
  fun gtk_layout_new(hadjustment : GtkAdjustment*, vadjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_layout_get_bin_window(layout : GtkLayout*) : GdkWindow*
  fun gtk_layout_put(layout : GtkLayout*, child_widget : GtkWidget*, x : Gint, y : Gint) : Void
  fun gtk_layout_move(layout : GtkLayout*, child_widget : GtkWidget*, x : Gint, y : Gint) : Void
  fun gtk_layout_set_size(layout : GtkLayout*, width : Guint, height : Guint) : Void
  fun gtk_layout_get_size(layout : GtkLayout*, width : Guint*, height : Guint*) : Void
  fun gtk_layout_get_hadjustment(layout : GtkLayout*) : GtkAdjustment*
  fun gtk_layout_get_vadjustment(layout : GtkLayout*) : GtkAdjustment*
  fun gtk_layout_set_hadjustment(layout : GtkLayout*, adjustment : GtkAdjustment*) : Void
  fun gtk_layout_set_vadjustment(layout : GtkLayout*, adjustment : GtkAdjustment*) : Void
  fun gtk_level_bar_get_type : GType
  fun gtk_level_bar_new : GtkWidget*
  fun gtk_level_bar_new_for_interval(min_value : Gdouble, max_value : Gdouble) : GtkWidget*
  fun gtk_level_bar_set_mode(self : GtkLevelBar*, mode : GtkLevelBarMode) : Void
  fun gtk_level_bar_get_mode(self : GtkLevelBar*) : GtkLevelBarMode
  fun gtk_level_bar_set_value(self : GtkLevelBar*, value : Gdouble) : Void
  fun gtk_level_bar_get_value(self : GtkLevelBar*) : Gdouble
  fun gtk_level_bar_set_min_value(self : GtkLevelBar*, value : Gdouble) : Void
  fun gtk_level_bar_get_min_value(self : GtkLevelBar*) : Gdouble
  fun gtk_level_bar_set_max_value(self : GtkLevelBar*, value : Gdouble) : Void
  fun gtk_level_bar_get_max_value(self : GtkLevelBar*) : Gdouble
  fun gtk_level_bar_set_inverted(self : GtkLevelBar*, inverted : Gboolean) : Void
  fun gtk_level_bar_get_inverted(self : GtkLevelBar*) : Gboolean
  fun gtk_level_bar_add_offset_value(self : GtkLevelBar*, name : Gchar*, value : Gdouble) : Void
  fun gtk_level_bar_remove_offset_value(self : GtkLevelBar*, name : Gchar*) : Void
  fun gtk_level_bar_get_offset_value(self : GtkLevelBar*, name : Gchar*, value : Gdouble*) : Gboolean
  fun gtk_link_button_get_type : GType
  fun gtk_link_button_new(uri : Gchar*) : GtkWidget*
  fun gtk_link_button_new_with_label(uri : Gchar*, label : Gchar*) : GtkWidget*
  fun gtk_link_button_get_uri(link_button : GtkLinkButton*) : Gchar*
  fun gtk_link_button_set_uri(link_button : GtkLinkButton*, uri : Gchar*) : Void
  fun gtk_link_button_get_visited(link_button : GtkLinkButton*) : Gboolean
  fun gtk_link_button_set_visited(link_button : GtkLinkButton*, visited : Gboolean) : Void
  fun gtk_list_box_row_get_type : GType
  fun gtk_list_box_row_new : GtkWidget*
  fun gtk_list_box_row_get_header(row : GtkListBoxRow*) : GtkWidget*
  fun gtk_list_box_row_set_header(row : GtkListBoxRow*, header : GtkWidget*) : Void
  fun gtk_list_box_row_get_index(row : GtkListBoxRow*) : Gint
  fun gtk_list_box_row_changed(row : GtkListBoxRow*) : Void
  fun gtk_list_box_row_is_selected(row : GtkListBoxRow*) : Gboolean
  fun gtk_list_box_row_set_selectable(row : GtkListBoxRow*, selectable : Gboolean) : Void
  fun gtk_list_box_row_get_selectable(row : GtkListBoxRow*) : Gboolean
  fun gtk_list_box_row_set_activatable(row : GtkListBoxRow*, activatable : Gboolean) : Void
  fun gtk_list_box_row_get_activatable(row : GtkListBoxRow*) : Gboolean
  fun gtk_list_box_get_type : GType
  fun gtk_list_box_prepend(box : GtkListBox*, child : GtkWidget*) : Void
  fun gtk_list_box_insert(box : GtkListBox*, child : GtkWidget*, position : Gint) : Void
  fun gtk_list_box_get_selected_row(box : GtkListBox*) : GtkListBoxRow*
  fun gtk_list_box_get_row_at_index(box : GtkListBox*, index_ : Gint) : GtkListBoxRow*
  fun gtk_list_box_get_row_at_y(box : GtkListBox*, y : Gint) : GtkListBoxRow*
  fun gtk_list_box_select_row(box : GtkListBox*, row : GtkListBoxRow*) : Void
  fun gtk_list_box_set_placeholder(box : GtkListBox*, placeholder : GtkWidget*) : Void
  fun gtk_list_box_set_adjustment(box : GtkListBox*, adjustment : GtkAdjustment*) : Void
  fun gtk_list_box_get_adjustment(box : GtkListBox*) : GtkAdjustment*
  fun gtk_list_box_selected_foreach(box : GtkListBox*, func : GtkListBoxForeachFunc, data : Gpointer) : Void
  fun gtk_list_box_get_selected_rows(box : GtkListBox*) : GList*
  fun gtk_list_box_unselect_row(box : GtkListBox*, row : GtkListBoxRow*) : Void
  fun gtk_list_box_select_all(box : GtkListBox*) : Void
  fun gtk_list_box_unselect_all(box : GtkListBox*) : Void
  fun gtk_list_box_set_selection_mode(box : GtkListBox*, mode : GtkSelectionMode) : Void
  fun gtk_list_box_get_selection_mode(box : GtkListBox*) : GtkSelectionMode
  fun gtk_list_box_set_filter_func(box : GtkListBox*, filter_func : GtkListBoxFilterFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_list_box_set_header_func(box : GtkListBox*, update_header : GtkListBoxUpdateHeaderFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_list_box_invalidate_filter(box : GtkListBox*) : Void
  fun gtk_list_box_invalidate_sort(box : GtkListBox*) : Void
  fun gtk_list_box_invalidate_headers(box : GtkListBox*) : Void
  fun gtk_list_box_set_sort_func(box : GtkListBox*, sort_func : GtkListBoxSortFunc, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_list_box_set_activate_on_single_click(box : GtkListBox*, single : Gboolean) : Void
  fun gtk_list_box_get_activate_on_single_click(box : GtkListBox*) : Gboolean
  fun gtk_list_box_drag_unhighlight_row(box : GtkListBox*) : Void
  fun gtk_list_box_drag_highlight_row(box : GtkListBox*, row : GtkListBoxRow*) : Void
  fun gtk_list_box_new : GtkWidget*
  fun gtk_list_box_bind_model(box : GtkListBox*, model : GListModel*, create_widget_func : GtkListBoxCreateWidgetFunc, user_data : Gpointer, user_data_free_func : GDestroyNotify) : Void
  fun glib_autoptr_cleanup_gtk_list_box(_ptr : GtkListBox**) : Void
  fun glib_autoptr_cleanup_gtk_list_box_row(_ptr : GtkListBoxRow**) : Void
  fun gtk_lock_button_get_type : GType
  fun gtk_lock_button_new(permission : GPermission*) : GtkWidget*
  fun gtk_lock_button_get_permission(button : GtkLockButton*) : GPermission*
  fun gtk_lock_button_set_permission(button : GtkLockButton*, permission : GPermission*) : Void
  fun gtk_get_major_version : Guint
  fun gtk_get_minor_version : Guint
  fun gtk_get_micro_version : Guint
  fun gtk_get_binary_age : Guint
  fun gtk_get_interface_age : Guint
  fun gtk_check_version(required_major : Guint, required_minor : Guint, required_micro : Guint) : Gchar*
  fun gtk_parse_args(argc : Int32*, argv : UInt8***) : Gboolean
  fun gtk_init(argc : Int32*, argv : UInt8***) : Void
  fun gtk_init_check(argc : Int32*, argv : UInt8***) : Gboolean
  fun gtk_init_with_args(argc : Gint*, argv : Gchar***, parameter_string : Gchar*, entries : GOptionEntry*, translation_domain : Gchar*, error : GError**) : Gboolean
  fun gtk_get_option_group(open_default_display : Gboolean) : GOptionGroup*
  fun gtk_disable_setlocale : Void
  fun gtk_get_default_language : PangoLanguage*
  fun gtk_get_locale_direction : GtkTextDirection
  fun gtk_events_pending : Gboolean
  fun gtk_main_do_event(event : GdkEvent*) : Void
  fun gtk_main : Void
  fun gtk_main_level : Guint
  fun gtk_main_quit : Void
  fun gtk_main_iteration : Gboolean
  fun gtk_main_iteration_do(blocking : Gboolean) : Gboolean
  fun gtk_true : Gboolean
  fun gtk_false : Gboolean
  fun gtk_grab_add(widget : GtkWidget*) : Void
  fun gtk_grab_get_current : GtkWidget*
  fun gtk_grab_remove(widget : GtkWidget*) : Void
  fun gtk_device_grab_add(widget : GtkWidget*, device : GdkDevice*, block_others : Gboolean) : Void
  fun gtk_device_grab_remove(widget : GtkWidget*, device : GdkDevice*) : Void
  fun gtk_key_snooper_install(snooper : GtkKeySnoopFunc, func_data : Gpointer) : Guint
  fun gtk_key_snooper_remove(snooper_handler_id : Guint) : Void
  fun gtk_get_current_event : GdkEvent*
  fun gtk_get_current_event_time : Guint32
  fun gtk_get_current_event_state(state : GdkModifierType*) : Gboolean
  fun gtk_get_current_event_device : GdkDevice*
  fun gtk_get_event_widget(event : GdkEvent*) : GtkWidget*
  fun gtk_propagate_event(widget : GtkWidget*, event : GdkEvent*) : Void
  fun gtk_menu_bar_get_type : GType
  fun gtk_menu_bar_new : GtkWidget*
  fun gtk_menu_bar_new_from_model(model : GMenuModel*) : GtkWidget*
  fun gtk_menu_bar_get_pack_direction(menubar : GtkMenuBar*) : GtkPackDirection
  fun gtk_menu_bar_set_pack_direction(menubar : GtkMenuBar*, pack_dir : GtkPackDirection) : Void
  fun gtk_menu_bar_get_child_pack_direction(menubar : GtkMenuBar*) : GtkPackDirection
  fun gtk_menu_bar_set_child_pack_direction(menubar : GtkMenuBar*, child_pack_dir : GtkPackDirection) : Void
  fun _gtk_menu_bar_cycle_focus(menubar : GtkMenuBar*, dir : GtkDirectionType) : Void
  fun _gtk_menu_bar_get_viewable_menu_bars(window : GtkWindow*) : GList*
  fun gtk_popover_get_type : GType
  fun gtk_popover_new(relative_to : GtkWidget*) : GtkWidget*
  fun gtk_popover_new_from_model(relative_to : GtkWidget*, model : GMenuModel*) : GtkWidget*
  fun gtk_popover_set_relative_to(popover : GtkPopover*, relative_to : GtkWidget*) : Void
  fun gtk_popover_get_relative_to(popover : GtkPopover*) : GtkWidget*
  fun gtk_popover_set_pointing_to(popover : GtkPopover*, rect : GdkRectangle*) : Void
  fun gtk_popover_get_pointing_to(popover : GtkPopover*, rect : GdkRectangle*) : Gboolean
  fun gtk_popover_set_position(popover : GtkPopover*, position : GtkPositionType) : Void
  fun gtk_popover_get_position(popover : GtkPopover*) : GtkPositionType
  fun gtk_popover_set_modal(popover : GtkPopover*, modal : Gboolean) : Void
  fun gtk_popover_get_modal(popover : GtkPopover*) : Gboolean
  fun gtk_popover_bind_model(popover : GtkPopover*, model : GMenuModel*, action_namespace : Gchar*) : Void
  fun gtk_popover_set_transitions_enabled(popover : GtkPopover*, transitions_enabled : Gboolean) : Void
  fun gtk_popover_get_transitions_enabled(popover : GtkPopover*) : Gboolean
  fun gtk_popover_set_default_widget(popover : GtkPopover*, widget : GtkWidget*) : Void
  fun gtk_popover_get_default_widget(popover : GtkPopover*) : GtkWidget*
  fun gtk_popover_set_constrain_to(popover : GtkPopover*, constraint : GtkPopoverConstraint) : Void
  fun gtk_popover_get_constrain_to(popover : GtkPopover*) : GtkPopoverConstraint
  fun gtk_menu_button_get_type : GType
  fun gtk_menu_button_new : GtkWidget*
  fun gtk_menu_button_set_popup(menu_button : GtkMenuButton*, menu : GtkWidget*) : Void
  fun gtk_menu_button_get_popup(menu_button : GtkMenuButton*) : GtkMenu*
  fun gtk_menu_button_set_popover(menu_button : GtkMenuButton*, popover : GtkWidget*) : Void
  fun gtk_menu_button_get_popover(menu_button : GtkMenuButton*) : GtkPopover*
  fun gtk_menu_button_set_direction(menu_button : GtkMenuButton*, direction : GtkArrowType) : Void
  fun gtk_menu_button_get_direction(menu_button : GtkMenuButton*) : GtkArrowType
  fun gtk_menu_button_set_menu_model(menu_button : GtkMenuButton*, menu_model : GMenuModel*) : Void
  fun gtk_menu_button_get_menu_model(menu_button : GtkMenuButton*) : GMenuModel*
  fun gtk_menu_button_set_align_widget(menu_button : GtkMenuButton*, align_widget : GtkWidget*) : Void
  fun gtk_menu_button_get_align_widget(menu_button : GtkMenuButton*) : GtkWidget*
  fun gtk_menu_button_set_use_popover(menu_button : GtkMenuButton*, use_popover : Gboolean) : Void
  fun gtk_menu_button_get_use_popover(menu_button : GtkMenuButton*) : Gboolean
  fun gtk_size_group_get_type : GType
  fun gtk_size_group_new(mode : GtkSizeGroupMode) : GtkSizeGroup*
  fun gtk_size_group_set_mode(size_group : GtkSizeGroup*, mode : GtkSizeGroupMode) : Void
  fun gtk_size_group_get_mode(size_group : GtkSizeGroup*) : GtkSizeGroupMode
  fun gtk_size_group_set_ignore_hidden(size_group : GtkSizeGroup*, ignore_hidden : Gboolean) : Void
  fun gtk_size_group_get_ignore_hidden(size_group : GtkSizeGroup*) : Gboolean
  fun gtk_size_group_add_widget(size_group : GtkSizeGroup*, widget : GtkWidget*) : Void
  fun gtk_size_group_remove_widget(size_group : GtkSizeGroup*, widget : GtkWidget*) : Void
  fun gtk_size_group_get_widgets(size_group : GtkSizeGroup*) : GSList*
  fun gtk_tool_item_get_type : GType
  fun gtk_tool_item_new : GtkToolItem*
  fun gtk_tool_item_set_homogeneous(tool_item : GtkToolItem*, homogeneous : Gboolean) : Void
  fun gtk_tool_item_get_homogeneous(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_item_set_expand(tool_item : GtkToolItem*, expand : Gboolean) : Void
  fun gtk_tool_item_get_expand(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_item_set_tooltip_text(tool_item : GtkToolItem*, text : Gchar*) : Void
  fun gtk_tool_item_set_tooltip_markup(tool_item : GtkToolItem*, markup : Gchar*) : Void
  fun gtk_tool_item_set_use_drag_window(tool_item : GtkToolItem*, use_drag_window : Gboolean) : Void
  fun gtk_tool_item_get_use_drag_window(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_item_set_visible_horizontal(tool_item : GtkToolItem*, visible_horizontal : Gboolean) : Void
  fun gtk_tool_item_get_visible_horizontal(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_item_set_visible_vertical(tool_item : GtkToolItem*, visible_vertical : Gboolean) : Void
  fun gtk_tool_item_get_visible_vertical(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_item_get_is_important(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_item_set_is_important(tool_item : GtkToolItem*, is_important : Gboolean) : Void
  fun gtk_tool_item_get_ellipsize_mode(tool_item : GtkToolItem*) : PangoEllipsizeMode
  fun gtk_tool_item_get_icon_size(tool_item : GtkToolItem*) : GtkIconSize
  fun gtk_tool_item_get_orientation(tool_item : GtkToolItem*) : GtkOrientation
  fun gtk_tool_item_get_toolbar_style(tool_item : GtkToolItem*) : GtkToolbarStyle
  fun gtk_tool_item_get_relief_style(tool_item : GtkToolItem*) : GtkReliefStyle
  fun gtk_tool_item_get_text_alignment(tool_item : GtkToolItem*) : Gfloat
  fun gtk_tool_item_get_text_orientation(tool_item : GtkToolItem*) : GtkOrientation
  fun gtk_tool_item_get_text_size_group(tool_item : GtkToolItem*) : GtkSizeGroup*
  fun gtk_tool_item_retrieve_proxy_menu_item(tool_item : GtkToolItem*) : GtkWidget*
  fun gtk_tool_item_get_proxy_menu_item(tool_item : GtkToolItem*, menu_item_id : Gchar*) : GtkWidget*
  fun gtk_tool_item_set_proxy_menu_item(tool_item : GtkToolItem*, menu_item_id : Gchar*, menu_item : GtkWidget*) : Void
  fun gtk_tool_item_rebuild_menu(tool_item : GtkToolItem*) : Void
  fun gtk_tool_item_toolbar_reconfigured(tool_item : GtkToolItem*) : Void
  fun _gtk_tool_item_create_menu_proxy(tool_item : GtkToolItem*) : Gboolean
  fun gtk_tool_button_get_type : GType
  fun gtk_tool_button_new(icon_widget : GtkWidget*, label : Gchar*) : GtkToolItem*
  fun gtk_tool_button_new_from_stock(stock_id : Gchar*) : GtkToolItem*
  fun gtk_tool_button_set_label(button : GtkToolButton*, label : Gchar*) : Void
  fun gtk_tool_button_get_label(button : GtkToolButton*) : Gchar*
  fun gtk_tool_button_set_use_underline(button : GtkToolButton*, use_underline : Gboolean) : Void
  fun gtk_tool_button_get_use_underline(button : GtkToolButton*) : Gboolean
  fun gtk_tool_button_set_stock_id(button : GtkToolButton*, stock_id : Gchar*) : Void
  fun gtk_tool_button_get_stock_id(button : GtkToolButton*) : Gchar*
  fun gtk_tool_button_set_icon_name(button : GtkToolButton*, icon_name : Gchar*) : Void
  fun gtk_tool_button_get_icon_name(button : GtkToolButton*) : Gchar*
  fun gtk_tool_button_set_icon_widget(button : GtkToolButton*, icon_widget : GtkWidget*) : Void
  fun gtk_tool_button_get_icon_widget(button : GtkToolButton*) : GtkWidget*
  fun gtk_tool_button_set_label_widget(button : GtkToolButton*, label_widget : GtkWidget*) : Void
  fun gtk_tool_button_get_label_widget(button : GtkToolButton*) : GtkWidget*
  fun _gtk_tool_button_get_button(button : GtkToolButton*) : GtkWidget*
  fun gtk_menu_tool_button_get_type : GType
  fun gtk_menu_tool_button_new(icon_widget : GtkWidget*, label : Gchar*) : GtkToolItem*
  fun gtk_menu_tool_button_new_from_stock(stock_id : Gchar*) : GtkToolItem*
  fun gtk_menu_tool_button_set_menu(button : GtkMenuToolButton*, menu : GtkWidget*) : Void
  fun gtk_menu_tool_button_get_menu(button : GtkMenuToolButton*) : GtkWidget*
  fun gtk_menu_tool_button_set_arrow_tooltip_text(button : GtkMenuToolButton*, text : Gchar*) : Void
  fun gtk_menu_tool_button_set_arrow_tooltip_markup(button : GtkMenuToolButton*, markup : Gchar*) : Void
  fun gtk_message_dialog_get_type : GType
  fun gtk_message_dialog_new(parent : GtkWindow*, flags : GtkDialogFlags, type : GtkMessageType, buttons : GtkButtonsType, message_format : Gchar*) : GtkWidget*
  fun gtk_message_dialog_new_with_markup(parent : GtkWindow*, flags : GtkDialogFlags, type : GtkMessageType, buttons : GtkButtonsType, message_format : Gchar*) : GtkWidget*
  fun gtk_message_dialog_set_image(dialog : GtkMessageDialog*, image : GtkWidget*) : Void
  fun gtk_message_dialog_get_image(dialog : GtkMessageDialog*) : GtkWidget*
  fun gtk_message_dialog_set_markup(message_dialog : GtkMessageDialog*, str : Gchar*) : Void
  fun gtk_message_dialog_format_secondary_text(message_dialog : GtkMessageDialog*, message_format : Gchar*) : Void
  fun gtk_message_dialog_format_secondary_markup(message_dialog : GtkMessageDialog*, message_format : Gchar*) : Void
  fun gtk_message_dialog_get_message_area(message_dialog : GtkMessageDialog*) : GtkWidget*
  fun gtk_model_button_get_type : GType
  fun gtk_model_button_new : GtkWidget*
  fun gtk_mount_operation_get_type : GType
  fun gtk_mount_operation_new(parent : GtkWindow*) : GMountOperation*
  fun gtk_mount_operation_is_showing(op : GtkMountOperation*) : Gboolean
  fun gtk_mount_operation_set_parent(op : GtkMountOperation*, parent : GtkWindow*) : Void
  fun gtk_mount_operation_get_parent(op : GtkMountOperation*) : GtkWindow*
  fun gtk_mount_operation_set_screen(op : GtkMountOperation*, screen : GdkScreen*) : Void
  fun gtk_mount_operation_get_screen(op : GtkMountOperation*) : GdkScreen*
  fun gtk_notebook_get_type : GType
  fun gtk_notebook_new : GtkWidget*
  fun gtk_notebook_append_page(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*) : Gint
  fun gtk_notebook_append_page_menu(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*, menu_label : GtkWidget*) : Gint
  fun gtk_notebook_prepend_page(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*) : Gint
  fun gtk_notebook_prepend_page_menu(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*, menu_label : GtkWidget*) : Gint
  fun gtk_notebook_insert_page(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*, position : Gint) : Gint
  fun gtk_notebook_insert_page_menu(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*, menu_label : GtkWidget*, position : Gint) : Gint
  fun gtk_notebook_remove_page(notebook : GtkNotebook*, page_num : Gint) : Void
  fun gtk_notebook_set_group_name(notebook : GtkNotebook*, group_name : Gchar*) : Void
  fun gtk_notebook_get_group_name(notebook : GtkNotebook*) : Gchar*
  fun gtk_notebook_get_current_page(notebook : GtkNotebook*) : Gint
  fun gtk_notebook_get_nth_page(notebook : GtkNotebook*, page_num : Gint) : GtkWidget*
  fun gtk_notebook_get_n_pages(notebook : GtkNotebook*) : Gint
  fun gtk_notebook_page_num(notebook : GtkNotebook*, child : GtkWidget*) : Gint
  fun gtk_notebook_set_current_page(notebook : GtkNotebook*, page_num : Gint) : Void
  fun gtk_notebook_next_page(notebook : GtkNotebook*) : Void
  fun gtk_notebook_prev_page(notebook : GtkNotebook*) : Void
  fun gtk_notebook_set_show_border(notebook : GtkNotebook*, show_border : Gboolean) : Void
  fun gtk_notebook_get_show_border(notebook : GtkNotebook*) : Gboolean
  fun gtk_notebook_set_show_tabs(notebook : GtkNotebook*, show_tabs : Gboolean) : Void
  fun gtk_notebook_get_show_tabs(notebook : GtkNotebook*) : Gboolean
  fun gtk_notebook_set_tab_pos(notebook : GtkNotebook*, pos : GtkPositionType) : Void
  fun gtk_notebook_get_tab_pos(notebook : GtkNotebook*) : GtkPositionType
  fun gtk_notebook_set_scrollable(notebook : GtkNotebook*, scrollable : Gboolean) : Void
  fun gtk_notebook_get_scrollable(notebook : GtkNotebook*) : Gboolean
  fun gtk_notebook_get_tab_hborder(notebook : GtkNotebook*) : Guint16
  fun gtk_notebook_get_tab_vborder(notebook : GtkNotebook*) : Guint16
  fun gtk_notebook_popup_enable(notebook : GtkNotebook*) : Void
  fun gtk_notebook_popup_disable(notebook : GtkNotebook*) : Void
  fun gtk_notebook_get_tab_label(notebook : GtkNotebook*, child : GtkWidget*) : GtkWidget*
  fun gtk_notebook_set_tab_label(notebook : GtkNotebook*, child : GtkWidget*, tab_label : GtkWidget*) : Void
  fun gtk_notebook_set_tab_label_text(notebook : GtkNotebook*, child : GtkWidget*, tab_text : Gchar*) : Void
  fun gtk_notebook_get_tab_label_text(notebook : GtkNotebook*, child : GtkWidget*) : Gchar*
  fun gtk_notebook_get_menu_label(notebook : GtkNotebook*, child : GtkWidget*) : GtkWidget*
  fun gtk_notebook_set_menu_label(notebook : GtkNotebook*, child : GtkWidget*, menu_label : GtkWidget*) : Void
  fun gtk_notebook_set_menu_label_text(notebook : GtkNotebook*, child : GtkWidget*, menu_text : Gchar*) : Void
  fun gtk_notebook_get_menu_label_text(notebook : GtkNotebook*, child : GtkWidget*) : Gchar*
  fun gtk_notebook_reorder_child(notebook : GtkNotebook*, child : GtkWidget*, position : Gint) : Void
  fun gtk_notebook_get_tab_reorderable(notebook : GtkNotebook*, child : GtkWidget*) : Gboolean
  fun gtk_notebook_set_tab_reorderable(notebook : GtkNotebook*, child : GtkWidget*, reorderable : Gboolean) : Void
  fun gtk_notebook_get_tab_detachable(notebook : GtkNotebook*, child : GtkWidget*) : Gboolean
  fun gtk_notebook_set_tab_detachable(notebook : GtkNotebook*, child : GtkWidget*, detachable : Gboolean) : Void
  fun gtk_notebook_detach_tab(notebook : GtkNotebook*, child : GtkWidget*) : Void
  fun gtk_notebook_get_action_widget(notebook : GtkNotebook*, pack_type : GtkPackType) : GtkWidget*
  fun gtk_notebook_set_action_widget(notebook : GtkNotebook*, widget : GtkWidget*, pack_type : GtkPackType) : Void
  fun gtk_offscreen_window_get_type : GType
  fun gtk_offscreen_window_new : GtkWidget*
  fun gtk_offscreen_window_get_surface(offscreen : GtkOffscreenWindow*) : CairoSurfaceT*
  fun gtk_offscreen_window_get_pixbuf(offscreen : GtkOffscreenWindow*) : GdkPixbuf*
  fun gtk_orientable_get_type : GType
  fun gtk_orientable_set_orientation(orientable : GtkOrientable*, orientation : GtkOrientation) : Void
  fun gtk_orientable_get_orientation(orientable : GtkOrientable*) : GtkOrientation
  fun gtk_overlay_get_type : GType
  fun gtk_overlay_new : GtkWidget*
  fun gtk_overlay_add_overlay(overlay : GtkOverlay*, widget : GtkWidget*) : Void
  fun gtk_overlay_reorder_overlay(overlay : GtkOverlay*, child : GtkWidget*, position : Gint) : Void
  fun gtk_overlay_get_overlay_pass_through(overlay : GtkOverlay*, widget : GtkWidget*) : Gboolean
  fun gtk_overlay_set_overlay_pass_through(overlay : GtkOverlay*, widget : GtkWidget*, pass_through : Gboolean) : Void
  fun gtk_paper_size_get_type : GType
  fun gtk_paper_size_new(name : Gchar*) : GtkPaperSize*
  fun gtk_paper_size_new_from_ppd(ppd_name : Gchar*, ppd_display_name : Gchar*, width : Gdouble, height : Gdouble) : GtkPaperSize*
  fun gtk_paper_size_new_from_ipp(ipp_name : Gchar*, width : Gdouble, height : Gdouble) : GtkPaperSize*
  fun gtk_paper_size_new_custom(name : Gchar*, display_name : Gchar*, width : Gdouble, height : Gdouble, unit : GtkUnit) : GtkPaperSize*
  fun gtk_paper_size_copy(other : GtkPaperSize*) : GtkPaperSize*
  fun gtk_paper_size_free(size : GtkPaperSize*) : Void
  fun gtk_paper_size_is_equal(size1 : GtkPaperSize*, size2 : GtkPaperSize*) : Gboolean
  fun gtk_paper_size_get_paper_sizes(include_custom : Gboolean) : GList*
  fun gtk_paper_size_get_name(size : GtkPaperSize*) : Gchar*
  fun gtk_paper_size_get_display_name(size : GtkPaperSize*) : Gchar*
  fun gtk_paper_size_get_ppd_name(size : GtkPaperSize*) : Gchar*
  fun gtk_paper_size_get_width(size : GtkPaperSize*, unit : GtkUnit) : Gdouble
  fun gtk_paper_size_get_height(size : GtkPaperSize*, unit : GtkUnit) : Gdouble
  fun gtk_paper_size_is_custom(size : GtkPaperSize*) : Gboolean
  fun gtk_paper_size_is_ipp(size : GtkPaperSize*) : Gboolean
  fun gtk_paper_size_set_size(size : GtkPaperSize*, width : Gdouble, height : Gdouble, unit : GtkUnit) : Void
  fun gtk_paper_size_get_default_top_margin(size : GtkPaperSize*, unit : GtkUnit) : Gdouble
  fun gtk_paper_size_get_default_bottom_margin(size : GtkPaperSize*, unit : GtkUnit) : Gdouble
  fun gtk_paper_size_get_default_left_margin(size : GtkPaperSize*, unit : GtkUnit) : Gdouble
  fun gtk_paper_size_get_default_right_margin(size : GtkPaperSize*, unit : GtkUnit) : Gdouble
  fun gtk_paper_size_get_default : Gchar*
  fun gtk_paper_size_new_from_key_file(key_file : GKeyFile*, group_name : Gchar*, error : GError**) : GtkPaperSize*
  fun gtk_paper_size_to_key_file(size : GtkPaperSize*, key_file : GKeyFile*, group_name : Gchar*) : Void
  fun gtk_page_setup_get_type : GType
  fun gtk_page_setup_new : GtkPageSetup*
  fun gtk_page_setup_copy(other : GtkPageSetup*) : GtkPageSetup*
  fun gtk_page_setup_get_orientation(setup : GtkPageSetup*) : GtkPageOrientation
  fun gtk_page_setup_set_orientation(setup : GtkPageSetup*, orientation : GtkPageOrientation) : Void
  fun gtk_page_setup_get_paper_size(setup : GtkPageSetup*) : GtkPaperSize*
  fun gtk_page_setup_set_paper_size(setup : GtkPageSetup*, size : GtkPaperSize*) : Void
  fun gtk_page_setup_get_top_margin(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_set_top_margin(setup : GtkPageSetup*, margin : Gdouble, unit : GtkUnit) : Void
  fun gtk_page_setup_get_bottom_margin(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_set_bottom_margin(setup : GtkPageSetup*, margin : Gdouble, unit : GtkUnit) : Void
  fun gtk_page_setup_get_left_margin(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_set_left_margin(setup : GtkPageSetup*, margin : Gdouble, unit : GtkUnit) : Void
  fun gtk_page_setup_get_right_margin(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_set_right_margin(setup : GtkPageSetup*, margin : Gdouble, unit : GtkUnit) : Void
  fun gtk_page_setup_set_paper_size_and_default_margins(setup : GtkPageSetup*, size : GtkPaperSize*) : Void
  fun gtk_page_setup_get_paper_width(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_get_paper_height(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_get_page_width(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_get_page_height(setup : GtkPageSetup*, unit : GtkUnit) : Gdouble
  fun gtk_page_setup_new_from_file(file_name : Gchar*, error : GError**) : GtkPageSetup*
  fun gtk_page_setup_load_file(setup : GtkPageSetup*, file_name : UInt8*, error : GError**) : Gboolean
  fun gtk_page_setup_to_file(setup : GtkPageSetup*, file_name : UInt8*, error : GError**) : Gboolean
  fun gtk_page_setup_new_from_key_file(key_file : GKeyFile*, group_name : Gchar*, error : GError**) : GtkPageSetup*
  fun gtk_page_setup_load_key_file(setup : GtkPageSetup*, key_file : GKeyFile*, group_name : Gchar*, error : GError**) : Gboolean
  fun gtk_page_setup_to_key_file(setup : GtkPageSetup*, key_file : GKeyFile*, group_name : Gchar*) : Void
  fun gtk_paned_get_type : GType
  fun gtk_paned_new(orientation : GtkOrientation) : GtkWidget*
  fun gtk_paned_add1(paned : GtkPaned*, child : GtkWidget*) : Void
  fun gtk_paned_add2(paned : GtkPaned*, child : GtkWidget*) : Void
  fun gtk_paned_pack1(paned : GtkPaned*, child : GtkWidget*, resize : Gboolean, shrink : Gboolean) : Void
  fun gtk_paned_pack2(paned : GtkPaned*, child : GtkWidget*, resize : Gboolean, shrink : Gboolean) : Void
  fun gtk_paned_get_position(paned : GtkPaned*) : Gint
  fun gtk_paned_set_position(paned : GtkPaned*, position : Gint) : Void
  fun gtk_paned_get_child1(paned : GtkPaned*) : GtkWidget*
  fun gtk_paned_get_child2(paned : GtkPaned*) : GtkWidget*
  fun gtk_paned_get_handle_window(paned : GtkPaned*) : GdkWindow*
  fun gtk_paned_set_wide_handle(paned : GtkPaned*, wide : Gboolean) : Void
  fun gtk_paned_get_wide_handle(paned : GtkPaned*) : Gboolean
  fun gtk_places_sidebar_get_type : GType
  fun gtk_places_sidebar_new : GtkWidget*
  fun gtk_places_sidebar_get_open_flags(sidebar : GtkPlacesSidebar*) : GtkPlacesOpenFlags
  fun gtk_places_sidebar_set_open_flags(sidebar : GtkPlacesSidebar*, flags : GtkPlacesOpenFlags) : Void
  fun gtk_places_sidebar_get_location(sidebar : GtkPlacesSidebar*) : GFile*
  fun gtk_places_sidebar_set_location(sidebar : GtkPlacesSidebar*, location : GFile*) : Void
  fun gtk_places_sidebar_get_show_recent(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_places_sidebar_set_show_recent(sidebar : GtkPlacesSidebar*, show_recent : Gboolean) : Void
  fun gtk_places_sidebar_get_show_desktop(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_places_sidebar_set_show_desktop(sidebar : GtkPlacesSidebar*, show_desktop : Gboolean) : Void
  fun gtk_places_sidebar_get_show_connect_to_server(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_places_sidebar_set_show_connect_to_server(sidebar : GtkPlacesSidebar*, show_connect_to_server : Gboolean) : Void
  fun gtk_places_sidebar_get_show_enter_location(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_places_sidebar_set_show_enter_location(sidebar : GtkPlacesSidebar*, show_enter_location : Gboolean) : Void
  fun gtk_places_sidebar_set_local_only(sidebar : GtkPlacesSidebar*, local_only : Gboolean) : Void
  fun gtk_places_sidebar_get_local_only(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_places_sidebar_add_shortcut(sidebar : GtkPlacesSidebar*, location : GFile*) : Void
  fun gtk_places_sidebar_remove_shortcut(sidebar : GtkPlacesSidebar*, location : GFile*) : Void
  fun gtk_places_sidebar_list_shortcuts(sidebar : GtkPlacesSidebar*) : GSList*
  fun gtk_places_sidebar_get_nth_bookmark(sidebar : GtkPlacesSidebar*, n : Gint) : GFile*
  fun gtk_places_sidebar_set_drop_targets_visible(sidebar : GtkPlacesSidebar*, visible : Gboolean, context : GdkDragContext*) : Void
  fun gtk_places_sidebar_get_show_trash(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_places_sidebar_set_show_trash(sidebar : GtkPlacesSidebar*, show_trash : Gboolean) : Void
  fun gtk_places_sidebar_set_show_other_locations(sidebar : GtkPlacesSidebar*, show_other_locations : Gboolean) : Void
  fun gtk_places_sidebar_get_show_other_locations(sidebar : GtkPlacesSidebar*) : Gboolean
  fun gtk_popover_menu_get_type : GType
  fun gtk_popover_menu_new : GtkWidget*
  fun gtk_popover_menu_open_submenu(popover : GtkPopoverMenu*, name : Gchar*) : Void
  fun gtk_print_context_get_type : GType
  fun gtk_print_context_get_cairo_context(context : GtkPrintContext*) : CairoT*
  fun gtk_print_context_get_page_setup(context : GtkPrintContext*) : GtkPageSetup*
  fun gtk_print_context_get_width(context : GtkPrintContext*) : Gdouble
  fun gtk_print_context_get_height(context : GtkPrintContext*) : Gdouble
  fun gtk_print_context_get_dpi_x(context : GtkPrintContext*) : Gdouble
  fun gtk_print_context_get_dpi_y(context : GtkPrintContext*) : Gdouble
  fun gtk_print_context_get_hard_margins(context : GtkPrintContext*, top : Gdouble*, bottom : Gdouble*, left : Gdouble*, right : Gdouble*) : Gboolean
  fun gtk_print_context_get_pango_fontmap(context : GtkPrintContext*) : PangoFontMap*
  fun gtk_print_context_create_pango_context(context : GtkPrintContext*) : PangoContext*
  fun gtk_print_context_create_pango_layout(context : GtkPrintContext*) : PangoLayout*
  fun gtk_print_context_set_cairo_context(context : GtkPrintContext*, cr : CairoT*, dpi_x : Float64, dpi_y : Float64) : Void
  fun gtk_print_settings_get_type : GType
  fun gtk_print_settings_new : GtkPrintSettings*
  fun gtk_print_settings_copy(other : GtkPrintSettings*) : GtkPrintSettings*
  fun gtk_print_settings_new_from_file(file_name : Gchar*, error : GError**) : GtkPrintSettings*
  fun gtk_print_settings_load_file(settings : GtkPrintSettings*, file_name : Gchar*, error : GError**) : Gboolean
  fun gtk_print_settings_to_file(settings : GtkPrintSettings*, file_name : Gchar*, error : GError**) : Gboolean
  fun gtk_print_settings_new_from_key_file(key_file : GKeyFile*, group_name : Gchar*, error : GError**) : GtkPrintSettings*
  fun gtk_print_settings_load_key_file(settings : GtkPrintSettings*, key_file : GKeyFile*, group_name : Gchar*, error : GError**) : Gboolean
  fun gtk_print_settings_to_key_file(settings : GtkPrintSettings*, key_file : GKeyFile*, group_name : Gchar*) : Void
  fun gtk_print_settings_has_key(settings : GtkPrintSettings*, key : Gchar*) : Gboolean
  fun gtk_print_settings_get(settings : GtkPrintSettings*, key : Gchar*) : Gchar*
  fun gtk_print_settings_set(settings : GtkPrintSettings*, key : Gchar*, value : Gchar*) : Void
  fun gtk_print_settings_unset(settings : GtkPrintSettings*, key : Gchar*) : Void
  fun gtk_print_settings_foreach(settings : GtkPrintSettings*, func : GtkPrintSettingsFunc, user_data : Gpointer) : Void
  fun gtk_print_settings_get_bool(settings : GtkPrintSettings*, key : Gchar*) : Gboolean
  fun gtk_print_settings_set_bool(settings : GtkPrintSettings*, key : Gchar*, value : Gboolean) : Void
  fun gtk_print_settings_get_double(settings : GtkPrintSettings*, key : Gchar*) : Gdouble
  fun gtk_print_settings_get_double_with_default(settings : GtkPrintSettings*, key : Gchar*, def : Gdouble) : Gdouble
  fun gtk_print_settings_set_double(settings : GtkPrintSettings*, key : Gchar*, value : Gdouble) : Void
  fun gtk_print_settings_get_length(settings : GtkPrintSettings*, key : Gchar*, unit : GtkUnit) : Gdouble
  fun gtk_print_settings_set_length(settings : GtkPrintSettings*, key : Gchar*, value : Gdouble, unit : GtkUnit) : Void
  fun gtk_print_settings_get_int(settings : GtkPrintSettings*, key : Gchar*) : Gint
  fun gtk_print_settings_get_int_with_default(settings : GtkPrintSettings*, key : Gchar*, def : Gint) : Gint
  fun gtk_print_settings_set_int(settings : GtkPrintSettings*, key : Gchar*, value : Gint) : Void
  fun gtk_print_settings_get_printer(settings : GtkPrintSettings*) : Gchar*
  fun gtk_print_settings_set_printer(settings : GtkPrintSettings*, printer : Gchar*) : Void
  fun gtk_print_settings_get_orientation(settings : GtkPrintSettings*) : GtkPageOrientation
  fun gtk_print_settings_set_orientation(settings : GtkPrintSettings*, orientation : GtkPageOrientation) : Void
  fun gtk_print_settings_get_paper_size(settings : GtkPrintSettings*) : GtkPaperSize*
  fun gtk_print_settings_set_paper_size(settings : GtkPrintSettings*, paper_size : GtkPaperSize*) : Void
  fun gtk_print_settings_get_paper_width(settings : GtkPrintSettings*, unit : GtkUnit) : Gdouble
  fun gtk_print_settings_set_paper_width(settings : GtkPrintSettings*, width : Gdouble, unit : GtkUnit) : Void
  fun gtk_print_settings_get_paper_height(settings : GtkPrintSettings*, unit : GtkUnit) : Gdouble
  fun gtk_print_settings_set_paper_height(settings : GtkPrintSettings*, height : Gdouble, unit : GtkUnit) : Void
  fun gtk_print_settings_get_use_color(settings : GtkPrintSettings*) : Gboolean
  fun gtk_print_settings_set_use_color(settings : GtkPrintSettings*, use_color : Gboolean) : Void
  fun gtk_print_settings_get_collate(settings : GtkPrintSettings*) : Gboolean
  fun gtk_print_settings_set_collate(settings : GtkPrintSettings*, collate : Gboolean) : Void
  fun gtk_print_settings_get_reverse(settings : GtkPrintSettings*) : Gboolean
  fun gtk_print_settings_set_reverse(settings : GtkPrintSettings*, reverse : Gboolean) : Void
  fun gtk_print_settings_get_duplex(settings : GtkPrintSettings*) : GtkPrintDuplex
  fun gtk_print_settings_set_duplex(settings : GtkPrintSettings*, duplex : GtkPrintDuplex) : Void
  fun gtk_print_settings_get_quality(settings : GtkPrintSettings*) : GtkPrintQuality
  fun gtk_print_settings_set_quality(settings : GtkPrintSettings*, quality : GtkPrintQuality) : Void
  fun gtk_print_settings_get_n_copies(settings : GtkPrintSettings*) : Gint
  fun gtk_print_settings_set_n_copies(settings : GtkPrintSettings*, num_copies : Gint) : Void
  fun gtk_print_settings_get_number_up(settings : GtkPrintSettings*) : Gint
  fun gtk_print_settings_set_number_up(settings : GtkPrintSettings*, number_up : Gint) : Void
  fun gtk_print_settings_get_number_up_layout(settings : GtkPrintSettings*) : GtkNumberUpLayout
  fun gtk_print_settings_set_number_up_layout(settings : GtkPrintSettings*, number_up_layout : GtkNumberUpLayout) : Void
  fun gtk_print_settings_get_resolution(settings : GtkPrintSettings*) : Gint
  fun gtk_print_settings_set_resolution(settings : GtkPrintSettings*, resolution : Gint) : Void
  fun gtk_print_settings_get_resolution_x(settings : GtkPrintSettings*) : Gint
  fun gtk_print_settings_get_resolution_y(settings : GtkPrintSettings*) : Gint
  fun gtk_print_settings_set_resolution_xy(settings : GtkPrintSettings*, resolution_x : Gint, resolution_y : Gint) : Void
  fun gtk_print_settings_get_printer_lpi(settings : GtkPrintSettings*) : Gdouble
  fun gtk_print_settings_set_printer_lpi(settings : GtkPrintSettings*, lpi : Gdouble) : Void
  fun gtk_print_settings_get_scale(settings : GtkPrintSettings*) : Gdouble
  fun gtk_print_settings_set_scale(settings : GtkPrintSettings*, scale : Gdouble) : Void
  fun gtk_print_settings_get_print_pages(settings : GtkPrintSettings*) : GtkPrintPages
  fun gtk_print_settings_set_print_pages(settings : GtkPrintSettings*, pages : GtkPrintPages) : Void
  fun gtk_print_settings_get_page_ranges(settings : GtkPrintSettings*, num_ranges : Gint*) : GtkPageRange*
  fun gtk_print_settings_set_page_ranges(settings : GtkPrintSettings*, page_ranges : GtkPageRange*, num_ranges : Gint) : Void
  fun gtk_print_settings_get_page_set(settings : GtkPrintSettings*) : GtkPageSet
  fun gtk_print_settings_set_page_set(settings : GtkPrintSettings*, page_set : GtkPageSet) : Void
  fun gtk_print_settings_get_default_source(settings : GtkPrintSettings*) : Gchar*
  fun gtk_print_settings_set_default_source(settings : GtkPrintSettings*, default_source : Gchar*) : Void
  fun gtk_print_settings_get_media_type(settings : GtkPrintSettings*) : Gchar*
  fun gtk_print_settings_set_media_type(settings : GtkPrintSettings*, media_type : Gchar*) : Void
  fun gtk_print_settings_get_dither(settings : GtkPrintSettings*) : Gchar*
  fun gtk_print_settings_set_dither(settings : GtkPrintSettings*, dither : Gchar*) : Void
  fun gtk_print_settings_get_finishings(settings : GtkPrintSettings*) : Gchar*
  fun gtk_print_settings_set_finishings(settings : GtkPrintSettings*, finishings : Gchar*) : Void
  fun gtk_print_settings_get_output_bin(settings : GtkPrintSettings*) : Gchar*
  fun gtk_print_settings_set_output_bin(settings : GtkPrintSettings*, output_bin : Gchar*) : Void
  fun gtk_print_operation_preview_get_type : GType
  fun gtk_print_operation_preview_render_page(preview : GtkPrintOperationPreview*, page_nr : Gint) : Void
  fun gtk_print_operation_preview_end_preview(preview : GtkPrintOperationPreview*) : Void
  fun gtk_print_operation_preview_is_selected(preview : GtkPrintOperationPreview*, page_nr : Gint) : Gboolean
  fun gtk_print_error_quark : GQuark
  fun gtk_print_operation_get_type : GType
  fun gtk_print_operation_new : GtkPrintOperation*
  fun gtk_print_operation_set_default_page_setup(op : GtkPrintOperation*, default_page_setup : GtkPageSetup*) : Void
  fun gtk_print_operation_get_default_page_setup(op : GtkPrintOperation*) : GtkPageSetup*
  fun gtk_print_operation_set_print_settings(op : GtkPrintOperation*, print_settings : GtkPrintSettings*) : Void
  fun gtk_print_operation_get_print_settings(op : GtkPrintOperation*) : GtkPrintSettings*
  fun gtk_print_operation_set_job_name(op : GtkPrintOperation*, job_name : Gchar*) : Void
  fun gtk_print_operation_set_n_pages(op : GtkPrintOperation*, n_pages : Gint) : Void
  fun gtk_print_operation_set_current_page(op : GtkPrintOperation*, current_page : Gint) : Void
  fun gtk_print_operation_set_use_full_page(op : GtkPrintOperation*, full_page : Gboolean) : Void
  fun gtk_print_operation_set_unit(op : GtkPrintOperation*, unit : GtkUnit) : Void
  fun gtk_print_operation_set_export_filename(op : GtkPrintOperation*, filename : Gchar*) : Void
  fun gtk_print_operation_set_track_print_status(op : GtkPrintOperation*, track_status : Gboolean) : Void
  fun gtk_print_operation_set_show_progress(op : GtkPrintOperation*, show_progress : Gboolean) : Void
  fun gtk_print_operation_set_allow_async(op : GtkPrintOperation*, allow_async : Gboolean) : Void
  fun gtk_print_operation_set_custom_tab_label(op : GtkPrintOperation*, label : Gchar*) : Void
  fun gtk_print_operation_run(op : GtkPrintOperation*, action : GtkPrintOperationAction, parent : GtkWindow*, error : GError**) : GtkPrintOperationResult
  fun gtk_print_operation_get_error(op : GtkPrintOperation*, error : GError**) : Void
  fun gtk_print_operation_get_status(op : GtkPrintOperation*) : GtkPrintStatus
  fun gtk_print_operation_get_status_string(op : GtkPrintOperation*) : Gchar*
  fun gtk_print_operation_is_finished(op : GtkPrintOperation*) : Gboolean
  fun gtk_print_operation_cancel(op : GtkPrintOperation*) : Void
  fun gtk_print_operation_draw_page_finish(op : GtkPrintOperation*) : Void
  fun gtk_print_operation_set_defer_drawing(op : GtkPrintOperation*) : Void
  fun gtk_print_operation_set_support_selection(op : GtkPrintOperation*, support_selection : Gboolean) : Void
  fun gtk_print_operation_get_support_selection(op : GtkPrintOperation*) : Gboolean
  fun gtk_print_operation_set_has_selection(op : GtkPrintOperation*, has_selection : Gboolean) : Void
  fun gtk_print_operation_get_has_selection(op : GtkPrintOperation*) : Gboolean
  fun gtk_print_operation_set_embed_page_setup(op : GtkPrintOperation*, embed : Gboolean) : Void
  fun gtk_print_operation_get_embed_page_setup(op : GtkPrintOperation*) : Gboolean
  fun gtk_print_operation_get_n_pages_to_print(op : GtkPrintOperation*) : Gint
  fun gtk_print_run_page_setup_dialog(parent : GtkWindow*, page_setup : GtkPageSetup*, settings : GtkPrintSettings*) : GtkPageSetup*
  fun gtk_print_run_page_setup_dialog_async(parent : GtkWindow*, page_setup : GtkPageSetup*, settings : GtkPrintSettings*, done_cb : GtkPageSetupDoneFunc, data : Gpointer) : Void
  fun gtk_progress_bar_get_type : GType
  fun gtk_progress_bar_new : GtkWidget*
  fun gtk_progress_bar_pulse(pbar : GtkProgressBar*) : Void
  fun gtk_progress_bar_set_text(pbar : GtkProgressBar*, text : Gchar*) : Void
  fun gtk_progress_bar_set_fraction(pbar : GtkProgressBar*, fraction : Gdouble) : Void
  fun gtk_progress_bar_set_pulse_step(pbar : GtkProgressBar*, fraction : Gdouble) : Void
  fun gtk_progress_bar_set_inverted(pbar : GtkProgressBar*, inverted : Gboolean) : Void
  fun gtk_progress_bar_get_text(pbar : GtkProgressBar*) : Gchar*
  fun gtk_progress_bar_get_fraction(pbar : GtkProgressBar*) : Gdouble
  fun gtk_progress_bar_get_pulse_step(pbar : GtkProgressBar*) : Gdouble
  fun gtk_progress_bar_get_inverted(pbar : GtkProgressBar*) : Gboolean
  fun gtk_progress_bar_set_ellipsize(pbar : GtkProgressBar*, mode : PangoEllipsizeMode) : Void
  fun gtk_progress_bar_get_ellipsize(pbar : GtkProgressBar*) : PangoEllipsizeMode
  fun gtk_progress_bar_set_show_text(pbar : GtkProgressBar*, show_text : Gboolean) : Void
  fun gtk_progress_bar_get_show_text(pbar : GtkProgressBar*) : Gboolean
  fun gtk_radio_button_get_type : GType
  fun gtk_radio_button_new(group : GSList*) : GtkWidget*
  fun gtk_radio_button_new_from_widget(radio_group_member : GtkRadioButton*) : GtkWidget*
  fun gtk_radio_button_new_with_label(group : GSList*, label : Gchar*) : GtkWidget*
  fun gtk_radio_button_new_with_label_from_widget(radio_group_member : GtkRadioButton*, label : Gchar*) : GtkWidget*
  fun gtk_radio_button_new_with_mnemonic(group : GSList*, label : Gchar*) : GtkWidget*
  fun gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member : GtkRadioButton*, label : Gchar*) : GtkWidget*
  fun gtk_radio_button_get_group(radio_button : GtkRadioButton*) : GSList*
  fun gtk_radio_button_set_group(radio_button : GtkRadioButton*, group : GSList*) : Void
  fun gtk_radio_button_join_group(radio_button : GtkRadioButton*, group_source : GtkRadioButton*) : Void
  fun gtk_radio_menu_item_get_type : GType
  fun gtk_radio_menu_item_new(group : GSList*) : GtkWidget*
  fun gtk_radio_menu_item_new_with_label(group : GSList*, label : Gchar*) : GtkWidget*
  fun gtk_radio_menu_item_new_with_mnemonic(group : GSList*, label : Gchar*) : GtkWidget*
  fun gtk_radio_menu_item_new_from_widget(group : GtkRadioMenuItem*) : GtkWidget*
  fun gtk_radio_menu_item_new_with_mnemonic_from_widget(group : GtkRadioMenuItem*, label : Gchar*) : GtkWidget*
  fun gtk_radio_menu_item_new_with_label_from_widget(group : GtkRadioMenuItem*, label : Gchar*) : GtkWidget*
  fun gtk_radio_menu_item_get_group(radio_menu_item : GtkRadioMenuItem*) : GSList*
  fun gtk_radio_menu_item_set_group(radio_menu_item : GtkRadioMenuItem*, group : GSList*) : Void
  fun gtk_radio_menu_item_join_group(radio_menu_item : GtkRadioMenuItem*, group_source : GtkRadioMenuItem*) : Void
  fun gtk_toggle_tool_button_get_type : GType
  fun gtk_toggle_tool_button_new : GtkToolItem*
  fun gtk_toggle_tool_button_new_from_stock(stock_id : Gchar*) : GtkToolItem*
  fun gtk_toggle_tool_button_set_active(button : GtkToggleToolButton*, is_active : Gboolean) : Void
  fun gtk_toggle_tool_button_get_active(button : GtkToggleToolButton*) : Gboolean
  fun gtk_radio_tool_button_get_type : GType
  fun gtk_radio_tool_button_new(group : GSList*) : GtkToolItem*
  fun gtk_radio_tool_button_new_from_stock(group : GSList*, stock_id : Gchar*) : GtkToolItem*
  fun gtk_radio_tool_button_new_from_widget(group : GtkRadioToolButton*) : GtkToolItem*
  fun gtk_radio_tool_button_new_with_stock_from_widget(group : GtkRadioToolButton*, stock_id : Gchar*) : GtkToolItem*
  fun gtk_radio_tool_button_get_group(button : GtkRadioToolButton*) : GSList*
  fun gtk_radio_tool_button_set_group(button : GtkRadioToolButton*, group : GSList*) : Void
  fun gtk_range_get_type : GType
  fun gtk_range_set_adjustment(range : GtkRange*, adjustment : GtkAdjustment*) : Void
  fun gtk_range_get_adjustment(range : GtkRange*) : GtkAdjustment*
  fun gtk_range_set_inverted(range : GtkRange*, setting : Gboolean) : Void
  fun gtk_range_get_inverted(range : GtkRange*) : Gboolean
  fun gtk_range_set_flippable(range : GtkRange*, flippable : Gboolean) : Void
  fun gtk_range_get_flippable(range : GtkRange*) : Gboolean
  fun gtk_range_set_slider_size_fixed(range : GtkRange*, size_fixed : Gboolean) : Void
  fun gtk_range_get_slider_size_fixed(range : GtkRange*) : Gboolean
  fun gtk_range_set_min_slider_size(range : GtkRange*, min_size : Gint) : Void
  fun gtk_range_get_min_slider_size(range : GtkRange*) : Gint
  fun gtk_range_get_range_rect(range : GtkRange*, range_rect : GdkRectangle*) : Void
  fun gtk_range_get_slider_range(range : GtkRange*, slider_start : Gint*, slider_end : Gint*) : Void
  fun gtk_range_set_lower_stepper_sensitivity(range : GtkRange*, sensitivity : GtkSensitivityType) : Void
  fun gtk_range_get_lower_stepper_sensitivity(range : GtkRange*) : GtkSensitivityType
  fun gtk_range_set_upper_stepper_sensitivity(range : GtkRange*, sensitivity : GtkSensitivityType) : Void
  fun gtk_range_get_upper_stepper_sensitivity(range : GtkRange*) : GtkSensitivityType
  fun gtk_range_set_increments(range : GtkRange*, step : Gdouble, page : Gdouble) : Void
  fun gtk_range_set_range(range : GtkRange*, min : Gdouble, max : Gdouble) : Void
  fun gtk_range_set_value(range : GtkRange*, value : Gdouble) : Void
  fun gtk_range_get_value(range : GtkRange*) : Gdouble
  fun gtk_range_set_show_fill_level(range : GtkRange*, show_fill_level : Gboolean) : Void
  fun gtk_range_get_show_fill_level(range : GtkRange*) : Gboolean
  fun gtk_range_set_restrict_to_fill_level(range : GtkRange*, restrict_to_fill_level : Gboolean) : Void
  fun gtk_range_get_restrict_to_fill_level(range : GtkRange*) : Gboolean
  fun gtk_range_set_fill_level(range : GtkRange*, fill_level : Gdouble) : Void
  fun gtk_range_get_fill_level(range : GtkRange*) : Gdouble
  fun gtk_range_set_round_digits(range : GtkRange*, round_digits : Gint) : Void
  fun gtk_range_get_round_digits(range : GtkRange*) : Gint
  fun gtk_recent_manager_error_quark : GQuark
  fun gtk_recent_manager_get_type : GType
  fun gtk_recent_manager_new : GtkRecentManager*
  fun gtk_recent_manager_get_default : GtkRecentManager*
  fun gtk_recent_manager_add_item(manager : GtkRecentManager*, uri : Gchar*) : Gboolean
  fun gtk_recent_manager_add_full(manager : GtkRecentManager*, uri : Gchar*, recent_data : GtkRecentData*) : Gboolean
  fun gtk_recent_manager_remove_item(manager : GtkRecentManager*, uri : Gchar*, error : GError**) : Gboolean
  fun gtk_recent_manager_lookup_item(manager : GtkRecentManager*, uri : Gchar*, error : GError**) : GtkRecentInfo*
  fun gtk_recent_manager_has_item(manager : GtkRecentManager*, uri : Gchar*) : Gboolean
  fun gtk_recent_manager_move_item(manager : GtkRecentManager*, uri : Gchar*, new_uri : Gchar*, error : GError**) : Gboolean
  fun gtk_recent_manager_get_items(manager : GtkRecentManager*) : GList*
  fun gtk_recent_manager_purge_items(manager : GtkRecentManager*, error : GError**) : Gint
  fun gtk_recent_info_get_type : GType
  fun gtk_recent_info_ref(info : GtkRecentInfo*) : GtkRecentInfo*
  fun gtk_recent_info_unref(info : GtkRecentInfo*) : Void
  fun gtk_recent_info_get_uri(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_get_display_name(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_get_description(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_get_mime_type(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_get_added(info : GtkRecentInfo*) : TimeT
  fun gtk_recent_info_get_modified(info : GtkRecentInfo*) : TimeT
  fun gtk_recent_info_get_visited(info : GtkRecentInfo*) : TimeT
  fun gtk_recent_info_get_private_hint(info : GtkRecentInfo*) : Gboolean
  fun gtk_recent_info_get_application_info(info : GtkRecentInfo*, app_name : Gchar*, app_exec : Gchar**, count : Guint*, time_ : TimeT*) : Gboolean
  fun gtk_recent_info_create_app_info(info : GtkRecentInfo*, app_name : Gchar*, error : GError**) : GAppInfo*
  fun gtk_recent_info_get_applications(info : GtkRecentInfo*, length : Gsize*) : Gchar**
  fun gtk_recent_info_last_application(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_has_application(info : GtkRecentInfo*, app_name : Gchar*) : Gboolean
  fun gtk_recent_info_get_groups(info : GtkRecentInfo*, length : Gsize*) : Gchar**
  fun gtk_recent_info_has_group(info : GtkRecentInfo*, group_name : Gchar*) : Gboolean
  fun gtk_recent_info_get_icon(info : GtkRecentInfo*, size : Gint) : GdkPixbuf*
  fun gtk_recent_info_get_gicon(info : GtkRecentInfo*) : GIcon*
  fun gtk_recent_info_get_short_name(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_get_uri_display(info : GtkRecentInfo*) : Gchar*
  fun gtk_recent_info_get_age(info : GtkRecentInfo*) : Gint
  fun gtk_recent_info_is_local(info : GtkRecentInfo*) : Gboolean
  fun gtk_recent_info_exists(info : GtkRecentInfo*) : Gboolean
  fun gtk_recent_info_match(info_a : GtkRecentInfo*, info_b : GtkRecentInfo*) : Gboolean
  fun _gtk_recent_manager_sync : Void
  fun gtk_recent_filter_get_type : GType
  fun gtk_recent_filter_new : GtkRecentFilter*
  fun gtk_recent_filter_set_name(filter : GtkRecentFilter*, name : Gchar*) : Void
  fun gtk_recent_filter_get_name(filter : GtkRecentFilter*) : Gchar*
  fun gtk_recent_filter_add_mime_type(filter : GtkRecentFilter*, mime_type : Gchar*) : Void
  fun gtk_recent_filter_add_pattern(filter : GtkRecentFilter*, pattern : Gchar*) : Void
  fun gtk_recent_filter_add_pixbuf_formats(filter : GtkRecentFilter*) : Void
  fun gtk_recent_filter_add_application(filter : GtkRecentFilter*, application : Gchar*) : Void
  fun gtk_recent_filter_add_group(filter : GtkRecentFilter*, group : Gchar*) : Void
  fun gtk_recent_filter_add_age(filter : GtkRecentFilter*, days : Gint) : Void
  fun gtk_recent_filter_add_custom(filter : GtkRecentFilter*, needed : GtkRecentFilterFlags, func : GtkRecentFilterFunc, data : Gpointer, data_destroy : GDestroyNotify) : Void
  fun gtk_recent_filter_get_needed(filter : GtkRecentFilter*) : GtkRecentFilterFlags
  fun gtk_recent_filter_filter(filter : GtkRecentFilter*, filter_info : GtkRecentFilterInfo*) : Gboolean
  fun gtk_recent_chooser_error_quark : GQuark
  fun gtk_recent_chooser_get_type : GType
  fun gtk_recent_chooser_set_show_private(chooser : GtkRecentChooser*, show_private : Gboolean) : Void
  fun gtk_recent_chooser_get_show_private(chooser : GtkRecentChooser*) : Gboolean
  fun gtk_recent_chooser_set_show_not_found(chooser : GtkRecentChooser*, show_not_found : Gboolean) : Void
  fun gtk_recent_chooser_get_show_not_found(chooser : GtkRecentChooser*) : Gboolean
  fun gtk_recent_chooser_set_select_multiple(chooser : GtkRecentChooser*, select_multiple : Gboolean) : Void
  fun gtk_recent_chooser_get_select_multiple(chooser : GtkRecentChooser*) : Gboolean
  fun gtk_recent_chooser_set_limit(chooser : GtkRecentChooser*, limit : Gint) : Void
  fun gtk_recent_chooser_get_limit(chooser : GtkRecentChooser*) : Gint
  fun gtk_recent_chooser_set_local_only(chooser : GtkRecentChooser*, local_only : Gboolean) : Void
  fun gtk_recent_chooser_get_local_only(chooser : GtkRecentChooser*) : Gboolean
  fun gtk_recent_chooser_set_show_tips(chooser : GtkRecentChooser*, show_tips : Gboolean) : Void
  fun gtk_recent_chooser_get_show_tips(chooser : GtkRecentChooser*) : Gboolean
  fun gtk_recent_chooser_set_show_icons(chooser : GtkRecentChooser*, show_icons : Gboolean) : Void
  fun gtk_recent_chooser_get_show_icons(chooser : GtkRecentChooser*) : Gboolean
  fun gtk_recent_chooser_set_sort_type(chooser : GtkRecentChooser*, sort_type : GtkRecentSortType) : Void
  fun gtk_recent_chooser_get_sort_type(chooser : GtkRecentChooser*) : GtkRecentSortType
  fun gtk_recent_chooser_set_sort_func(chooser : GtkRecentChooser*, sort_func : GtkRecentSortFunc, sort_data : Gpointer, data_destroy : GDestroyNotify) : Void
  fun gtk_recent_chooser_set_current_uri(chooser : GtkRecentChooser*, uri : Gchar*, error : GError**) : Gboolean
  fun gtk_recent_chooser_get_current_uri(chooser : GtkRecentChooser*) : Gchar*
  fun gtk_recent_chooser_get_current_item(chooser : GtkRecentChooser*) : GtkRecentInfo*
  fun gtk_recent_chooser_select_uri(chooser : GtkRecentChooser*, uri : Gchar*, error : GError**) : Gboolean
  fun gtk_recent_chooser_unselect_uri(chooser : GtkRecentChooser*, uri : Gchar*) : Void
  fun gtk_recent_chooser_select_all(chooser : GtkRecentChooser*) : Void
  fun gtk_recent_chooser_unselect_all(chooser : GtkRecentChooser*) : Void
  fun gtk_recent_chooser_get_items(chooser : GtkRecentChooser*) : GList*
  fun gtk_recent_chooser_get_uris(chooser : GtkRecentChooser*, length : Gsize*) : Gchar**
  fun gtk_recent_chooser_add_filter(chooser : GtkRecentChooser*, filter : GtkRecentFilter*) : Void
  fun gtk_recent_chooser_remove_filter(chooser : GtkRecentChooser*, filter : GtkRecentFilter*) : Void
  fun gtk_recent_chooser_list_filters(chooser : GtkRecentChooser*) : GSList*
  fun gtk_recent_chooser_set_filter(chooser : GtkRecentChooser*, filter : GtkRecentFilter*) : Void
  fun gtk_recent_chooser_get_filter(chooser : GtkRecentChooser*) : GtkRecentFilter*
  fun gtk_recent_chooser_dialog_get_type : GType
  fun gtk_recent_chooser_dialog_new(title : Gchar*, parent : GtkWindow*, first_button_text : Gchar*) : GtkWidget*
  fun gtk_recent_chooser_dialog_new_for_manager(title : Gchar*, parent : GtkWindow*, manager : GtkRecentManager*, first_button_text : Gchar*) : GtkWidget*
  fun gtk_recent_chooser_menu_get_type : GType
  fun gtk_recent_chooser_menu_new : GtkWidget*
  fun gtk_recent_chooser_menu_new_for_manager(manager : GtkRecentManager*) : GtkWidget*
  fun gtk_recent_chooser_menu_get_show_numbers(menu : GtkRecentChooserMenu*) : Gboolean
  fun gtk_recent_chooser_menu_set_show_numbers(menu : GtkRecentChooserMenu*, show_numbers : Gboolean) : Void
  fun gtk_recent_chooser_widget_get_type : GType
  fun gtk_recent_chooser_widget_new : GtkWidget*
  fun gtk_recent_chooser_widget_new_for_manager(manager : GtkRecentManager*) : GtkWidget*
  fun gtk_render_check(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_option(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_arrow(context : GtkStyleContext*, cr : CairoT*, angle : Gdouble, x : Gdouble, y : Gdouble, size : Gdouble) : Void
  fun gtk_render_background(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_background_get_clip(context : GtkStyleContext*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble, out_clip : GdkRectangle*) : Void
  fun gtk_render_frame(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_expander(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_focus(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_layout(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, layout : PangoLayout*) : Void
  fun gtk_render_line(context : GtkStyleContext*, cr : CairoT*, x0 : Gdouble, y0 : Gdouble, x1 : Gdouble, y1 : Gdouble) : Void
  fun gtk_render_slider(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble, orientation : GtkOrientation) : Void
  fun gtk_render_frame_gap(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble, gap_side : GtkPositionType, xy0_gap : Gdouble, xy1_gap : Gdouble) : Void
  fun gtk_render_extension(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble, gap_side : GtkPositionType) : Void
  fun gtk_render_handle(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_activity(context : GtkStyleContext*, cr : CairoT*, x : Gdouble, y : Gdouble, width : Gdouble, height : Gdouble) : Void
  fun gtk_render_icon_pixbuf(context : GtkStyleContext*, source : GtkIconSource*, size : GtkIconSize) : GdkPixbuf*
  fun gtk_render_icon(context : GtkStyleContext*, cr : CairoT*, pixbuf : GdkPixbuf*, x : Gdouble, y : Gdouble) : Void
  fun gtk_render_icon_surface(context : GtkStyleContext*, cr : CairoT*, surface : CairoSurfaceT*, x : Gdouble, y : Gdouble) : Void
  fun gtk_revealer_get_type : GType
  fun gtk_revealer_new : GtkWidget*
  fun gtk_revealer_get_reveal_child(revealer : GtkRevealer*) : Gboolean
  fun gtk_revealer_set_reveal_child(revealer : GtkRevealer*, reveal_child : Gboolean) : Void
  fun gtk_revealer_get_child_revealed(revealer : GtkRevealer*) : Gboolean
  fun gtk_revealer_get_transition_duration(revealer : GtkRevealer*) : Guint
  fun gtk_revealer_set_transition_duration(revealer : GtkRevealer*, duration : Guint) : Void
  fun gtk_revealer_set_transition_type(revealer : GtkRevealer*, transition : GtkRevealerTransitionType) : Void
  fun gtk_revealer_get_transition_type(revealer : GtkRevealer*) : GtkRevealerTransitionType
  fun gtk_scale_get_type : GType
  fun gtk_scale_new(orientation : GtkOrientation, adjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_scale_new_with_range(orientation : GtkOrientation, min : Gdouble, max : Gdouble, step : Gdouble) : GtkWidget*
  fun gtk_scale_set_digits(scale : GtkScale*, digits : Gint) : Void
  fun gtk_scale_get_digits(scale : GtkScale*) : Gint
  fun gtk_scale_set_draw_value(scale : GtkScale*, draw_value : Gboolean) : Void
  fun gtk_scale_get_draw_value(scale : GtkScale*) : Gboolean
  fun gtk_scale_set_has_origin(scale : GtkScale*, has_origin : Gboolean) : Void
  fun gtk_scale_get_has_origin(scale : GtkScale*) : Gboolean
  fun gtk_scale_set_value_pos(scale : GtkScale*, pos : GtkPositionType) : Void
  fun gtk_scale_get_value_pos(scale : GtkScale*) : GtkPositionType
  fun gtk_scale_get_layout(scale : GtkScale*) : PangoLayout*
  fun gtk_scale_get_layout_offsets(scale : GtkScale*, x : Gint*, y : Gint*) : Void
  fun gtk_scale_add_mark(scale : GtkScale*, value : Gdouble, position : GtkPositionType, markup : Gchar*) : Void
  fun gtk_scale_clear_marks(scale : GtkScale*) : Void
  fun gtk_scale_button_get_type : GType
  fun gtk_scale_button_new(size : GtkIconSize, min : Gdouble, max : Gdouble, step : Gdouble, icons : Gchar**) : GtkWidget*
  fun gtk_scale_button_set_icons(button : GtkScaleButton*, icons : Gchar**) : Void
  fun gtk_scale_button_get_value(button : GtkScaleButton*) : Gdouble
  fun gtk_scale_button_set_value(button : GtkScaleButton*, value : Gdouble) : Void
  fun gtk_scale_button_get_adjustment(button : GtkScaleButton*) : GtkAdjustment*
  fun gtk_scale_button_set_adjustment(button : GtkScaleButton*, adjustment : GtkAdjustment*) : Void
  fun gtk_scale_button_get_plus_button(button : GtkScaleButton*) : GtkWidget*
  fun gtk_scale_button_get_minus_button(button : GtkScaleButton*) : GtkWidget*
  fun gtk_scale_button_get_popup(button : GtkScaleButton*) : GtkWidget*
  fun gtk_scrollable_get_type : GType
  fun gtk_scrollable_get_hadjustment(scrollable : GtkScrollable*) : GtkAdjustment*
  fun gtk_scrollable_set_hadjustment(scrollable : GtkScrollable*, hadjustment : GtkAdjustment*) : Void
  fun gtk_scrollable_get_vadjustment(scrollable : GtkScrollable*) : GtkAdjustment*
  fun gtk_scrollable_set_vadjustment(scrollable : GtkScrollable*, vadjustment : GtkAdjustment*) : Void
  fun gtk_scrollable_get_hscroll_policy(scrollable : GtkScrollable*) : GtkScrollablePolicy
  fun gtk_scrollable_set_hscroll_policy(scrollable : GtkScrollable*, policy : GtkScrollablePolicy) : Void
  fun gtk_scrollable_get_vscroll_policy(scrollable : GtkScrollable*) : GtkScrollablePolicy
  fun gtk_scrollable_set_vscroll_policy(scrollable : GtkScrollable*, policy : GtkScrollablePolicy) : Void
  fun gtk_scrollable_get_border(scrollable : GtkScrollable*, border : GtkBorder*) : Gboolean
  fun gtk_scrollbar_get_type : GType
  fun gtk_scrollbar_new(orientation : GtkOrientation, adjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_scrolled_window_get_type : GType
  fun gtk_scrolled_window_new(hadjustment : GtkAdjustment*, vadjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_scrolled_window_set_hadjustment(scrolled_window : GtkScrolledWindow*, hadjustment : GtkAdjustment*) : Void
  fun gtk_scrolled_window_set_vadjustment(scrolled_window : GtkScrolledWindow*, vadjustment : GtkAdjustment*) : Void
  fun gtk_scrolled_window_get_hadjustment(scrolled_window : GtkScrolledWindow*) : GtkAdjustment*
  fun gtk_scrolled_window_get_vadjustment(scrolled_window : GtkScrolledWindow*) : GtkAdjustment*
  fun gtk_scrolled_window_get_hscrollbar(scrolled_window : GtkScrolledWindow*) : GtkWidget*
  fun gtk_scrolled_window_get_vscrollbar(scrolled_window : GtkScrolledWindow*) : GtkWidget*
  fun gtk_scrolled_window_set_policy(scrolled_window : GtkScrolledWindow*, hscrollbar_policy : GtkPolicyType, vscrollbar_policy : GtkPolicyType) : Void
  fun gtk_scrolled_window_get_policy(scrolled_window : GtkScrolledWindow*, hscrollbar_policy : GtkPolicyType*, vscrollbar_policy : GtkPolicyType*) : Void
  fun gtk_scrolled_window_set_placement(scrolled_window : GtkScrolledWindow*, window_placement : GtkCornerType) : Void
  fun gtk_scrolled_window_unset_placement(scrolled_window : GtkScrolledWindow*) : Void
  fun gtk_scrolled_window_get_placement(scrolled_window : GtkScrolledWindow*) : GtkCornerType
  fun gtk_scrolled_window_set_shadow_type(scrolled_window : GtkScrolledWindow*, type : GtkShadowType) : Void
  fun gtk_scrolled_window_get_shadow_type(scrolled_window : GtkScrolledWindow*) : GtkShadowType
  fun gtk_scrolled_window_add_with_viewport(scrolled_window : GtkScrolledWindow*, child : GtkWidget*) : Void
  fun gtk_scrolled_window_get_min_content_width(scrolled_window : GtkScrolledWindow*) : Gint
  fun gtk_scrolled_window_set_min_content_width(scrolled_window : GtkScrolledWindow*, width : Gint) : Void
  fun gtk_scrolled_window_get_min_content_height(scrolled_window : GtkScrolledWindow*) : Gint
  fun gtk_scrolled_window_set_min_content_height(scrolled_window : GtkScrolledWindow*, height : Gint) : Void
  fun gtk_scrolled_window_set_kinetic_scrolling(scrolled_window : GtkScrolledWindow*, kinetic_scrolling : Gboolean) : Void
  fun gtk_scrolled_window_get_kinetic_scrolling(scrolled_window : GtkScrolledWindow*) : Gboolean
  fun gtk_scrolled_window_set_capture_button_press(scrolled_window : GtkScrolledWindow*, capture_button_press : Gboolean) : Void
  fun gtk_scrolled_window_get_capture_button_press(scrolled_window : GtkScrolledWindow*) : Gboolean
  fun gtk_scrolled_window_set_overlay_scrolling(scrolled_window : GtkScrolledWindow*, overlay_scrolling : Gboolean) : Void
  fun gtk_scrolled_window_get_overlay_scrolling(scrolled_window : GtkScrolledWindow*) : Gboolean
  fun gtk_search_bar_get_type : GType
  fun gtk_search_bar_new : GtkWidget*
  fun gtk_search_bar_connect_entry(bar : GtkSearchBar*, entry : GtkEntry*) : Void
  fun gtk_search_bar_get_search_mode(bar : GtkSearchBar*) : Gboolean
  fun gtk_search_bar_set_search_mode(bar : GtkSearchBar*, search_mode : Gboolean) : Void
  fun gtk_search_bar_get_show_close_button(bar : GtkSearchBar*) : Gboolean
  fun gtk_search_bar_set_show_close_button(bar : GtkSearchBar*, visible : Gboolean) : Void
  fun gtk_search_bar_handle_event(bar : GtkSearchBar*, event : GdkEvent*) : Gboolean
  fun gtk_search_entry_get_type : GType
  fun gtk_search_entry_new : GtkWidget*
  fun gtk_search_entry_handle_event(entry : GtkSearchEntry*, event : GdkEvent*) : Gboolean
  fun gtk_separator_get_type : GType
  fun gtk_separator_new(orientation : GtkOrientation) : GtkWidget*
  fun gtk_separator_menu_item_get_type : GType
  fun gtk_separator_menu_item_new : GtkWidget*
  fun gtk_separator_tool_item_get_type : GType
  fun gtk_separator_tool_item_new : GtkToolItem*
  fun gtk_separator_tool_item_get_draw(item : GtkSeparatorToolItem*) : Gboolean
  fun gtk_separator_tool_item_set_draw(item : GtkSeparatorToolItem*, draw : Gboolean) : Void
  fun gtk_settings_get_type : GType
  fun gtk_settings_get_default : GtkSettings*
  fun gtk_settings_get_for_screen(screen : GdkScreen*) : GtkSettings*
  fun gtk_settings_install_property(pspec : GParamSpec*) : Void
  fun gtk_settings_install_property_parser(pspec : GParamSpec*, parser : GtkRcPropertyParser) : Void
  fun gtk_rc_property_parse_color(pspec : GParamSpec*, gstring : GString*, property_value : GValue*) : Gboolean
  fun gtk_rc_property_parse_enum(pspec : GParamSpec*, gstring : GString*, property_value : GValue*) : Gboolean
  fun gtk_rc_property_parse_flags(pspec : GParamSpec*, gstring : GString*, property_value : GValue*) : Gboolean
  fun gtk_rc_property_parse_requisition(pspec : GParamSpec*, gstring : GString*, property_value : GValue*) : Gboolean
  fun gtk_rc_property_parse_border(pspec : GParamSpec*, gstring : GString*, property_value : GValue*) : Gboolean
  fun gtk_settings_set_property_value(settings : GtkSettings*, name : Gchar*, svalue : GtkSettingsValue*) : Void
  fun gtk_settings_set_string_property(settings : GtkSettings*, name : Gchar*, v_string : Gchar*, origin : Gchar*) : Void
  fun gtk_settings_set_long_property(settings : GtkSettings*, name : Gchar*, v_long : Glong, origin : Gchar*) : Void
  fun gtk_settings_set_double_property(settings : GtkSettings*, name : Gchar*, v_double : Gdouble, origin : Gchar*) : Void
  fun gtk_settings_reset_property(settings : GtkSettings*, name : Gchar*) : Void
  fun gtk_shortcuts_group_get_type : GType
  fun gtk_shortcuts_section_get_type : GType
  fun gtk_shortcuts_shortcut_get_type : GType
  fun gtk_show_uri(screen : GdkScreen*, uri : Gchar*, timestamp : Guint32, error : GError**) : Gboolean
  fun gtk_stack_get_type : GType
  fun gtk_stack_new : GtkWidget*
  fun gtk_stack_add_named(stack : GtkStack*, child : GtkWidget*, name : Gchar*) : Void
  fun gtk_stack_add_titled(stack : GtkStack*, child : GtkWidget*, name : Gchar*, title : Gchar*) : Void
  fun gtk_stack_get_child_by_name(stack : GtkStack*, name : Gchar*) : GtkWidget*
  fun gtk_stack_set_visible_child(stack : GtkStack*, child : GtkWidget*) : Void
  fun gtk_stack_get_visible_child(stack : GtkStack*) : GtkWidget*
  fun gtk_stack_set_visible_child_name(stack : GtkStack*, name : Gchar*) : Void
  fun gtk_stack_get_visible_child_name(stack : GtkStack*) : Gchar*
  fun gtk_stack_set_visible_child_full(stack : GtkStack*, name : Gchar*, transition : GtkStackTransitionType) : Void
  fun gtk_stack_set_homogeneous(stack : GtkStack*, homogeneous : Gboolean) : Void
  fun gtk_stack_get_homogeneous(stack : GtkStack*) : Gboolean
  fun gtk_stack_set_hhomogeneous(stack : GtkStack*, hhomogeneous : Gboolean) : Void
  fun gtk_stack_get_hhomogeneous(stack : GtkStack*) : Gboolean
  fun gtk_stack_set_vhomogeneous(stack : GtkStack*, vhomogeneous : Gboolean) : Void
  fun gtk_stack_get_vhomogeneous(stack : GtkStack*) : Gboolean
  fun gtk_stack_set_transition_duration(stack : GtkStack*, duration : Guint) : Void
  fun gtk_stack_get_transition_duration(stack : GtkStack*) : Guint
  fun gtk_stack_set_transition_type(stack : GtkStack*, transition : GtkStackTransitionType) : Void
  fun gtk_stack_get_transition_type(stack : GtkStack*) : GtkStackTransitionType
  fun gtk_stack_get_transition_running(stack : GtkStack*) : Gboolean
  fun gtk_stack_set_interpolate_size(stack : GtkStack*, interpolate_size : Gboolean) : Void
  fun gtk_stack_get_interpolate_size(stack : GtkStack*) : Gboolean
  fun gtk_stack_sidebar_get_type : GType
  fun gtk_stack_sidebar_new : GtkWidget*
  fun gtk_stack_sidebar_set_stack(sidebar : GtkStackSidebar*, stack : GtkStack*) : Void
  fun gtk_stack_sidebar_get_stack(sidebar : GtkStackSidebar*) : GtkStack*
  fun gtk_distribute_natural_allocation(extra_space : Gint, n_requested_sizes : Guint, sizes : GtkRequestedSize*) : Gint
  fun gtk_spin_button_get_type : GType
  fun gtk_spin_button_configure(spin_button : GtkSpinButton*, adjustment : GtkAdjustment*, climb_rate : Gdouble, digits : Guint) : Void
  fun gtk_spin_button_new(adjustment : GtkAdjustment*, climb_rate : Gdouble, digits : Guint) : GtkWidget*
  fun gtk_spin_button_new_with_range(min : Gdouble, max : Gdouble, step : Gdouble) : GtkWidget*
  fun gtk_spin_button_set_adjustment(spin_button : GtkSpinButton*, adjustment : GtkAdjustment*) : Void
  fun gtk_spin_button_get_adjustment(spin_button : GtkSpinButton*) : GtkAdjustment*
  fun gtk_spin_button_set_digits(spin_button : GtkSpinButton*, digits : Guint) : Void
  fun gtk_spin_button_get_digits(spin_button : GtkSpinButton*) : Guint
  fun gtk_spin_button_set_increments(spin_button : GtkSpinButton*, step : Gdouble, page : Gdouble) : Void
  fun gtk_spin_button_get_increments(spin_button : GtkSpinButton*, step : Gdouble*, page : Gdouble*) : Void
  fun gtk_spin_button_set_range(spin_button : GtkSpinButton*, min : Gdouble, max : Gdouble) : Void
  fun gtk_spin_button_get_range(spin_button : GtkSpinButton*, min : Gdouble*, max : Gdouble*) : Void
  fun gtk_spin_button_get_value(spin_button : GtkSpinButton*) : Gdouble
  fun gtk_spin_button_get_value_as_int(spin_button : GtkSpinButton*) : Gint
  fun gtk_spin_button_set_value(spin_button : GtkSpinButton*, value : Gdouble) : Void
  fun gtk_spin_button_set_update_policy(spin_button : GtkSpinButton*, policy : GtkSpinButtonUpdatePolicy) : Void
  fun gtk_spin_button_get_update_policy(spin_button : GtkSpinButton*) : GtkSpinButtonUpdatePolicy
  fun gtk_spin_button_set_numeric(spin_button : GtkSpinButton*, numeric : Gboolean) : Void
  fun gtk_spin_button_get_numeric(spin_button : GtkSpinButton*) : Gboolean
  fun gtk_spin_button_spin(spin_button : GtkSpinButton*, direction : GtkSpinType, increment : Gdouble) : Void
  fun gtk_spin_button_set_wrap(spin_button : GtkSpinButton*, wrap : Gboolean) : Void
  fun gtk_spin_button_get_wrap(spin_button : GtkSpinButton*) : Gboolean
  fun gtk_spin_button_set_snap_to_ticks(spin_button : GtkSpinButton*, snap_to_ticks : Gboolean) : Void
  fun gtk_spin_button_get_snap_to_ticks(spin_button : GtkSpinButton*) : Gboolean
  fun gtk_spin_button_update(spin_button : GtkSpinButton*) : Void
  fun _gtk_spin_button_get_panels(spin_button : GtkSpinButton*, down_panel : GdkWindow**, up_panel : GdkWindow**) : Void
  fun gtk_spinner_get_type : GType
  fun gtk_spinner_new : GtkWidget*
  fun gtk_spinner_start(spinner : GtkSpinner*) : Void
  fun gtk_spinner_stop(spinner : GtkSpinner*) : Void
  fun gtk_stack_switcher_get_type : GType
  fun gtk_stack_switcher_new : GtkWidget*
  fun gtk_stack_switcher_set_stack(switcher : GtkStackSwitcher*, stack : GtkStack*) : Void
  fun gtk_stack_switcher_get_stack(switcher : GtkStackSwitcher*) : GtkStack*
  fun gtk_statusbar_get_type : GType
  fun gtk_statusbar_new : GtkWidget*
  fun gtk_statusbar_get_context_id(statusbar : GtkStatusbar*, context_description : Gchar*) : Guint
  fun gtk_statusbar_push(statusbar : GtkStatusbar*, context_id : Guint, text : Gchar*) : Guint
  fun gtk_statusbar_pop(statusbar : GtkStatusbar*, context_id : Guint) : Void
  fun gtk_statusbar_remove(statusbar : GtkStatusbar*, context_id : Guint, message_id : Guint) : Void
  fun gtk_statusbar_remove_all(statusbar : GtkStatusbar*, context_id : Guint) : Void
  fun gtk_statusbar_get_message_area(statusbar : GtkStatusbar*) : GtkWidget*
  fun gtk_switch_get_type : GType
  fun gtk_switch_new : GtkWidget*
  fun gtk_switch_set_active(sw : GtkSwitch*, is_active : Gboolean) : Void
  fun gtk_switch_get_active(sw : GtkSwitch*) : Gboolean
  fun gtk_switch_set_state(sw : GtkSwitch*, state : Gboolean) : Void
  fun gtk_switch_get_state(sw : GtkSwitch*) : Gboolean
  fun gtk_text_tag_table_get_type : GType
  fun gtk_text_tag_table_new : GtkTextTagTable*
  fun gtk_text_tag_table_add(table : GtkTextTagTable*, tag : GtkTextTag*) : Gboolean
  fun gtk_text_tag_table_remove(table : GtkTextTagTable*, tag : GtkTextTag*) : Void
  fun gtk_text_tag_table_lookup(table : GtkTextTagTable*, name : Gchar*) : GtkTextTag*
  fun gtk_text_tag_table_foreach(table : GtkTextTagTable*, func : GtkTextTagTableForeach, data : Gpointer) : Void
  fun gtk_text_tag_table_get_size(table : GtkTextTagTable*) : Gint
  fun _gtk_text_tag_table_add_buffer(table : GtkTextTagTable*, buffer : Gpointer) : Void
  fun _gtk_text_tag_table_remove_buffer(table : GtkTextTagTable*, buffer : Gpointer) : Void
  fun gtk_text_mark_get_type : GType
  fun gtk_text_mark_new(name : Gchar*, left_gravity : Gboolean) : GtkTextMark*
  fun gtk_text_mark_set_visible(mark : GtkTextMark*, setting : Gboolean) : Void
  fun gtk_text_mark_get_visible(mark : GtkTextMark*) : Gboolean
  fun gtk_text_mark_get_name(mark : GtkTextMark*) : Gchar*
  fun gtk_text_mark_get_deleted(mark : GtkTextMark*) : Gboolean
  fun gtk_text_mark_get_buffer(mark : GtkTextMark*) : GtkTextBuffer*
  fun gtk_text_mark_get_left_gravity(mark : GtkTextMark*) : Gboolean
  fun gtk_text_buffer_get_type : GType
  fun gtk_text_buffer_new(table : GtkTextTagTable*) : GtkTextBuffer*
  fun gtk_text_buffer_get_line_count(buffer : GtkTextBuffer*) : Gint
  fun gtk_text_buffer_get_char_count(buffer : GtkTextBuffer*) : Gint
  fun gtk_text_buffer_get_tag_table(buffer : GtkTextBuffer*) : GtkTextTagTable*
  fun gtk_text_buffer_set_text(buffer : GtkTextBuffer*, text : Gchar*, len : Gint) : Void
  fun gtk_text_buffer_insert(buffer : GtkTextBuffer*, iter : GtkTextIter*, text : Gchar*, len : Gint) : Void
  fun gtk_text_buffer_insert_at_cursor(buffer : GtkTextBuffer*, text : Gchar*, len : Gint) : Void
  fun gtk_text_buffer_insert_interactive(buffer : GtkTextBuffer*, iter : GtkTextIter*, text : Gchar*, len : Gint, default_editable : Gboolean) : Gboolean
  fun gtk_text_buffer_insert_interactive_at_cursor(buffer : GtkTextBuffer*, text : Gchar*, len : Gint, default_editable : Gboolean) : Gboolean
  fun gtk_text_buffer_insert_range(buffer : GtkTextBuffer*, iter : GtkTextIter*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_insert_range_interactive(buffer : GtkTextBuffer*, iter : GtkTextIter*, start : GtkTextIter*, end : GtkTextIter*, default_editable : Gboolean) : Gboolean
  fun gtk_text_buffer_insert_with_tags(buffer : GtkTextBuffer*, iter : GtkTextIter*, text : Gchar*, len : Gint, first_tag : GtkTextTag*) : Void
  fun gtk_text_buffer_insert_with_tags_by_name(buffer : GtkTextBuffer*, iter : GtkTextIter*, text : Gchar*, len : Gint, first_tag_name : Gchar*) : Void
  fun gtk_text_buffer_insert_markup(buffer : GtkTextBuffer*, iter : GtkTextIter*, markup : Gchar*, len : Gint) : Void
  fun gtk_text_buffer_delete(buffer : GtkTextBuffer*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_delete_interactive(buffer : GtkTextBuffer*, start_iter : GtkTextIter*, end_iter : GtkTextIter*, default_editable : Gboolean) : Gboolean
  fun gtk_text_buffer_backspace(buffer : GtkTextBuffer*, iter : GtkTextIter*, interactive : Gboolean, default_editable : Gboolean) : Gboolean
  fun gtk_text_buffer_get_text(buffer : GtkTextBuffer*, start : GtkTextIter*, end : GtkTextIter*, include_hidden_chars : Gboolean) : Gchar*
  fun gtk_text_buffer_get_slice(buffer : GtkTextBuffer*, start : GtkTextIter*, end : GtkTextIter*, include_hidden_chars : Gboolean) : Gchar*
  fun gtk_text_buffer_insert_pixbuf(buffer : GtkTextBuffer*, iter : GtkTextIter*, pixbuf : GdkPixbuf*) : Void
  fun gtk_text_buffer_insert_child_anchor(buffer : GtkTextBuffer*, iter : GtkTextIter*, anchor : GtkTextChildAnchor*) : Void
  fun gtk_text_buffer_create_child_anchor(buffer : GtkTextBuffer*, iter : GtkTextIter*) : GtkTextChildAnchor*
  fun gtk_text_buffer_add_mark(buffer : GtkTextBuffer*, mark : GtkTextMark*, where : GtkTextIter*) : Void
  fun gtk_text_buffer_create_mark(buffer : GtkTextBuffer*, mark_name : Gchar*, where : GtkTextIter*, left_gravity : Gboolean) : GtkTextMark*
  fun gtk_text_buffer_move_mark(buffer : GtkTextBuffer*, mark : GtkTextMark*, where : GtkTextIter*) : Void
  fun gtk_text_buffer_delete_mark(buffer : GtkTextBuffer*, mark : GtkTextMark*) : Void
  fun gtk_text_buffer_get_mark(buffer : GtkTextBuffer*, name : Gchar*) : GtkTextMark*
  fun gtk_text_buffer_move_mark_by_name(buffer : GtkTextBuffer*, name : Gchar*, where : GtkTextIter*) : Void
  fun gtk_text_buffer_delete_mark_by_name(buffer : GtkTextBuffer*, name : Gchar*) : Void
  fun gtk_text_buffer_get_insert(buffer : GtkTextBuffer*) : GtkTextMark*
  fun gtk_text_buffer_get_selection_bound(buffer : GtkTextBuffer*) : GtkTextMark*
  fun gtk_text_buffer_place_cursor(buffer : GtkTextBuffer*, where : GtkTextIter*) : Void
  fun gtk_text_buffer_select_range(buffer : GtkTextBuffer*, ins : GtkTextIter*, bound : GtkTextIter*) : Void
  fun gtk_text_buffer_apply_tag(buffer : GtkTextBuffer*, tag : GtkTextTag*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_remove_tag(buffer : GtkTextBuffer*, tag : GtkTextTag*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_apply_tag_by_name(buffer : GtkTextBuffer*, name : Gchar*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_remove_tag_by_name(buffer : GtkTextBuffer*, name : Gchar*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_remove_all_tags(buffer : GtkTextBuffer*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_create_tag(buffer : GtkTextBuffer*, tag_name : Gchar*, first_property_name : Gchar*) : GtkTextTag*
  fun gtk_text_buffer_get_iter_at_line_offset(buffer : GtkTextBuffer*, iter : GtkTextIter*, line_number : Gint, char_offset : Gint) : Void
  fun gtk_text_buffer_get_iter_at_line_index(buffer : GtkTextBuffer*, iter : GtkTextIter*, line_number : Gint, byte_index : Gint) : Void
  fun gtk_text_buffer_get_iter_at_offset(buffer : GtkTextBuffer*, iter : GtkTextIter*, char_offset : Gint) : Void
  fun gtk_text_buffer_get_iter_at_line(buffer : GtkTextBuffer*, iter : GtkTextIter*, line_number : Gint) : Void
  fun gtk_text_buffer_get_start_iter(buffer : GtkTextBuffer*, iter : GtkTextIter*) : Void
  fun gtk_text_buffer_get_end_iter(buffer : GtkTextBuffer*, iter : GtkTextIter*) : Void
  fun gtk_text_buffer_get_bounds(buffer : GtkTextBuffer*, start : GtkTextIter*, end : GtkTextIter*) : Void
  fun gtk_text_buffer_get_iter_at_mark(buffer : GtkTextBuffer*, iter : GtkTextIter*, mark : GtkTextMark*) : Void
  fun gtk_text_buffer_get_iter_at_child_anchor(buffer : GtkTextBuffer*, iter : GtkTextIter*, anchor : GtkTextChildAnchor*) : Void
  fun gtk_text_buffer_get_modified(buffer : GtkTextBuffer*) : Gboolean
  fun gtk_text_buffer_set_modified(buffer : GtkTextBuffer*, setting : Gboolean) : Void
  fun gtk_text_buffer_get_has_selection(buffer : GtkTextBuffer*) : Gboolean
  fun gtk_text_buffer_add_selection_clipboard(buffer : GtkTextBuffer*, clipboard : GtkClipboard*) : Void
  fun gtk_text_buffer_remove_selection_clipboard(buffer : GtkTextBuffer*, clipboard : GtkClipboard*) : Void
  fun gtk_text_buffer_cut_clipboard(buffer : GtkTextBuffer*, clipboard : GtkClipboard*, default_editable : Gboolean) : Void
  fun gtk_text_buffer_copy_clipboard(buffer : GtkTextBuffer*, clipboard : GtkClipboard*) : Void
  fun gtk_text_buffer_paste_clipboard(buffer : GtkTextBuffer*, clipboard : GtkClipboard*, override_location : GtkTextIter*, default_editable : Gboolean) : Void
  fun gtk_text_buffer_get_selection_bounds(buffer : GtkTextBuffer*, start : GtkTextIter*, end : GtkTextIter*) : Gboolean
  fun gtk_text_buffer_delete_selection(buffer : GtkTextBuffer*, interactive : Gboolean, default_editable : Gboolean) : Gboolean
  fun gtk_text_buffer_begin_user_action(buffer : GtkTextBuffer*) : Void
  fun gtk_text_buffer_end_user_action(buffer : GtkTextBuffer*) : Void
  fun gtk_text_buffer_get_copy_target_list(buffer : GtkTextBuffer*) : GtkTargetList*
  fun gtk_text_buffer_get_paste_target_list(buffer : GtkTextBuffer*) : GtkTargetList*
  fun gtk_text_buffer_register_serialize_format(buffer : GtkTextBuffer*, mime_type : Gchar*, function : GtkTextBufferSerializeFunc, user_data : Gpointer, user_data_destroy : GDestroyNotify) : GdkAtom
  fun gtk_text_buffer_register_serialize_tagset(buffer : GtkTextBuffer*, tagset_name : Gchar*) : GdkAtom
  fun gtk_text_buffer_register_deserialize_format(buffer : GtkTextBuffer*, mime_type : Gchar*, function : GtkTextBufferDeserializeFunc, user_data : Gpointer, user_data_destroy : GDestroyNotify) : GdkAtom
  fun gtk_text_buffer_register_deserialize_tagset(buffer : GtkTextBuffer*, tagset_name : Gchar*) : GdkAtom
  fun gtk_text_buffer_unregister_serialize_format(buffer : GtkTextBuffer*, format : GdkAtom) : Void
  fun gtk_text_buffer_unregister_deserialize_format(buffer : GtkTextBuffer*, format : GdkAtom) : Void
  fun gtk_text_buffer_deserialize_set_can_create_tags(buffer : GtkTextBuffer*, format : GdkAtom, can_create_tags : Gboolean) : Void
  fun gtk_text_buffer_deserialize_get_can_create_tags(buffer : GtkTextBuffer*, format : GdkAtom) : Gboolean
  fun gtk_text_buffer_get_serialize_formats(buffer : GtkTextBuffer*, n_formats : Gint*) : GdkAtom*
  fun gtk_text_buffer_get_deserialize_formats(buffer : GtkTextBuffer*, n_formats : Gint*) : GdkAtom*
  fun gtk_text_buffer_serialize(register_buffer : GtkTextBuffer*, content_buffer : GtkTextBuffer*, format : GdkAtom, start : GtkTextIter*, end : GtkTextIter*, length : Gsize*) : Guint8*
  fun gtk_text_buffer_deserialize(register_buffer : GtkTextBuffer*, content_buffer : GtkTextBuffer*, format : GdkAtom, iter : GtkTextIter*, data : Guint8*, length : Gsize, error : GError**) : Gboolean
  fun gtk_text_view_get_type : GType
  fun gtk_text_view_new : GtkWidget*
  fun gtk_text_view_new_with_buffer(buffer : GtkTextBuffer*) : GtkWidget*
  fun gtk_text_view_set_buffer(text_view : GtkTextView*, buffer : GtkTextBuffer*) : Void
  fun gtk_text_view_get_buffer(text_view : GtkTextView*) : GtkTextBuffer*
  fun gtk_text_view_scroll_to_iter(text_view : GtkTextView*, iter : GtkTextIter*, within_margin : Gdouble, use_align : Gboolean, xalign : Gdouble, yalign : Gdouble) : Gboolean
  fun gtk_text_view_scroll_to_mark(text_view : GtkTextView*, mark : GtkTextMark*, within_margin : Gdouble, use_align : Gboolean, xalign : Gdouble, yalign : Gdouble) : Void
  fun gtk_text_view_scroll_mark_onscreen(text_view : GtkTextView*, mark : GtkTextMark*) : Void
  fun gtk_text_view_move_mark_onscreen(text_view : GtkTextView*, mark : GtkTextMark*) : Gboolean
  fun gtk_text_view_place_cursor_onscreen(text_view : GtkTextView*) : Gboolean
  fun gtk_text_view_get_visible_rect(text_view : GtkTextView*, visible_rect : GdkRectangle*) : Void
  fun gtk_text_view_set_cursor_visible(text_view : GtkTextView*, setting : Gboolean) : Void
  fun gtk_text_view_get_cursor_visible(text_view : GtkTextView*) : Gboolean
  fun gtk_text_view_reset_cursor_blink(text_view : GtkTextView*) : Void
  fun gtk_text_view_get_cursor_locations(text_view : GtkTextView*, iter : GtkTextIter*, strong : GdkRectangle*, weak : GdkRectangle*) : Void
  fun gtk_text_view_get_iter_location(text_view : GtkTextView*, iter : GtkTextIter*, location : GdkRectangle*) : Void
  fun gtk_text_view_get_iter_at_location(text_view : GtkTextView*, iter : GtkTextIter*, x : Gint, y : Gint) : Gboolean
  fun gtk_text_view_get_iter_at_position(text_view : GtkTextView*, iter : GtkTextIter*, trailing : Gint*, x : Gint, y : Gint) : Gboolean
  fun gtk_text_view_get_line_yrange(text_view : GtkTextView*, iter : GtkTextIter*, y : Gint*, height : Gint*) : Void
  fun gtk_text_view_get_line_at_y(text_view : GtkTextView*, target_iter : GtkTextIter*, y : Gint, line_top : Gint*) : Void
  fun gtk_text_view_buffer_to_window_coords(text_view : GtkTextView*, win : GtkTextWindowType, buffer_x : Gint, buffer_y : Gint, window_x : Gint*, window_y : Gint*) : Void
  fun gtk_text_view_window_to_buffer_coords(text_view : GtkTextView*, win : GtkTextWindowType, window_x : Gint, window_y : Gint, buffer_x : Gint*, buffer_y : Gint*) : Void
  fun gtk_text_view_get_hadjustment(text_view : GtkTextView*) : GtkAdjustment*
  fun gtk_text_view_get_vadjustment(text_view : GtkTextView*) : GtkAdjustment*
  fun gtk_text_view_get_window(text_view : GtkTextView*, win : GtkTextWindowType) : GdkWindow*
  fun gtk_text_view_get_window_type(text_view : GtkTextView*, window : GdkWindow*) : GtkTextWindowType
  fun gtk_text_view_set_border_window_size(text_view : GtkTextView*, type : GtkTextWindowType, size : Gint) : Void
  fun gtk_text_view_get_border_window_size(text_view : GtkTextView*, type : GtkTextWindowType) : Gint
  fun gtk_text_view_forward_display_line(text_view : GtkTextView*, iter : GtkTextIter*) : Gboolean
  fun gtk_text_view_backward_display_line(text_view : GtkTextView*, iter : GtkTextIter*) : Gboolean
  fun gtk_text_view_forward_display_line_end(text_view : GtkTextView*, iter : GtkTextIter*) : Gboolean
  fun gtk_text_view_backward_display_line_start(text_view : GtkTextView*, iter : GtkTextIter*) : Gboolean
  fun gtk_text_view_starts_display_line(text_view : GtkTextView*, iter : GtkTextIter*) : Gboolean
  fun gtk_text_view_move_visually(text_view : GtkTextView*, iter : GtkTextIter*, count : Gint) : Gboolean
  fun gtk_text_view_im_context_filter_keypress(text_view : GtkTextView*, event : GdkEventKey*) : Gboolean
  fun gtk_text_view_reset_im_context(text_view : GtkTextView*) : Void
  fun gtk_text_view_add_child_at_anchor(text_view : GtkTextView*, child : GtkWidget*, anchor : GtkTextChildAnchor*) : Void
  fun gtk_text_view_add_child_in_window(text_view : GtkTextView*, child : GtkWidget*, which_window : GtkTextWindowType, xpos : Gint, ypos : Gint) : Void
  fun gtk_text_view_move_child(text_view : GtkTextView*, child : GtkWidget*, xpos : Gint, ypos : Gint) : Void
  fun gtk_text_view_set_wrap_mode(text_view : GtkTextView*, wrap_mode : GtkWrapMode) : Void
  fun gtk_text_view_get_wrap_mode(text_view : GtkTextView*) : GtkWrapMode
  fun gtk_text_view_set_editable(text_view : GtkTextView*, setting : Gboolean) : Void
  fun gtk_text_view_get_editable(text_view : GtkTextView*) : Gboolean
  fun gtk_text_view_set_overwrite(text_view : GtkTextView*, overwrite : Gboolean) : Void
  fun gtk_text_view_get_overwrite(text_view : GtkTextView*) : Gboolean
  fun gtk_text_view_set_accepts_tab(text_view : GtkTextView*, accepts_tab : Gboolean) : Void
  fun gtk_text_view_get_accepts_tab(text_view : GtkTextView*) : Gboolean
  fun gtk_text_view_set_pixels_above_lines(text_view : GtkTextView*, pixels_above_lines : Gint) : Void
  fun gtk_text_view_get_pixels_above_lines(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_pixels_below_lines(text_view : GtkTextView*, pixels_below_lines : Gint) : Void
  fun gtk_text_view_get_pixels_below_lines(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_pixels_inside_wrap(text_view : GtkTextView*, pixels_inside_wrap : Gint) : Void
  fun gtk_text_view_get_pixels_inside_wrap(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_justification(text_view : GtkTextView*, justification : GtkJustification) : Void
  fun gtk_text_view_get_justification(text_view : GtkTextView*) : GtkJustification
  fun gtk_text_view_set_left_margin(text_view : GtkTextView*, left_margin : Gint) : Void
  fun gtk_text_view_get_left_margin(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_right_margin(text_view : GtkTextView*, right_margin : Gint) : Void
  fun gtk_text_view_get_right_margin(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_top_margin(text_view : GtkTextView*, top_margin : Gint) : Void
  fun gtk_text_view_get_top_margin(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_bottom_margin(text_view : GtkTextView*, bottom_margin : Gint) : Void
  fun gtk_text_view_get_bottom_margin(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_indent(text_view : GtkTextView*, indent : Gint) : Void
  fun gtk_text_view_get_indent(text_view : GtkTextView*) : Gint
  fun gtk_text_view_set_tabs(text_view : GtkTextView*, tabs : PangoTabArray*) : Void
  fun gtk_text_view_get_tabs(text_view : GtkTextView*) : PangoTabArray*
  fun gtk_text_view_get_default_attributes(text_view : GtkTextView*) : GtkTextAttributes*
  fun gtk_text_view_set_input_purpose(text_view : GtkTextView*, purpose : GtkInputPurpose) : Void
  fun gtk_text_view_get_input_purpose(text_view : GtkTextView*) : GtkInputPurpose
  fun gtk_text_view_set_input_hints(text_view : GtkTextView*, hints : GtkInputHints) : Void
  fun gtk_text_view_get_input_hints(text_view : GtkTextView*) : GtkInputHints
  fun gtk_text_view_set_monospace(text_view : GtkTextView*, monospace : Gboolean) : Void
  fun gtk_text_view_get_monospace(text_view : GtkTextView*) : Gboolean
  fun gtk_toolbar_get_type : GType
  fun gtk_toolbar_new : GtkWidget*
  fun gtk_toolbar_insert(toolbar : GtkToolbar*, item : GtkToolItem*, pos : Gint) : Void
  fun gtk_toolbar_get_item_index(toolbar : GtkToolbar*, item : GtkToolItem*) : Gint
  fun gtk_toolbar_get_n_items(toolbar : GtkToolbar*) : Gint
  fun gtk_toolbar_get_nth_item(toolbar : GtkToolbar*, n : Gint) : GtkToolItem*
  fun gtk_toolbar_get_show_arrow(toolbar : GtkToolbar*) : Gboolean
  fun gtk_toolbar_set_show_arrow(toolbar : GtkToolbar*, show_arrow : Gboolean) : Void
  fun gtk_toolbar_get_style(toolbar : GtkToolbar*) : GtkToolbarStyle
  fun gtk_toolbar_set_style(toolbar : GtkToolbar*, style : GtkToolbarStyle) : Void
  fun gtk_toolbar_unset_style(toolbar : GtkToolbar*) : Void
  fun gtk_toolbar_get_icon_size(toolbar : GtkToolbar*) : GtkIconSize
  fun gtk_toolbar_set_icon_size(toolbar : GtkToolbar*, icon_size : GtkIconSize) : Void
  fun gtk_toolbar_unset_icon_size(toolbar : GtkToolbar*) : Void
  fun gtk_toolbar_get_relief_style(toolbar : GtkToolbar*) : GtkReliefStyle
  fun gtk_toolbar_get_drop_index(toolbar : GtkToolbar*, x : Gint, y : Gint) : Gint
  fun gtk_toolbar_set_drop_highlight_item(toolbar : GtkToolbar*, tool_item : GtkToolItem*, index_ : Gint) : Void
  fun gtk_tool_item_group_get_type : GType
  fun gtk_tool_item_group_new(label : Gchar*) : GtkWidget*
  fun gtk_tool_item_group_set_label(group : GtkToolItemGroup*, label : Gchar*) : Void
  fun gtk_tool_item_group_set_label_widget(group : GtkToolItemGroup*, label_widget : GtkWidget*) : Void
  fun gtk_tool_item_group_set_collapsed(group : GtkToolItemGroup*, collapsed : Gboolean) : Void
  fun gtk_tool_item_group_set_ellipsize(group : GtkToolItemGroup*, ellipsize : PangoEllipsizeMode) : Void
  fun gtk_tool_item_group_set_header_relief(group : GtkToolItemGroup*, style : GtkReliefStyle) : Void
  fun gtk_tool_item_group_get_label(group : GtkToolItemGroup*) : Gchar*
  fun gtk_tool_item_group_get_label_widget(group : GtkToolItemGroup*) : GtkWidget*
  fun gtk_tool_item_group_get_collapsed(group : GtkToolItemGroup*) : Gboolean
  fun gtk_tool_item_group_get_ellipsize(group : GtkToolItemGroup*) : PangoEllipsizeMode
  fun gtk_tool_item_group_get_header_relief(group : GtkToolItemGroup*) : GtkReliefStyle
  fun gtk_tool_item_group_insert(group : GtkToolItemGroup*, item : GtkToolItem*, position : Gint) : Void
  fun gtk_tool_item_group_set_item_position(group : GtkToolItemGroup*, item : GtkToolItem*, position : Gint) : Void
  fun gtk_tool_item_group_get_item_position(group : GtkToolItemGroup*, item : GtkToolItem*) : Gint
  fun gtk_tool_item_group_get_n_items(group : GtkToolItemGroup*) : Guint
  fun gtk_tool_item_group_get_nth_item(group : GtkToolItemGroup*, index : Guint) : GtkToolItem*
  fun gtk_tool_item_group_get_drop_item(group : GtkToolItemGroup*, x : Gint, y : Gint) : GtkToolItem*
  fun gtk_tool_palette_get_type : GType
  fun gtk_tool_palette_new : GtkWidget*
  fun gtk_tool_palette_set_group_position(palette : GtkToolPalette*, group : GtkToolItemGroup*, position : Gint) : Void
  fun gtk_tool_palette_set_exclusive(palette : GtkToolPalette*, group : GtkToolItemGroup*, exclusive : Gboolean) : Void
  fun gtk_tool_palette_set_expand(palette : GtkToolPalette*, group : GtkToolItemGroup*, expand : Gboolean) : Void
  fun gtk_tool_palette_get_group_position(palette : GtkToolPalette*, group : GtkToolItemGroup*) : Gint
  fun gtk_tool_palette_get_exclusive(palette : GtkToolPalette*, group : GtkToolItemGroup*) : Gboolean
  fun gtk_tool_palette_get_expand(palette : GtkToolPalette*, group : GtkToolItemGroup*) : Gboolean
  fun gtk_tool_palette_set_icon_size(palette : GtkToolPalette*, icon_size : GtkIconSize) : Void
  fun gtk_tool_palette_unset_icon_size(palette : GtkToolPalette*) : Void
  fun gtk_tool_palette_set_style(palette : GtkToolPalette*, style : GtkToolbarStyle) : Void
  fun gtk_tool_palette_unset_style(palette : GtkToolPalette*) : Void
  fun gtk_tool_palette_get_icon_size(palette : GtkToolPalette*) : GtkIconSize
  fun gtk_tool_palette_get_style(palette : GtkToolPalette*) : GtkToolbarStyle
  fun gtk_tool_palette_get_drop_item(palette : GtkToolPalette*, x : Gint, y : Gint) : GtkToolItem*
  fun gtk_tool_palette_get_drop_group(palette : GtkToolPalette*, x : Gint, y : Gint) : GtkToolItemGroup*
  fun gtk_tool_palette_get_drag_item(palette : GtkToolPalette*, selection : GtkSelectionData*) : GtkWidget*
  fun gtk_tool_palette_set_drag_source(palette : GtkToolPalette*, targets : GtkToolPaletteDragTargets) : Void
  fun gtk_tool_palette_add_drag_dest(palette : GtkToolPalette*, widget : GtkWidget*, flags : GtkDestDefaults, targets : GtkToolPaletteDragTargets, actions : GdkDragAction) : Void
  fun gtk_tool_palette_get_hadjustment(palette : GtkToolPalette*) : GtkAdjustment*
  fun gtk_tool_palette_get_vadjustment(palette : GtkToolPalette*) : GtkAdjustment*
  fun gtk_tool_palette_get_drag_target_item : GtkTargetEntry*
  fun gtk_tool_palette_get_drag_target_group : GtkTargetEntry*
  fun gtk_tool_shell_get_type : GType
  fun gtk_tool_shell_get_icon_size(shell : GtkToolShell*) : GtkIconSize
  fun gtk_tool_shell_get_orientation(shell : GtkToolShell*) : GtkOrientation
  fun gtk_tool_shell_get_style(shell : GtkToolShell*) : GtkToolbarStyle
  fun gtk_tool_shell_get_relief_style(shell : GtkToolShell*) : GtkReliefStyle
  fun gtk_tool_shell_rebuild_menu(shell : GtkToolShell*) : Void
  fun gtk_tool_shell_get_text_orientation(shell : GtkToolShell*) : GtkOrientation
  fun gtk_tool_shell_get_text_alignment(shell : GtkToolShell*) : Gfloat
  fun gtk_tool_shell_get_ellipsize_mode(shell : GtkToolShell*) : PangoEllipsizeMode
  fun gtk_tool_shell_get_text_size_group(shell : GtkToolShell*) : GtkSizeGroup*
  fun gtk_test_init(argcp : Int32*, argvp : UInt8***) : Void
  fun gtk_test_register_all_types : Void
  fun gtk_test_list_all_types(n_types : Guint*) : GType*
  fun gtk_test_find_widget(widget : GtkWidget*, label_pattern : Gchar*, widget_type : GType) : GtkWidget*
  fun gtk_test_create_widget(widget_type : GType, first_property_name : Gchar*) : GtkWidget*
  fun gtk_test_create_simple_window(window_title : Gchar*, dialog_text : Gchar*) : GtkWidget*
  fun gtk_test_display_button_window(window_title : Gchar*, dialog_text : Gchar*) : GtkWidget*
  fun gtk_test_slider_set_perc(widget : GtkWidget*, percentage : Float64) : Void
  fun gtk_test_slider_get_value(widget : GtkWidget*) : Float64
  fun gtk_test_spin_button_click(spinner : GtkSpinButton*, button : Guint, upwards : Gboolean) : Gboolean
  fun gtk_test_widget_wait_for_draw(widget : GtkWidget*) : Void
  fun gtk_test_widget_click(widget : GtkWidget*, button : Guint, modifiers : GdkModifierType) : Gboolean
  fun gtk_test_widget_send_key(widget : GtkWidget*, keyval : Guint, modifiers : GdkModifierType) : Gboolean
  fun gtk_test_text_set(widget : GtkWidget*, string : Gchar*) : Void
  fun gtk_test_text_get(widget : GtkWidget*) : Gchar*
  fun gtk_test_find_sibling(base_widget : GtkWidget*, widget_type : GType) : GtkWidget*
  fun gtk_test_find_label(widget : GtkWidget*, label_pattern : Gchar*) : GtkWidget*
  fun gtk_tree_drag_source_get_type : GType
  fun gtk_tree_drag_source_row_draggable(drag_source : GtkTreeDragSource*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_drag_source_drag_data_delete(drag_source : GtkTreeDragSource*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_drag_source_drag_data_get(drag_source : GtkTreeDragSource*, path : GtkTreePath*, selection_data : GtkSelectionData*) : Gboolean
  fun gtk_tree_drag_dest_get_type : GType
  fun gtk_tree_drag_dest_drag_data_received(drag_dest : GtkTreeDragDest*, dest : GtkTreePath*, selection_data : GtkSelectionData*) : Gboolean
  fun gtk_tree_drag_dest_row_drop_possible(drag_dest : GtkTreeDragDest*, dest_path : GtkTreePath*, selection_data : GtkSelectionData*) : Gboolean
  fun gtk_tree_set_row_drag_data(selection_data : GtkSelectionData*, tree_model : GtkTreeModel*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_get_row_drag_data(selection_data : GtkSelectionData*, tree_model : GtkTreeModel**, path : GtkTreePath**) : Gboolean
  fun gtk_tree_model_sort_get_type : GType
  fun gtk_tree_model_sort_new_with_model(child_model : GtkTreeModel*) : GtkTreeModel*
  fun gtk_tree_model_sort_get_model(tree_model : GtkTreeModelSort*) : GtkTreeModel*
  fun gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort : GtkTreeModelSort*, child_path : GtkTreePath*) : GtkTreePath*
  fun gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort : GtkTreeModelSort*, sort_iter : GtkTreeIter*, child_iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort : GtkTreeModelSort*, sorted_path : GtkTreePath*) : GtkTreePath*
  fun gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort : GtkTreeModelSort*, child_iter : GtkTreeIter*, sorted_iter : GtkTreeIter*) : Void
  fun gtk_tree_model_sort_reset_default_sort_func(tree_model_sort : GtkTreeModelSort*) : Void
  fun gtk_tree_model_sort_clear_cache(tree_model_sort : GtkTreeModelSort*) : Void
  fun gtk_tree_model_sort_iter_is_valid(tree_model_sort : GtkTreeModelSort*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_selection_get_type : GType
  fun gtk_tree_selection_set_mode(selection : GtkTreeSelection*, type : GtkSelectionMode) : Void
  fun gtk_tree_selection_get_mode(selection : GtkTreeSelection*) : GtkSelectionMode
  fun gtk_tree_selection_set_select_function(selection : GtkTreeSelection*, func : GtkTreeSelectionFunc, data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_tree_selection_get_user_data(selection : GtkTreeSelection*) : Gpointer
  fun gtk_tree_selection_get_tree_view(selection : GtkTreeSelection*) : GtkTreeView*
  fun gtk_tree_selection_get_select_function(selection : GtkTreeSelection*) : GtkTreeSelectionFunc
  fun gtk_tree_selection_get_selected(selection : GtkTreeSelection*, model : GtkTreeModel**, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_selection_get_selected_rows(selection : GtkTreeSelection*, model : GtkTreeModel**) : GList*
  fun gtk_tree_selection_count_selected_rows(selection : GtkTreeSelection*) : Gint
  fun gtk_tree_selection_selected_foreach(selection : GtkTreeSelection*, func : GtkTreeSelectionForeachFunc, data : Gpointer) : Void
  fun gtk_tree_selection_select_path(selection : GtkTreeSelection*, path : GtkTreePath*) : Void
  fun gtk_tree_selection_unselect_path(selection : GtkTreeSelection*, path : GtkTreePath*) : Void
  fun gtk_tree_selection_select_iter(selection : GtkTreeSelection*, iter : GtkTreeIter*) : Void
  fun gtk_tree_selection_unselect_iter(selection : GtkTreeSelection*, iter : GtkTreeIter*) : Void
  fun gtk_tree_selection_path_is_selected(selection : GtkTreeSelection*, path : GtkTreePath*) : Gboolean
  fun gtk_tree_selection_iter_is_selected(selection : GtkTreeSelection*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_selection_select_all(selection : GtkTreeSelection*) : Void
  fun gtk_tree_selection_unselect_all(selection : GtkTreeSelection*) : Void
  fun gtk_tree_selection_select_range(selection : GtkTreeSelection*, start_path : GtkTreePath*, end_path : GtkTreePath*) : Void
  fun gtk_tree_selection_unselect_range(selection : GtkTreeSelection*, start_path : GtkTreePath*, end_path : GtkTreePath*) : Void
  fun gtk_tree_store_get_type : GType
  fun gtk_tree_store_new(n_columns : Gint) : GtkTreeStore*
  fun gtk_tree_store_newv(n_columns : Gint, types : GType*) : GtkTreeStore*
  fun gtk_tree_store_set_column_types(tree_store : GtkTreeStore*, n_columns : Gint, types : GType*) : Void
  fun gtk_tree_store_set_value(tree_store : GtkTreeStore*, iter : GtkTreeIter*, column : Gint, value : GValue*) : Void
  fun gtk_tree_store_set(tree_store : GtkTreeStore*, iter : GtkTreeIter*) : Void
  fun gtk_tree_store_set_valuesv(tree_store : GtkTreeStore*, iter : GtkTreeIter*, columns : Gint*, values : GValue*, n_values : Gint) : Void
  fun gtk_tree_store_set_valist(tree_store : GtkTreeStore*, iter : GtkTreeIter*, var_args : X__va_list_tag*) : Void
  fun gtk_tree_store_remove(tree_store : GtkTreeStore*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_store_insert(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*, position : Gint) : Void
  fun gtk_tree_store_insert_before(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*, sibling : GtkTreeIter*) : Void
  fun gtk_tree_store_insert_after(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*, sibling : GtkTreeIter*) : Void
  fun gtk_tree_store_insert_with_values(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*, position : Gint) : Void
  fun gtk_tree_store_insert_with_valuesv(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*, position : Gint, columns : Gint*, values : GValue*, n_values : Gint) : Void
  fun gtk_tree_store_prepend(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*) : Void
  fun gtk_tree_store_append(tree_store : GtkTreeStore*, iter : GtkTreeIter*, parent : GtkTreeIter*) : Void
  fun gtk_tree_store_is_ancestor(tree_store : GtkTreeStore*, iter : GtkTreeIter*, descendant : GtkTreeIter*) : Gboolean
  fun gtk_tree_store_iter_depth(tree_store : GtkTreeStore*, iter : GtkTreeIter*) : Gint
  fun gtk_tree_store_clear(tree_store : GtkTreeStore*) : Void
  fun gtk_tree_store_iter_is_valid(tree_store : GtkTreeStore*, iter : GtkTreeIter*) : Gboolean
  fun gtk_tree_store_reorder(tree_store : GtkTreeStore*, parent : GtkTreeIter*, new_order : Gint*) : Void
  fun gtk_tree_store_swap(tree_store : GtkTreeStore*, a : GtkTreeIter*, b : GtkTreeIter*) : Void
  fun gtk_tree_store_move_before(tree_store : GtkTreeStore*, iter : GtkTreeIter*, position : GtkTreeIter*) : Void
  fun gtk_tree_store_move_after(tree_store : GtkTreeStore*, iter : GtkTreeIter*, position : GtkTreeIter*) : Void
  fun gtk_license_get_type : GType
  fun gtk_accel_flags_get_type : GType
  fun gtk_application_inhibit_flags_get_type : GType
  fun gtk_assistant_page_type_get_type : GType
  fun gtk_button_box_style_get_type : GType
  fun gtk_builder_error_get_type : GType
  fun gtk_calendar_display_options_get_type : GType
  fun gtk_cell_renderer_state_get_type : GType
  fun gtk_cell_renderer_mode_get_type : GType
  fun gtk_cell_renderer_accel_mode_get_type : GType
  fun gtk_resize_mode_get_type : GType
  fun gtk_css_provider_error_get_type : GType
  fun gtk_css_section_type_get_type : GType
  fun gtk_debug_flag_get_type : GType
  fun gtk_dialog_flags_get_type : GType
  fun gtk_response_type_get_type : GType
  fun gtk_dest_defaults_get_type : GType
  fun gtk_target_flags_get_type : GType
  fun gtk_entry_icon_position_get_type : GType
  fun gtk_align_get_type : GType
  fun gtk_arrow_type_get_type : GType
  fun gtk_baseline_position_get_type : GType
  fun gtk_delete_type_get_type : GType
  fun gtk_direction_type_get_type : GType
  fun gtk_icon_size_get_type : GType
  fun gtk_sensitivity_type_get_type : GType
  fun gtk_text_direction_get_type : GType
  fun gtk_justification_get_type : GType
  fun gtk_menu_direction_type_get_type : GType
  fun gtk_message_type_get_type : GType
  fun gtk_movement_step_get_type : GType
  fun gtk_scroll_step_get_type : GType
  fun gtk_orientation_get_type : GType
  fun gtk_pack_type_get_type : GType
  fun gtk_position_type_get_type : GType
  fun gtk_relief_style_get_type : GType
  fun gtk_scroll_type_get_type : GType
  fun gtk_selection_mode_get_type : GType
  fun gtk_shadow_type_get_type : GType
  fun gtk_state_type_get_type : GType
  fun gtk_toolbar_style_get_type : GType
  fun gtk_wrap_mode_get_type : GType
  fun gtk_sort_type_get_type : GType
  fun gtk_im_preedit_style_get_type : GType
  fun gtk_im_status_style_get_type : GType
  fun gtk_pack_direction_get_type : GType
  fun gtk_print_pages_get_type : GType
  fun gtk_page_set_get_type : GType
  fun gtk_number_up_layout_get_type : GType
  fun gtk_page_orientation_get_type : GType
  fun gtk_print_quality_get_type : GType
  fun gtk_print_duplex_get_type : GType
  fun gtk_unit_get_type : GType
  fun gtk_tree_view_grid_lines_get_type : GType
  fun gtk_drag_result_get_type : GType
  fun gtk_size_group_mode_get_type : GType
  fun gtk_size_request_mode_get_type : GType
  fun gtk_scrollable_policy_get_type : GType
  fun gtk_state_flags_get_type : GType
  fun gtk_region_flags_get_type : GType
  fun gtk_junction_sides_get_type : GType
  fun gtk_border_style_get_type : GType
  fun gtk_level_bar_mode_get_type : GType
  fun gtk_input_purpose_get_type : GType
  fun gtk_input_hints_get_type : GType
  fun gtk_propagation_phase_get_type : GType
  fun gtk_event_sequence_state_get_type : GType
  fun gtk_pan_direction_get_type : GType
  fun gtk_popover_constraint_get_type : GType
  fun gtk_file_chooser_action_get_type : GType
  fun gtk_file_chooser_confirmation_get_type : GType
  fun gtk_file_chooser_error_get_type : GType
  fun gtk_file_filter_flags_get_type : GType
  fun gtk_icon_lookup_flags_get_type : GType
  fun gtk_icon_theme_error_get_type : GType
  fun gtk_icon_view_drop_position_get_type : GType
  fun gtk_image_type_get_type : GType
  fun gtk_arrow_placement_get_type : GType
  fun gtk_buttons_type_get_type : GType
  fun gtk_button_role_get_type : GType
  fun gtk_notebook_tab_get_type : GType
  fun gtk_places_open_flags_get_type : GType
  fun gtk_print_status_get_type : GType
  fun gtk_print_operation_result_get_type : GType
  fun gtk_print_operation_action_get_type : GType
  fun gtk_print_error_get_type : GType
  fun gtk_recent_sort_type_get_type : GType
  fun gtk_recent_chooser_error_get_type : GType
  fun gtk_recent_filter_flags_get_type : GType
  fun gtk_recent_manager_error_get_type : GType
  fun gtk_revealer_transition_type_get_type : GType
  fun gtk_corner_type_get_type : GType
  fun gtk_policy_type_get_type : GType
  fun gtk_shortcut_type_get_type : GType
  fun gtk_spin_button_update_policy_get_type : GType
  fun gtk_spin_type_get_type : GType
  fun gtk_stack_transition_type_get_type : GType
  fun gtk_style_context_print_flags_get_type : GType
  fun gtk_text_buffer_target_info_get_type : GType
  fun gtk_text_search_flags_get_type : GType
  fun gtk_text_window_type_get_type : GType
  fun gtk_text_view_layer_get_type : GType
  fun gtk_text_extend_selection_get_type : GType
  fun gtk_toolbar_space_style_get_type : GType
  fun gtk_tool_palette_drag_targets_get_type : GType
  fun gtk_tree_model_flags_get_type : GType
  fun gtk_tree_view_drop_position_get_type : GType
  fun gtk_tree_view_column_sizing_get_type : GType
  fun gtk_widget_help_type_get_type : GType
  fun gtk_window_type_get_type : GType
  fun gtk_window_position_get_type : GType
  fun gtk_rc_flags_get_type : GType
  fun gtk_rc_token_type_get_type : GType
  fun gtk_path_priority_type_get_type : GType
  fun gtk_path_type_get_type : GType
  fun gtk_expander_style_get_type : GType
  fun gtk_attach_options_get_type : GType
  fun gtk_ui_manager_item_type_get_type : GType
  fun gtk_viewport_get_type : GType
  fun gtk_viewport_new(hadjustment : GtkAdjustment*, vadjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_viewport_get_hadjustment(viewport : GtkViewport*) : GtkAdjustment*
  fun gtk_viewport_get_vadjustment(viewport : GtkViewport*) : GtkAdjustment*
  fun gtk_viewport_set_hadjustment(viewport : GtkViewport*, adjustment : GtkAdjustment*) : Void
  fun gtk_viewport_set_vadjustment(viewport : GtkViewport*, adjustment : GtkAdjustment*) : Void
  fun gtk_viewport_set_shadow_type(viewport : GtkViewport*, type : GtkShadowType) : Void
  fun gtk_viewport_get_shadow_type(viewport : GtkViewport*) : GtkShadowType
  fun gtk_viewport_get_bin_window(viewport : GtkViewport*) : GdkWindow*
  fun gtk_viewport_get_view_window(viewport : GtkViewport*) : GdkWindow*
  fun gtk_volume_button_get_type : GType
  fun gtk_volume_button_new : GtkWidget*
  fun gtk_widget_path_get_type : GType
  fun gtk_widget_path_new : GtkWidgetPath*
  fun gtk_widget_path_copy(path : GtkWidgetPath*) : GtkWidgetPath*
  fun gtk_widget_path_ref(path : GtkWidgetPath*) : GtkWidgetPath*
  fun gtk_widget_path_unref(path : GtkWidgetPath*) : Void
  fun gtk_widget_path_free(path : GtkWidgetPath*) : Void
  fun gtk_widget_path_to_string(path : GtkWidgetPath*) : UInt8*
  fun gtk_widget_path_length(path : GtkWidgetPath*) : Gint
  fun gtk_widget_path_append_type(path : GtkWidgetPath*, type : GType) : Gint
  fun gtk_widget_path_prepend_type(path : GtkWidgetPath*, type : GType) : Void
  fun gtk_widget_path_append_with_siblings(path : GtkWidgetPath*, siblings : GtkWidgetPath*, sibling_index : Guint) : Gint
  fun gtk_widget_path_append_for_widget(path : GtkWidgetPath*, widget : GtkWidget*) : Gint
  fun gtk_widget_path_iter_get_object_type(path : GtkWidgetPath*, pos : Gint) : GType
  fun gtk_widget_path_iter_set_object_type(path : GtkWidgetPath*, pos : Gint, type : GType) : Void
  fun gtk_widget_path_iter_get_object_name(path : GtkWidgetPath*, pos : Gint) : UInt8*
  fun gtk_widget_path_iter_set_object_name(path : GtkWidgetPath*, pos : Gint, name : UInt8*) : Void
  fun gtk_widget_path_iter_get_siblings(path : GtkWidgetPath*, pos : Gint) : GtkWidgetPath*
  fun gtk_widget_path_iter_get_sibling_index(path : GtkWidgetPath*, pos : Gint) : Guint
  fun gtk_widget_path_iter_get_name(path : GtkWidgetPath*, pos : Gint) : Gchar*
  fun gtk_widget_path_iter_set_name(path : GtkWidgetPath*, pos : Gint, name : Gchar*) : Void
  fun gtk_widget_path_iter_has_name(path : GtkWidgetPath*, pos : Gint, name : Gchar*) : Gboolean
  fun gtk_widget_path_iter_has_qname(path : GtkWidgetPath*, pos : Gint, qname : GQuark) : Gboolean
  fun gtk_widget_path_iter_get_state(path : GtkWidgetPath*, pos : Gint) : GtkStateFlags
  fun gtk_widget_path_iter_set_state(path : GtkWidgetPath*, pos : Gint, state : GtkStateFlags) : Void
  fun gtk_widget_path_iter_add_class(path : GtkWidgetPath*, pos : Gint, name : Gchar*) : Void
  fun gtk_widget_path_iter_remove_class(path : GtkWidgetPath*, pos : Gint, name : Gchar*) : Void
  fun gtk_widget_path_iter_clear_classes(path : GtkWidgetPath*, pos : Gint) : Void
  fun gtk_widget_path_iter_list_classes(path : GtkWidgetPath*, pos : Gint) : GSList*
  fun gtk_widget_path_iter_has_class(path : GtkWidgetPath*, pos : Gint, name : Gchar*) : Gboolean
  fun gtk_widget_path_iter_has_qclass(path : GtkWidgetPath*, pos : Gint, qname : GQuark) : Gboolean
  fun gtk_widget_path_iter_add_region(path : GtkWidgetPath*, pos : Gint, name : Gchar*, flags : GtkRegionFlags) : Void
  fun gtk_widget_path_iter_remove_region(path : GtkWidgetPath*, pos : Gint, name : Gchar*) : Void
  fun gtk_widget_path_iter_clear_regions(path : GtkWidgetPath*, pos : Gint) : Void
  fun gtk_widget_path_iter_list_regions(path : GtkWidgetPath*, pos : Gint) : GSList*
  fun gtk_widget_path_iter_has_region(path : GtkWidgetPath*, pos : Gint, name : Gchar*, flags : GtkRegionFlags*) : Gboolean
  fun gtk_widget_path_iter_has_qregion(path : GtkWidgetPath*, pos : Gint, qname : GQuark, flags : GtkRegionFlags*) : Gboolean
  fun gtk_widget_path_get_object_type(path : GtkWidgetPath*) : GType
  fun gtk_widget_path_is_type(path : GtkWidgetPath*, type : GType) : Gboolean
  fun gtk_widget_path_has_parent(path : GtkWidgetPath*, type : GType) : Gboolean
  fun gtk_window_group_get_type : GType
  fun gtk_window_group_new : GtkWindowGroup*
  fun gtk_window_group_add_window(window_group : GtkWindowGroup*, window : GtkWindow*) : Void
  fun gtk_window_group_remove_window(window_group : GtkWindowGroup*, window : GtkWindow*) : Void
  fun gtk_window_group_list_windows(window_group : GtkWindowGroup*) : GList*
  fun gtk_window_group_get_current_grab(window_group : GtkWindowGroup*) : GtkWidget*
  fun gtk_window_group_get_current_device_grab(window_group : GtkWindowGroup*, device : GdkDevice*) : GtkWidget*
  fun gtk_arrow_get_type : GType
  fun gtk_arrow_new(arrow_type : GtkArrowType, shadow_type : GtkShadowType) : GtkWidget*
  fun gtk_arrow_set(arrow : GtkArrow*, arrow_type : GtkArrowType, shadow_type : GtkShadowType) : Void
  fun gtk_action_get_type : GType
  fun gtk_action_new(name : Gchar*, label : Gchar*, tooltip : Gchar*, stock_id : Gchar*) : GtkAction*
  fun gtk_action_get_name(action : GtkAction*) : Gchar*
  fun gtk_action_is_sensitive(action : GtkAction*) : Gboolean
  fun gtk_action_get_sensitive(action : GtkAction*) : Gboolean
  fun gtk_action_set_sensitive(action : GtkAction*, sensitive : Gboolean) : Void
  fun gtk_action_is_visible(action : GtkAction*) : Gboolean
  fun gtk_action_get_visible(action : GtkAction*) : Gboolean
  fun gtk_action_set_visible(action : GtkAction*, visible : Gboolean) : Void
  fun gtk_action_activate(action : GtkAction*) : Void
  fun gtk_action_create_icon(action : GtkAction*, icon_size : GtkIconSize) : GtkWidget*
  fun gtk_action_create_menu_item(action : GtkAction*) : GtkWidget*
  fun gtk_action_create_tool_item(action : GtkAction*) : GtkWidget*
  fun gtk_action_create_menu(action : GtkAction*) : GtkWidget*
  fun gtk_action_get_proxies(action : GtkAction*) : GSList*
  fun gtk_action_connect_accelerator(action : GtkAction*) : Void
  fun gtk_action_disconnect_accelerator(action : GtkAction*) : Void
  fun gtk_action_get_accel_path(action : GtkAction*) : Gchar*
  fun gtk_action_get_accel_closure(action : GtkAction*) : GClosure*
  fun gtk_action_block_activate(action : GtkAction*) : Void
  fun gtk_action_unblock_activate(action : GtkAction*) : Void
  fun _gtk_action_add_to_proxy_list(action : GtkAction*, proxy : GtkWidget*) : Void
  fun _gtk_action_remove_from_proxy_list(action : GtkAction*, proxy : GtkWidget*) : Void
  fun _gtk_action_emit_activate(action : GtkAction*) : Void
  fun gtk_action_set_accel_path(action : GtkAction*, accel_path : Gchar*) : Void
  fun gtk_action_set_accel_group(action : GtkAction*, accel_group : GtkAccelGroup*) : Void
  fun _gtk_action_sync_menu_visible(action : GtkAction*, proxy : GtkWidget*, empty : Gboolean) : Void
  fun gtk_action_set_label(action : GtkAction*, label : Gchar*) : Void
  fun gtk_action_get_label(action : GtkAction*) : Gchar*
  fun gtk_action_set_short_label(action : GtkAction*, short_label : Gchar*) : Void
  fun gtk_action_get_short_label(action : GtkAction*) : Gchar*
  fun gtk_action_set_tooltip(action : GtkAction*, tooltip : Gchar*) : Void
  fun gtk_action_get_tooltip(action : GtkAction*) : Gchar*
  fun gtk_action_set_stock_id(action : GtkAction*, stock_id : Gchar*) : Void
  fun gtk_action_get_stock_id(action : GtkAction*) : Gchar*
  fun gtk_action_set_gicon(action : GtkAction*, icon : GIcon*) : Void
  fun gtk_action_get_gicon(action : GtkAction*) : GIcon*
  fun gtk_action_set_icon_name(action : GtkAction*, icon_name : Gchar*) : Void
  fun gtk_action_get_icon_name(action : GtkAction*) : Gchar*
  fun gtk_action_set_visible_horizontal(action : GtkAction*, visible_horizontal : Gboolean) : Void
  fun gtk_action_get_visible_horizontal(action : GtkAction*) : Gboolean
  fun gtk_action_set_visible_vertical(action : GtkAction*, visible_vertical : Gboolean) : Void
  fun gtk_action_get_visible_vertical(action : GtkAction*) : Gboolean
  fun gtk_action_set_is_important(action : GtkAction*, is_important : Gboolean) : Void
  fun gtk_action_get_is_important(action : GtkAction*) : Gboolean
  fun gtk_action_set_always_show_image(action : GtkAction*, always_show : Gboolean) : Void
  fun gtk_action_get_always_show_image(action : GtkAction*) : Gboolean
  fun gtk_activatable_get_type : GType
  fun gtk_activatable_sync_action_properties(activatable : GtkActivatable*, action : GtkAction*) : Void
  fun gtk_activatable_set_related_action(activatable : GtkActivatable*, action : GtkAction*) : Void
  fun gtk_activatable_get_related_action(activatable : GtkActivatable*) : GtkAction*
  fun gtk_activatable_set_use_action_appearance(activatable : GtkActivatable*, use_appearance : Gboolean) : Void
  fun gtk_activatable_get_use_action_appearance(activatable : GtkActivatable*) : Gboolean
  fun gtk_activatable_do_set_related_action(activatable : GtkActivatable*, action : GtkAction*) : Void
  fun gtk_stock_add(items : GtkStockItem*, n_items : Guint) : Void
  fun gtk_stock_add_static(items : GtkStockItem*, n_items : Guint) : Void
  fun gtk_stock_lookup(stock_id : Gchar*, item : GtkStockItem*) : Gboolean
  fun gtk_stock_list_ids : GSList*
  fun gtk_stock_item_copy(item : GtkStockItem*) : GtkStockItem*
  fun gtk_stock_item_free(item : GtkStockItem*) : Void
  fun gtk_stock_set_translate_func(domain : Gchar*, func : GtkTranslateFunc, data : Gpointer, notify : GDestroyNotify) : Void
  fun gtk_action_group_get_type : GType
  fun gtk_action_group_new(name : Gchar*) : GtkActionGroup*
  fun gtk_action_group_get_name(action_group : GtkActionGroup*) : Gchar*
  fun gtk_action_group_get_sensitive(action_group : GtkActionGroup*) : Gboolean
  fun gtk_action_group_set_sensitive(action_group : GtkActionGroup*, sensitive : Gboolean) : Void
  fun gtk_action_group_get_visible(action_group : GtkActionGroup*) : Gboolean
  fun gtk_action_group_set_visible(action_group : GtkActionGroup*, visible : Gboolean) : Void
  fun gtk_action_group_get_accel_group(action_group : GtkActionGroup*) : GtkAccelGroup*
  fun gtk_action_group_set_accel_group(action_group : GtkActionGroup*, accel_group : GtkAccelGroup*) : Void
  fun gtk_action_group_get_action(action_group : GtkActionGroup*, action_name : Gchar*) : GtkAction*
  fun gtk_action_group_list_actions(action_group : GtkActionGroup*) : GList*
  fun gtk_action_group_add_action(action_group : GtkActionGroup*, action : GtkAction*) : Void
  fun gtk_action_group_add_action_with_accel(action_group : GtkActionGroup*, action : GtkAction*, accelerator : Gchar*) : Void
  fun gtk_action_group_remove_action(action_group : GtkActionGroup*, action : GtkAction*) : Void
  fun gtk_action_group_add_actions(action_group : GtkActionGroup*, entries : GtkActionEntry*, n_entries : Guint, user_data : Gpointer) : Void
  fun gtk_action_group_add_toggle_actions(action_group : GtkActionGroup*, entries : GtkToggleActionEntry*, n_entries : Guint, user_data : Gpointer) : Void
  fun gtk_action_group_add_radio_actions(action_group : GtkActionGroup*, entries : GtkRadioActionEntry*, n_entries : Guint, value : Gint, on_change : GCallback, user_data : Gpointer) : Void
  fun gtk_action_group_add_actions_full(action_group : GtkActionGroup*, entries : GtkActionEntry*, n_entries : Guint, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_action_group_add_toggle_actions_full(action_group : GtkActionGroup*, entries : GtkToggleActionEntry*, n_entries : Guint, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_action_group_add_radio_actions_full(action_group : GtkActionGroup*, entries : GtkRadioActionEntry*, n_entries : Guint, value : Gint, on_change : GCallback, user_data : Gpointer, destroy : GDestroyNotify) : Void
  fun gtk_action_group_set_translate_func(action_group : GtkActionGroup*, func : GtkTranslateFunc, data : Gpointer, notify : GDestroyNotify) : Void
  fun gtk_action_group_set_translation_domain(action_group : GtkActionGroup*, domain : Gchar*) : Void
  fun gtk_action_group_translate_string(action_group : GtkActionGroup*, string : Gchar*) : Gchar*
  fun _gtk_action_group_emit_connect_proxy(action_group : GtkActionGroup*, action : GtkAction*, proxy : GtkWidget*) : Void
  fun _gtk_action_group_emit_disconnect_proxy(action_group : GtkActionGroup*, action : GtkAction*, proxy : GtkWidget*) : Void
  fun _gtk_action_group_emit_pre_activate(action_group : GtkActionGroup*, action : GtkAction*) : Void
  fun _gtk_action_group_emit_post_activate(action_group : GtkActionGroup*, action : GtkAction*) : Void
  fun gtk_alignment_get_type : GType
  fun gtk_alignment_new(xalign : Gfloat, yalign : Gfloat, xscale : Gfloat, yscale : Gfloat) : GtkWidget*
  fun gtk_alignment_set(alignment : GtkAlignment*, xalign : Gfloat, yalign : Gfloat, xscale : Gfloat, yscale : Gfloat) : Void
  fun gtk_alignment_set_padding(alignment : GtkAlignment*, padding_top : Guint, padding_bottom : Guint, padding_left : Guint, padding_right : Guint) : Void
  fun gtk_alignment_get_padding(alignment : GtkAlignment*, padding_top : Guint*, padding_bottom : Guint*, padding_left : Guint*, padding_right : Guint*) : Void
  fun gtk_color_selection_get_type : GType
  fun gtk_color_selection_new : GtkWidget*
  fun gtk_color_selection_get_has_opacity_control(colorsel : GtkColorSelection*) : Gboolean
  fun gtk_color_selection_set_has_opacity_control(colorsel : GtkColorSelection*, has_opacity : Gboolean) : Void
  fun gtk_color_selection_get_has_palette(colorsel : GtkColorSelection*) : Gboolean
  fun gtk_color_selection_set_has_palette(colorsel : GtkColorSelection*, has_palette : Gboolean) : Void
  fun gtk_color_selection_set_current_alpha(colorsel : GtkColorSelection*, alpha : Guint16) : Void
  fun gtk_color_selection_get_current_alpha(colorsel : GtkColorSelection*) : Guint16
  fun gtk_color_selection_set_previous_alpha(colorsel : GtkColorSelection*, alpha : Guint16) : Void
  fun gtk_color_selection_get_previous_alpha(colorsel : GtkColorSelection*) : Guint16
  fun gtk_color_selection_set_current_rgba(colorsel : GtkColorSelection*, rgba : GdkRGBA*) : Void
  fun gtk_color_selection_get_current_rgba(colorsel : GtkColorSelection*, rgba : GdkRGBA*) : Void
  fun gtk_color_selection_set_previous_rgba(colorsel : GtkColorSelection*, rgba : GdkRGBA*) : Void
  fun gtk_color_selection_get_previous_rgba(colorsel : GtkColorSelection*, rgba : GdkRGBA*) : Void
  fun gtk_color_selection_is_adjusting(colorsel : GtkColorSelection*) : Gboolean
  fun gtk_color_selection_palette_from_string(str : Gchar*, colors : GdkColor**, n_colors : Gint*) : Gboolean
  fun gtk_color_selection_palette_to_string(colors : GdkColor*, n_colors : Gint) : Gchar*
  fun gtk_color_selection_set_change_palette_with_screen_hook(func : GtkColorSelectionChangePaletteWithScreenFunc) : GtkColorSelectionChangePaletteWithScreenFunc
  fun gtk_color_selection_set_current_color(colorsel : GtkColorSelection*, color : GdkColor*) : Void
  fun gtk_color_selection_get_current_color(colorsel : GtkColorSelection*, color : GdkColor*) : Void
  fun gtk_color_selection_set_previous_color(colorsel : GtkColorSelection*, color : GdkColor*) : Void
  fun gtk_color_selection_get_previous_color(colorsel : GtkColorSelection*, color : GdkColor*) : Void
  fun gtk_color_selection_dialog_get_type : GType
  fun gtk_color_selection_dialog_new(title : Gchar*) : GtkWidget*
  fun gtk_color_selection_dialog_get_color_selection(colorsel : GtkColorSelectionDialog*) : GtkWidget*
  fun gtk_font_selection_get_type : GType
  fun gtk_font_selection_new : GtkWidget*
  fun gtk_font_selection_get_family_list(fontsel : GtkFontSelection*) : GtkWidget*
  fun gtk_font_selection_get_face_list(fontsel : GtkFontSelection*) : GtkWidget*
  fun gtk_font_selection_get_size_entry(fontsel : GtkFontSelection*) : GtkWidget*
  fun gtk_font_selection_get_size_list(fontsel : GtkFontSelection*) : GtkWidget*
  fun gtk_font_selection_get_preview_entry(fontsel : GtkFontSelection*) : GtkWidget*
  fun gtk_font_selection_get_family(fontsel : GtkFontSelection*) : PangoFontFamily*
  fun gtk_font_selection_get_face(fontsel : GtkFontSelection*) : PangoFontFace*
  fun gtk_font_selection_get_size(fontsel : GtkFontSelection*) : Gint
  fun gtk_font_selection_get_font_name(fontsel : GtkFontSelection*) : Gchar*
  fun gtk_font_selection_set_font_name(fontsel : GtkFontSelection*, fontname : Gchar*) : Gboolean
  fun gtk_font_selection_get_preview_text(fontsel : GtkFontSelection*) : Gchar*
  fun gtk_font_selection_set_preview_text(fontsel : GtkFontSelection*, text : Gchar*) : Void
  fun gtk_font_selection_dialog_get_type : GType
  fun gtk_font_selection_dialog_new(title : Gchar*) : GtkWidget*
  fun gtk_font_selection_dialog_get_ok_button(fsd : GtkFontSelectionDialog*) : GtkWidget*
  fun gtk_font_selection_dialog_get_cancel_button(fsd : GtkFontSelectionDialog*) : GtkWidget*
  fun gtk_font_selection_dialog_get_font_selection(fsd : GtkFontSelectionDialog*) : GtkWidget*
  fun gtk_font_selection_dialog_get_font_name(fsd : GtkFontSelectionDialog*) : Gchar*
  fun gtk_font_selection_dialog_set_font_name(fsd : GtkFontSelectionDialog*, fontname : Gchar*) : Gboolean
  fun gtk_font_selection_dialog_get_preview_text(fsd : GtkFontSelectionDialog*) : Gchar*
  fun gtk_font_selection_dialog_set_preview_text(fsd : GtkFontSelectionDialog*, text : Gchar*) : Void
  fun gtk_symbolic_color_get_type : GType
  fun gtk_symbolic_color_new_literal(color : GdkRGBA*) : GtkSymbolicColor*
  fun gtk_symbolic_color_new_name(name : Gchar*) : GtkSymbolicColor*
  fun gtk_symbolic_color_new_shade(color : GtkSymbolicColor*, factor : Gdouble) : GtkSymbolicColor*
  fun gtk_symbolic_color_new_alpha(color : GtkSymbolicColor*, factor : Gdouble) : GtkSymbolicColor*
  fun gtk_symbolic_color_new_mix(color1 : GtkSymbolicColor*, color2 : GtkSymbolicColor*, factor : Gdouble) : GtkSymbolicColor*
  fun gtk_symbolic_color_new_win32(theme_class : Gchar*, id : Gint) : GtkSymbolicColor*
  fun gtk_symbolic_color_ref(color : GtkSymbolicColor*) : GtkSymbolicColor*
  fun gtk_symbolic_color_unref(color : GtkSymbolicColor*) : Void
  fun gtk_symbolic_color_to_string(color : GtkSymbolicColor*) : UInt8*
  fun gtk_symbolic_color_resolve(color : GtkSymbolicColor*, props : GtkStyleProperties*, resolved_color : GdkRGBA*) : Gboolean
  fun gtk_gradient_get_type : GType
  fun gtk_gradient_new_linear(x0 : Gdouble, y0 : Gdouble, x1 : Gdouble, y1 : Gdouble) : GtkGradient*
  fun gtk_gradient_new_radial(x0 : Gdouble, y0 : Gdouble, radius0 : Gdouble, x1 : Gdouble, y1 : Gdouble, radius1 : Gdouble) : GtkGradient*
  fun gtk_gradient_add_color_stop(gradient : GtkGradient*, offset : Gdouble, color : GtkSymbolicColor*) : Void
  fun gtk_gradient_ref(gradient : GtkGradient*) : GtkGradient*
  fun gtk_gradient_unref(gradient : GtkGradient*) : Void
  fun gtk_gradient_resolve(gradient : GtkGradient*, props : GtkStyleProperties*, resolved_gradient : CairoPatternT**) : Gboolean
  fun gtk_gradient_resolve_for_context(gradient : GtkGradient*, context : GtkStyleContext*) : CairoPatternT*
  fun gtk_gradient_to_string(gradient : GtkGradient*) : UInt8*
  fun gtk_handle_box_get_type : GType
  fun gtk_handle_box_new : GtkWidget*
  fun gtk_handle_box_set_shadow_type(handle_box : GtkHandleBox*, type : GtkShadowType) : Void
  fun gtk_handle_box_get_shadow_type(handle_box : GtkHandleBox*) : GtkShadowType
  fun gtk_handle_box_set_handle_position(handle_box : GtkHandleBox*, position : GtkPositionType) : Void
  fun gtk_handle_box_get_handle_position(handle_box : GtkHandleBox*) : GtkPositionType
  fun gtk_handle_box_set_snap_edge(handle_box : GtkHandleBox*, edge : GtkPositionType) : Void
  fun gtk_handle_box_get_snap_edge(handle_box : GtkHandleBox*) : GtkPositionType
  fun gtk_handle_box_get_child_detached(handle_box : GtkHandleBox*) : Gboolean
  fun gtk_hbutton_box_get_type : GType
  fun gtk_hbutton_box_new : GtkWidget*
  fun gtk_hbox_get_type : GType
  fun gtk_hbox_new(homogeneous : Gboolean, spacing : Gint) : GtkWidget*
  fun gtk_hpaned_get_type : GType
  fun gtk_hpaned_new : GtkWidget*
  fun gtk_hsv_get_type : GType
  fun gtk_hsv_new : GtkWidget*
  fun gtk_hsv_set_color(hsv : GtkHSV*, h : Float64, s : Float64, v : Float64) : Void
  fun gtk_hsv_get_color(hsv : GtkHSV*, h : Gdouble*, s : Gdouble*, v : Gdouble*) : Void
  fun gtk_hsv_set_metrics(hsv : GtkHSV*, size : Gint, ring_width : Gint) : Void
  fun gtk_hsv_get_metrics(hsv : GtkHSV*, size : Gint*, ring_width : Gint*) : Void
  fun gtk_hsv_is_adjusting(hsv : GtkHSV*) : Gboolean
  fun gtk_hscale_get_type : GType
  fun gtk_hscale_new(adjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_hscale_new_with_range(min : Gdouble, max : Gdouble, step : Gdouble) : GtkWidget*
  fun gtk_hscrollbar_get_type : GType
  fun gtk_hscrollbar_new(adjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_hseparator_get_type : GType
  fun gtk_hseparator_new : GtkWidget*
  fun gtk_image_menu_item_get_type : GType
  fun gtk_image_menu_item_new : GtkWidget*
  fun gtk_image_menu_item_new_with_label(label : Gchar*) : GtkWidget*
  fun gtk_image_menu_item_new_with_mnemonic(label : Gchar*) : GtkWidget*
  fun gtk_image_menu_item_new_from_stock(stock_id : Gchar*, accel_group : GtkAccelGroup*) : GtkWidget*
  fun gtk_image_menu_item_set_always_show_image(image_menu_item : GtkImageMenuItem*, always_show : Gboolean) : Void
  fun gtk_image_menu_item_get_always_show_image(image_menu_item : GtkImageMenuItem*) : Gboolean
  fun gtk_image_menu_item_set_image(image_menu_item : GtkImageMenuItem*, image : GtkWidget*) : Void
  fun gtk_image_menu_item_get_image(image_menu_item : GtkImageMenuItem*) : GtkWidget*
  fun gtk_image_menu_item_set_use_stock(image_menu_item : GtkImageMenuItem*, use_stock : Gboolean) : Void
  fun gtk_image_menu_item_get_use_stock(image_menu_item : GtkImageMenuItem*) : Gboolean
  fun gtk_image_menu_item_set_accel_group(image_menu_item : GtkImageMenuItem*, accel_group : GtkAccelGroup*) : Void
  fun gtk_numerable_icon_get_type : GType
  fun gtk_numerable_icon_new(base_icon : GIcon*) : GIcon*
  fun gtk_numerable_icon_new_with_style_context(base_icon : GIcon*, context : GtkStyleContext*) : GIcon*
  fun gtk_numerable_icon_get_style_context(self : GtkNumerableIcon*) : GtkStyleContext*
  fun gtk_numerable_icon_set_style_context(self : GtkNumerableIcon*, style : GtkStyleContext*) : Void
  fun gtk_numerable_icon_get_count(self : GtkNumerableIcon*) : Gint
  fun gtk_numerable_icon_set_count(self : GtkNumerableIcon*, count : Gint) : Void
  fun gtk_numerable_icon_get_label(self : GtkNumerableIcon*) : Gchar*
  fun gtk_numerable_icon_set_label(self : GtkNumerableIcon*, label : Gchar*) : Void
  fun gtk_numerable_icon_set_background_gicon(self : GtkNumerableIcon*, icon : GIcon*) : Void
  fun gtk_numerable_icon_get_background_gicon(self : GtkNumerableIcon*) : GIcon*
  fun gtk_numerable_icon_set_background_icon_name(self : GtkNumerableIcon*, icon_name : Gchar*) : Void
  fun gtk_numerable_icon_get_background_icon_name(self : GtkNumerableIcon*) : Gchar*
  fun gtk_toggle_action_get_type : GType
  fun gtk_toggle_action_new(name : Gchar*, label : Gchar*, tooltip : Gchar*, stock_id : Gchar*) : GtkToggleAction*
  fun gtk_toggle_action_toggled(action : GtkToggleAction*) : Void
  fun gtk_toggle_action_set_active(action : GtkToggleAction*, is_active : Gboolean) : Void
  fun gtk_toggle_action_get_active(action : GtkToggleAction*) : Gboolean
  fun gtk_toggle_action_set_draw_as_radio(action : GtkToggleAction*, draw_as_radio : Gboolean) : Void
  fun gtk_toggle_action_get_draw_as_radio(action : GtkToggleAction*) : Gboolean
  fun _gtk_toggle_action_set_active(toggle_action : GtkToggleAction*, is_active : Gboolean) : Void
  fun gtk_radio_action_get_type : GType
  fun gtk_radio_action_new(name : Gchar*, label : Gchar*, tooltip : Gchar*, stock_id : Gchar*, value : Gint) : GtkRadioAction*
  fun gtk_radio_action_get_group(action : GtkRadioAction*) : GSList*
  fun gtk_radio_action_set_group(action : GtkRadioAction*, group : GSList*) : Void
  fun gtk_radio_action_join_group(action : GtkRadioAction*, group_source : GtkRadioAction*) : Void
  fun gtk_radio_action_get_current_value(action : GtkRadioAction*) : Gint
  fun gtk_radio_action_set_current_value(action : GtkRadioAction*, current_value : Gint) : Void
  fun _gtk_rc_parse_widget_class_path(pattern : Gchar*) : GSList*
  fun _gtk_rc_free_widget_class_path(list : GSList*) : Void
  fun _gtk_rc_match_widget_class(list : GSList*, length : Gint, path : Gchar*, path_reversed : Gchar*) : Gboolean
  fun gtk_rc_add_default_file(filename : Gchar*) : Void
  fun gtk_rc_set_default_files(filenames : Gchar**) : Void
  fun gtk_rc_get_default_files : Gchar**
  fun gtk_rc_get_style(widget : GtkWidget*) : GtkStyle*
  fun gtk_rc_get_style_by_paths(settings : GtkSettings*, widget_path : UInt8*, class_path : UInt8*, type : GType) : GtkStyle*
  fun gtk_rc_reparse_all_for_settings(settings : GtkSettings*, force_load : Gboolean) : Gboolean
  fun gtk_rc_reset_styles(settings : GtkSettings*) : Void
  fun gtk_rc_find_pixmap_in_path(settings : GtkSettings*, scanner : GScanner*, pixmap_file : Gchar*) : Gchar*
  fun gtk_rc_parse(filename : Gchar*) : Void
  fun gtk_rc_parse_string(rc_string : Gchar*) : Void
  fun gtk_rc_reparse_all : Gboolean
  fun gtk_rc_style_get_type : GType
  fun gtk_rc_style_new : GtkRcStyle*
  fun gtk_rc_style_copy(orig : GtkRcStyle*) : GtkRcStyle*
  fun gtk_rc_find_module_in_path(module_file : Gchar*) : Gchar*
  fun gtk_rc_get_theme_dir : Gchar*
  fun gtk_rc_get_module_dir : Gchar*
  fun gtk_rc_get_im_module_path : Gchar*
  fun gtk_rc_get_im_module_file : Gchar*
  fun gtk_rc_scanner_new : GScanner*
  fun gtk_rc_parse_color(scanner : GScanner*, color : GdkColor*) : Guint
  fun gtk_rc_parse_color_full(scanner : GScanner*, style : GtkRcStyle*, color : GdkColor*) : Guint
  fun gtk_rc_parse_state(scanner : GScanner*, state : GtkStateType*) : Guint
  fun gtk_rc_parse_priority(scanner : GScanner*, priority : GtkPathPriorityType*) : Guint
  fun gtk_binding_set_add_path(binding_set : GtkBindingSet*, path_type : GtkPathType, path_pattern : Gchar*, priority : GtkPathPriorityType) : Void
  fun gtk_recent_action_get_type : GType
  fun gtk_recent_action_new(name : Gchar*, label : Gchar*, tooltip : Gchar*, stock_id : Gchar*) : GtkAction*
  fun gtk_recent_action_new_for_manager(name : Gchar*, label : Gchar*, tooltip : Gchar*, stock_id : Gchar*, manager : GtkRecentManager*) : GtkAction*
  fun gtk_recent_action_get_show_numbers(action : GtkRecentAction*) : Gboolean
  fun gtk_recent_action_set_show_numbers(action : GtkRecentAction*, show_numbers : Gboolean) : Void
  fun gtk_status_icon_get_type : GType
  fun gtk_status_icon_new : GtkStatusIcon*
  fun gtk_status_icon_new_from_pixbuf(pixbuf : GdkPixbuf*) : GtkStatusIcon*
  fun gtk_status_icon_new_from_file(filename : Gchar*) : GtkStatusIcon*
  fun gtk_status_icon_new_from_stock(stock_id : Gchar*) : GtkStatusIcon*
  fun gtk_status_icon_new_from_icon_name(icon_name : Gchar*) : GtkStatusIcon*
  fun gtk_status_icon_new_from_gicon(icon : GIcon*) : GtkStatusIcon*
  fun gtk_status_icon_set_from_pixbuf(status_icon : GtkStatusIcon*, pixbuf : GdkPixbuf*) : Void
  fun gtk_status_icon_set_from_file(status_icon : GtkStatusIcon*, filename : Gchar*) : Void
  fun gtk_status_icon_set_from_stock(status_icon : GtkStatusIcon*, stock_id : Gchar*) : Void
  fun gtk_status_icon_set_from_icon_name(status_icon : GtkStatusIcon*, icon_name : Gchar*) : Void
  fun gtk_status_icon_set_from_gicon(status_icon : GtkStatusIcon*, icon : GIcon*) : Void
  fun gtk_status_icon_get_storage_type(status_icon : GtkStatusIcon*) : GtkImageType
  fun gtk_status_icon_get_pixbuf(status_icon : GtkStatusIcon*) : GdkPixbuf*
  fun gtk_status_icon_get_stock(status_icon : GtkStatusIcon*) : Gchar*
  fun gtk_status_icon_get_icon_name(status_icon : GtkStatusIcon*) : Gchar*
  fun gtk_status_icon_get_gicon(status_icon : GtkStatusIcon*) : GIcon*
  fun gtk_status_icon_get_size(status_icon : GtkStatusIcon*) : Gint
  fun gtk_status_icon_set_screen(status_icon : GtkStatusIcon*, screen : GdkScreen*) : Void
  fun gtk_status_icon_get_screen(status_icon : GtkStatusIcon*) : GdkScreen*
  fun gtk_status_icon_set_has_tooltip(status_icon : GtkStatusIcon*, has_tooltip : Gboolean) : Void
  fun gtk_status_icon_set_tooltip_text(status_icon : GtkStatusIcon*, text : Gchar*) : Void
  fun gtk_status_icon_set_tooltip_markup(status_icon : GtkStatusIcon*, markup : Gchar*) : Void
  fun gtk_status_icon_set_title(status_icon : GtkStatusIcon*, title : Gchar*) : Void
  fun gtk_status_icon_get_title(status_icon : GtkStatusIcon*) : Gchar*
  fun gtk_status_icon_set_name(status_icon : GtkStatusIcon*, name : Gchar*) : Void
  fun gtk_status_icon_set_visible(status_icon : GtkStatusIcon*, visible : Gboolean) : Void
  fun gtk_status_icon_get_visible(status_icon : GtkStatusIcon*) : Gboolean
  fun gtk_status_icon_is_embedded(status_icon : GtkStatusIcon*) : Gboolean
  fun gtk_status_icon_position_menu(menu : GtkMenu*, x : Gint*, y : Gint*, push_in : Gboolean*, user_data : Gpointer) : Void
  fun gtk_status_icon_get_geometry(status_icon : GtkStatusIcon*, screen : GdkScreen**, area : GdkRectangle*, orientation : GtkOrientation*) : Gboolean
  fun gtk_status_icon_get_has_tooltip(status_icon : GtkStatusIcon*) : Gboolean
  fun gtk_status_icon_get_tooltip_text(status_icon : GtkStatusIcon*) : Gchar*
  fun gtk_status_icon_get_tooltip_markup(status_icon : GtkStatusIcon*) : Gchar*
  fun gtk_status_icon_get_x11_window_id(status_icon : GtkStatusIcon*) : Guint32
  fun gtk_style_get_type : GType
  fun gtk_style_new : GtkStyle*
  fun gtk_style_copy(style : GtkStyle*) : GtkStyle*
  fun gtk_style_attach(style : GtkStyle*, window : GdkWindow*) : GtkStyle*
  fun gtk_style_detach(style : GtkStyle*) : Void
  fun gtk_style_set_background(style : GtkStyle*, window : GdkWindow*, state_type : GtkStateType) : Void
  fun gtk_style_apply_default_background(style : GtkStyle*, cr : CairoT*, window : GdkWindow*, state_type : GtkStateType, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_style_lookup_icon_set(style : GtkStyle*, stock_id : Gchar*) : GtkIconSet*
  fun gtk_style_lookup_color(style : GtkStyle*, color_name : Gchar*, color : GdkColor*) : Gboolean
  fun gtk_style_render_icon(style : GtkStyle*, source : GtkIconSource*, direction : GtkTextDirection, state : GtkStateType, size : GtkIconSize, widget : GtkWidget*, detail : Gchar*) : GdkPixbuf*
  fun gtk_paint_hline(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, widget : GtkWidget*, detail : Gchar*, x1 : Gint, x2 : Gint, y : Gint) : Void
  fun gtk_paint_vline(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, widget : GtkWidget*, detail : Gchar*, y1_ : Gint, y2_ : Gint, x : Gint) : Void
  fun gtk_paint_shadow(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_arrow(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, arrow_type : GtkArrowType, fill : Gboolean, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_diamond(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_box(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_flat_box(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_check(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_option(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_tab(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_shadow_gap(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint, gap_side : GtkPositionType, gap_x : Gint, gap_width : Gint) : Void
  fun gtk_paint_box_gap(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint, gap_side : GtkPositionType, gap_x : Gint, gap_width : Gint) : Void
  fun gtk_paint_extension(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint, gap_side : GtkPositionType) : Void
  fun gtk_paint_focus(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_slider(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint, orientation : GtkOrientation) : Void
  fun gtk_paint_handle(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, shadow_type : GtkShadowType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, width : Gint, height : Gint, orientation : GtkOrientation) : Void
  fun gtk_paint_expander(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, expander_style : GtkExpanderStyle) : Void
  fun gtk_paint_layout(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, use_text : Gboolean, widget : GtkWidget*, detail : Gchar*, x : Gint, y : Gint, layout : PangoLayout*) : Void
  fun gtk_paint_resize_grip(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, widget : GtkWidget*, detail : Gchar*, edge : GdkWindowEdge, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_paint_spinner(style : GtkStyle*, cr : CairoT*, state_type : GtkStateType, widget : GtkWidget*, detail : Gchar*, step : Guint, x : Gint, y : Gint, width : Gint, height : Gint) : Void
  fun gtk_style_get_style_property(style : GtkStyle*, widget_type : GType, property_name : Gchar*, value : GValue*) : Void
  fun gtk_style_get_valist(style : GtkStyle*, widget_type : GType, first_property_name : Gchar*, var_args : X__va_list_tag*) : Void
  fun gtk_style_get(style : GtkStyle*, widget_type : GType, first_property_name : Gchar*) : Void
  fun _gtk_style_new_for_path(screen : GdkScreen*, path : GtkWidgetPath*) : GtkStyle*
  fun _gtk_style_shade(a : GdkColor*, b : GdkColor*, k : Gdouble) : Void
  fun gtk_style_has_context(style : GtkStyle*) : Gboolean
  fun gtk_widget_style_attach(widget : GtkWidget*) : Void
  fun gtk_widget_has_rc_style(widget : GtkWidget*) : Gboolean
  fun gtk_widget_set_style(widget : GtkWidget*, style : GtkStyle*) : Void
  fun gtk_widget_ensure_style(widget : GtkWidget*) : Void
  fun gtk_widget_get_style(widget : GtkWidget*) : GtkStyle*
  fun gtk_widget_modify_style(widget : GtkWidget*, style : GtkRcStyle*) : Void
  fun gtk_widget_get_modifier_style(widget : GtkWidget*) : GtkRcStyle*
  fun gtk_widget_modify_fg(widget : GtkWidget*, state : GtkStateType, color : GdkColor*) : Void
  fun gtk_widget_modify_bg(widget : GtkWidget*, state : GtkStateType, color : GdkColor*) : Void
  fun gtk_widget_modify_text(widget : GtkWidget*, state : GtkStateType, color : GdkColor*) : Void
  fun gtk_widget_modify_base(widget : GtkWidget*, state : GtkStateType, color : GdkColor*) : Void
  fun gtk_widget_modify_cursor(widget : GtkWidget*, primary : GdkColor*, secondary : GdkColor*) : Void
  fun gtk_widget_modify_font(widget : GtkWidget*, font_desc : PangoFontDescription*) : Void
  fun gtk_widget_reset_rc_styles(widget : GtkWidget*) : Void
  fun gtk_widget_get_default_style : GtkStyle*
  fun gtk_widget_path(widget : GtkWidget*, path_length : Guint*, path : Gchar**, path_reversed : Gchar**) : Void
  fun gtk_widget_class_path(widget : GtkWidget*, path_length : Guint*, path : Gchar**, path_reversed : Gchar**) : Void
  fun gtk_widget_render_icon(widget : GtkWidget*, stock_id : Gchar*, size : GtkIconSize, detail : Gchar*) : GdkPixbuf*
  fun gtk_table_get_type : GType
  fun gtk_table_new(rows : Guint, columns : Guint, homogeneous : Gboolean) : GtkWidget*
  fun gtk_table_resize(table : GtkTable*, rows : Guint, columns : Guint) : Void
  fun gtk_table_attach(table : GtkTable*, child : GtkWidget*, left_attach : Guint, right_attach : Guint, top_attach : Guint, bottom_attach : Guint, xoptions : GtkAttachOptions, yoptions : GtkAttachOptions, xpadding : Guint, ypadding : Guint) : Void
  fun gtk_table_attach_defaults(table : GtkTable*, widget : GtkWidget*, left_attach : Guint, right_attach : Guint, top_attach : Guint, bottom_attach : Guint) : Void
  fun gtk_table_set_row_spacing(table : GtkTable*, row : Guint, spacing : Guint) : Void
  fun gtk_table_get_row_spacing(table : GtkTable*, row : Guint) : Guint
  fun gtk_table_set_col_spacing(table : GtkTable*, column : Guint, spacing : Guint) : Void
  fun gtk_table_get_col_spacing(table : GtkTable*, column : Guint) : Guint
  fun gtk_table_set_row_spacings(table : GtkTable*, spacing : Guint) : Void
  fun gtk_table_get_default_row_spacing(table : GtkTable*) : Guint
  fun gtk_table_set_col_spacings(table : GtkTable*, spacing : Guint) : Void
  fun gtk_table_get_default_col_spacing(table : GtkTable*) : Guint
  fun gtk_table_set_homogeneous(table : GtkTable*, homogeneous : Gboolean) : Void
  fun gtk_table_get_homogeneous(table : GtkTable*) : Gboolean
  fun gtk_table_get_size(table : GtkTable*, rows : Guint*, columns : Guint*) : Void
  fun gtk_tearoff_menu_item_get_type : GType
  fun gtk_tearoff_menu_item_new : GtkWidget*
  fun gtk_theming_engine_get_type : GType
  fun gtk_theming_engine_register_property(name_space : Gchar*, parse_func : GtkStylePropertyParser, pspec : GParamSpec*) : Void
  fun gtk_theming_engine_get_property(engine : GtkThemingEngine*, property : Gchar*, state : GtkStateFlags, value : GValue*) : Void
  fun gtk_theming_engine_get_valist(engine : GtkThemingEngine*, state : GtkStateFlags, args : X__va_list_tag*) : Void
  fun gtk_theming_engine_get(engine : GtkThemingEngine*, state : GtkStateFlags) : Void
  fun gtk_theming_engine_get_style_property(engine : GtkThemingEngine*, property_name : Gchar*, value : GValue*) : Void
  fun gtk_theming_engine_get_style_valist(engine : GtkThemingEngine*, args : X__va_list_tag*) : Void
  fun gtk_theming_engine_get_style(engine : GtkThemingEngine*) : Void
  fun gtk_theming_engine_lookup_color(engine : GtkThemingEngine*, color_name : Gchar*, color : GdkRGBA*) : Gboolean
  fun gtk_theming_engine_get_path(engine : GtkThemingEngine*) : GtkWidgetPath*
  fun gtk_theming_engine_has_class(engine : GtkThemingEngine*, style_class : Gchar*) : Gboolean
  fun gtk_theming_engine_has_region(engine : GtkThemingEngine*, style_region : Gchar*, flags : GtkRegionFlags*) : Gboolean
  fun gtk_theming_engine_get_state(engine : GtkThemingEngine*) : GtkStateFlags
  fun gtk_theming_engine_state_is_running(engine : GtkThemingEngine*, state : GtkStateType, progress : Gdouble*) : Gboolean
  fun gtk_theming_engine_get_direction(engine : GtkThemingEngine*) : GtkTextDirection
  fun gtk_theming_engine_get_junction_sides(engine : GtkThemingEngine*) : GtkJunctionSides
  fun gtk_theming_engine_get_color(engine : GtkThemingEngine*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_theming_engine_get_background_color(engine : GtkThemingEngine*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_theming_engine_get_border_color(engine : GtkThemingEngine*, state : GtkStateFlags, color : GdkRGBA*) : Void
  fun gtk_theming_engine_get_border(engine : GtkThemingEngine*, state : GtkStateFlags, border : GtkBorder*) : Void
  fun gtk_theming_engine_get_padding(engine : GtkThemingEngine*, state : GtkStateFlags, padding : GtkBorder*) : Void
  fun gtk_theming_engine_get_margin(engine : GtkThemingEngine*, state : GtkStateFlags, margin : GtkBorder*) : Void
  fun gtk_theming_engine_get_font(engine : GtkThemingEngine*, state : GtkStateFlags) : PangoFontDescription*
  fun gtk_theming_engine_load(name : Gchar*) : GtkThemingEngine*
  fun gtk_theming_engine_get_screen(engine : GtkThemingEngine*) : GdkScreen*
  fun gtk_ui_manager_get_type : GType
  fun gtk_ui_manager_new : GtkUIManager*
  fun gtk_ui_manager_set_add_tearoffs(manager : GtkUIManager*, add_tearoffs : Gboolean) : Void
  fun gtk_ui_manager_get_add_tearoffs(manager : GtkUIManager*) : Gboolean
  fun gtk_ui_manager_insert_action_group(manager : GtkUIManager*, action_group : GtkActionGroup*, pos : Gint) : Void
  fun gtk_ui_manager_remove_action_group(manager : GtkUIManager*, action_group : GtkActionGroup*) : Void
  fun gtk_ui_manager_get_action_groups(manager : GtkUIManager*) : GList*
  fun gtk_ui_manager_get_accel_group(manager : GtkUIManager*) : GtkAccelGroup*
  fun gtk_ui_manager_get_widget(manager : GtkUIManager*, path : Gchar*) : GtkWidget*
  fun gtk_ui_manager_get_toplevels(manager : GtkUIManager*, types : GtkUIManagerItemType) : GSList*
  fun gtk_ui_manager_get_action(manager : GtkUIManager*, path : Gchar*) : GtkAction*
  fun gtk_ui_manager_add_ui_from_string(manager : GtkUIManager*, buffer : Gchar*, length : Gssize, error : GError**) : Guint
  fun gtk_ui_manager_add_ui_from_file(manager : GtkUIManager*, filename : Gchar*, error : GError**) : Guint
  fun gtk_ui_manager_add_ui_from_resource(manager : GtkUIManager*, resource_path : Gchar*, error : GError**) : Guint
  fun gtk_ui_manager_add_ui(manager : GtkUIManager*, merge_id : Guint, path : Gchar*, name : Gchar*, action : Gchar*, type : GtkUIManagerItemType, top : Gboolean) : Void
  fun gtk_ui_manager_remove_ui(manager : GtkUIManager*, merge_id : Guint) : Void
  fun gtk_ui_manager_get_ui(manager : GtkUIManager*) : Gchar*
  fun gtk_ui_manager_ensure_update(manager : GtkUIManager*) : Void
  fun gtk_ui_manager_new_merge_id(manager : GtkUIManager*) : Guint
  fun gtk_vbutton_box_get_type : GType
  fun gtk_vbutton_box_new : GtkWidget*
  fun gtk_vbox_get_type : GType
  fun gtk_vbox_new(homogeneous : Gboolean, spacing : Gint) : GtkWidget*
  fun gtk_vpaned_get_type : GType
  fun gtk_vpaned_new : GtkWidget*
  fun gtk_vscale_get_type : GType
  fun gtk_vscale_new(adjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_vscale_new_with_range(min : Gdouble, max : Gdouble, step : Gdouble) : GtkWidget*
  fun gtk_vscrollbar_get_type : GType
  fun gtk_vscrollbar_new(adjustment : GtkAdjustment*) : GtkWidget*
  fun gtk_vseparator_get_type : GType
  fun gtk_vseparator_new : GtkWidget*
  fun glib_autoptr_cleanup_gtk_accessible(_ptr : GtkAccessible**) : Void
  fun glib_autoptr_cleanup_gtk_action_bar(_ptr : GtkActionBar**) : Void
  fun glib_autoptr_cleanup_gtk_actionable(_ptr : GtkActionable**) : Void
  fun glib_autoptr_cleanup_gtk_adjustment(_ptr : GtkAdjustment**) : Void
  fun glib_autoptr_cleanup_gtk_app_chooser(_ptr : GtkAppChooser**) : Void
  fun glib_autoptr_cleanup_gtk_app_chooser_button(_ptr : GtkAppChooserButton**) : Void
  fun glib_autoptr_cleanup_gtk_app_chooser_dialog(_ptr : GtkAppChooserDialog**) : Void
  fun glib_autoptr_cleanup_gtk_app_chooser_widget(_ptr : GtkAppChooserWidget**) : Void
  fun glib_autoptr_cleanup_gtk_application_window(_ptr : GtkApplicationWindow**) : Void
  fun glib_autoptr_cleanup_gtk_aspect_frame(_ptr : GtkAspectFrame**) : Void
  fun glib_autoptr_cleanup_gtk_assistant(_ptr : GtkAssistant**) : Void
  fun glib_autoptr_cleanup_gtk_box(_ptr : GtkBox**) : Void
  fun glib_autoptr_cleanup_gtk_buildable(_ptr : GtkBuildable**) : Void
  fun glib_autoptr_cleanup_gtk_builder(_ptr : GtkBuilder**) : Void
  fun glib_autoptr_cleanup_gtk_button(_ptr : GtkButton**) : Void
  fun glib_autoptr_cleanup_gtk_button_box(_ptr : GtkButtonBox**) : Void
  fun glib_autoptr_cleanup_gtk_calendar(_ptr : GtkCalendar**) : Void
  fun glib_autoptr_cleanup_gtk_cell_area(_ptr : GtkCellArea**) : Void
  fun glib_autoptr_cleanup_gtk_cell_area_box(_ptr : GtkCellAreaBox**) : Void
  fun glib_autoptr_cleanup_gtk_cell_area_context(_ptr : GtkCellAreaContext**) : Void
  fun glib_autoptr_cleanup_gtk_cell_editable(_ptr : GtkCellEditable**) : Void
  fun glib_autoptr_cleanup_gtk_cell_layout(_ptr : GtkCellLayout**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer(_ptr : GtkCellRenderer**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_accel(_ptr : GtkCellRendererAccel**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_combo(_ptr : GtkCellRendererCombo**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_pixbuf(_ptr : GtkCellRendererPixbuf**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_progress(_ptr : GtkCellRendererProgress**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_spin(_ptr : GtkCellRendererSpin**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_spinner(_ptr : GtkCellRendererSpinner**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_text(_ptr : GtkCellRendererText**) : Void
  fun glib_autoptr_cleanup_gtk_cell_renderer_toggle(_ptr : GtkCellRendererToggle**) : Void
  fun glib_autoptr_cleanup_gtk_cell_view(_ptr : GtkCellView**) : Void
  fun glib_autoptr_cleanup_gtk_check_button(_ptr : GtkCheckButton**) : Void
  fun glib_autoptr_cleanup_gtk_check_menu_item(_ptr : GtkCheckMenuItem**) : Void
  fun glib_autoptr_cleanup_gtk_clipboard(_ptr : GtkClipboard**) : Void
  fun glib_autoptr_cleanup_gtk_color_button(_ptr : GtkColorButton**) : Void
  fun glib_autoptr_cleanup_gtk_color_chooser(_ptr : GtkColorChooser**) : Void
  fun glib_autoptr_cleanup_gtk_color_chooser_dialog(_ptr : GtkColorChooserDialog**) : Void
  fun glib_autoptr_cleanup_gtk_color_chooser_widget(_ptr : GtkColorChooserWidget**) : Void
  fun glib_autoptr_cleanup_gtk_combo_box(_ptr : GtkComboBox**) : Void
  fun glib_autoptr_cleanup_gtk_combo_box_text(_ptr : GtkComboBoxText**) : Void
  fun glib_autoptr_cleanup_gtk_css_provider(_ptr : GtkCssProvider**) : Void
  fun glib_autoptr_cleanup_gtk_drawing_area(_ptr : GtkDrawingArea**) : Void
  fun glib_autoptr_cleanup_gtk_editable(_ptr : GtkEditable**) : Void
  fun glib_autoptr_cleanup_gtk_entry(_ptr : GtkEntry**) : Void
  fun glib_autoptr_cleanup_gtk_entry_buffer(_ptr : GtkEntryBuffer**) : Void
  fun glib_autoptr_cleanup_gtk_entry_completion(_ptr : GtkEntryCompletion**) : Void
  fun glib_autoptr_cleanup_gtk_event_box(_ptr : GtkEventBox**) : Void
  fun glib_autoptr_cleanup_gtk_event_controller(_ptr : GtkEventController**) : Void
  fun glib_autoptr_cleanup_gtk_expander(_ptr : GtkExpander**) : Void
  fun glib_autoptr_cleanup_gtk_file_chooser_button(_ptr : GtkFileChooserButton**) : Void
  fun glib_autoptr_cleanup_gtk_file_chooser_dialog(_ptr : GtkFileChooserDialog**) : Void
  fun glib_autoptr_cleanup_gtk_file_chooser_widget(_ptr : GtkFileChooserWidget**) : Void
  fun glib_autoptr_cleanup_gtk_file_filter(_ptr : GtkFileFilter**) : Void
  fun glib_autoptr_cleanup_gtk_fixed(_ptr : GtkFixed**) : Void
  fun glib_autoptr_cleanup_gtk_flow_box(_ptr : GtkFlowBox**) : Void
  fun glib_autoptr_cleanup_gtk_flow_box_child(_ptr : GtkFlowBoxChild**) : Void
  fun glib_autoptr_cleanup_gtk_font_button(_ptr : GtkFontButton**) : Void
  fun glib_autoptr_cleanup_gtk_font_chooser(_ptr : GtkFontChooser**) : Void
  fun glib_autoptr_cleanup_gtk_font_chooser_dialog(_ptr : GtkFontChooserDialog**) : Void
  fun glib_autoptr_cleanup_gtk_font_chooser_widget(_ptr : GtkFontChooserWidget**) : Void
  fun glib_autoptr_cleanup_gtk_frame(_ptr : GtkFrame**) : Void
  fun glib_autoptr_cleanup_gtk_gl_area(_ptr : GtkGLArea**) : Void
  fun glib_autoptr_cleanup_gtk_gesture(_ptr : GtkGesture**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_drag(_ptr : GtkGestureDrag**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_long_press(_ptr : GtkGestureLongPress**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_multi_press(_ptr : GtkGestureMultiPress**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_pan(_ptr : GtkGesturePan**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_rotate(_ptr : GtkGestureRotate**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_single(_ptr : GtkGestureSingle**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_swipe(_ptr : GtkGestureSwipe**) : Void
  fun glib_autoptr_cleanup_gtk_gesture_zoom(_ptr : GtkGestureZoom**) : Void
  fun glib_autoptr_cleanup_gtk_grid(_ptr : GtkGrid**) : Void
  fun glib_autoptr_cleanup_gtk_header_bar(_ptr : GtkHeaderBar**) : Void
  fun glib_autoptr_cleanup_gtk_im_context(_ptr : GtkIMContext**) : Void
  fun glib_autoptr_cleanup_gtk_im_context_simple(_ptr : GtkIMContextSimple**) : Void
  fun glib_autoptr_cleanup_gtk_im_multicontext(_ptr : GtkIMMulticontext**) : Void
  fun glib_autoptr_cleanup_gtk_icon_info(_ptr : GtkIconInfo**) : Void
  fun glib_autoptr_cleanup_gtk_icon_theme(_ptr : GtkIconTheme**) : Void
  fun glib_autoptr_cleanup_gtk_icon_view(_ptr : GtkIconView**) : Void
  fun glib_autoptr_cleanup_gtk_image(_ptr : GtkImage**) : Void
  fun glib_autoptr_cleanup_gtk_info_bar(_ptr : GtkInfoBar**) : Void
  fun glib_autoptr_cleanup_gtk_invisible(_ptr : GtkInvisible**) : Void
  fun glib_autoptr_cleanup_gtk_layout(_ptr : GtkLayout**) : Void
  fun glib_autoptr_cleanup_gtk_level_bar(_ptr : GtkLevelBar**) : Void
  fun glib_autoptr_cleanup_gtk_link_button(_ptr : GtkLinkButton**) : Void
  fun glib_autoptr_cleanup_gtk_list_store(_ptr : GtkListStore**) : Void
  fun glib_autoptr_cleanup_gtk_lock_button(_ptr : GtkLockButton**) : Void
  fun glib_autoptr_cleanup_gtk_menu_bar(_ptr : GtkMenuBar**) : Void
  fun glib_autoptr_cleanup_gtk_menu_button(_ptr : GtkMenuButton**) : Void
  fun glib_autoptr_cleanup_gtk_menu_item(_ptr : GtkMenuItem**) : Void
  fun glib_autoptr_cleanup_gtk_menu_tool_button(_ptr : GtkMenuToolButton**) : Void
  fun glib_autoptr_cleanup_gtk_message_dialog(_ptr : GtkMessageDialog**) : Void
  fun glib_autoptr_cleanup_gtk_mount_operation(_ptr : GtkMountOperation**) : Void
  fun glib_autoptr_cleanup_gtk_notebook(_ptr : GtkNotebook**) : Void
  fun glib_autoptr_cleanup_gtk_offscreen_window(_ptr : GtkOffscreenWindow**) : Void
  fun glib_autoptr_cleanup_gtk_orientable(_ptr : GtkOrientable**) : Void
  fun glib_autoptr_cleanup_gtk_overlay(_ptr : GtkOverlay**) : Void
  fun glib_autoptr_cleanup_gtk_page_setup(_ptr : GtkPageSetup**) : Void
  fun glib_autoptr_cleanup_gtk_paned(_ptr : GtkPaned**) : Void
  fun glib_autoptr_cleanup_gtk_places_sidebar(_ptr : GtkPlacesSidebar**) : Void
  fun glib_autoptr_cleanup_gtk_popover(_ptr : GtkPopover**) : Void
  fun glib_autoptr_cleanup_gtk_popover_menu(_ptr : GtkPopoverMenu**) : Void
  fun glib_autoptr_cleanup_gtk_print_context(_ptr : GtkPrintContext**) : Void
  fun glib_autoptr_cleanup_gtk_print_operation(_ptr : GtkPrintOperation**) : Void
  fun glib_autoptr_cleanup_gtk_print_operation_preview(_ptr : GtkPrintOperationPreview**) : Void
  fun glib_autoptr_cleanup_gtk_print_settings(_ptr : GtkPrintSettings**) : Void
  fun glib_autoptr_cleanup_gtk_progress_bar(_ptr : GtkProgressBar**) : Void
  fun glib_autoptr_cleanup_gtk_radio_button(_ptr : GtkRadioButton**) : Void
  fun glib_autoptr_cleanup_gtk_radio_menu_item(_ptr : GtkRadioMenuItem**) : Void
  fun glib_autoptr_cleanup_gtk_radio_tool_button(_ptr : GtkRadioToolButton**) : Void
  fun glib_autoptr_cleanup_gtk_range(_ptr : GtkRange**) : Void
  fun glib_autoptr_cleanup_gtk_rc_style(_ptr : GtkRcStyle**) : Void
  fun glib_autoptr_cleanup_gtk_recent_chooser(_ptr : GtkRecentChooser**) : Void
  fun glib_autoptr_cleanup_gtk_recent_chooser_dialog(_ptr : GtkRecentChooserDialog**) : Void
  fun glib_autoptr_cleanup_gtk_recent_chooser_menu(_ptr : GtkRecentChooserMenu**) : Void
  fun glib_autoptr_cleanup_gtk_recent_chooser_widget(_ptr : GtkRecentChooserWidget**) : Void
  fun glib_autoptr_cleanup_gtk_recent_filter(_ptr : GtkRecentFilter**) : Void
  fun glib_autoptr_cleanup_gtk_recent_manager(_ptr : GtkRecentManager**) : Void
  fun glib_autoptr_cleanup_gtk_revealer(_ptr : GtkRevealer**) : Void
  fun glib_autoptr_cleanup_gtk_scale(_ptr : GtkScale**) : Void
  fun glib_autoptr_cleanup_gtk_scale_button(_ptr : GtkScaleButton**) : Void
  fun glib_autoptr_cleanup_gtk_scrollable(_ptr : GtkScrollable**) : Void
  fun glib_autoptr_cleanup_gtk_scrollbar(_ptr : GtkScrollbar**) : Void
  fun glib_autoptr_cleanup_gtk_scrolled_window(_ptr : GtkScrolledWindow**) : Void
  fun glib_autoptr_cleanup_gtk_search_bar(_ptr : GtkSearchBar**) : Void
  fun glib_autoptr_cleanup_gtk_search_entry(_ptr : GtkSearchEntry**) : Void
  fun glib_autoptr_cleanup_gtk_separator(_ptr : GtkSeparator**) : Void
  fun glib_autoptr_cleanup_gtk_separator_menu_item(_ptr : GtkSeparatorMenuItem**) : Void
  fun glib_autoptr_cleanup_gtk_separator_tool_item(_ptr : GtkSeparatorToolItem**) : Void
  fun glib_autoptr_cleanup_gtk_settings(_ptr : GtkSettings**) : Void
  fun glib_autoptr_cleanup_gtk_stack_sidebar(_ptr : GtkStackSidebar**) : Void
  fun glib_autoptr_cleanup_gtk_size_group(_ptr : GtkSizeGroup**) : Void
  fun glib_autoptr_cleanup_gtk_spin_button(_ptr : GtkSpinButton**) : Void
  fun glib_autoptr_cleanup_gtk_spinner(_ptr : GtkSpinner**) : Void
  fun glib_autoptr_cleanup_gtk_stack(_ptr : GtkStack**) : Void
  fun glib_autoptr_cleanup_gtk_stack_switcher(_ptr : GtkStackSwitcher**) : Void
  fun glib_autoptr_cleanup_gtk_statusbar(_ptr : GtkStatusbar**) : Void
  fun glib_autoptr_cleanup_gtk_style(_ptr : GtkStyle**) : Void
  fun glib_autoptr_cleanup_gtk_style_context(_ptr : GtkStyleContext**) : Void
  fun glib_autoptr_cleanup_gtk_style_properties(_ptr : GtkStyleProperties**) : Void
  fun glib_autoptr_cleanup_gtk_style_provider(_ptr : GtkStyleProvider**) : Void
  fun glib_autoptr_cleanup_gtk_switch(_ptr : GtkSwitch**) : Void
  fun glib_autoptr_cleanup_gtk_text_buffer(_ptr : GtkTextBuffer**) : Void
  fun glib_autoptr_cleanup_gtk_text_child_anchor(_ptr : GtkTextChildAnchor**) : Void
  fun glib_autoptr_cleanup_gtk_text_mark(_ptr : GtkTextMark**) : Void
  fun glib_autoptr_cleanup_gtk_text_tag(_ptr : GtkTextTag**) : Void
  fun glib_autoptr_cleanup_gtk_text_tag_table(_ptr : GtkTextTagTable**) : Void
  fun glib_autoptr_cleanup_gtk_text_view(_ptr : GtkTextView**) : Void
  fun glib_autoptr_cleanup_gtk_toggle_button(_ptr : GtkToggleButton**) : Void
  fun glib_autoptr_cleanup_gtk_toggle_tool_button(_ptr : GtkToggleToolButton**) : Void
  fun glib_autoptr_cleanup_gtk_tool_button(_ptr : GtkToolButton**) : Void
  fun glib_autoptr_cleanup_gtk_tool_item(_ptr : GtkToolItem**) : Void
  fun glib_autoptr_cleanup_gtk_tool_item_group(_ptr : GtkToolItemGroup**) : Void
  fun glib_autoptr_cleanup_gtk_tool_palette(_ptr : GtkToolPalette**) : Void
  fun glib_autoptr_cleanup_gtk_tool_shell(_ptr : GtkToolShell**) : Void
  fun glib_autoptr_cleanup_gtk_toolbar(_ptr : GtkToolbar**) : Void
  fun glib_autoptr_cleanup_gtk_tooltip(_ptr : GtkTooltip**) : Void
  fun glib_autoptr_cleanup_gtk_tree_drag_dest(_ptr : GtkTreeDragDest**) : Void
  fun glib_autoptr_cleanup_gtk_tree_drag_source(_ptr : GtkTreeDragSource**) : Void
  fun glib_autoptr_cleanup_gtk_tree_model(_ptr : GtkTreeModel**) : Void
  fun glib_autoptr_cleanup_gtk_tree_model_filter(_ptr : GtkTreeModelFilter**) : Void
  fun glib_autoptr_cleanup_gtk_tree_model_sort(_ptr : GtkTreeModelSort**) : Void
  fun glib_autoptr_cleanup_gtk_tree_selection(_ptr : GtkTreeSelection**) : Void
  fun glib_autoptr_cleanup_gtk_tree_sortable(_ptr : GtkTreeSortable**) : Void
  fun glib_autoptr_cleanup_gtk_tree_store(_ptr : GtkTreeStore**) : Void
  fun glib_autoptr_cleanup_gtk_tree_view(_ptr : GtkTreeView**) : Void
  fun glib_autoptr_cleanup_gtk_tree_view_column(_ptr : GtkTreeViewColumn**) : Void
  fun glib_autoptr_cleanup_gtk_viewport(_ptr : GtkViewport**) : Void
  fun glib_autoptr_cleanup_gtk_volume_button(_ptr : GtkVolumeButton**) : Void
  fun glib_autoptr_cleanup_gtk_paper_size(_ptr : GtkPaperSize**) : Void
  fun glib_autoptr_cleanup_gtk_selection_data(_ptr : GtkSelectionData**) : Void
  fun glib_autoptr_cleanup_gtk_target_list(_ptr : GtkTargetList**) : Void
  fun glib_autoptr_cleanup_gtk_text_attributes(_ptr : GtkTextAttributes**) : Void
  fun glib_autoptr_cleanup_gtk_text_iter(_ptr : GtkTextIter**) : Void
  fun glib_autoptr_cleanup_gtk_tree_iter(_ptr : GtkTreeIter**) : Void
  fun glib_autoptr_cleanup_gtk_tree_row_reference(_ptr : GtkTreeRowReference**) : Void
  fun glib_autoptr_cleanup_gtk_widget_path(_ptr : GtkWidgetPath**) : Void
end

